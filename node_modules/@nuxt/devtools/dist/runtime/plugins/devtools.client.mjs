import { createApp, h, markRaw } from "vue";
import { setupHooksDebug } from "../shared/hooks.mjs";
import { defineNuxtPlugin } from "#app";
import { useAppConfig } from "#imports";
export default defineNuxtPlugin((nuxt) => {
  if (typeof document === "undefined" || typeof window === "undefined")
    return;
  if (window.parent && window.self !== window.parent) {
    try {
      if (window.parent.__NUXT_DEVTOOLS_VIEW__ || window.parent.document.querySelector("#nuxt-devtools-container"))
        return;
    } catch (e) {
    }
  }
  const clientHooks = setupHooksDebug(nuxt.hooks);
  async function init() {
    const { closePanel, togglePanel } = await import("./view/state");
    const { createHooks } = await import("hookable");
    const { default: Container } = await import("./view/Container.vue");
    const client = markRaw({
      nuxt: markRaw(nuxt),
      appConfig: useAppConfig(),
      hooks: createHooks(),
      getClientHooksMetrics: () => Object.values(clientHooks),
      getClientPluginMetrics: () => {
        return globalThis.__NUXT_DEVTOOLS_PLUGINS_METRIC__ || [];
      },
      reloadPage() {
        location.reload();
      },
      closeDevTools: closePanel
    });
    const holder = document.createElement("div");
    holder.id = "nuxt-devtools-container";
    holder.setAttribute("data-v-inspector-ignore", "true");
    document.body.appendChild(holder);
    addEventListener("keydown", (e) => {
      if (e.code === "KeyD" && e.altKey && e.shiftKey)
        togglePanel();
    });
    const app = createApp({
      render: () => h(Container, { client }),
      devtools: {
        hide: true
      }
    });
    app.mount(holder);
  }
  setTimeout(init, 1);
});
