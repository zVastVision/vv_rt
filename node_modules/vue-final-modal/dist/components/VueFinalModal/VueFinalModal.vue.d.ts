import type { CoreModalEmits } from '../CoreModal/CoreModal.vue';
export interface VueFinalModalEmits extends CoreModalEmits {
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    readonly teleportTo: {
        readonly type: import("vue").PropType<string | false | import("vue").RendererElement | null>;
        readonly default: "body";
    };
    readonly modalId: {
        readonly type: import("vue").PropType<import("../..").ModalId>;
        readonly default: undefined;
    };
    readonly modelValue: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
    readonly displayDirective: {
        readonly type: import("vue").PropType<"if" | "show">;
        readonly default: "if";
        readonly validator: (prop: any) => boolean;
    };
    readonly hideOverlay: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
    readonly overlayTransition: {
        readonly type: import("vue").PropType<((string & {}) | "vfm-fade" | "vfm-slide-down" | "vfm-slide-up" | "vfm-slide-right" | "vfm-slide-left") | import("vue").TransitionProps>;
        readonly default: undefined;
    };
    readonly contentTransition: {
        readonly type: import("vue").PropType<((string & {}) | "vfm-fade" | "vfm-slide-down" | "vfm-slide-up" | "vfm-slide-right" | "vfm-slide-left") | import("vue").TransitionProps>;
        readonly default: undefined;
    };
    readonly overlayClass: {
        readonly type: import("vue").PropType<any>;
        readonly default: undefined;
    };
    readonly contentClass: {
        readonly type: import("vue").PropType<any>;
        readonly default: undefined;
    };
    readonly overlayStyle: {
        readonly type: import("vue").PropType<import("../..").StyleValue>;
        readonly default: undefined;
    };
    readonly contentStyle: {
        readonly type: import("vue").PropType<import("../..").StyleValue>;
        readonly default: undefined;
    };
    readonly clickToClose: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly escToClose: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly background: {
        readonly type: import("vue").PropType<"interactive" | "non-interactive">;
        readonly default: "non-interactive";
        readonly validator: (prop: any) => boolean;
    };
    readonly focusTrap: {
        readonly type: import("vue").PropType<false | import("focus-trap").Options>;
        readonly default: () => {
            allowOutsideClick: boolean;
        };
    };
    readonly lockScroll: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly zIndexFn: {
        readonly type: import("vue").PropType<(context: {
            index: number;
        }) => number | undefined>;
        readonly default: ({ index }: {
            index: number;
        }) => number;
    };
    readonly swipeToClose: {
        readonly type: import("vue").PropType<"none" | "up" | "right" | "down" | "left">;
        readonly default: "none";
        readonly validator: (prop: any) => boolean;
    };
    readonly threshold: {
        readonly type: import("vue").PropType<number>;
        readonly default: 0;
    };
    readonly showSwipeBanner: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
    readonly preventNavigationGestures: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (modelValue: boolean) => void;
} & {
    beforeOpen: () => void;
} & {
    opened: () => void;
} & {
    beforeClose: () => void;
} & {
    closed: () => void;
} & {
    clickOutside: () => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly teleportTo: {
        readonly type: import("vue").PropType<string | false | import("vue").RendererElement | null>;
        readonly default: "body";
    };
    readonly modalId: {
        readonly type: import("vue").PropType<import("../..").ModalId>;
        readonly default: undefined;
    };
    readonly modelValue: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
    readonly displayDirective: {
        readonly type: import("vue").PropType<"if" | "show">;
        readonly default: "if";
        readonly validator: (prop: any) => boolean;
    };
    readonly hideOverlay: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
    readonly overlayTransition: {
        readonly type: import("vue").PropType<((string & {}) | "vfm-fade" | "vfm-slide-down" | "vfm-slide-up" | "vfm-slide-right" | "vfm-slide-left") | import("vue").TransitionProps>;
        readonly default: undefined;
    };
    readonly contentTransition: {
        readonly type: import("vue").PropType<((string & {}) | "vfm-fade" | "vfm-slide-down" | "vfm-slide-up" | "vfm-slide-right" | "vfm-slide-left") | import("vue").TransitionProps>;
        readonly default: undefined;
    };
    readonly overlayClass: {
        readonly type: import("vue").PropType<any>;
        readonly default: undefined;
    };
    readonly contentClass: {
        readonly type: import("vue").PropType<any>;
        readonly default: undefined;
    };
    readonly overlayStyle: {
        readonly type: import("vue").PropType<import("../..").StyleValue>;
        readonly default: undefined;
    };
    readonly contentStyle: {
        readonly type: import("vue").PropType<import("../..").StyleValue>;
        readonly default: undefined;
    };
    readonly clickToClose: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly escToClose: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly background: {
        readonly type: import("vue").PropType<"interactive" | "non-interactive">;
        readonly default: "non-interactive";
        readonly validator: (prop: any) => boolean;
    };
    readonly focusTrap: {
        readonly type: import("vue").PropType<false | import("focus-trap").Options>;
        readonly default: () => {
            allowOutsideClick: boolean;
        };
    };
    readonly lockScroll: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: true;
    };
    readonly zIndexFn: {
        readonly type: import("vue").PropType<(context: {
            index: number;
        }) => number | undefined>;
        readonly default: ({ index }: {
            index: number;
        }) => number;
    };
    readonly swipeToClose: {
        readonly type: import("vue").PropType<"none" | "up" | "right" | "down" | "left">;
        readonly default: "none";
        readonly validator: (prop: any) => boolean;
    };
    readonly threshold: {
        readonly type: import("vue").PropType<number>;
        readonly default: 0;
    };
    readonly showSwipeBanner: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
    readonly preventNavigationGestures: {
        readonly type: import("vue").PropType<boolean>;
        readonly default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    onBeforeOpen?: (() => any) | undefined;
    onOpened?: (() => any) | undefined;
    onBeforeClose?: (() => any) | undefined;
    onClosed?: (() => any) | undefined;
    onClickOutside?: (() => any) | undefined;
}, {
    readonly modalId: import("../..").ModalId;
    readonly modelValue: boolean;
    readonly displayDirective: "if" | "show";
    readonly hideOverlay: boolean;
    readonly overlayTransition: ((string & {}) | "vfm-fade" | "vfm-slide-down" | "vfm-slide-up" | "vfm-slide-right" | "vfm-slide-left") | import("vue").TransitionProps;
    readonly contentTransition: ((string & {}) | "vfm-fade" | "vfm-slide-down" | "vfm-slide-up" | "vfm-slide-right" | "vfm-slide-left") | import("vue").TransitionProps;
    readonly overlayClass: any;
    readonly contentClass: any;
    readonly overlayStyle: import("../..").StyleValue;
    readonly contentStyle: import("../..").StyleValue;
    readonly clickToClose: boolean;
    readonly escToClose: boolean;
    readonly background: "interactive" | "non-interactive";
    readonly focusTrap: false | import("focus-trap").Options;
    readonly lockScroll: boolean;
    readonly zIndexFn: (context: {
        index: number;
    }) => number | undefined;
    readonly swipeToClose: "none" | "up" | "right" | "down" | "left";
    readonly threshold: number;
    readonly showSwipeBanner: boolean;
    readonly preventNavigationGestures: boolean;
    readonly teleportTo: string | false | import("vue").RendererElement | null;
}>, {
    default: (_: {}) => any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
