import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.js"(exports, module) {
    var __extends8;
    var __assign18;
    var __rest8;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter21;
    var __generator21;
    var __exportStar;
    var __values10;
    var __read15;
    var __spread9;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory2) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory2(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory2(createExporter(root, createExporter(module.exports)));
      } else {
        factory2(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p2 in b2)
          if (b2.hasOwnProperty(p2))
            d2[p2] = b2[p2];
      };
      __extends8 = function(d2, b2) {
        extendStatics8(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
      __assign18 = Object.assign || function(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t2[p2] = s2[p2];
        }
        return t2;
      };
      __rest8 = function(s2, e) {
        var t2 = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
            t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
            if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
              t2[p2[i2]] = s2[p2[i2]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r2 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i2 = decorators.length - 1; i2 >= 0; i2--)
            if (d2 = decorators[i2])
              r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
        return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter21 = function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve4) {
            resolve4(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve4, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator21 = function(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f2, y2, t2, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n2) {
          return function(v2) {
            return step([n2, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_2)
            try {
              if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _2.label++;
                  return { value: op[1], done: false };
                case 5:
                  _2.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop();
                  _2.trys.pop();
                  continue;
                default:
                  if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t2[1]) {
                    _2.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _2.label < t2[2]) {
                    _2.label = t2[2];
                    _2.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _2.ops.pop();
                  _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e) {
              op = [6, e];
              y2 = 0;
            } finally {
              f2 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m2[k2];
      };
      __exportStar = function(m2, exports2) {
        for (var p2 in m2)
          if (p2 !== "default" && !exports2.hasOwnProperty(p2))
            exports2[p2] = m2[p2];
      };
      __values10 = function(o2) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
        if (m2)
          return m2.call(o2);
        if (o2 && typeof o2.length === "number")
          return {
            next: function() {
              if (o2 && i2 >= o2.length)
                o2 = void 0;
              return { value: o2 && o2[i2++], done: !o2 };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read15 = function(o2, n2) {
        var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m2)
          return o2;
        var i2 = m2.call(o2), r2, ar = [], e;
        try {
          while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
            ar.push(r2.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r2 && !r2.done && (m2 = i2["return"]))
              m2.call(i2);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
          ar = ar.concat(__read15(arguments[i2]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
          s2 += arguments[i2].length;
        for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
          for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
            r2[k2] = a2[j2];
        return r2;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
        return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2;
        function verb(n2) {
          if (g2[n2])
            i2[n2] = function(v2) {
              return new Promise(function(a2, b2) {
                q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
              });
            };
        }
        function resume(n2, v2) {
          try {
            step(g2[n2](v2));
          } catch (e) {
            settle(q2[0][3], e);
          }
        }
        function step(r2) {
          r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v2) {
          if (f2(v2), q2.shift(), q2.length)
            resume(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator = function(o2) {
        var i2, p2;
        return i2 = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i2[Symbol.iterator] = function() {
          return this;
        }, i2;
        function verb(n2, f2) {
          i2[n2] = o2[n2] ? function(v2) {
            return (p2 = !p2) ? { value: __await2(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
          } : f2;
        }
      };
      __asyncValues2 = function(o2) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m2 = o2[Symbol.asyncIterator], i2;
        return m2 ? m2.call(o2) : (o2 = typeof __values10 === "function" ? __values10(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2);
        function verb(n2) {
          i2[n2] = o2[n2] && function(v2) {
            return new Promise(function(resolve4, reject) {
              v2 = o2[n2](v2), settle(resolve4, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve4, reject, d2, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve4({ value: v3, done: d2 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k2 in mod)
            if (Object.hasOwnProperty.call(mod, k2))
              result[k2] = mod[k2];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends8);
      exporter("__assign", __assign18);
      exporter("__rest", __rest8);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter21);
      exporter("__generator", __generator21);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values10);
      exporter("__read", __read15);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
    exports.BLOCK_SIZE = 64;
    exports.DIGEST_LENGTH = 32;
    exports.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RawSha256 = void 0;
    var constants_1 = require_constants();
    var RawSha256 = (
      /** @class */
      function() {
        function RawSha2562() {
          this.state = Int32Array.from(constants_1.INIT);
          this.temp = new Int32Array(64);
          this.buffer = new Uint8Array(64);
          this.bufferLength = 0;
          this.bytesHashed = 0;
          this.finished = false;
        }
        RawSha2562.prototype.update = function(data) {
          if (this.finished) {
            throw new Error("Attempted to update an already finished hash.");
          }
          var position = 0;
          var byteLength = data.byteLength;
          this.bytesHashed += byteLength;
          if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
            throw new Error("Cannot hash more than 2^53 - 1 bits");
          }
          while (byteLength > 0) {
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
              this.hashBuffer();
              this.bufferLength = 0;
            }
          }
        };
        RawSha2562.prototype.digest = function() {
          if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 128);
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
              for (var i2 = this.bufferLength; i2 < constants_1.BLOCK_SIZE; i2++) {
                bufferView.setUint8(i2, 0);
              }
              this.hashBuffer();
              this.bufferLength = 0;
            }
            for (var i2 = this.bufferLength; i2 < constants_1.BLOCK_SIZE - 8; i2++) {
              bufferView.setUint8(i2, 0);
            }
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
          }
          var out = new Uint8Array(constants_1.DIGEST_LENGTH);
          for (var i2 = 0; i2 < 8; i2++) {
            out[i2 * 4] = this.state[i2] >>> 24 & 255;
            out[i2 * 4 + 1] = this.state[i2] >>> 16 & 255;
            out[i2 * 4 + 2] = this.state[i2] >>> 8 & 255;
            out[i2 * 4 + 3] = this.state[i2] >>> 0 & 255;
          }
          return out;
        };
        RawSha2562.prototype.hashBuffer = function() {
          var _a = this, buffer = _a.buffer, state = _a.state;
          var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
          for (var i2 = 0; i2 < constants_1.BLOCK_SIZE; i2++) {
            if (i2 < 16) {
              this.temp[i2] = (buffer[i2 * 4] & 255) << 24 | (buffer[i2 * 4 + 1] & 255) << 16 | (buffer[i2 * 4 + 2] & 255) << 8 | buffer[i2 * 4 + 3] & 255;
            } else {
              var u2 = this.temp[i2 - 2];
              var t1_1 = (u2 >>> 17 | u2 << 15) ^ (u2 >>> 19 | u2 << 13) ^ u2 >>> 10;
              u2 = this.temp[i2 - 15];
              var t2_1 = (u2 >>> 7 | u2 << 25) ^ (u2 >>> 18 | u2 << 14) ^ u2 >>> 3;
              this.temp[i2] = (t1_1 + this.temp[i2 - 7] | 0) + (t2_1 + this.temp[i2 - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i2] + this.temp[i2] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
          }
          state[0] += state0;
          state[1] += state1;
          state[2] += state2;
          state[3] += state3;
          state[4] += state4;
          state[5] += state5;
          state[6] += state6;
          state[7] += state7;
        };
        return RawSha2562;
      }()
    );
    exports.RawSha256 = RawSha256;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
var fromUtf8, toUtf8;
var init_pureJs = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js"() {
    fromUtf8 = function(input) {
      var bytes = [];
      for (var i2 = 0, len = input.length; i2 < len; i2++) {
        var value = input.charCodeAt(i2);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i2 + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i2 + 1) & 64512) === 56320) {
          var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i2) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf8 = function(input) {
      var decoded = "";
      for (var i2 = 0, len = input.length; i2 < len; i2++) {
        var byte = input[i2];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          var nextByte = input[++i2];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          var surrogatePair = [byte, input[++i2], input[++i2], input[++i2]];
          var encoded = "%" + surrogatePair.map(function(byteValue) {
            return byteValue.toString(16);
          }).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i2] & 63) << 6 | input[++i2] & 63);
        }
      }
      return decoded;
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
function fromUtf82(input) {
  return new TextEncoder().encode(input);
}
function toUtf82(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js"() {
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
var es_exports = {};
__export(es_exports, {
  fromUtf8: () => fromUtf83,
  toUtf8: () => toUtf83
});
var fromUtf83, toUtf83;
var init_es = __esm({
  "node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js"() {
    init_pureJs();
    init_whatwgEncodingApi();
    fromUtf83 = function(input) {
      return typeof TextEncoder === "function" ? fromUtf82(input) : fromUtf8(input);
    };
    toUtf83 = function(input) {
      return typeof TextDecoder === "function" ? toUtf82(input) : toUtf8(input);
    };
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_es(), __toCommonJS(es_exports));
    var fromUtf84 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf84(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var tslib_1 = require_tslib();
    var constants_1 = require_constants();
    var RawSha256_1 = require_RawSha256();
    var util_1 = require_build();
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          this.hash = new RawSha256_1.RawSha256();
          if (secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for (var i2 = 0; i2 < constants_1.BLOCK_SIZE; i2++) {
              inner[i2] ^= 54;
              outer[i2] ^= 92;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            for (var i2 = 0; i2 < inner.byteLength; i2++) {
              inner[i2] = 0;
            }
          }
        }
        Sha2567.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash) || this.error) {
            return;
          }
          try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
          } catch (e) {
            this.error = e;
          }
        };
        Sha2567.prototype.digestSync = function() {
          if (this.error) {
            throw this.error;
          }
          if (this.outer) {
            if (!this.outer.finished) {
              this.outer.update(this.hash.digest());
            }
            return this.outer.digest();
          }
          return this.hash.digest();
        };
        Sha2567.prototype.digest = function() {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
            return (0, tslib_1.__generator)(this, function(_a) {
              return [2, this.digestSync()];
            });
          });
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// node_modules/@aws-crypto/sha256-js/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    (0, tslib_1.__exportStar)(require_jsSha256(), exports);
  }
});

// node_modules/url/node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
      function error(type) {
        throw RangeError(errors[type]);
      }
      function map(array, fn2) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn2(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn2) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn2).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k2 = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k2 += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k2 + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [], inputLength = input.length, out, i2 = 0, n2 = initialN, bias = initialBias, basic, j2, index, oldi, w2, k2, digit, t2, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j2 = 0; j2 < basic; ++j2) {
          if (input.charCodeAt(j2) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j2));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i2, w2 = 1, k2 = base; ; k2 += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i2) / w2)) {
              error("overflow");
            }
            i2 += digit * w2;
            t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
            if (digit < t2) {
              break;
            }
            baseMinusT = base - t2;
            if (w2 > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w2 *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i2 - oldi, out, oldi == 0);
          if (floor(i2 / out) > maxInt - n2) {
            error("overflow");
          }
          n2 += floor(i2 / out);
          i2 %= out;
          output.splice(i2++, 0, n2);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n2, delta, handledCPCount, basicLength, bias, j2, m2, q2, k2, t2, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n2 = initialN;
        delta = 0;
        bias = initialBias;
        for (j2 = 0; j2 < inputLength; ++j2) {
          currentValue = input[j2];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m2 = maxInt, j2 = 0; j2 < inputLength; ++j2) {
            currentValue = input[j2];
            if (currentValue >= n2 && currentValue < m2) {
              m2 = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m2 - n2) * handledCPCountPlusOne;
          n2 = m2;
          for (j2 = 0; j2 < inputLength; ++j2) {
            currentValue = input[j2];
            if (currentValue < n2 && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n2) {
              for (q2 = delta, k2 = base; ; k2 += base) {
                t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
                if (q2 < t2) {
                  break;
                }
                qMinusT = q2 - t2;
                baseMinusT = base - t2;
                output.push(
                  stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0))
                );
                q2 = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q2, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n2;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.3.2",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/url/util.js
var require_util = __commonJS({
  "node_modules/url/util.js"(exports, module) {
    "use strict";
    module.exports = {
      isString: function(arg) {
        return typeof arg === "string";
      },
      isObject: function(arg) {
        return typeof arg === "object" && arg !== null;
      },
      isNull: function(arg) {
        return arg === null;
      },
      isNullOrUndefined: function(arg) {
        return arg == null;
      }
    };
  }
});

// node_modules/querystring/decode.js
var require_decode = __commonJS({
  "node_modules/querystring/decode.js"(exports, module) {
    "use strict";
    function hasOwnProperty2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = function(qs, sep, eq, options) {
      sep = sep || "&";
      eq = eq || "=";
      var obj = {};
      if (typeof qs !== "string" || qs.length === 0) {
        return obj;
      }
      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1e3;
      if (options && typeof options.maxKeys === "number") {
        maxKeys = options.maxKeys;
      }
      var len = qs.length;
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
      for (var i2 = 0; i2 < len; ++i2) {
        var x2 = qs[i2].replace(regexp, "%20"), idx = x2.indexOf(eq), kstr, vstr, k2, v2;
        if (idx >= 0) {
          kstr = x2.substr(0, idx);
          vstr = x2.substr(idx + 1);
        } else {
          kstr = x2;
          vstr = "";
        }
        k2 = decodeURIComponent(kstr);
        v2 = decodeURIComponent(vstr);
        if (!hasOwnProperty2(obj, k2)) {
          obj[k2] = v2;
        } else if (Array.isArray(obj[k2])) {
          obj[k2].push(v2);
        } else {
          obj[k2] = [obj[k2], v2];
        }
      }
      return obj;
    };
  }
});

// node_modules/querystring/encode.js
var require_encode = __commonJS({
  "node_modules/querystring/encode.js"(exports, module) {
    "use strict";
    var stringifyPrimitive = function(v2) {
      switch (typeof v2) {
        case "string":
          return v2;
        case "boolean":
          return v2 ? "true" : "false";
        case "number":
          return isFinite(v2) ? v2 : "";
        default:
          return "";
      }
    };
    module.exports = function(obj, sep, eq, name) {
      sep = sep || "&";
      eq = eq || "=";
      if (obj === null) {
        obj = void 0;
      }
      if (typeof obj === "object") {
        return Object.keys(obj).map(function(k2) {
          var ks = encodeURIComponent(stringifyPrimitive(k2)) + eq;
          if (Array.isArray(obj[k2])) {
            return obj[k2].map(function(v2) {
              return ks + encodeURIComponent(stringifyPrimitive(v2));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k2]));
          }
        }).join(sep);
      }
      if (!name)
        return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };
  }
});

// node_modules/querystring/index.js
var require_querystring = __commonJS({
  "node_modules/querystring/index.js"(exports) {
    "use strict";
    exports.decode = exports.parse = require_decode();
    exports.encode = exports.stringify = require_encode();
  }
});

// node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    var util = require_util();
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    var hostEndingChars = ["/", "?", "#"];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_querystring();
    function urlParse(url2, parseQueryString2, slashesDenoteHost) {
      if (url2 && util.isObject(url2) && url2 instanceof Url)
        return url2;
      var u2 = new Url();
      u2.parse(url2, parseQueryString2, slashesDenoteHost);
      return u2;
    }
    Url.prototype.parse = function(url2, parseQueryString2, slashesDenoteHost) {
      if (!util.isString(url2)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url2);
      }
      var queryIndex = url2.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url2.indexOf("#") ? "?" : "#", uSplit = url2.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url2 = uSplit.join(splitter);
      var rest = url2;
      rest = rest.trim();
      if (!slashesDenoteHost && url2.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString2) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString2) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i2 = 0; i2 < hostEndingChars.length; i2++) {
          var hec = rest.indexOf(hostEndingChars[i2]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i2 = 0; i2 < nonHostChars.length; i2++) {
          var hec = rest.indexOf(nonHostChars[i2]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        if (hostEnd === -1)
          hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i2 = 0, l2 = hostparts.length; i2 < l2; i2++) {
            var part = hostparts[i2];
            if (!part)
              continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j2 = 0, k2 = part.length; j2 < k2; j2++) {
                if (part.charCodeAt(j2) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j2];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i2);
                var notHost = hostparts.slice(i2 + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p2 = this.port ? ":" + this.port : "";
        var h2 = this.hostname || "";
        this.host = h2 + p2;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i2 = 0, l2 = autoEscape.length; i2 < l2; i2++) {
          var ae = autoEscape[i2];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash2 = rest.indexOf("#");
      if (hash2 !== -1) {
        this.hash = rest.substr(hash2);
        rest = rest.slice(0, hash2);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString2) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString2) {
        this.search = "";
        this.query = {};
      }
      if (rest)
        this.pathname = rest;
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p2 = this.pathname || "";
        var s2 = this.search || "";
        this.path = p2 + s2;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (util.isString(obj))
        obj = urlParse(obj);
      if (!(obj instanceof Url))
        return Url.prototype.format.call(obj);
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash2 = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":")
        protocol += ":";
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/")
          pathname = "/" + pathname;
      } else if (!host) {
        host = "";
      }
      if (hash2 && hash2.charAt(0) !== "#")
        hash2 = "#" + hash2;
      if (search && search.charAt(0) !== "?")
        search = "?" + search;
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash2;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source)
        return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol")
            result[rkey] = relative[rkey];
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = "/";
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v2 = 0; v2 < keys.length; v2++) {
            var k2 = keys[v2];
            result[k2] = relative[k2];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift()))
            ;
          if (!relative.host)
            relative.host = "";
          if (!relative.hostname)
            relative.hostname = "";
          if (relPath[0] !== "")
            relPath.unshift("");
          if (relPath.length < 2)
            relPath.unshift("");
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p2 = result.pathname || "";
          var s2 = result.search || "";
          result.path = p2 + s2;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "")
            srcPath[0] = result.host;
          else
            srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "")
              relPath[0] = relative.host;
            else
              relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath)
          srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i2 = srcPath.length; i2 >= 0; i2--) {
        last = srcPath[i2];
        if (last === ".") {
          srcPath.splice(i2, 1);
        } else if (last === "..") {
          srcPath.splice(i2, 1);
          up++;
        } else if (up) {
          srcPath.splice(i2, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join("/");
      }
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host)
        this.hostname = host;
    };
  }
});

// node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties6(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass6(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties6(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties6(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol2 = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol2(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol2("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod2(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable2;
    }
    function isObservable(x2) {
      return x2 instanceof Observable2;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn2) {
      Promise.resolve().then(function() {
        try {
          fn2();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod2(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i2 = 0; i2 < queue.length; ++i2) {
        notifySubscription(subscription, queue[i2].type, queue[i2].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m2 = getMethod2(observer, type);
        switch (type) {
          case "next":
            if (m2)
              m2.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m2)
              m2.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m2)
              m2.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck2(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass6(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck2(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass6(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable2 = function() {
      function Observable3(subscriber) {
        _classCallCheck2(this, Observable3);
        if (!(this instanceof Observable3))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass6(Observable3, [{
        key: "subscribe",
        value: function subscribe2(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn2) {
          var _this = this;
          return new Promise(function(resolve4, reject) {
            if (typeof fn2 !== "function") {
              reject(new TypeError(fn2 + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve4();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn2(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve4
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn2) {
          var _this2 = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn2(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn2) {
          var _this3 = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn2(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn2) {
          var _this4 = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn2(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v2) {
                  observer.next(v2);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn2) {
          var _this6 = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn2) {
                  try {
                    value = fn2(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }
                var inner = C.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    var i2 = subscriptions.indexOf(inner);
                    if (i2 >= 0)
                      subscriptions.splice(i2, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s2) {
                return s2.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from(x2) {
          var C = typeof this === "function" ? this : Observable3;
          if (x2 == null)
            throw new TypeError(x2 + " is not an object");
          var method = getMethod2(x2, SymbolObservable);
          if (method) {
            var observable = method.call(x2);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C)
              return observable;
            return new C(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol2("iterator")) {
            method = getMethod2(x2, SymbolIterator);
            if (method) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x2)) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i2 = 0; i2 < x2.length; ++i2) {
                  observer.next(x2[i2]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x2 + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C = typeof this === "function" ? this : Observable3;
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i2 = 0; i2 < items.length; ++i2) {
                observer.next(items[i2]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable3;
    }();
    exports.Observable = Observable2;
    if (hasSymbols()) {
      Object.defineProperty(Observable2, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "node_modules/zen-observable/index.js"(exports, module) {
    module.exports = require_Observable().Observable;
  }
});

// node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.js"(exports, module) {
    var __extends8;
    var __assign18;
    var __rest8;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter21;
    var __generator21;
    var __exportStar;
    var __values10;
    var __read15;
    var __spread9;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory2) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory2(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory2(createExporter(root, createExporter(module.exports)));
      } else {
        factory2(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p2 in b2)
          if (b2.hasOwnProperty(p2))
            d2[p2] = b2[p2];
      };
      __extends8 = function(d2, b2) {
        extendStatics8(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
      __assign18 = Object.assign || function(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t2[p2] = s2[p2];
        }
        return t2;
      };
      __rest8 = function(s2, e) {
        var t2 = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
            t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
            if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
              t2[p2[i2]] = s2[p2[i2]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r2 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i2 = decorators.length - 1; i2 >= 0; i2--)
            if (d2 = decorators[i2])
              r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
        return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter21 = function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve4) {
            resolve4(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve4, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator21 = function(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f2, y2, t2, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n2) {
          return function(v2) {
            return step([n2, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_2)
            try {
              if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _2.label++;
                  return { value: op[1], done: false };
                case 5:
                  _2.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop();
                  _2.trys.pop();
                  continue;
                default:
                  if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t2[1]) {
                    _2.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _2.label < t2[2]) {
                    _2.label = t2[2];
                    _2.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _2.ops.pop();
                  _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e) {
              op = [6, e];
              y2 = 0;
            } finally {
              f2 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m2[k2];
      };
      __exportStar = function(m2, exports2) {
        for (var p2 in m2)
          if (p2 !== "default" && !exports2.hasOwnProperty(p2))
            exports2[p2] = m2[p2];
      };
      __values10 = function(o2) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
        if (m2)
          return m2.call(o2);
        if (o2 && typeof o2.length === "number")
          return {
            next: function() {
              if (o2 && i2 >= o2.length)
                o2 = void 0;
              return { value: o2 && o2[i2++], done: !o2 };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read15 = function(o2, n2) {
        var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m2)
          return o2;
        var i2 = m2.call(o2), r2, ar = [], e;
        try {
          while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
            ar.push(r2.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r2 && !r2.done && (m2 = i2["return"]))
              m2.call(i2);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
          ar = ar.concat(__read15(arguments[i2]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
          s2 += arguments[i2].length;
        for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
          for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
            r2[k2] = a2[j2];
        return r2;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
        return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2;
        function verb(n2) {
          if (g2[n2])
            i2[n2] = function(v2) {
              return new Promise(function(a2, b2) {
                q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
              });
            };
        }
        function resume(n2, v2) {
          try {
            step(g2[n2](v2));
          } catch (e) {
            settle(q2[0][3], e);
          }
        }
        function step(r2) {
          r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v2) {
          if (f2(v2), q2.shift(), q2.length)
            resume(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator = function(o2) {
        var i2, p2;
        return i2 = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i2[Symbol.iterator] = function() {
          return this;
        }, i2;
        function verb(n2, f2) {
          i2[n2] = o2[n2] ? function(v2) {
            return (p2 = !p2) ? { value: __await2(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
          } : f2;
        }
      };
      __asyncValues2 = function(o2) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m2 = o2[Symbol.asyncIterator], i2;
        return m2 ? m2.call(o2) : (o2 = typeof __values10 === "function" ? __values10(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2);
        function verb(n2) {
          i2[n2] = o2[n2] && function(v2) {
            return new Promise(function(resolve4, reject) {
              v2 = o2[n2](v2), settle(resolve4, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve4, reject, d2, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve4({ value: v3, done: d2 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k2 in mod)
            if (Object.hasOwnProperty.call(mod, k2))
              result[k2] = mod[k2];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends8);
      exporter("__assign", __assign18);
      exporter("__rest", __rest8);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter21);
      exporter("__generator", __generator21);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values10);
      exporter("__read", __read15);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
var require_isEmptyData2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
    exports.SHA_256_HASH = { name: "SHA-256" };
    exports.SHA_256_HMAC_ALGO = {
      name: "HMAC",
      hash: exports.SHA_256_HASH
    };
    exports.EMPTY_DATA_SHA_256 = new Uint8Array([
      227,
      176,
      196,
      66,
      152,
      252,
      28,
      20,
      154,
      251,
      244,
      200,
      153,
      111,
      185,
      36,
      39,
      174,
      65,
      228,
      100,
      155,
      147,
      76,
      164,
      149,
      153,
      27,
      120,
      82,
      184,
      85
    ]);
  }
});

// node_modules/@aws-sdk/util-locate-window/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  locateWindow: () => locateWindow
});
function locateWindow() {
  if (typeof window !== "undefined") {
    return window;
  } else if (typeof self !== "undefined") {
    return self;
  }
  return fallbackWindow;
}
var fallbackWindow;
var init_dist_es = __esm({
  "node_modules/@aws-sdk/util-locate-window/dist-es/index.js"() {
    fallbackWindow = {};
  }
});

// node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
var require_ie11Sha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var isEmptyData_1 = require_isEmptyData2();
    var constants_1 = require_constants2();
    var util_utf8_browser_1 = (init_es(), __toCommonJS(es_exports));
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          if (secret) {
            this.operation = getKeyPromise(secret).then(function(keyData) {
              return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {
            });
          } else {
            this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
          }
        }
        Sha2567.prototype.update = function(toHash) {
          var _this = this;
          if ((0, isEmptyData_1.isEmptyData)(toHash)) {
            return;
          }
          this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
              _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
          });
          this.operation.catch(function() {
          });
        };
        Sha2567.prototype.digest = function() {
          return this.operation.then(function(operation) {
            return new Promise(function(resolve4, reject) {
              operation.onerror = function() {
                reject(new Error("Error encountered finalizing hash"));
              };
              operation.oncomplete = function() {
                if (operation.result) {
                  resolve4(new Uint8Array(operation.result));
                }
                reject(new Error("Error encountered finalizing hash"));
              };
              operation.finish();
            });
          });
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
    function getKeyPromise(secret) {
      return new Promise(function(resolve4, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function() {
          if (keyOperation.result) {
            resolve4(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
  }
});

// node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
var require_webCryptoSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var util_1 = require_build();
    var constants_1 = require_constants2();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          this.toHash = new Uint8Array(0);
          if (secret !== void 0) {
            this.key = new Promise(function(resolve4, reject) {
              (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve4, reject);
            });
            this.key.catch(function() {
            });
          }
        }
        Sha2567.prototype.update = function(data) {
          if ((0, util_1.isEmptyData)(data)) {
            return;
          }
          var update = (0, util_1.convertToBuffer)(data);
          var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
          typedArray.set(this.toHash, 0);
          typedArray.set(update, this.toHash.byteLength);
          this.toHash = typedArray;
        };
        Sha2567.prototype.digest = function() {
          var _this = this;
          if (this.key) {
            return this.key.then(function(key) {
              return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
              });
            });
          }
          if ((0, util_1.isEmptyData)(this.toHash)) {
            return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
          }
          return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
          }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
          });
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js
var require_tslib3 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.js"(exports, module) {
    var __extends8;
    var __assign18;
    var __rest8;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter21;
    var __generator21;
    var __exportStar;
    var __values10;
    var __read15;
    var __spread9;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory2) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory2(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory2(createExporter(root, createExporter(module.exports)));
      } else {
        factory2(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p2 in b2)
          if (b2.hasOwnProperty(p2))
            d2[p2] = b2[p2];
      };
      __extends8 = function(d2, b2) {
        extendStatics8(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
      __assign18 = Object.assign || function(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t2[p2] = s2[p2];
        }
        return t2;
      };
      __rest8 = function(s2, e) {
        var t2 = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
            t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
            if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
              t2[p2[i2]] = s2[p2[i2]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r2 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i2 = decorators.length - 1; i2 >= 0; i2--)
            if (d2 = decorators[i2])
              r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
        return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter21 = function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve4) {
            resolve4(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve4, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator21 = function(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f2, y2, t2, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n2) {
          return function(v2) {
            return step([n2, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_2)
            try {
              if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _2.label++;
                  return { value: op[1], done: false };
                case 5:
                  _2.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop();
                  _2.trys.pop();
                  continue;
                default:
                  if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t2[1]) {
                    _2.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _2.label < t2[2]) {
                    _2.label = t2[2];
                    _2.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _2.ops.pop();
                  _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e) {
              op = [6, e];
              y2 = 0;
            } finally {
              f2 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m2[k2];
      };
      __exportStar = function(m2, exports2) {
        for (var p2 in m2)
          if (p2 !== "default" && !exports2.hasOwnProperty(p2))
            exports2[p2] = m2[p2];
      };
      __values10 = function(o2) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
        if (m2)
          return m2.call(o2);
        if (o2 && typeof o2.length === "number")
          return {
            next: function() {
              if (o2 && i2 >= o2.length)
                o2 = void 0;
              return { value: o2 && o2[i2++], done: !o2 };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read15 = function(o2, n2) {
        var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m2)
          return o2;
        var i2 = m2.call(o2), r2, ar = [], e;
        try {
          while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
            ar.push(r2.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r2 && !r2.done && (m2 = i2["return"]))
              m2.call(i2);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
          ar = ar.concat(__read15(arguments[i2]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
          s2 += arguments[i2].length;
        for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
          for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
            r2[k2] = a2[j2];
        return r2;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
        return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2;
        function verb(n2) {
          if (g2[n2])
            i2[n2] = function(v2) {
              return new Promise(function(a2, b2) {
                q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
              });
            };
        }
        function resume(n2, v2) {
          try {
            step(g2[n2](v2));
          } catch (e) {
            settle(q2[0][3], e);
          }
        }
        function step(r2) {
          r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v2) {
          if (f2(v2), q2.shift(), q2.length)
            resume(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator = function(o2) {
        var i2, p2;
        return i2 = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i2[Symbol.iterator] = function() {
          return this;
        }, i2;
        function verb(n2, f2) {
          i2[n2] = o2[n2] ? function(v2) {
            return (p2 = !p2) ? { value: __await2(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
          } : f2;
        }
      };
      __asyncValues2 = function(o2) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m2 = o2[Symbol.asyncIterator], i2;
        return m2 ? m2.call(o2) : (o2 = typeof __values10 === "function" ? __values10(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2);
        function verb(n2) {
          i2[n2] = o2[n2] && function(v2) {
            return new Promise(function(resolve4, reject) {
              v2 = o2[n2](v2), settle(resolve4, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve4, reject, d2, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve4({ value: v3, done: d2 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k2 in mod)
            if (Object.hasOwnProperty.call(mod, k2))
              result[k2] = mod[k2];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends8);
      exporter("__assign", __assign18);
      exporter("__rest", __rest8);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter21);
      exporter("__generator", __generator21);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values10);
      exporter("__read", __read15);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
var require_supportsWebCrypto = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
    var tslib_1 = require_tslib3();
    var subtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function supportsWebCrypto(window2) {
      if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
        var subtle = window2.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    exports.supportsWebCrypto = supportsWebCrypto;
    function supportsSecureRandom(window2) {
      if (typeof window2 === "object" && typeof window2.crypto === "object") {
        var getRandomValues = window2.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    exports.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    exports.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle))
                return [2, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2, zeroByteAuthTag.byteLength === 16];
            case 4:
              _a = _b.sent();
              return [2, false];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.supportsZeroByteGCM = supportsZeroByteGCM;
  }
});

// node_modules/@aws-crypto/supports-web-crypto/build/index.js
var require_build3 = __commonJS({
  "node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib3();
    tslib_1.__exportStar(require_supportsWebCrypto(), exports);
  }
});

// node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js
var require_tslib4 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.js"(exports, module) {
    var __extends8;
    var __assign18;
    var __rest8;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter21;
    var __generator21;
    var __exportStar;
    var __values10;
    var __read15;
    var __spread9;
    var __spreadArrays;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator;
    var __asyncValues2;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory2) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory2(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory2(createExporter(root, createExporter(module.exports)));
      } else {
        factory2(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p2 in b2)
          if (b2.hasOwnProperty(p2))
            d2[p2] = b2[p2];
      };
      __extends8 = function(d2, b2) {
        extendStatics8(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
      __assign18 = Object.assign || function(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t2[p2] = s2[p2];
        }
        return t2;
      };
      __rest8 = function(s2, e) {
        var t2 = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
            t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
            if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
              t2[p2[i2]] = s2[p2[i2]];
          }
        return t2;
      };
      __decorate = function(decorators, target, key, desc) {
        var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r2 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i2 = decorators.length - 1; i2 >= 0; i2--)
            if (d2 = decorators[i2])
              r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
        return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter21 = function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve4) {
            resolve4(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve4, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator21 = function(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f2, y2, t2, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n2) {
          return function(v2) {
            return step([n2, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_2)
            try {
              if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _2.label++;
                  return { value: op[1], done: false };
                case 5:
                  _2.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop();
                  _2.trys.pop();
                  continue;
                default:
                  if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t2[1]) {
                    _2.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _2.label < t2[2]) {
                    _2.label = t2[2];
                    _2.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _2.ops.pop();
                  _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e) {
              op = [6, e];
              y2 = 0;
            } finally {
              f2 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __createBinding = function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m2[k2];
      };
      __exportStar = function(m2, exports2) {
        for (var p2 in m2)
          if (p2 !== "default" && !exports2.hasOwnProperty(p2))
            exports2[p2] = m2[p2];
      };
      __values10 = function(o2) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
        if (m2)
          return m2.call(o2);
        if (o2 && typeof o2.length === "number")
          return {
            next: function() {
              if (o2 && i2 >= o2.length)
                o2 = void 0;
              return { value: o2 && o2[i2++], done: !o2 };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read15 = function(o2, n2) {
        var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m2)
          return o2;
        var i2 = m2.call(o2), r2, ar = [], e;
        try {
          while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
            ar.push(r2.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r2 && !r2.done && (m2 = i2["return"]))
              m2.call(i2);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread9 = function() {
        for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
          ar = ar.concat(__read15(arguments[i2]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
          s2 += arguments[i2].length;
        for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
          for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
            r2[k2] = a2[j2];
        return r2;
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
        return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2;
        function verb(n2) {
          if (g2[n2])
            i2[n2] = function(v2) {
              return new Promise(function(a2, b2) {
                q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
              });
            };
        }
        function resume(n2, v2) {
          try {
            step(g2[n2](v2));
          } catch (e) {
            settle(q2[0][3], e);
          }
        }
        function step(r2) {
          r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v2) {
          if (f2(v2), q2.shift(), q2.length)
            resume(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator = function(o2) {
        var i2, p2;
        return i2 = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i2[Symbol.iterator] = function() {
          return this;
        }, i2;
        function verb(n2, f2) {
          i2[n2] = o2[n2] ? function(v2) {
            return (p2 = !p2) ? { value: __await2(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
          } : f2;
        }
      };
      __asyncValues2 = function(o2) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m2 = o2[Symbol.asyncIterator], i2;
        return m2 ? m2.call(o2) : (o2 = typeof __values10 === "function" ? __values10(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2);
        function verb(n2) {
          i2[n2] = o2[n2] && function(v2) {
            return new Promise(function(resolve4, reject) {
              v2 = o2[n2](v2), settle(resolve4, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve4, reject, d2, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve4({ value: v3, done: d2 });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k2 in mod)
            if (Object.hasOwnProperty.call(mod, k2))
              result[k2] = mod[k2];
        }
        result["default"] = mod;
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
          throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
      };
      exporter("__extends", __extends8);
      exporter("__assign", __assign18);
      exporter("__rest", __rest8);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter21);
      exporter("__generator", __generator21);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values10);
      exporter("__read", __read15);
      exporter("__spread", __spread9);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
var require_CryptoOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/Key.js
var require_Key = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
var require_KeyOperation = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
var require_MsSubtleCrypto = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
var require_MsWindow = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMsWindow = void 0;
    var msSubtleCryptoMethods = [
      "decrypt",
      "digest",
      "encrypt",
      "exportKey",
      "generateKey",
      "importKey",
      "sign",
      "verify"
    ];
    function quacksLikeAnMsWindow(window2) {
      return "MSInputMethodContext" in window2 && "msCrypto" in window2;
    }
    function isMsWindow(window2) {
      if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
        var _a = window2.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    exports.isMsWindow = isMsWindow;
  }
});

// node_modules/@aws-crypto/ie11-detection/build/index.js
var require_build4 = __commonJS({
  "node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib4();
    tslib_1.__exportStar(require_CryptoOperation(), exports);
    tslib_1.__exportStar(require_Key(), exports);
    tslib_1.__exportStar(require_KeyOperation(), exports);
    tslib_1.__exportStar(require_MsSubtleCrypto(), exports);
    tslib_1.__exportStar(require_MsWindow(), exports);
  }
});

// node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
var require_crossPlatformSha256 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Sha256 = void 0;
    var ie11Sha256_1 = require_ie11Sha256();
    var webCryptoSha256_1 = require_webCryptoSha256();
    var sha256_js_1 = require_build2();
    var supports_web_crypto_1 = require_build3();
    var ie11_detection_1 = require_build4();
    var util_locate_window_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var Sha2566 = (
      /** @class */
      function() {
        function Sha2567(secret) {
          if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new webCryptoSha256_1.Sha256(secret);
          } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
            this.hash = new ie11Sha256_1.Sha256(secret);
          } else {
            this.hash = new sha256_js_1.Sha256(secret);
          }
        }
        Sha2567.prototype.update = function(data, encoding) {
          this.hash.update(data, encoding);
        };
        Sha2567.prototype.digest = function() {
          return this.hash.digest();
        };
        return Sha2567;
      }()
    );
    exports.Sha256 = Sha2566;
  }
});

// node_modules/@aws-crypto/sha256-browser/build/index.js
var require_build5 = __commonJS({
  "node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require_tslib2();
    (0, tslib_1.__exportStar)(require_crossPlatformSha256(), exports);
    var ie11Sha256_1 = require_ie11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", { enumerable: true, get: function() {
      return ie11Sha256_1.Sha256;
    } });
    var webCryptoSha256_1 = require_webCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", { enumerable: true, get: function() {
      return webCryptoSha256_1.Sha256;
    } });
  }
});

// node_modules/uuid/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid/lib/rng-browser.js"(exports, module) {
    var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i2 = 0, r2; i2 < 16; i2++) {
          if ((i2 & 3) === 0)
            r2 = Math.random() * 4294967296;
          rnds[i2] = r2 >>> ((i2 & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds8;
    var rnds;
  }
});

// node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i2 = 0; i2 < 256; ++i2) {
      byteToHex[i2] = (i2 + 256).toString(16).substr(1);
    }
    var i2;
    function bytesToUuid(buf, offset) {
      var i3 = offset || 0;
      var bth = byteToHex;
      return [
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        "-",
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]],
        bth[buf[i3++]]
      ].join("");
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/v1.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i2 = buf && offset || 0;
      var b2 = buf || [];
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          node = _nodeId = [
            seedBytes[0] | 1,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
          ];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : (/* @__PURE__ */ new Date()).getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b2[i2++] = tl >>> 24 & 255;
      b2[i2++] = tl >>> 16 & 255;
      b2[i2++] = tl >>> 8 & 255;
      b2[i2++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b2[i2++] = tmh >>> 8 & 255;
      b2[i2++] = tmh & 255;
      b2[i2++] = tmh >>> 24 & 15 | 16;
      b2[i2++] = tmh >>> 16 & 255;
      b2[i2++] = clockseq >>> 8 | 128;
      b2[i2++] = clockseq & 255;
      for (var n2 = 0; n2 < 6; ++n2) {
        b2[i2 + n2] = node[n2];
      }
      return buf ? buf : bytesToUuid(b2);
    }
    module.exports = v1;
  }
});

// node_modules/uuid/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v42(options, buf, offset) {
      var i2 = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i2 + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v42;
  }
});

// node_modules/uuid/index.js
var require_uuid = __commonJS({
  "node_modules/uuid/index.js"(exports, module) {
    var v1 = require_v1();
    var v42 = require_v4();
    var uuid5 = v42;
    uuid5.v1 = v1;
    uuid5.v4 = v42;
    module.exports = uuid5;
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse9;
    exports.serialize = serialize2;
    var decode = decodeURIComponent;
    var encode = encodeURIComponent;
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse9(str, options) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var opt = options || {};
      var pairs = str.split(";");
      var dec = opt.decode || decode;
      for (var i2 = 0; i2 < pairs.length; i2++) {
        var pair = pairs[i2];
        var index = pair.indexOf("=");
        if (index < 0) {
          continue;
        }
        var key = pair.substring(0, index).trim();
        if (void 0 == obj[key]) {
          var val = pair.substring(index + 1, pair.length).trim();
          if (val[0] === '"') {
            val = val.slice(1, -1);
          }
          obj[key] = tryDecode(val, dec);
        }
      }
      return obj;
    }
    function serialize2(name, val, options) {
      var opt = options || {};
      var enc = opt.encode || encode;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!fieldContentRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    var i2;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i2 = isLE ? nBytes - 1 : 0;
      var d2 = isLE ? -1 : 1;
      var s2 = buffer[offset + i2];
      i2 += d2;
      e = s2 & (1 << -nBits) - 1;
      s2 >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i2], i2 += d2, nBits -= 8) {
      }
      m2 = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m2 = m2 * 256 + buffer[offset + i2], i2 += d2, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
      } else {
        m2 = m2 + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s2 ? -1 : 1) * m2 * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m2, c2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i2 = isLE ? 0 : nBytes - 1;
      var d2 = isLE ? 1 : -1;
      var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m2 = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c2 = Math.pow(2, -e)) < 1) {
          e--;
          c2 *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c2;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c2 >= 2) {
          e++;
          c2 /= 2;
        }
        if (e + eBias >= eMax) {
          m2 = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m2 = (value * c2 - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i2] = m2 & 255, i2 += d2, m2 /= 256, mLen -= 8) {
      }
      e = e << mLen | m2;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i2] = e & 255, i2 += d2, e /= 256, eLen -= 8) {
      }
      buffer[offset + i2 - d2] |= s2 * 128;
    };
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports, module) {
    var toString3 = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString3.call(arr) == "[object Array]";
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var isArray = require_isarray();
    exports.Buffer = Buffer8;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    Buffer8.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== void 0 ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
    exports.kMaxLength = kMaxLength();
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
          return 42;
        } };
        return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0;
      } catch (e) {
        return false;
      }
    }
    function kMaxLength() {
      return Buffer8.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    }
    function createBuffer(that, length) {
      if (kMaxLength() < length) {
        throw new RangeError("Invalid typed array length");
      }
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        that = new Uint8Array(length);
        that.__proto__ = Buffer8.prototype;
      } else {
        if (that === null) {
          that = new Buffer8(length);
        }
        that.length = length;
      }
      return that;
    }
    function Buffer8(arg, encodingOrOffset, length) {
      if (!Buffer8.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer8)) {
        return new Buffer8(arg, encodingOrOffset, length);
      }
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new Error(
            "If encoding is specified then the first argument must be a string"
          );
        }
        return allocUnsafe(this, arg);
      }
      return from(this, arg, encodingOrOffset, length);
    }
    Buffer8.poolSize = 8192;
    Buffer8._augment = function(arr) {
      arr.__proto__ = Buffer8.prototype;
      return arr;
    };
    function from(that, value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('"value" argument must not be a number');
      }
      if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length);
      }
      if (typeof value === "string") {
        return fromString(that, value, encodingOrOffset);
      }
      return fromObject(that, value);
    }
    Buffer8.from = function(value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };
    if (Buffer8.TYPED_ARRAY_SUPPORT) {
      Buffer8.prototype.__proto__ = Uint8Array.prototype;
      Buffer8.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer8[Symbol.species] === Buffer8) {
        Object.defineProperty(Buffer8, Symbol.species, {
          value: null,
          configurable: true
        });
      }
    }
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be a number');
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative');
      }
    }
    function alloc(that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
      }
      return createBuffer(that, size);
    }
    Buffer8.alloc = function(size, fill, encoding) {
      return alloc(null, size, fill, encoding);
    };
    function allocUnsafe(that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer8.TYPED_ARRAY_SUPPORT) {
        for (var i2 = 0; i2 < size; ++i2) {
          that[i2] = 0;
        }
      }
      return that;
    }
    Buffer8.allocUnsafe = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer8.allocUnsafeSlow = function(size) {
      return allocUnsafe(null, size);
    };
    function fromString(that, string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer8.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding');
      }
      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);
      var actual = that.write(string, encoding);
      if (actual !== length) {
        that = that.slice(0, actual);
      }
      return that;
    }
    function fromArrayLike(that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i2 = 0; i2 < length; i2 += 1) {
        that[i2] = array[i2] & 255;
      }
      return that;
    }
    function fromArrayBuffer(that, array, byteOffset, length) {
      array.byteLength;
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError("'offset' is out of bounds");
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError("'length' is out of bounds");
      }
      if (byteOffset === void 0 && length === void 0) {
        array = new Uint8Array(array);
      } else if (length === void 0) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        that = array;
        that.__proto__ = Buffer8.prototype;
      } else {
        that = fromArrayLike(that, array);
      }
      return that;
    }
    function fromObject(that, obj) {
      if (Buffer8.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) {
          return that;
        }
        obj.copy(that, 0, 0, len);
        return that;
      }
      if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
          if (typeof obj.length !== "number" || isnan(obj.length)) {
            return createBuffer(that, 0);
          }
          return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray(obj.data)) {
          return fromArrayLike(that, obj.data);
        }
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function checked(length) {
      if (length >= kMaxLength()) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer8.alloc(+length);
    }
    Buffer8.isBuffer = function isBuffer(b2) {
      return !!(b2 != null && b2._isBuffer);
    };
    Buffer8.compare = function compare(a2, b2) {
      if (!Buffer8.isBuffer(a2) || !Buffer8.isBuffer(b2)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a2 === b2)
        return 0;
      var x2 = a2.length;
      var y2 = b2.length;
      for (var i2 = 0, len = Math.min(x2, y2); i2 < len; ++i2) {
        if (a2[i2] !== b2[i2]) {
          x2 = a2[i2];
          y2 = b2[i2];
          break;
        }
      }
      if (x2 < y2)
        return -1;
      if (y2 < x2)
        return 1;
      return 0;
    };
    Buffer8.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer8.concat = function concat(list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer8.alloc(0);
      }
      var i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      var buffer = Buffer8.allocUnsafe(length);
      var pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        var buf = list[i2];
        if (!Buffer8.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer8.isBuffer(string)) {
        return string.length;
      }
      if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        string = "" + string;
      }
      var len = string.length;
      if (len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
          case void 0:
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase)
              return utf8ToBytes(string).length;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer8.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer8.prototype._isBuffer = true;
    function swap(b2, n2, m2) {
      var i2 = b2[n2];
      b2[n2] = b2[m2];
      b2[m2] = i2;
    }
    Buffer8.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer8.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer8.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer8.prototype.toString = function toString3() {
      var length = this.length | 0;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer8.prototype.equals = function equals(b2) {
      if (!Buffer8.isBuffer(b2))
        throw new TypeError("Argument must be a Buffer");
      if (this === b2)
        return true;
      return Buffer8.compare(this, b2) === 0;
    };
    Buffer8.prototype.inspect = function inspect2() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max)
          str += " ... ";
      }
      return "<Buffer " + str + ">";
    };
    Buffer8.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (!Buffer8.isBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x2 = thisEnd - thisStart;
      var y2 = end - start;
      var len = Math.min(x2, y2);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i2 = 0; i2 < len; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x2 = thisCopy[i2];
          y2 = targetCopy[i2];
          break;
        }
      }
      if (x2 < y2)
        return -1;
      if (y2 < x2)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (isNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer8.from(val, encoding);
      }
      if (Buffer8.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (Buffer8.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      var i2;
      if (dir) {
        var foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          var found = true;
          for (var j2 = 0; j2 < valLength; j2++) {
            if (read(arr, i2 + j2) !== read(val, j2)) {
              found = false;
              break;
            }
          }
          if (found)
            return i2;
        }
      }
      return -1;
    }
    Buffer8.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer8.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer8.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string.length;
      if (strLen % 2 !== 0)
        throw new TypeError("Invalid hex string");
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i2 = 0; i2 < length; ++i2) {
        var parsed = parseInt(string.substr(i2 * 2, 2), 16);
        if (isNaN(parsed))
          return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function latin1Write(buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer8.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
            return asciiWrite(this, string, offset, length);
          case "latin1":
          case "binary":
            return latin1Write(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer8.prototype.toJSON = function toJSON3() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i2 = start;
      while (i2 < end) {
        var firstByte = buf[i2];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i2 = 0;
      while (i2 < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i2 = start; i2 < end; ++i2) {
        out += toHex2(buf[i2]);
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i2 = 0; i2 < bytes.length; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer8.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf;
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer8.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer8(sliceLen, void 0);
        for (var i2 = 0; i2 < sliceLen; ++i2) {
          newBuf[i2] = this[i2 + start];
        }
      }
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer8.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer8.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer8.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer8.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer8.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer8.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer8.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer8.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i2 = 0;
      while (++i2 < byteLength2 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer8.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i2 = byteLength2;
      var mul = 1;
      var val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer8.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer8.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer8.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer8.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer8.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer8.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer8.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer8.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer8.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer8.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer8.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer8.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i2 = byteLength2 - 1;
      var mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer8.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      if (!Buffer8.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      this[offset] = value & 255;
      return offset + 1;
    };
    function objectWriteUInt16(buf, value, offset, littleEndian) {
      if (value < 0)
        value = 65535 + value + 1;
      for (var i2 = 0, j2 = Math.min(buf.length - offset, 2); i2 < j2; ++i2) {
        buf[offset + i2] = (value & 255 << 8 * (littleEndian ? i2 : 1 - i2)) >>> (littleEndian ? i2 : 1 - i2) * 8;
      }
    }
    Buffer8.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer8.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    function objectWriteUInt32(buf, value, offset, littleEndian) {
      if (value < 0)
        value = 4294967295 + value + 1;
      for (var i2 = 0, j2 = Math.min(buf.length - offset, 4); i2 < j2; ++i2) {
        buf[offset + i2] = value >>> (littleEndian ? i2 : 3 - i2) * 8 & 255;
      }
    }
    Buffer8.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer8.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer8.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i2 = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer8.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i2 = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer8.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (!Buffer8.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer8.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer8.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer8.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer8.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      if (Buffer8.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer8.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer8.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer8.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer8.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer8.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i2;
      if (this === target && start < targetStart && targetStart < end) {
        for (i2 = len - 1; i2 >= 0; --i2) {
          target[i2 + targetStart] = this[i2 + start];
        }
      } else if (len < 1e3 || !Buffer8.TYPED_ARRAY_SUPPORT) {
        for (i2 = 0; i2 < len; ++i2) {
          target[i2 + targetStart] = this[i2 + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer8.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer8.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        var bytes = Buffer8.isBuffer(val) ? val : utf8ToBytes(new Buffer8(val, encoding).toString());
        var len = bytes.length;
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes[i2 % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = stringtrim(str).replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function stringtrim(str) {
      if (str.trim)
        return str.trim();
      return str.replace(/^\s+|\s+$/g, "");
    }
    function toHex2(n2) {
      if (n2 < 16)
        return "0" + n2.toString(16);
      return n2.toString(16);
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i2 = 0; i2 < length; ++i2) {
        codePoint = string.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c2, hi, lo;
      var byteArray = [];
      for (var i2 = 0; i2 < str.length; ++i2) {
        if ((units -= 2) < 0)
          break;
        c2 = str.charCodeAt(i2);
        hi = c2 >> 8;
        lo = c2 % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length)
          break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isnan(val) {
      return val !== val;
    }
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_2, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/unfetch/dist/unfetch.module.js
var unfetch_module_exports = {};
__export(unfetch_module_exports, {
  default: () => unfetch_module_default
});
function unfetch_module_default(e, n2) {
  return n2 = n2 || {}, new Promise(function(t2, r2) {
    var s2 = new XMLHttpRequest(), o2 = [], u2 = [], i2 = {}, a2 = function() {
      return { ok: 2 == (s2.status / 100 | 0), statusText: s2.statusText, status: s2.status, url: s2.responseURL, text: function() {
        return Promise.resolve(s2.responseText);
      }, json: function() {
        return Promise.resolve(s2.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([s2.response]));
      }, clone: a2, headers: { keys: function() {
        return o2;
      }, entries: function() {
        return u2;
      }, get: function(e2) {
        return i2[e2.toLowerCase()];
      }, has: function(e2) {
        return e2.toLowerCase() in i2;
      } } };
    };
    for (var l2 in s2.open(n2.method || "get", e, true), s2.onload = function() {
      s2.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e2, n3, t3) {
        o2.push(n3 = n3.toLowerCase()), u2.push([n3, t3]), i2[n3] = i2[n3] ? i2[n3] + "," + t3 : t3;
      }), t2(a2());
    }, s2.onerror = r2, s2.withCredentials = "include" == n2.credentials, n2.headers)
      s2.setRequestHeader(l2, n2.headers[l2]);
    s2.send(n2.body || null);
  });
}
var init_unfetch_module = __esm({
  "node_modules/unfetch/dist/unfetch.module.js"() {
  }
});

// node_modules/isomorphic-unfetch/browser.js
var require_browser = __commonJS({
  "node_modules/isomorphic-unfetch/browser.js"(exports, module) {
    module.exports = self.fetch || (self.fetch = (init_unfetch_module(), __toCommonJS(unfetch_module_exports)).default || (init_unfetch_module(), __toCommonJS(unfetch_module_exports)));
  }
});

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports, module) {
    (function(factory2) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory2);
        registeredInModuleLoader = true;
      }
      if (typeof exports === "object") {
        module.exports = factory2();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory2();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i2 = 0;
        var result = {};
        for (; i2 < arguments.length; i2++) {
          var attributes = arguments[i2];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s2) {
        return s2.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init(converter) {
        function api() {
        }
        function set2(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(/* @__PURE__ */ new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get4(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i2 = 0;
          for (; i2 < cookies.length; i2++) {
            var parts = cookies[i2].split("=");
            var cookie3 = parts.slice(1).join("=");
            if (!json && cookie3.charAt(0) === '"') {
              cookie3 = cookie3.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie3 = (converter.read || converter)(cookie3, name) || decode(cookie3);
              if (json) {
                try {
                  cookie3 = JSON.parse(cookie3);
                } catch (e) {
                }
              }
              jar[name] = cookie3;
              if (key === name) {
                break;
              }
            } catch (e) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set2;
        api.get = function(key) {
          return get4(
            key,
            false
            /* read as raw */
          );
        };
        api.getJSON = function(key) {
          return get4(
            key,
            true
            /* read as json */
          );
        };
        api.remove = function(key, attributes) {
          set2(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
      }
      return init(function() {
      });
    });
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn2, thisArg) {
      return function wrap3() {
        var args = new Array(arguments.length);
        for (var i2 = 0; i2 < args.length; i2++) {
          args[i2] = arguments[i2];
        }
        return fn2.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString3 = Object.prototype.toString;
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer2(val) {
      return toString3.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return toString3.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer2(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString3.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString3.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString3.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString3.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString3.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString3.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn2) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
          fn2.call(null, obj[i2], i2, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn2.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
        forEach(arguments[i2], assignValue);
      }
      return result;
    }
    function extend(a2, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer: isArrayBuffer2,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url2, params, paramsSerializer) {
      if (!params) {
        return url2;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils2.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils2.forEach(params, function serialize2(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils2.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils2.forEach(val, function parseValue2(v2) {
            if (utils2.isDate(v2)) {
              v2 = v2.toISOString();
            } else if (utils2.isObject(v2)) {
              v2 = JSON.stringify(v2);
            }
            parts.push(encode(key) + "=" + encode(v2));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url2.indexOf("#");
        if (hashmarkIndex !== -1) {
          url2 = url2.slice(0, hashmarkIndex);
        }
        url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url2;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn2) {
      utils2.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn2(h2);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils2.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON3() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError2(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError2 = require_createError();
    module.exports = function settle(resolve4, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve4(response);
      } else {
        reject(createError2(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    module.exports = utils2.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie3 = [];
            cookie3.push(name + "=" + encodeURIComponent(value));
            if (utils2.isNumber(expires)) {
              cookie3.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils2.isString(path)) {
              cookie3.push("path=" + path);
            }
            if (utils2.isString(domain)) {
              cookie3.push("domain=" + domain);
            }
            if (secure === true) {
              cookie3.push("secure");
            }
            document.cookie = cookie3.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove2(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove2() {
          }
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url2) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i2;
      if (!headers) {
        return parsed;
      }
      utils2.forEach(headers.split("\n"), function parser(line) {
        i2 = line.indexOf(":");
        key = utils2.trim(line.substr(0, i2)).toLowerCase();
        val = utils2.trim(line.substr(i2 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    module.exports = utils2.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url2) {
          var href = url2;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils2.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString3() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError2 = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve4, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils2.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve4(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError2("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError2("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError2(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils2.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils2.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils2.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils2.isUndefined(headers) && utils2.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter2() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils2.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils2.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter2(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils2.isFormData(data) || utils2.isArrayBuffer(data) || utils2.isBuffer(data) || utils2.isStream(data) || utils2.isFile(data) || utils2.isBlob(data)) {
          return data;
        }
        if (utils2.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils2.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils2.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils2.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils2.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils2.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils2.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils2.forEach(fns, function transform(fn2) {
        data = fn2.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils2.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils2.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils2.isPlainObject(target) && utils2.isPlainObject(source)) {
          return utils2.merge(target, source);
        } else if (utils2.isPlainObject(source)) {
          return utils2.merge({}, source);
        } else if (utils2.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils2.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils2.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils2.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils2.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils2.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils2.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils2.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.26.0"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i2) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version4, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version4 ? " in " + version4 : "")));
        }
        if (version4 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version4 + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema2, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i2 = keys.length;
      while (i2-- > 0) {
        var opt = keys[i2];
        var validator = schema2[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils2.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url2, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url: url2,
          data: (config || {}).data
        }));
      };
    });
    utils2.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url2, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url: url2,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve4) {
        resolvePromise = resolve4;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i2;
        var l2 = token._listeners.length;
        for (i2 = 0; i2 < l2; i2++) {
          token._listeners[i2](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve4) {
          token.subscribe(resolve4);
          _resolve = resolve4;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe2(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap3(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    module.exports = function isAxiosError(payload) {
      return utils2.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils2 = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig2) {
      var context = new Axios(defaultConfig2);
      var instance2 = bind(Axios.prototype.request, context);
      utils2.extend(instance2, Axios.prototype, context);
      utils2.extend(instance2, context);
      instance2.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig2, instanceConfig));
      };
      return instance2;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module.exports = axios2;
    module.exports.default = axios2;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/@aws-amplify/pubsub/lib-esm/vendor/paho-mqtt.js
var require_paho_mqtt = __commonJS({
  "node_modules/@aws-amplify/pubsub/lib-esm/vendor/paho-mqtt.js"(exports, module) {
    (function ExportLibrary(root, factory2) {
      if (typeof exports === "object" && typeof module === "object") {
        module.exports = factory2();
      } else if (typeof define === "function" && define.amd) {
        define(factory2);
      } else if (typeof exports === "object") {
        exports = factory2();
      } else {
        root.Paho = factory2();
      }
    })(exports, function LibraryFactory() {
      var PahoMQTT = function(global2) {
        var version4 = "@VERSION@-@BUILDLEVEL@";
        var localStorage2 = function() {
          try {
            if (global2.localStorage)
              return global2.localStorage;
          } catch (e) {
            var data = {};
            return {
              setItem: function(key, item) {
                data[key] = item;
              },
              getItem: function(key) {
                return data[key];
              },
              removeItem: function(key) {
                delete data[key];
              }
            };
          }
        }();
        var MESSAGE_TYPE = {
          CONNECT: 1,
          CONNACK: 2,
          PUBLISH: 3,
          PUBACK: 4,
          PUBREC: 5,
          PUBREL: 6,
          PUBCOMP: 7,
          SUBSCRIBE: 8,
          SUBACK: 9,
          UNSUBSCRIBE: 10,
          UNSUBACK: 11,
          PINGREQ: 12,
          PINGRESP: 13,
          DISCONNECT: 14
        };
        var validate2 = function(obj, keys) {
          for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
              if (keys.hasOwnProperty(key)) {
                if (typeof obj[key] !== keys[key])
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [typeof obj[key], key])
                  );
              } else {
                var errorStr = "Unknown property, " + key + ". Valid properties are:";
                for (var validKey in keys)
                  if (keys.hasOwnProperty(validKey))
                    errorStr = errorStr + " " + validKey;
                throw new Error(errorStr);
              }
            }
          }
        };
        var scope = function(f2, scope2) {
          return function() {
            return f2.apply(scope2, arguments);
          };
        };
        var ERROR = {
          OK: { code: 0, text: "AMQJSC0000I OK." },
          CONNECT_TIMEOUT: { code: 1, text: "AMQJSC0001E Connect timed out." },
          SUBSCRIBE_TIMEOUT: { code: 2, text: "AMQJS0002E Subscribe timed out." },
          UNSUBSCRIBE_TIMEOUT: {
            code: 3,
            text: "AMQJS0003E Unsubscribe timed out."
          },
          PING_TIMEOUT: { code: 4, text: "AMQJS0004E Ping timed out." },
          INTERNAL_ERROR: {
            code: 5,
            text: "AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}"
          },
          CONNACK_RETURNCODE: {
            code: 6,
            text: "AMQJS0006E Bad Connack return code:{0} {1}."
          },
          SOCKET_ERROR: { code: 7, text: "AMQJS0007E Socket error:{0}." },
          SOCKET_CLOSE: { code: 8, text: "AMQJS0008I Socket closed." },
          MALFORMED_UTF: {
            code: 9,
            text: "AMQJS0009E Malformed UTF data:{0} {1} {2}."
          },
          UNSUPPORTED: {
            code: 10,
            text: "AMQJS0010E {0} is not supported by this browser."
          },
          INVALID_STATE: { code: 11, text: "AMQJS0011E Invalid state {0}." },
          INVALID_TYPE: { code: 12, text: "AMQJS0012E Invalid type {0} for {1}." },
          INVALID_ARGUMENT: {
            code: 13,
            text: "AMQJS0013E Invalid argument {0} for {1}."
          },
          UNSUPPORTED_OPERATION: {
            code: 14,
            text: "AMQJS0014E Unsupported operation."
          },
          INVALID_STORED_DATA: {
            code: 15,
            text: "AMQJS0015E Invalid data in local storage key={0} value={1}."
          },
          INVALID_MQTT_MESSAGE_TYPE: {
            code: 16,
            text: "AMQJS0016E Invalid MQTT message type {0}."
          },
          MALFORMED_UNICODE: {
            code: 17,
            text: "AMQJS0017E Malformed Unicode string:{0} {1}."
          },
          BUFFER_FULL: {
            code: 18,
            text: "AMQJS0018E Message buffer is full, maximum buffer size: {0}."
          }
        };
        var CONNACK_RC = {
          0: "Connection Accepted",
          1: "Connection Refused: unacceptable protocol version",
          2: "Connection Refused: identifier rejected",
          3: "Connection Refused: server unavailable",
          4: "Connection Refused: bad user name or password",
          5: "Connection Refused: not authorized"
        };
        var format3 = function(error, substitutions) {
          var text = error.text;
          if (substitutions) {
            var field, start;
            for (var i2 = 0; i2 < substitutions.length; i2++) {
              field = "{" + i2 + "}";
              start = text.indexOf(field);
              if (start > 0) {
                var part1 = text.substring(0, start);
                var part2 = text.substring(start + field.length);
                text = part1 + substitutions[i2] + part2;
              }
            }
          }
          return text;
        };
        var MqttProtoIdentifierv3 = [
          0,
          6,
          77,
          81,
          73,
          115,
          100,
          112,
          3
        ];
        var MqttProtoIdentifierv4 = [0, 4, 77, 81, 84, 84, 4];
        var WireMessage = function(type, options) {
          this.type = type;
          for (var name in options) {
            if (options.hasOwnProperty(name)) {
              this[name] = options[name];
            }
          }
        };
        WireMessage.prototype.encode = function() {
          var first = (this.type & 15) << 4;
          var remLength = 0;
          var topicStrLength = [];
          var destinationNameLength = 0;
          var willMessagePayloadBytes;
          if (this.messageIdentifier !== void 0)
            remLength += 2;
          switch (this.type) {
            case MESSAGE_TYPE.CONNECT:
              switch (this.mqttVersion) {
                case 3:
                  remLength += MqttProtoIdentifierv3.length + 3;
                  break;
                case 4:
                  remLength += MqttProtoIdentifierv4.length + 3;
                  break;
              }
              remLength += UTF8Length(this.clientId) + 2;
              if (this.willMessage !== void 0) {
                remLength += UTF8Length(this.willMessage.destinationName) + 2;
                willMessagePayloadBytes = this.willMessage.payloadBytes;
                if (!(willMessagePayloadBytes instanceof Uint8Array))
                  willMessagePayloadBytes = new Uint8Array(payloadBytes);
                remLength += willMessagePayloadBytes.byteLength + 2;
              }
              if (this.userName !== void 0)
                remLength += UTF8Length(this.userName) + 2;
              if (this.password !== void 0)
                remLength += UTF8Length(this.password) + 2;
              break;
            case MESSAGE_TYPE.SUBSCRIBE:
              first |= 2;
              for (var i2 = 0; i2 < this.topics.length; i2++) {
                topicStrLength[i2] = UTF8Length(this.topics[i2]);
                remLength += topicStrLength[i2] + 2;
              }
              remLength += this.requestedQos.length;
              break;
            case MESSAGE_TYPE.UNSUBSCRIBE:
              first |= 2;
              for (var i2 = 0; i2 < this.topics.length; i2++) {
                topicStrLength[i2] = UTF8Length(this.topics[i2]);
                remLength += topicStrLength[i2] + 2;
              }
              break;
            case MESSAGE_TYPE.PUBREL:
              first |= 2;
              break;
            case MESSAGE_TYPE.PUBLISH:
              if (this.payloadMessage.duplicate)
                first |= 8;
              first = first |= this.payloadMessage.qos << 1;
              if (this.payloadMessage.retained)
                first |= 1;
              destinationNameLength = UTF8Length(
                this.payloadMessage.destinationName
              );
              remLength += destinationNameLength + 2;
              var payloadBytes = this.payloadMessage.payloadBytes;
              remLength += payloadBytes.byteLength;
              if (payloadBytes instanceof ArrayBuffer)
                payloadBytes = new Uint8Array(payloadBytes);
              else if (!(payloadBytes instanceof Uint8Array))
                payloadBytes = new Uint8Array(payloadBytes.buffer);
              break;
            case MESSAGE_TYPE.DISCONNECT:
              break;
            default:
              break;
          }
          var mbi = encodeMBI(remLength);
          var pos = mbi.length + 1;
          var buffer = new ArrayBuffer(remLength + pos);
          var byteStream = new Uint8Array(buffer);
          byteStream[0] = first;
          byteStream.set(mbi, 1);
          if (this.type == MESSAGE_TYPE.PUBLISH)
            pos = writeString(
              this.payloadMessage.destinationName,
              destinationNameLength,
              byteStream,
              pos
            );
          else if (this.type == MESSAGE_TYPE.CONNECT) {
            switch (this.mqttVersion) {
              case 3:
                byteStream.set(MqttProtoIdentifierv3, pos);
                pos += MqttProtoIdentifierv3.length;
                break;
              case 4:
                byteStream.set(MqttProtoIdentifierv4, pos);
                pos += MqttProtoIdentifierv4.length;
                break;
            }
            var connectFlags = 0;
            if (this.cleanSession)
              connectFlags = 2;
            if (this.willMessage !== void 0) {
              connectFlags |= 4;
              connectFlags |= this.willMessage.qos << 3;
              if (this.willMessage.retained) {
                connectFlags |= 32;
              }
            }
            if (this.userName !== void 0)
              connectFlags |= 128;
            if (this.password !== void 0)
              connectFlags |= 64;
            byteStream[pos++] = connectFlags;
            pos = writeUint16(this.keepAliveInterval, byteStream, pos);
          }
          if (this.messageIdentifier !== void 0)
            pos = writeUint16(this.messageIdentifier, byteStream, pos);
          switch (this.type) {
            case MESSAGE_TYPE.CONNECT:
              pos = writeString(
                this.clientId,
                UTF8Length(this.clientId),
                byteStream,
                pos
              );
              if (this.willMessage !== void 0) {
                pos = writeString(
                  this.willMessage.destinationName,
                  UTF8Length(this.willMessage.destinationName),
                  byteStream,
                  pos
                );
                pos = writeUint16(
                  willMessagePayloadBytes.byteLength,
                  byteStream,
                  pos
                );
                byteStream.set(willMessagePayloadBytes, pos);
                pos += willMessagePayloadBytes.byteLength;
              }
              if (this.userName !== void 0)
                pos = writeString(
                  this.userName,
                  UTF8Length(this.userName),
                  byteStream,
                  pos
                );
              if (this.password !== void 0)
                pos = writeString(
                  this.password,
                  UTF8Length(this.password),
                  byteStream,
                  pos
                );
              break;
            case MESSAGE_TYPE.PUBLISH:
              byteStream.set(payloadBytes, pos);
              break;
            case MESSAGE_TYPE.SUBSCRIBE:
              for (var i2 = 0; i2 < this.topics.length; i2++) {
                pos = writeString(
                  this.topics[i2],
                  topicStrLength[i2],
                  byteStream,
                  pos
                );
                byteStream[pos++] = this.requestedQos[i2];
              }
              break;
            case MESSAGE_TYPE.UNSUBSCRIBE:
              for (var i2 = 0; i2 < this.topics.length; i2++)
                pos = writeString(
                  this.topics[i2],
                  topicStrLength[i2],
                  byteStream,
                  pos
                );
              break;
            default:
          }
          return buffer;
        };
        function decodeMessage(input, pos) {
          var startingPos = pos;
          var first = input[pos];
          var type = first >> 4;
          var messageInfo = first &= 15;
          pos += 1;
          var digit;
          var remLength = 0;
          var multiplier = 1;
          do {
            if (pos == input.length) {
              return [null, startingPos];
            }
            digit = input[pos++];
            remLength += (digit & 127) * multiplier;
            multiplier *= 128;
          } while ((digit & 128) !== 0);
          var endPos = pos + remLength;
          if (endPos > input.length) {
            return [null, startingPos];
          }
          var wireMessage = new WireMessage(type);
          switch (type) {
            case MESSAGE_TYPE.CONNACK:
              var connectAcknowledgeFlags = input[pos++];
              if (connectAcknowledgeFlags & 1)
                wireMessage.sessionPresent = true;
              wireMessage.returnCode = input[pos++];
              break;
            case MESSAGE_TYPE.PUBLISH:
              var qos = messageInfo >> 1 & 3;
              var len = readUint16(input, pos);
              pos += 2;
              var topicName = parseUTF8(input, pos, len);
              pos += len;
              if (qos > 0) {
                wireMessage.messageIdentifier = readUint16(input, pos);
                pos += 2;
              }
              var message = new Message(input.subarray(pos, endPos));
              if ((messageInfo & 1) == 1)
                message.retained = true;
              if ((messageInfo & 8) == 8)
                message.duplicate = true;
              message.qos = qos;
              message.destinationName = topicName;
              wireMessage.payloadMessage = message;
              break;
            case MESSAGE_TYPE.PUBACK:
            case MESSAGE_TYPE.PUBREC:
            case MESSAGE_TYPE.PUBREL:
            case MESSAGE_TYPE.PUBCOMP:
            case MESSAGE_TYPE.UNSUBACK:
              wireMessage.messageIdentifier = readUint16(input, pos);
              break;
            case MESSAGE_TYPE.SUBACK:
              wireMessage.messageIdentifier = readUint16(input, pos);
              pos += 2;
              wireMessage.returnCode = input.subarray(pos, endPos);
              break;
            default:
              break;
          }
          return [wireMessage, endPos];
        }
        function writeUint16(input, buffer, offset) {
          buffer[offset++] = input >> 8;
          buffer[offset++] = input % 256;
          return offset;
        }
        function writeString(input, utf8Length, buffer, offset) {
          offset = writeUint16(utf8Length, buffer, offset);
          stringToUTF8(input, buffer, offset);
          return offset + utf8Length;
        }
        function readUint16(buffer, offset) {
          return 256 * buffer[offset] + buffer[offset + 1];
        }
        function encodeMBI(number) {
          var output = new Array(1);
          var numBytes = 0;
          do {
            var digit = number % 128;
            number = number >> 7;
            if (number > 0) {
              digit |= 128;
            }
            output[numBytes++] = digit;
          } while (number > 0 && numBytes < 4);
          return output;
        }
        function UTF8Length(input) {
          var output = 0;
          for (var i2 = 0; i2 < input.length; i2++) {
            var charCode = input.charCodeAt(i2);
            if (charCode > 2047) {
              if (55296 <= charCode && charCode <= 56319) {
                i2++;
                output++;
              }
              output += 3;
            } else if (charCode > 127)
              output += 2;
            else
              output++;
          }
          return output;
        }
        function stringToUTF8(input, output, start) {
          var pos = start;
          for (var i2 = 0; i2 < input.length; i2++) {
            var charCode = input.charCodeAt(i2);
            if (55296 <= charCode && charCode <= 56319) {
              var lowCharCode = input.charCodeAt(++i2);
              if (isNaN(lowCharCode)) {
                throw new Error(
                  format3(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode])
                );
              }
              charCode = (charCode - 55296 << 10) + (lowCharCode - 56320) + 65536;
            }
            if (charCode <= 127) {
              output[pos++] = charCode;
            } else if (charCode <= 2047) {
              output[pos++] = charCode >> 6 & 31 | 192;
              output[pos++] = charCode & 63 | 128;
            } else if (charCode <= 65535) {
              output[pos++] = charCode >> 12 & 15 | 224;
              output[pos++] = charCode >> 6 & 63 | 128;
              output[pos++] = charCode & 63 | 128;
            } else {
              output[pos++] = charCode >> 18 & 7 | 240;
              output[pos++] = charCode >> 12 & 63 | 128;
              output[pos++] = charCode >> 6 & 63 | 128;
              output[pos++] = charCode & 63 | 128;
            }
          }
          return output;
        }
        function parseUTF8(input, offset, length) {
          var output = "";
          var utf16;
          var pos = offset;
          while (pos < offset + length) {
            var byte1 = input[pos++];
            if (byte1 < 128)
              utf16 = byte1;
            else {
              var byte2 = input[pos++] - 128;
              if (byte2 < 0)
                throw new Error(
                  format3(ERROR.MALFORMED_UTF, [
                    byte1.toString(16),
                    byte2.toString(16),
                    ""
                  ])
                );
              if (byte1 < 224)
                utf16 = 64 * (byte1 - 192) + byte2;
              else {
                var byte3 = input[pos++] - 128;
                if (byte3 < 0)
                  throw new Error(
                    format3(ERROR.MALFORMED_UTF, [
                      byte1.toString(16),
                      byte2.toString(16),
                      byte3.toString(16)
                    ])
                  );
                if (byte1 < 240)
                  utf16 = 4096 * (byte1 - 224) + 64 * byte2 + byte3;
                else {
                  var byte4 = input[pos++] - 128;
                  if (byte4 < 0)
                    throw new Error(
                      format3(ERROR.MALFORMED_UTF, [
                        byte1.toString(16),
                        byte2.toString(16),
                        byte3.toString(16),
                        byte4.toString(16)
                      ])
                    );
                  if (byte1 < 248)
                    utf16 = 262144 * (byte1 - 240) + 4096 * byte2 + 64 * byte3 + byte4;
                  else
                    throw new Error(
                      format3(ERROR.MALFORMED_UTF, [
                        byte1.toString(16),
                        byte2.toString(16),
                        byte3.toString(16),
                        byte4.toString(16)
                      ])
                    );
                }
              }
            }
            if (utf16 > 65535) {
              utf16 -= 65536;
              output += String.fromCharCode(55296 + (utf16 >> 10));
              utf16 = 56320 + (utf16 & 1023);
            }
            output += String.fromCharCode(utf16);
          }
          return output;
        }
        var Pinger = function(client, keepAliveInterval) {
          this._client = client;
          this._keepAliveInterval = keepAliveInterval * 1e3;
          this.isReset = false;
          var pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();
          var doTimeout = function(pinger) {
            return function() {
              return doPing.apply(pinger);
            };
          };
          var doPing = function() {
            if (!this.isReset) {
              this._client._trace("Pinger.doPing", "Timed out");
              this._client._disconnected(
                ERROR.PING_TIMEOUT.code,
                format3(ERROR.PING_TIMEOUT)
              );
            } else {
              this.isReset = false;
              this._client._trace("Pinger.doPing", "send PINGREQ");
              this._client.socket.send(pingReq);
              this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);
            }
          };
          this.reset = function() {
            this.isReset = true;
            clearTimeout(this.timeout);
            if (this._keepAliveInterval > 0)
              this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);
          };
          this.cancel = function() {
            clearTimeout(this.timeout);
          };
        };
        var Timeout = function(client, timeoutSeconds, action, args) {
          if (!timeoutSeconds)
            timeoutSeconds = 30;
          var doTimeout = function(action2, client2, args2) {
            return function() {
              return action2.apply(client2, args2);
            };
          };
          this.timeout = setTimeout(
            doTimeout(action, client, args),
            timeoutSeconds * 1e3
          );
          this.cancel = function() {
            clearTimeout(this.timeout);
          };
        };
        var ClientImpl = function(uri, host, port, path, clientId) {
          if (!("WebSocket" in global2 && global2.WebSocket !== null)) {
            throw new Error(format3(ERROR.UNSUPPORTED, ["WebSocket"]));
          }
          if (!("ArrayBuffer" in global2 && global2.ArrayBuffer !== null)) {
            throw new Error(format3(ERROR.UNSUPPORTED, ["ArrayBuffer"]));
          }
          this._trace("Paho.Client", uri, host, port, path, clientId);
          this.host = host;
          this.port = port;
          this.path = path;
          this.uri = uri;
          this.clientId = clientId;
          this._wsuri = null;
          this._localKey = host + ":" + port + (path != "/mqtt" ? ":" + path : "") + ":" + clientId + ":";
          this._msg_queue = [];
          this._buffered_msg_queue = [];
          this._sentMessages = {};
          this._receivedMessages = {};
          this._notify_msg_sent = {};
          this._message_identifier = 1;
          this._sequence = 0;
          for (var key in localStorage2)
            if (key.indexOf("Sent:" + this._localKey) === 0 || key.indexOf("Received:" + this._localKey) === 0)
              this.restore(key);
        };
        ClientImpl.prototype.host = null;
        ClientImpl.prototype.port = null;
        ClientImpl.prototype.path = null;
        ClientImpl.prototype.uri = null;
        ClientImpl.prototype.clientId = null;
        ClientImpl.prototype.socket = null;
        ClientImpl.prototype.connected = false;
        ClientImpl.prototype.maxMessageIdentifier = 65536;
        ClientImpl.prototype.connectOptions = null;
        ClientImpl.prototype.hostIndex = null;
        ClientImpl.prototype.onConnected = null;
        ClientImpl.prototype.onConnectionLost = null;
        ClientImpl.prototype.onMessageDelivered = null;
        ClientImpl.prototype.onMessageArrived = null;
        ClientImpl.prototype.traceFunction = null;
        ClientImpl.prototype._msg_queue = null;
        ClientImpl.prototype._buffered_msg_queue = null;
        ClientImpl.prototype._connectTimeout = null;
        ClientImpl.prototype.sendPinger = null;
        ClientImpl.prototype.receivePinger = null;
        ClientImpl.prototype._reconnectInterval = 1;
        ClientImpl.prototype._reconnecting = false;
        ClientImpl.prototype._reconnectTimeout = null;
        ClientImpl.prototype.disconnectedPublishing = false;
        ClientImpl.prototype.disconnectedBufferSize = 5e3;
        ClientImpl.prototype.receiveBuffer = null;
        ClientImpl.prototype._traceBuffer = null;
        ClientImpl.prototype._MAX_TRACE_ENTRIES = 100;
        ClientImpl.prototype.connect = function(connectOptions) {
          var connectOptionsMasked = this._traceMask(connectOptions, "password");
          this._trace(
            "Client.connect",
            connectOptionsMasked,
            this.socket,
            this.connected
          );
          if (this.connected)
            throw new Error(format3(ERROR.INVALID_STATE, ["already connected"]));
          if (this.socket)
            throw new Error(format3(ERROR.INVALID_STATE, ["already connected"]));
          if (this._reconnecting) {
            this._reconnectTimeout.cancel();
            this._reconnectTimeout = null;
            this._reconnecting = false;
          }
          this.connectOptions = connectOptions;
          this._reconnectInterval = 1;
          this._reconnecting = false;
          if (connectOptions.uris) {
            this.hostIndex = 0;
            this._doConnect(connectOptions.uris[0]);
          } else {
            this._doConnect(this.uri);
          }
        };
        ClientImpl.prototype.subscribe = function(filter, subscribeOptions) {
          this._trace("Client.subscribe", filter, subscribeOptions);
          if (!this.connected)
            throw new Error(format3(ERROR.INVALID_STATE, ["not connected"]));
          var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);
          wireMessage.topics = filter.constructor === Array ? filter : [filter];
          if (subscribeOptions.qos === void 0)
            subscribeOptions.qos = 0;
          wireMessage.requestedQos = [];
          for (var i2 = 0; i2 < wireMessage.topics.length; i2++)
            wireMessage.requestedQos[i2] = subscribeOptions.qos;
          if (subscribeOptions.onSuccess) {
            wireMessage.onSuccess = function(grantedQos) {
              subscribeOptions.onSuccess({
                invocationContext: subscribeOptions.invocationContext,
                grantedQos
              });
            };
          }
          if (subscribeOptions.onFailure) {
            wireMessage.onFailure = function(errorCode) {
              subscribeOptions.onFailure({
                invocationContext: subscribeOptions.invocationContext,
                errorCode,
                errorMessage: format3(errorCode)
              });
            };
          }
          if (subscribeOptions.timeout) {
            wireMessage.timeOut = new Timeout(
              this,
              subscribeOptions.timeout,
              subscribeOptions.onFailure,
              [
                {
                  invocationContext: subscribeOptions.invocationContext,
                  errorCode: ERROR.SUBSCRIBE_TIMEOUT.code,
                  errorMessage: format3(ERROR.SUBSCRIBE_TIMEOUT)
                }
              ]
            );
          }
          this._requires_ack(wireMessage);
          this._schedule_message(wireMessage);
        };
        ClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {
          this._trace("Client.unsubscribe", filter, unsubscribeOptions);
          if (!this.connected)
            throw new Error(format3(ERROR.INVALID_STATE, ["not connected"]));
          var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);
          wireMessage.topics = filter.constructor === Array ? filter : [filter];
          if (unsubscribeOptions.onSuccess) {
            wireMessage.callback = function() {
              unsubscribeOptions.onSuccess({
                invocationContext: unsubscribeOptions.invocationContext
              });
            };
          }
          if (unsubscribeOptions.timeout) {
            wireMessage.timeOut = new Timeout(
              this,
              unsubscribeOptions.timeout,
              unsubscribeOptions.onFailure,
              [
                {
                  invocationContext: unsubscribeOptions.invocationContext,
                  errorCode: ERROR.UNSUBSCRIBE_TIMEOUT.code,
                  errorMessage: format3(ERROR.UNSUBSCRIBE_TIMEOUT)
                }
              ]
            );
          }
          this._requires_ack(wireMessage);
          this._schedule_message(wireMessage);
        };
        ClientImpl.prototype.send = function(message) {
          this._trace("Client.send", message);
          var wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);
          wireMessage.payloadMessage = message;
          if (this.connected) {
            if (message.qos > 0) {
              this._requires_ack(wireMessage);
            } else if (this.onMessageDelivered) {
              this._notify_msg_sent[wireMessage] = this.onMessageDelivered(
                wireMessage.payloadMessage
              );
            }
            this._schedule_message(wireMessage);
          } else {
            if (this._reconnecting && this.disconnectedPublishing) {
              var messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;
              if (messageCount > this.disconnectedBufferSize) {
                throw new Error(
                  format3(ERROR.BUFFER_FULL, [this.disconnectedBufferSize])
                );
              } else {
                if (message.qos > 0) {
                  this._requires_ack(wireMessage);
                } else {
                  wireMessage.sequence = ++this._sequence;
                  this._buffered_msg_queue.unshift(wireMessage);
                }
              }
            } else {
              throw new Error(format3(ERROR.INVALID_STATE, ["not connected"]));
            }
          }
        };
        ClientImpl.prototype.disconnect = function() {
          this._trace("Client.disconnect");
          if (this._reconnecting) {
            this._reconnectTimeout.cancel();
            this._reconnectTimeout = null;
            this._reconnecting = false;
          }
          if (!this.socket)
            throw new Error(
              format3(ERROR.INVALID_STATE, ["not connecting or connected"])
            );
          var wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);
          this._notify_msg_sent[wireMessage] = scope(this._disconnected, this);
          this._schedule_message(wireMessage);
        };
        ClientImpl.prototype.getTraceLog = function() {
          if (this._traceBuffer !== null) {
            this._trace("Client.getTraceLog", /* @__PURE__ */ new Date());
            this._trace(
              "Client.getTraceLog in flight messages",
              this._sentMessages.length
            );
            for (var key in this._sentMessages)
              this._trace("_sentMessages ", key, this._sentMessages[key]);
            for (var key in this._receivedMessages)
              this._trace("_receivedMessages ", key, this._receivedMessages[key]);
            return this._traceBuffer;
          }
        };
        ClientImpl.prototype.startTrace = function() {
          if (this._traceBuffer === null) {
            this._traceBuffer = [];
          }
          this._trace("Client.startTrace", /* @__PURE__ */ new Date(), version4);
        };
        ClientImpl.prototype.stopTrace = function() {
          delete this._traceBuffer;
        };
        ClientImpl.prototype._doConnect = function(wsurl) {
          if (this.connectOptions.useSSL) {
            var uriParts = wsurl.split(":");
            uriParts[0] = "wss";
            wsurl = uriParts.join(":");
          }
          this._wsuri = wsurl;
          this.connected = false;
          if (this.connectOptions.mqttVersion < 4) {
            this.socket = new WebSocket(wsurl, ["mqttv3.1"]);
          } else {
            this.socket = new WebSocket(wsurl, ["mqtt"]);
          }
          this.socket.binaryType = "arraybuffer";
          this.socket.onopen = scope(this._on_socket_open, this);
          this.socket.onmessage = scope(this._on_socket_message, this);
          this.socket.onerror = scope(this._on_socket_error, this);
          this.socket.onclose = scope(this._on_socket_close, this);
          this.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);
          this.receivePinger = new Pinger(
            this,
            this.connectOptions.keepAliveInterval
          );
          if (this._connectTimeout) {
            this._connectTimeout.cancel();
            this._connectTimeout = null;
          }
          this._connectTimeout = new Timeout(
            this,
            this.connectOptions.timeout,
            this._disconnected,
            [ERROR.CONNECT_TIMEOUT.code, format3(ERROR.CONNECT_TIMEOUT)]
          );
        };
        ClientImpl.prototype._schedule_message = function(message) {
          this._msg_queue.unshift(message);
          if (this.connected) {
            this._process_queue();
          }
        };
        ClientImpl.prototype.store = function(prefix, wireMessage) {
          var storedMessage = {
            type: wireMessage.type,
            messageIdentifier: wireMessage.messageIdentifier,
            version: 1
          };
          switch (wireMessage.type) {
            case MESSAGE_TYPE.PUBLISH:
              if (wireMessage.pubRecReceived)
                storedMessage.pubRecReceived = true;
              storedMessage.payloadMessage = {};
              var hex = "";
              var messageBytes = wireMessage.payloadMessage.payloadBytes;
              for (var i2 = 0; i2 < messageBytes.length; i2++) {
                if (messageBytes[i2] <= 15)
                  hex = hex + "0" + messageBytes[i2].toString(16);
                else
                  hex = hex + messageBytes[i2].toString(16);
              }
              storedMessage.payloadMessage.payloadHex = hex;
              storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;
              storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;
              if (wireMessage.payloadMessage.duplicate)
                storedMessage.payloadMessage.duplicate = true;
              if (wireMessage.payloadMessage.retained)
                storedMessage.payloadMessage.retained = true;
              if (prefix.indexOf("Sent:") === 0) {
                if (wireMessage.sequence === void 0)
                  wireMessage.sequence = ++this._sequence;
                storedMessage.sequence = wireMessage.sequence;
              }
              break;
            default:
              throw Error(
                format3(ERROR.INVALID_STORED_DATA, [
                  prefix + this._localKey + wireMessage.messageIdentifier,
                  storedMessage
                ])
              );
          }
          localStorage2.setItem(
            prefix + this._localKey + wireMessage.messageIdentifier,
            JSON.stringify(storedMessage)
          );
        };
        ClientImpl.prototype.restore = function(key) {
          var value = localStorage2.getItem(key);
          var storedMessage = JSON.parse(value);
          var wireMessage = new WireMessage(storedMessage.type, storedMessage);
          switch (storedMessage.type) {
            case MESSAGE_TYPE.PUBLISH:
              var hex = storedMessage.payloadMessage.payloadHex;
              var buffer = new ArrayBuffer(hex.length / 2);
              var byteStream = new Uint8Array(buffer);
              var i2 = 0;
              while (hex.length >= 2) {
                var x2 = parseInt(hex.substring(0, 2), 16);
                hex = hex.substring(2, hex.length);
                byteStream[i2++] = x2;
              }
              var payloadMessage = new Message(byteStream);
              payloadMessage.qos = storedMessage.payloadMessage.qos;
              payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;
              if (storedMessage.payloadMessage.duplicate)
                payloadMessage.duplicate = true;
              if (storedMessage.payloadMessage.retained)
                payloadMessage.retained = true;
              wireMessage.payloadMessage = payloadMessage;
              break;
            default:
              throw Error(format3(ERROR.INVALID_STORED_DATA, [key, value]));
          }
          if (key.indexOf("Sent:" + this._localKey) === 0) {
            wireMessage.payloadMessage.duplicate = true;
            this._sentMessages[wireMessage.messageIdentifier] = wireMessage;
          } else if (key.indexOf("Received:" + this._localKey) === 0) {
            this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;
          }
        };
        ClientImpl.prototype._process_queue = function() {
          var message = null;
          while (message = this._msg_queue.pop()) {
            this._socket_send(message);
            if (this._notify_msg_sent[message]) {
              this._notify_msg_sent[message]();
              delete this._notify_msg_sent[message];
            }
          }
        };
        ClientImpl.prototype._requires_ack = function(wireMessage) {
          var messageCount = Object.keys(this._sentMessages).length;
          if (messageCount > this.maxMessageIdentifier)
            throw Error("Too many messages:" + messageCount);
          while (this._sentMessages[this._message_identifier] !== void 0) {
            this._message_identifier++;
          }
          wireMessage.messageIdentifier = this._message_identifier;
          this._sentMessages[wireMessage.messageIdentifier] = wireMessage;
          if (wireMessage.type === MESSAGE_TYPE.PUBLISH) {
            this.store("Sent:", wireMessage);
          }
          if (this._message_identifier === this.maxMessageIdentifier) {
            this._message_identifier = 1;
          }
        };
        ClientImpl.prototype._on_socket_open = function() {
          var wireMessage = new WireMessage(
            MESSAGE_TYPE.CONNECT,
            this.connectOptions
          );
          wireMessage.clientId = this.clientId;
          this._socket_send(wireMessage);
        };
        ClientImpl.prototype._on_socket_message = function(event) {
          this._trace("Client._on_socket_message", event.data);
          var messages = this._deframeMessages(event.data);
          for (var i2 = 0; i2 < messages.length; i2 += 1) {
            this._handleMessage(messages[i2]);
          }
        };
        ClientImpl.prototype._deframeMessages = function(data) {
          var byteArray = new Uint8Array(data);
          var messages = [];
          if (this.receiveBuffer) {
            var newData = new Uint8Array(
              this.receiveBuffer.length + byteArray.length
            );
            newData.set(this.receiveBuffer);
            newData.set(byteArray, this.receiveBuffer.length);
            byteArray = newData;
            delete this.receiveBuffer;
          }
          try {
            var offset = 0;
            while (offset < byteArray.length) {
              var result = decodeMessage(byteArray, offset);
              var wireMessage = result[0];
              offset = result[1];
              if (wireMessage !== null) {
                messages.push(wireMessage);
              } else {
                break;
              }
            }
            if (offset < byteArray.length) {
              this.receiveBuffer = byteArray.subarray(offset);
            }
          } catch (error) {
            var errorStack = error.hasOwnProperty("stack") == "undefined" ? error.stack.toString() : "No Error Stack Available";
            this._disconnected(
              ERROR.INTERNAL_ERROR.code,
              format3(ERROR.INTERNAL_ERROR, [error.message, errorStack])
            );
            return;
          }
          return messages;
        };
        ClientImpl.prototype._handleMessage = function(wireMessage) {
          this._trace("Client._handleMessage", wireMessage);
          try {
            switch (wireMessage.type) {
              case MESSAGE_TYPE.CONNACK:
                this._connectTimeout.cancel();
                if (this._reconnectTimeout)
                  this._reconnectTimeout.cancel();
                if (this.connectOptions.cleanSession) {
                  for (var key in this._sentMessages) {
                    var sentMessage = this._sentMessages[key];
                    localStorage2.removeItem(
                      "Sent:" + this._localKey + sentMessage.messageIdentifier
                    );
                  }
                  this._sentMessages = {};
                  for (var key in this._receivedMessages) {
                    var receivedMessage = this._receivedMessages[key];
                    localStorage2.removeItem(
                      "Received:" + this._localKey + receivedMessage.messageIdentifier
                    );
                  }
                  this._receivedMessages = {};
                }
                if (wireMessage.returnCode === 0) {
                  this.connected = true;
                  if (this.connectOptions.uris)
                    this.hostIndex = this.connectOptions.uris.length;
                } else {
                  this._disconnected(
                    ERROR.CONNACK_RETURNCODE.code,
                    format3(ERROR.CONNACK_RETURNCODE, [
                      wireMessage.returnCode,
                      CONNACK_RC[wireMessage.returnCode]
                    ])
                  );
                  break;
                }
                var sequencedMessages = [];
                for (var msgId in this._sentMessages) {
                  if (this._sentMessages.hasOwnProperty(msgId))
                    sequencedMessages.push(this._sentMessages[msgId]);
                }
                if (this._buffered_msg_queue.length > 0) {
                  var msg = null;
                  while (msg = this._buffered_msg_queue.pop()) {
                    sequencedMessages.push(msg);
                    if (this.onMessageDelivered)
                      this._notify_msg_sent[msg] = this.onMessageDelivered(
                        msg.payloadMessage
                      );
                  }
                }
                var sequencedMessages = sequencedMessages.sort(function(a2, b2) {
                  return a2.sequence - b2.sequence;
                });
                for (var i2 = 0, len = sequencedMessages.length; i2 < len; i2++) {
                  var sentMessage = sequencedMessages[i2];
                  if (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {
                    var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {
                      messageIdentifier: sentMessage.messageIdentifier
                    });
                    this._schedule_message(pubRelMessage);
                  } else {
                    this._schedule_message(sentMessage);
                  }
                }
                if (this.connectOptions.onSuccess) {
                  this.connectOptions.onSuccess({
                    invocationContext: this.connectOptions.invocationContext
                  });
                }
                var reconnected = false;
                if (this._reconnecting) {
                  reconnected = true;
                  this._reconnectInterval = 1;
                  this._reconnecting = false;
                }
                this._connected(reconnected, this._wsuri);
                this._process_queue();
                break;
              case MESSAGE_TYPE.PUBLISH:
                this._receivePublish(wireMessage);
                break;
              case MESSAGE_TYPE.PUBACK:
                var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
                if (sentMessage) {
                  delete this._sentMessages[wireMessage.messageIdentifier];
                  localStorage2.removeItem(
                    "Sent:" + this._localKey + wireMessage.messageIdentifier
                  );
                  if (this.onMessageDelivered)
                    this.onMessageDelivered(sentMessage.payloadMessage);
                }
                break;
              case MESSAGE_TYPE.PUBREC:
                var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
                if (sentMessage) {
                  sentMessage.pubRecReceived = true;
                  var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {
                    messageIdentifier: wireMessage.messageIdentifier
                  });
                  this.store("Sent:", sentMessage);
                  this._schedule_message(pubRelMessage);
                }
                break;
              case MESSAGE_TYPE.PUBREL:
                var receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];
                localStorage2.removeItem(
                  "Received:" + this._localKey + wireMessage.messageIdentifier
                );
                if (receivedMessage) {
                  this._receiveMessage(receivedMessage);
                  delete this._receivedMessages[wireMessage.messageIdentifier];
                }
                var pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {
                  messageIdentifier: wireMessage.messageIdentifier
                });
                this._schedule_message(pubCompMessage);
                break;
              case MESSAGE_TYPE.PUBCOMP:
                var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
                delete this._sentMessages[wireMessage.messageIdentifier];
                localStorage2.removeItem(
                  "Sent:" + this._localKey + wireMessage.messageIdentifier
                );
                if (this.onMessageDelivered)
                  this.onMessageDelivered(sentMessage.payloadMessage);
                break;
              case MESSAGE_TYPE.SUBACK:
                var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
                if (sentMessage) {
                  if (sentMessage.timeOut)
                    sentMessage.timeOut.cancel();
                  if (wireMessage.returnCode[0] === 128) {
                    if (sentMessage.onFailure) {
                      sentMessage.onFailure(wireMessage.returnCode);
                    }
                  } else if (sentMessage.onSuccess) {
                    sentMessage.onSuccess(wireMessage.returnCode);
                  }
                  delete this._sentMessages[wireMessage.messageIdentifier];
                }
                break;
              case MESSAGE_TYPE.UNSUBACK:
                var sentMessage = this._sentMessages[wireMessage.messageIdentifier];
                if (sentMessage) {
                  if (sentMessage.timeOut)
                    sentMessage.timeOut.cancel();
                  if (sentMessage.callback) {
                    sentMessage.callback();
                  }
                  delete this._sentMessages[wireMessage.messageIdentifier];
                }
                break;
              case MESSAGE_TYPE.PINGRESP:
                this.sendPinger.reset();
                break;
              case MESSAGE_TYPE.DISCONNECT:
                this._disconnected(
                  ERROR.INVALID_MQTT_MESSAGE_TYPE.code,
                  format3(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type])
                );
                break;
              default:
                this._disconnected(
                  ERROR.INVALID_MQTT_MESSAGE_TYPE.code,
                  format3(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type])
                );
            }
          } catch (error) {
            var errorStack = error.hasOwnProperty("stack") == "undefined" ? error.stack.toString() : "No Error Stack Available";
            this._disconnected(
              ERROR.INTERNAL_ERROR.code,
              format3(ERROR.INTERNAL_ERROR, [error.message, errorStack])
            );
            return;
          }
        };
        ClientImpl.prototype._on_socket_error = function(error) {
          if (!this._reconnecting) {
            this._disconnected(
              ERROR.SOCKET_ERROR.code,
              format3(ERROR.SOCKET_ERROR, [error.data])
            );
          }
        };
        ClientImpl.prototype._on_socket_close = function() {
          if (!this._reconnecting) {
            this._disconnected(ERROR.SOCKET_CLOSE.code, format3(ERROR.SOCKET_CLOSE));
          }
        };
        ClientImpl.prototype._socket_send = function(wireMessage) {
          if (wireMessage.type == 1) {
            var wireMessageMasked = this._traceMask(wireMessage, "password");
            this._trace("Client._socket_send", wireMessageMasked);
          } else
            this._trace("Client._socket_send", wireMessage);
          this.socket.send(wireMessage.encode());
          this.sendPinger.reset();
        };
        ClientImpl.prototype._receivePublish = function(wireMessage) {
          switch (wireMessage.payloadMessage.qos) {
            case "undefined":
            case 0:
              this._receiveMessage(wireMessage);
              break;
            case 1:
              var pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {
                messageIdentifier: wireMessage.messageIdentifier
              });
              this._schedule_message(pubAckMessage);
              this._receiveMessage(wireMessage);
              break;
            case 2:
              this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;
              this.store("Received:", wireMessage);
              var pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {
                messageIdentifier: wireMessage.messageIdentifier
              });
              this._schedule_message(pubRecMessage);
              break;
            default:
              throw Error("Invaild qos=" + wireMessage.payloadMessage.qos);
          }
        };
        ClientImpl.prototype._receiveMessage = function(wireMessage) {
          if (this.onMessageArrived) {
            this.onMessageArrived(wireMessage.payloadMessage);
          }
        };
        ClientImpl.prototype._connected = function(reconnect, uri) {
          if (this.onConnected)
            this.onConnected(reconnect, uri);
        };
        ClientImpl.prototype._reconnect = function() {
          this._trace("Client._reconnect");
          if (!this.connected) {
            this._reconnecting = true;
            this.sendPinger.cancel();
            this.receivePinger.cancel();
            if (this._reconnectInterval < 128)
              this._reconnectInterval = this._reconnectInterval * 2;
            if (this.connectOptions.uris) {
              this.hostIndex = 0;
              this._doConnect(this.connectOptions.uris[0]);
            } else {
              this._doConnect(this.uri);
            }
          }
        };
        ClientImpl.prototype._disconnected = function(errorCode, errorText) {
          this._trace("Client._disconnected", errorCode, errorText);
          if (errorCode !== void 0 && this._reconnecting) {
            this._reconnectTimeout = new Timeout(
              this,
              this._reconnectInterval,
              this._reconnect
            );
            return;
          }
          this.sendPinger.cancel();
          this.receivePinger.cancel();
          if (this._connectTimeout) {
            this._connectTimeout.cancel();
            this._connectTimeout = null;
          }
          this._msg_queue = [];
          this._buffered_msg_queue = [];
          this._notify_msg_sent = {};
          if (this.socket) {
            this.socket.onopen = null;
            this.socket.onmessage = null;
            this.socket.onerror = null;
            this.socket.onclose = null;
            if (this.socket.readyState === 1)
              this.socket.close();
            delete this.socket;
          }
          if (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length - 1) {
            this.hostIndex++;
            this._doConnect(this.connectOptions.uris[this.hostIndex]);
          } else {
            if (errorCode === void 0) {
              errorCode = ERROR.OK.code;
              errorText = format3(ERROR.OK);
            }
            if (this.connected) {
              this.connected = false;
              if (this.onConnectionLost) {
                this.onConnectionLost({
                  errorCode,
                  errorMessage: errorText,
                  reconnect: this.connectOptions.reconnect,
                  uri: this._wsuri
                });
              }
              if (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {
                this._reconnectInterval = 1;
                this._reconnect();
                return;
              }
            } else {
              if (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {
                this._trace("Failed to connect V4, dropping back to V3");
                this.connectOptions.mqttVersion = 3;
                if (this.connectOptions.uris) {
                  this.hostIndex = 0;
                  this._doConnect(this.connectOptions.uris[0]);
                } else {
                  this._doConnect(this.uri);
                }
              } else if (this.connectOptions.onFailure) {
                this.connectOptions.onFailure({
                  invocationContext: this.connectOptions.invocationContext,
                  errorCode,
                  errorMessage: errorText
                });
              }
            }
          }
        };
        ClientImpl.prototype._trace = function() {
          if (this.traceFunction) {
            var args = Array.prototype.slice.call(arguments);
            for (var i2 in args) {
              if (typeof args[i2] !== "undefined")
                args.splice(i2, 1, JSON.stringify(args[i2]));
            }
            var record = args.join("");
            this.traceFunction({ severity: "Debug", message: record });
          }
          if (this._traceBuffer !== null) {
            for (var i2 = 0, max = arguments.length; i2 < max; i2++) {
              if (this._traceBuffer.length == this._MAX_TRACE_ENTRIES) {
                this._traceBuffer.shift();
              }
              if (i2 === 0)
                this._traceBuffer.push(arguments[i2]);
              else if (typeof arguments[i2] === "undefined")
                this._traceBuffer.push(arguments[i2]);
              else
                this._traceBuffer.push("  " + JSON.stringify(arguments[i2]));
            }
          }
        };
        ClientImpl.prototype._traceMask = function(traceObject, masked) {
          var traceObjectMasked = {};
          for (var attr in traceObject) {
            if (traceObject.hasOwnProperty(attr)) {
              if (attr == masked)
                traceObjectMasked[attr] = "******";
              else
                traceObjectMasked[attr] = traceObject[attr];
            }
          }
          return traceObjectMasked;
        };
        var Client4 = function(host, port, path, clientId) {
          var uri;
          if (typeof host !== "string")
            throw new Error(format3(ERROR.INVALID_TYPE, [typeof host, "host"]));
          if (arguments.length == 2) {
            clientId = port;
            uri = host;
            var match = uri.match(
              /^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/
            );
            if (match) {
              host = match[4] || match[2];
              port = parseInt(match[7]);
              path = match[8];
            } else {
              throw new Error(format3(ERROR.INVALID_ARGUMENT, [host, "host"]));
            }
          } else {
            if (arguments.length == 3) {
              clientId = path;
              path = "/mqtt";
            }
            if (typeof port !== "number" || port < 0)
              throw new Error(format3(ERROR.INVALID_TYPE, [typeof port, "port"]));
            if (typeof path !== "string")
              throw new Error(format3(ERROR.INVALID_TYPE, [typeof path, "path"]));
            var ipv6AddSBracket = host.indexOf(":") !== -1 && host.slice(0, 1) !== "[" && host.slice(-1) !== "]";
            uri = "ws://" + (ipv6AddSBracket ? "[" + host + "]" : host) + ":" + port + path;
          }
          var clientIdLength = 0;
          for (var i2 = 0; i2 < clientId.length; i2++) {
            var charCode = clientId.charCodeAt(i2);
            if (55296 <= charCode && charCode <= 56319) {
              i2++;
            }
            clientIdLength++;
          }
          if (typeof clientId !== "string" || clientIdLength > 65535)
            throw new Error(format3(ERROR.INVALID_ARGUMENT, [clientId, "clientId"]));
          var client = new ClientImpl(uri, host, port, path, clientId);
          Object.defineProperties(this, {
            host: {
              get: function() {
                return host;
              },
              set: function() {
                throw new Error(format3(ERROR.UNSUPPORTED_OPERATION));
              }
            },
            port: {
              get: function() {
                return port;
              },
              set: function() {
                throw new Error(format3(ERROR.UNSUPPORTED_OPERATION));
              }
            },
            path: {
              get: function() {
                return path;
              },
              set: function() {
                throw new Error(format3(ERROR.UNSUPPORTED_OPERATION));
              }
            },
            uri: {
              get: function() {
                return uri;
              },
              set: function() {
                throw new Error(format3(ERROR.UNSUPPORTED_OPERATION));
              }
            },
            clientId: {
              get: function() {
                return client.clientId;
              },
              set: function() {
                throw new Error(format3(ERROR.UNSUPPORTED_OPERATION));
              }
            },
            onConnected: {
              get: function() {
                return client.onConnected;
              },
              set: function(newOnConnected) {
                if (typeof newOnConnected === "function")
                  client.onConnected = newOnConnected;
                else
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [
                      typeof newOnConnected,
                      "onConnected"
                    ])
                  );
              }
            },
            disconnectedPublishing: {
              get: function() {
                return client.disconnectedPublishing;
              },
              set: function(newDisconnectedPublishing) {
                client.disconnectedPublishing = newDisconnectedPublishing;
              }
            },
            disconnectedBufferSize: {
              get: function() {
                return client.disconnectedBufferSize;
              },
              set: function(newDisconnectedBufferSize) {
                client.disconnectedBufferSize = newDisconnectedBufferSize;
              }
            },
            onConnectionLost: {
              get: function() {
                return client.onConnectionLost;
              },
              set: function(newOnConnectionLost) {
                if (typeof newOnConnectionLost === "function")
                  client.onConnectionLost = newOnConnectionLost;
                else
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [
                      typeof newOnConnectionLost,
                      "onConnectionLost"
                    ])
                  );
              }
            },
            onMessageDelivered: {
              get: function() {
                return client.onMessageDelivered;
              },
              set: function(newOnMessageDelivered) {
                if (typeof newOnMessageDelivered === "function")
                  client.onMessageDelivered = newOnMessageDelivered;
                else
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [
                      typeof newOnMessageDelivered,
                      "onMessageDelivered"
                    ])
                  );
              }
            },
            onMessageArrived: {
              get: function() {
                return client.onMessageArrived;
              },
              set: function(newOnMessageArrived) {
                if (typeof newOnMessageArrived === "function")
                  client.onMessageArrived = newOnMessageArrived;
                else
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [
                      typeof newOnMessageArrived,
                      "onMessageArrived"
                    ])
                  );
              }
            },
            trace: {
              get: function() {
                return client.traceFunction;
              },
              set: function(trace) {
                if (typeof trace === "function") {
                  client.traceFunction = trace;
                } else {
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [typeof trace, "onTrace"])
                  );
                }
              }
            }
          });
          this.connect = function(connectOptions) {
            connectOptions = connectOptions || {};
            validate2(connectOptions, {
              timeout: "number",
              userName: "string",
              password: "string",
              willMessage: "object",
              keepAliveInterval: "number",
              cleanSession: "boolean",
              useSSL: "boolean",
              invocationContext: "object",
              onSuccess: "function",
              onFailure: "function",
              hosts: "object",
              ports: "object",
              reconnect: "boolean",
              mqttVersion: "number",
              mqttVersionExplicit: "boolean",
              uris: "object"
            });
            if (connectOptions.keepAliveInterval === void 0)
              connectOptions.keepAliveInterval = 60;
            if (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {
              throw new Error(
                format3(ERROR.INVALID_ARGUMENT, [
                  connectOptions.mqttVersion,
                  "connectOptions.mqttVersion"
                ])
              );
            }
            if (connectOptions.mqttVersion === void 0) {
              connectOptions.mqttVersionExplicit = false;
              connectOptions.mqttVersion = 4;
            } else {
              connectOptions.mqttVersionExplicit = true;
            }
            if (connectOptions.password !== void 0 && connectOptions.userName === void 0)
              throw new Error(
                format3(ERROR.INVALID_ARGUMENT, [
                  connectOptions.password,
                  "connectOptions.password"
                ])
              );
            if (connectOptions.willMessage) {
              if (!(connectOptions.willMessage instanceof Message))
                throw new Error(
                  format3(ERROR.INVALID_TYPE, [
                    connectOptions.willMessage,
                    "connectOptions.willMessage"
                  ])
                );
              connectOptions.willMessage.stringPayload = null;
              if (typeof connectOptions.willMessage.destinationName === "undefined")
                throw new Error(
                  format3(ERROR.INVALID_TYPE, [
                    typeof connectOptions.willMessage.destinationName,
                    "connectOptions.willMessage.destinationName"
                  ])
                );
            }
            if (typeof connectOptions.cleanSession === "undefined")
              connectOptions.cleanSession = true;
            if (connectOptions.hosts) {
              if (!(connectOptions.hosts instanceof Array))
                throw new Error(
                  format3(ERROR.INVALID_ARGUMENT, [
                    connectOptions.hosts,
                    "connectOptions.hosts"
                  ])
                );
              if (connectOptions.hosts.length < 1)
                throw new Error(
                  format3(ERROR.INVALID_ARGUMENT, [
                    connectOptions.hosts,
                    "connectOptions.hosts"
                  ])
                );
              var usingURIs = false;
              for (var i3 = 0; i3 < connectOptions.hosts.length; i3++) {
                if (typeof connectOptions.hosts[i3] !== "string")
                  throw new Error(
                    format3(ERROR.INVALID_TYPE, [
                      typeof connectOptions.hosts[i3],
                      "connectOptions.hosts[" + i3 + "]"
                    ])
                  );
                if (/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(
                  connectOptions.hosts[i3]
                )) {
                  if (i3 === 0) {
                    usingURIs = true;
                  } else if (!usingURIs) {
                    throw new Error(
                      format3(ERROR.INVALID_ARGUMENT, [
                        connectOptions.hosts[i3],
                        "connectOptions.hosts[" + i3 + "]"
                      ])
                    );
                  }
                } else if (usingURIs) {
                  throw new Error(
                    format3(ERROR.INVALID_ARGUMENT, [
                      connectOptions.hosts[i3],
                      "connectOptions.hosts[" + i3 + "]"
                    ])
                  );
                }
              }
              if (!usingURIs) {
                if (!connectOptions.ports)
                  throw new Error(
                    format3(ERROR.INVALID_ARGUMENT, [
                      connectOptions.ports,
                      "connectOptions.ports"
                    ])
                  );
                if (!(connectOptions.ports instanceof Array))
                  throw new Error(
                    format3(ERROR.INVALID_ARGUMENT, [
                      connectOptions.ports,
                      "connectOptions.ports"
                    ])
                  );
                if (connectOptions.hosts.length !== connectOptions.ports.length)
                  throw new Error(
                    format3(ERROR.INVALID_ARGUMENT, [
                      connectOptions.ports,
                      "connectOptions.ports"
                    ])
                  );
                connectOptions.uris = [];
                for (var i3 = 0; i3 < connectOptions.hosts.length; i3++) {
                  if (typeof connectOptions.ports[i3] !== "number" || connectOptions.ports[i3] < 0)
                    throw new Error(
                      format3(ERROR.INVALID_TYPE, [
                        typeof connectOptions.ports[i3],
                        "connectOptions.ports[" + i3 + "]"
                      ])
                    );
                  var host2 = connectOptions.hosts[i3];
                  var port2 = connectOptions.ports[i3];
                  var ipv6 = host2.indexOf(":") !== -1;
                  uri = "ws://" + (ipv6 ? "[" + host2 + "]" : host2) + ":" + port2 + path;
                  connectOptions.uris.push(uri);
                }
              } else {
                connectOptions.uris = connectOptions.hosts;
              }
            }
            client.connect(connectOptions);
          };
          this.subscribe = function(filter, subscribeOptions) {
            if (typeof filter !== "string" && filter.constructor !== Array)
              throw new Error("Invalid argument:" + filter);
            subscribeOptions = subscribeOptions || {};
            validate2(subscribeOptions, {
              qos: "number",
              invocationContext: "object",
              onSuccess: "function",
              onFailure: "function",
              timeout: "number"
            });
            if (subscribeOptions.timeout && !subscribeOptions.onFailure)
              throw new Error(
                "subscribeOptions.timeout specified with no onFailure callback."
              );
            if (typeof subscribeOptions.qos !== "undefined" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2))
              throw new Error(
                format3(ERROR.INVALID_ARGUMENT, [
                  subscribeOptions.qos,
                  "subscribeOptions.qos"
                ])
              );
            client.subscribe(filter, subscribeOptions);
          };
          this.unsubscribe = function(filter, unsubscribeOptions) {
            if (typeof filter !== "string" && filter.constructor !== Array)
              throw new Error("Invalid argument:" + filter);
            unsubscribeOptions = unsubscribeOptions || {};
            validate2(unsubscribeOptions, {
              invocationContext: "object",
              onSuccess: "function",
              onFailure: "function",
              timeout: "number"
            });
            if (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)
              throw new Error(
                "unsubscribeOptions.timeout specified with no onFailure callback."
              );
            client.unsubscribe(filter, unsubscribeOptions);
          };
          this.send = function(topic, payload, qos, retained) {
            var message;
            if (arguments.length === 0) {
              throw new Error("Invalid argument.length");
            } else if (arguments.length == 1) {
              if (!(topic instanceof Message) && typeof topic !== "string")
                throw new Error("Invalid argument:" + typeof topic);
              message = topic;
              if (typeof message.destinationName === "undefined")
                throw new Error(
                  format3(ERROR.INVALID_ARGUMENT, [
                    message.destinationName,
                    "Message.destinationName"
                  ])
                );
              client.send(message);
            } else {
              message = new Message(payload);
              message.destinationName = topic;
              if (arguments.length >= 3)
                message.qos = qos;
              if (arguments.length >= 4)
                message.retained = retained;
              client.send(message);
            }
          };
          this.publish = function(topic, payload, qos, retained) {
            var message;
            if (arguments.length === 0) {
              throw new Error("Invalid argument.length");
            } else if (arguments.length == 1) {
              if (!(topic instanceof Message) && typeof topic !== "string")
                throw new Error("Invalid argument:" + typeof topic);
              message = topic;
              if (typeof message.destinationName === "undefined")
                throw new Error(
                  format3(ERROR.INVALID_ARGUMENT, [
                    message.destinationName,
                    "Message.destinationName"
                  ])
                );
              client.send(message);
            } else {
              message = new Message(payload);
              message.destinationName = topic;
              if (arguments.length >= 3)
                message.qos = qos;
              if (arguments.length >= 4)
                message.retained = retained;
              client.send(message);
            }
          };
          this.disconnect = function() {
            client.disconnect();
          };
          this.getTraceLog = function() {
            return client.getTraceLog();
          };
          this.startTrace = function() {
            client.startTrace();
          };
          this.stopTrace = function() {
            client.stopTrace();
          };
          this.isConnected = function() {
            return client.connected;
          };
        };
        var Message = function(newPayload) {
          var payload;
          if (typeof newPayload === "string" || newPayload instanceof ArrayBuffer || ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView)) {
            payload = newPayload;
          } else {
            throw format3(ERROR.INVALID_ARGUMENT, [newPayload, "newPayload"]);
          }
          var destinationName;
          var qos = 0;
          var retained = false;
          var duplicate = false;
          Object.defineProperties(this, {
            payloadString: {
              enumerable: true,
              get: function() {
                if (typeof payload === "string")
                  return payload;
                else
                  return parseUTF8(payload, 0, payload.length);
              }
            },
            payloadBytes: {
              enumerable: true,
              get: function() {
                if (typeof payload === "string") {
                  var buffer = new ArrayBuffer(UTF8Length(payload));
                  var byteStream = new Uint8Array(buffer);
                  stringToUTF8(payload, byteStream, 0);
                  return byteStream;
                } else {
                  return payload;
                }
              }
            },
            destinationName: {
              enumerable: true,
              get: function() {
                return destinationName;
              },
              set: function(newDestinationName) {
                if (typeof newDestinationName === "string")
                  destinationName = newDestinationName;
                else
                  throw new Error(
                    format3(ERROR.INVALID_ARGUMENT, [
                      newDestinationName,
                      "newDestinationName"
                    ])
                  );
              }
            },
            qos: {
              enumerable: true,
              get: function() {
                return qos;
              },
              set: function(newQos) {
                if (newQos === 0 || newQos === 1 || newQos === 2)
                  qos = newQos;
                else
                  throw new Error("Invalid argument:" + newQos);
              }
            },
            retained: {
              enumerable: true,
              get: function() {
                return retained;
              },
              set: function(newRetained) {
                if (typeof newRetained === "boolean")
                  retained = newRetained;
                else
                  throw new Error(
                    format3(ERROR.INVALID_ARGUMENT, [newRetained, "newRetained"])
                  );
              }
            },
            topic: {
              enumerable: true,
              get: function() {
                return destinationName;
              },
              set: function(newTopic) {
                destinationName = newTopic;
              }
            },
            duplicate: {
              enumerable: true,
              get: function() {
                return duplicate;
              },
              set: function(newDuplicate) {
                duplicate = newDuplicate;
              }
            }
          });
        };
        return {
          Client: Client4,
          Message
        };
      }(
        typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}
      );
      return PahoMQTT;
    });
  }
});

// node_modules/ulid/stubs/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/ulid/stubs/crypto.js"() {
  }
});

// node_modules/zen-push/node_modules/zen-observable/zen-observable.js
var require_zen_observable2 = __commonJS({
  "node_modules/zen-push/node_modules/zen-observable/zen-observable.js"(exports, module) {
    "use strict";
    (function(fn2, name) {
      if (typeof exports !== "undefined") {
        fn2(exports, module);
      } else if (typeof self !== "undefined") {
        var e = name === "*" ? self : name ? self[name] = {} : {};
        fn2(e, { exports: e });
      }
    })(function(exports2, module2) {
      function hasSymbol2(name) {
        return typeof Symbol === "function" && Boolean(Symbol[name]);
      }
      function getSymbol(name) {
        return hasSymbol2(name) ? Symbol[name] : "@@" + name;
      }
      if (typeof Symbol === "function" && !Symbol.observable) {
        Symbol.observable = Symbol("observable");
      }
      function hostReportError(e) {
        setTimeout(function() {
          throw e;
        });
      }
      function getMethod2(obj, key) {
        var value = obj[key];
        if (value == null)
          return void 0;
        if (typeof value !== "function")
          throw new TypeError(value + " is not a function");
        return value;
      }
      function getSpecies(obj) {
        var ctor = obj.constructor;
        if (ctor !== void 0) {
          ctor = ctor[getSymbol("species")];
          if (ctor === null) {
            ctor = void 0;
          }
        }
        return ctor !== void 0 ? ctor : Observable2;
      }
      function addMethods(target, methods) {
        Object.keys(methods).forEach(function(k2) {
          var desc = Object.getOwnPropertyDescriptor(methods, k2);
          desc.enumerable = false;
          Object.defineProperty(target, k2, desc);
        });
      }
      function cleanupSubscription(subscription) {
        var cleanup = subscription._cleanup;
        if (!cleanup)
          return;
        subscription._cleanup = void 0;
        try {
          cleanup();
        } catch (e) {
          hostReportError(e);
        }
      }
      function subscriptionClosed(subscription) {
        return subscription._observer === void 0;
      }
      function closeSubscription(subscription) {
        if (subscriptionClosed(subscription))
          return;
        subscription._observer = void 0;
        cleanupSubscription(subscription);
      }
      function cleanupFromSubscription(subscription) {
        return function() {
          subscription.unsubscribe();
        };
      }
      function Subscription(observer, subscriber) {
        if (Object(observer) !== observer)
          throw new TypeError("Observer must be an object");
        this._cleanup = void 0;
        this._observer = observer;
        try {
          var start$0 = getMethod2(observer, "start");
          if (start$0)
            start$0.call(observer, this);
        } catch (e) {
          hostReportError(e);
        }
        if (subscriptionClosed(this))
          return;
        observer = new SubscriptionObserver(this);
        try {
          var cleanup$0 = subscriber.call(void 0, observer);
          if (cleanup$0 != null) {
            if (typeof cleanup$0.unsubscribe === "function")
              cleanup$0 = cleanupFromSubscription(cleanup$0);
            else if (typeof cleanup$0 !== "function")
              throw new TypeError(cleanup$0 + " is not a function");
            this._cleanup = cleanup$0;
          }
        } catch (e) {
          observer.error(e);
          return;
        }
        if (subscriptionClosed(this))
          cleanupSubscription(this);
      }
      addMethods(Subscription.prototype = {}, {
        get closed() {
          return subscriptionClosed(this);
        },
        unsubscribe: function() {
          closeSubscription(this);
        }
      });
      function SubscriptionObserver(subscription) {
        this._subscription = subscription;
      }
      addMethods(SubscriptionObserver.prototype = {}, {
        get closed() {
          return subscriptionClosed(this._subscription);
        },
        next: function(value) {
          var subscription = this._subscription;
          if (subscriptionClosed(subscription))
            return;
          var observer = subscription._observer;
          try {
            var m$0 = getMethod2(observer, "next");
            if (m$0)
              m$0.call(observer, value);
          } catch (e) {
            hostReportError(e);
          }
        },
        error: function(value) {
          var subscription = this._subscription;
          if (subscriptionClosed(subscription)) {
            hostReportError(value);
            return;
          }
          var observer = subscription._observer;
          subscription._observer = void 0;
          try {
            var m$1 = getMethod2(observer, "error");
            if (m$1)
              m$1.call(observer, value);
            else
              throw value;
          } catch (e) {
            hostReportError(e);
          }
          cleanupSubscription(subscription);
        },
        complete: function() {
          var subscription = this._subscription;
          if (subscriptionClosed(subscription))
            return;
          var observer = subscription._observer;
          subscription._observer = void 0;
          try {
            var m$2 = getMethod2(observer, "complete");
            if (m$2)
              m$2.call(observer);
          } catch (e) {
            hostReportError(e);
          }
          cleanupSubscription(subscription);
        }
      });
      function Observable2(subscriber) {
        if (!(this instanceof Observable2))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      addMethods(Observable2.prototype, {
        subscribe: function(observer) {
          for (var args = [], __$0 = 1; __$0 < arguments.length; ++__$0)
            args.push(arguments[__$0]);
          if (typeof observer === "function") {
            observer = {
              next: observer,
              error: args[0],
              complete: args[1]
            };
          } else if (typeof observer !== "object" || observer === null) {
            observer = {};
          }
          return new Subscription(observer, this._subscriber);
        },
        forEach: function(fn2) {
          var __this = this;
          return new Promise(function(resolve4, reject) {
            if (typeof fn2 !== "function")
              return Promise.reject(new TypeError(fn2 + " is not a function"));
            __this.subscribe({
              _subscription: null,
              start: function(subscription) {
                if (Object(subscription) !== subscription)
                  throw new TypeError(subscription + " is not an object");
                this._subscription = subscription;
              },
              next: function(value) {
                var subscription = this._subscription;
                if (subscription.closed)
                  return;
                try {
                  fn2(value);
                } catch (err) {
                  reject(err);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve4
            });
          });
        },
        map: function(fn2) {
          var __this = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return __this.subscribe({
              next: function(value) {
                if (observer.closed)
                  return;
                try {
                  value = fn2(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        },
        filter: function(fn2) {
          var __this = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return __this.subscribe({
              next: function(value) {
                if (observer.closed)
                  return;
                try {
                  if (!fn2(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        },
        reduce: function(fn2) {
          var __this = this;
          if (typeof fn2 !== "function")
            throw new TypeError(fn2 + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return __this.subscribe({
              next: function(value) {
                if (observer.closed)
                  return;
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn2(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed) {
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                }
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      });
      Object.defineProperty(Observable2.prototype, getSymbol("observable"), {
        value: function() {
          return this;
        },
        writable: true,
        configurable: true
      });
      addMethods(Observable2, {
        from: function(x2) {
          var C = typeof this === "function" ? this : Observable2;
          if (x2 == null)
            throw new TypeError(x2 + " is not an object");
          var method = getMethod2(x2, getSymbol("observable"));
          if (method) {
            var observable$0 = method.call(x2);
            if (Object(observable$0) !== observable$0)
              throw new TypeError(observable$0 + " is not an object");
            if (observable$0.constructor === C)
              return observable$0;
            return new C(function(observer) {
              return observable$0.subscribe(observer);
            });
          }
          if (hasSymbol2("iterator") && (method = getMethod2(x2, getSymbol("iterator")))) {
            return new C(function(observer) {
              for (var __$0 = method.call(x2)[Symbol.iterator](), __$1; __$1 = __$0.next(), !__$1.done; ) {
                var item$0 = __$1.value;
                observer.next(item$0);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          }
          if (Array.isArray(x2)) {
            return new C(function(observer) {
              for (var i$0 = 0; i$0 < x2.length; ++i$0) {
                observer.next(x2[i$0]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          }
          throw new TypeError(x2 + " is not observable");
        },
        of: function() {
          for (var items = [], __$0 = 0; __$0 < arguments.length; ++__$0)
            items.push(arguments[__$0]);
          var C = typeof this === "function" ? this : Observable2;
          return new C(function(observer) {
            for (var i$1 = 0; i$1 < items.length; ++i$1) {
              observer.next(items[i$1]);
              if (observer.closed)
                return;
            }
            observer.complete();
          });
        }
      });
      Object.defineProperty(Observable2, getSymbol("species"), {
        get: function() {
          return this;
        },
        configurable: true
      });
      Object.defineProperty(Observable2, "extensions", {
        value: {
          observableSymbol: getSymbol("observable"),
          setHostReportError: function(fn2) {
            hostReportError = fn2;
          }
        }
      });
      exports2.Observable = Observable2;
    }, "*");
  }
});

// node_modules/zen-push/node_modules/zen-observable/index.js
var require_zen_observable3 = __commonJS({
  "node_modules/zen-push/node_modules/zen-observable/index.js"(exports, module) {
    module.exports = require_zen_observable2().Observable;
  }
});

// node_modules/zen-push/index.js
var require_zen_push = __commonJS({
  "node_modules/zen-push/index.js"(exports, module) {
    "use strict";
    var Observable2 = require_zen_observable3();
    function addMethods(target, methods) {
      Object.keys(methods).forEach(function(k2) {
        var desc = Object.getOwnPropertyDescriptor(methods, k2);
        desc.enumerable = false;
        Object.defineProperty(target, k2, desc);
      });
    }
    function send(p2, message, value) {
      if (p2._observer) {
        sendMessage(p2._observer, message, value);
      } else if (p2._observers) {
        var list = [];
        p2._observers.forEach(function(to) {
          list.push(to);
        });
        list.forEach(function(to) {
          sendMessage(to, message, value);
        });
      }
    }
    function sendMessage(observer, message, value) {
      if (observer.closed) {
        return;
      }
      switch (message) {
        case "next":
          return observer.next(value);
        case "error":
          return observer.error(value);
        case "complete":
          return observer.complete(value);
      }
    }
    function hasObserver(p2) {
      return p2._observer || p2._observers && p2._observers.size > 0;
    }
    function addObserver(p2, observer) {
      if (p2._observers) {
        p2._observers.add(observer);
      } else if (!p2._observer) {
        p2._observer = observer;
      } else {
        p2._observers = /* @__PURE__ */ new Set();
        p2._observers.add(p2._observer);
        p2._observers.add(observer);
        p2._observer = null;
      }
    }
    function deleteObserver(p2, observer) {
      if (p2._observers) {
        p2._observers.delete(observer);
      } else if (p2._observer === observer) {
        p2._observer = null;
      }
    }
    function notifyStart(p2, opts) {
      !hasObserver(p2) && opts && opts.start && opts.start();
    }
    function notifyPause(p2, opts) {
      !hasObserver(p2) && opts && opts.pause && opts.pause();
    }
    function PushStream2(opts) {
      var p2 = this;
      this._observer = null;
      this._observers = null;
      this._observable = new Observable2(function(observer) {
        notifyStart(p2, opts);
        addObserver(p2, observer);
        return function() {
          deleteObserver(p2, observer);
          notifyPause(p2, opts);
        };
      });
    }
    addMethods(PushStream2.prototype, {
      get observable() {
        return this._observable;
      },
      get observed() {
        return hasObserver(this);
      },
      next: function(x2) {
        send(this, "next", x2);
      },
      error: function(e) {
        send(this, "error", e);
      },
      complete: function(x2) {
        send(this, "complete", x2);
      }
    });
    module.exports = PushStream2;
  }
});

// node_modules/tslib/tslib.es6.js
var extendStatics = function(d2, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p2))
        d3[p2] = b3[p2];
  };
  return extendStatics(d2, b2);
};
function __extends(d2, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (g2 && (g2 = 0, op[0] && (_2 = 0)), _2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read(arguments[i2]));
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v2) {
  return this instanceof __await ? (this.v = v2, this) : new __await(v2);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
  return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function verb(n2) {
    if (g2[n2])
      i2[n2] = function(v2) {
        return new Promise(function(a2, b2) {
          q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
        });
      };
  }
  function resume(n2, v2) {
    try {
      step(g2[n2](v2));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r2) {
    r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v2) {
    if (f2(v2), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncValues(o2) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o2[Symbol.asyncIterator], i2;
  return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n2) {
    i2[n2] = o2[n2] && function(v2) {
      return new Promise(function(resolve4, reject) {
        v2 = o2[n2](v2), settle(resolve4, reject, v2.done, v2.value);
      });
    };
  }
  function settle(resolve4, reject, d2, v2) {
    Promise.resolve(v2).then(function(v3) {
      resolve4({ value: v3, done: d2 });
    }, reject);
  }
}

// node_modules/@aws-amplify/api/node_modules/tslib/tslib.es6.js
var __assign2 = function() {
  __assign2 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign2.apply(this, arguments);
};
function __awaiter2(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-amplify/auth/node_modules/tslib/tslib.es6.js
var extendStatics2 = function(d2, b2) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (b3.hasOwnProperty(p2))
        d3[p2] = b3[p2];
  };
  return extendStatics2(d2, b2);
};
function __extends2(d2, b2) {
  extendStatics2(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign3 = function() {
  __assign3 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign3.apply(this, arguments);
};
function __awaiter3(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read2(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-amplify/auth/lib-esm/types/Auth.js
var CognitoHostedUIIdentityProvider;
(function(CognitoHostedUIIdentityProvider2) {
  CognitoHostedUIIdentityProvider2["Cognito"] = "COGNITO";
  CognitoHostedUIIdentityProvider2["Google"] = "Google";
  CognitoHostedUIIdentityProvider2["Facebook"] = "Facebook";
  CognitoHostedUIIdentityProvider2["Amazon"] = "LoginWithAmazon";
  CognitoHostedUIIdentityProvider2["Apple"] = "SignInWithApple";
})(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
function isFederatedSignInOptions(obj) {
  var keys = ["provider"];
  return obj && !!keys.find(function(k2) {
    return obj.hasOwnProperty(k2);
  });
}
function isFederatedSignInOptionsCustom(obj) {
  var keys = ["customProvider"];
  return obj && !!keys.find(function(k2) {
    return obj.hasOwnProperty(k2);
  });
}
function hasCustomState(obj) {
  var keys = ["customState"];
  return obj && !!keys.find(function(k2) {
    return obj.hasOwnProperty(k2);
  });
}
function isCognitoHostedOpts(oauth) {
  return oauth.redirectSignIn !== void 0;
}
var AuthErrorTypes;
(function(AuthErrorTypes2) {
  AuthErrorTypes2["NoConfig"] = "noConfig";
  AuthErrorTypes2["MissingAuthConfig"] = "missingAuthConfig";
  AuthErrorTypes2["EmptyUsername"] = "emptyUsername";
  AuthErrorTypes2["InvalidUsername"] = "invalidUsername";
  AuthErrorTypes2["EmptyPassword"] = "emptyPassword";
  AuthErrorTypes2["EmptyCode"] = "emptyCode";
  AuthErrorTypes2["SignUpError"] = "signUpError";
  AuthErrorTypes2["NoMFA"] = "noMFA";
  AuthErrorTypes2["InvalidMFA"] = "invalidMFA";
  AuthErrorTypes2["EmptyChallengeResponse"] = "emptyChallengeResponse";
  AuthErrorTypes2["NoUserSession"] = "noUserSession";
  AuthErrorTypes2["Default"] = "default";
  AuthErrorTypes2["DeviceConfig"] = "deviceConfig";
  AuthErrorTypes2["NetworkError"] = "networkError";
  AuthErrorTypes2["AutoSignInError"] = "autoSignInError";
})(AuthErrorTypes || (AuthErrorTypes = {}));
function isUsernamePasswordOpts(obj) {
  return !!obj.username;
}
var GRAPHQL_AUTH_MODE;
(function(GRAPHQL_AUTH_MODE2) {
  GRAPHQL_AUTH_MODE2["API_KEY"] = "API_KEY";
  GRAPHQL_AUTH_MODE2["AWS_IAM"] = "AWS_IAM";
  GRAPHQL_AUTH_MODE2["OPENID_CONNECT"] = "OPENID_CONNECT";
  GRAPHQL_AUTH_MODE2["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
  GRAPHQL_AUTH_MODE2["AWS_LAMBDA"] = "AWS_LAMBDA";
})(GRAPHQL_AUTH_MODE || (GRAPHQL_AUTH_MODE = {}));

// node_modules/@aws-amplify/core/node_modules/tslib/tslib.es6.js
var extendStatics3 = function(d2, b2) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (b3.hasOwnProperty(p2))
        d3[p2] = b3[p2];
  };
  return extendStatics3(d2, b2);
};
function __extends3(d2, b2) {
  extendStatics3(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign4 = function() {
  __assign4 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign4.apply(this, arguments);
};
function __rest2(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter4(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator4(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values2(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read3(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread2() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read3(arguments[i2]));
  return ar;
}

// node_modules/@aws-amplify/core/lib-esm/Util/Constants.js
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256e3;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
  "ResourceNotFoundException",
  "InvalidSequenceTokenException"
];

// node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE2) {
  LOG_TYPE2["DEBUG"] = "DEBUG";
  LOG_TYPE2["ERROR"] = "ERROR";
  LOG_TYPE2["INFO"] = "INFO";
  LOG_TYPE2["WARN"] = "WARN";
  LOG_TYPE2["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
var ConsoleLogger = (
  /** @class */
  function() {
    function ConsoleLogger2(name, level) {
      if (level === void 0) {
        level = LOG_TYPE.WARN;
      }
      this.name = name;
      this.level = level;
      this._pluggables = [];
    }
    ConsoleLogger2.prototype._padding = function(n2) {
      return n2 < 10 ? "0" + n2 : "" + n2;
    };
    ConsoleLogger2.prototype._ts = function() {
      var dt = /* @__PURE__ */ new Date();
      return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") + "." + dt.getMilliseconds();
    };
    ConsoleLogger2.prototype.configure = function(config) {
      if (!config)
        return this._config;
      this._config = config;
      return this._config;
    };
    ConsoleLogger2.prototype._log = function(type) {
      var e_1, _a;
      var msg = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        msg[_i - 1] = arguments[_i];
      }
      var logger_level_name = this.level;
      if (ConsoleLogger2.LOG_LEVEL) {
        logger_level_name = ConsoleLogger2.LOG_LEVEL;
      }
      if (typeof window !== "undefined" && window.LOG_LEVEL) {
        logger_level_name = window.LOG_LEVEL;
      }
      var logger_level = LOG_LEVELS[logger_level_name];
      var type_level = LOG_LEVELS[type];
      if (!(type_level >= logger_level)) {
        return;
      }
      var log = console.log.bind(console);
      if (type === LOG_TYPE.ERROR && console.error) {
        log = console.error.bind(console);
      }
      if (type === LOG_TYPE.WARN && console.warn) {
        log = console.warn.bind(console);
      }
      var prefix = "[" + type + "] " + this._ts() + " " + this.name;
      var message = "";
      if (msg.length === 1 && typeof msg[0] === "string") {
        message = prefix + " - " + msg[0];
        log(message);
      } else if (msg.length === 1) {
        message = prefix + " " + msg[0];
        log(prefix, msg[0]);
      } else if (typeof msg[0] === "string") {
        var obj = msg.slice(1);
        if (obj.length === 1) {
          obj = obj[0];
        }
        message = prefix + " - " + msg[0] + " " + obj;
        log(prefix + " - " + msg[0], obj);
      } else {
        message = prefix + " " + msg;
        log(prefix, msg);
      }
      try {
        for (var _b = __values2(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {
          var plugin = _c.value;
          var logEvent = { message, timestamp: Date.now() };
          plugin.pushLogs([logEvent]);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    ConsoleLogger2.prototype.log = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spread2([LOG_TYPE.INFO], msg));
    };
    ConsoleLogger2.prototype.info = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spread2([LOG_TYPE.INFO], msg));
    };
    ConsoleLogger2.prototype.warn = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spread2([LOG_TYPE.WARN], msg));
    };
    ConsoleLogger2.prototype.error = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spread2([LOG_TYPE.ERROR], msg));
    };
    ConsoleLogger2.prototype.debug = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spread2([LOG_TYPE.DEBUG], msg));
    };
    ConsoleLogger2.prototype.verbose = function() {
      var msg = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        msg[_i] = arguments[_i];
      }
      this._log.apply(this, __spread2([LOG_TYPE.VERBOSE], msg));
    };
    ConsoleLogger2.prototype.addPluggable = function(pluggable) {
      if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
        this._pluggables.push(pluggable);
        pluggable.configure(this._config);
      }
    };
    ConsoleLogger2.prototype.listPluggables = function() {
      return this._pluggables;
    };
    ConsoleLogger2.LOG_LEVEL = null;
    return ConsoleLogger2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/Amplify.js
var logger = new ConsoleLogger("Amplify");
var AmplifyClass = (
  /** @class */
  function() {
    function AmplifyClass2() {
      this._components = [];
      this._config = {};
      this._modules = {};
      this.Auth = null;
      this.Analytics = null;
      this.API = null;
      this.Credentials = null;
      this.Storage = null;
      this.I18n = null;
      this.Cache = null;
      this.PubSub = null;
      this.Interactions = null;
      this.Pushnotification = null;
      this.UI = null;
      this.XR = null;
      this.Predictions = null;
      this.DataStore = null;
      this.Geo = null;
      this.Notifications = null;
      this.Logger = ConsoleLogger;
      this.ServiceWorker = null;
    }
    AmplifyClass2.prototype.register = function(comp) {
      logger.debug("component registered in amplify", comp);
      this._components.push(comp);
      if (typeof comp.getModuleName === "function") {
        this._modules[comp.getModuleName()] = comp;
        this[comp.getModuleName()] = comp;
      } else {
        logger.debug("no getModuleName method for component", comp);
      }
      comp.configure(this._config);
    };
    AmplifyClass2.prototype.configure = function(config) {
      var _this = this;
      if (!config)
        return this._config;
      this._config = Object.assign(this._config, config);
      logger.debug("amplify config", this._config);
      Object.entries(this._modules).forEach(function(_a) {
        var _b = __read3(_a, 2), Name2 = _b[0], comp = _b[1];
        Object.keys(comp).forEach(function(property) {
          if (_this._modules[property]) {
            comp[property] = _this._modules[property];
          }
        });
      });
      this._components.map(function(comp) {
        comp.configure(_this._config);
      });
      return this._config;
    };
    AmplifyClass2.prototype.addPluggable = function(pluggable) {
      if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") {
        this._components.map(function(comp) {
          if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") {
            comp.addPluggable(pluggable);
          }
        });
      }
    };
    return AmplifyClass2;
  }()
);
var Amplify = new AmplifyClass();

// node_modules/@aws-amplify/core/lib-esm/Platform/version.js
var version = "5.1.10";

// node_modules/@aws-amplify/core/lib-esm/Platform/index.js
var BASE_USER_AGENT = "aws-amplify/" + version;
var Platform = {
  userAgent: BASE_USER_AGENT + " js",
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform.product = navigator.product || "";
  Platform.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform.userAgent = BASE_USER_AGENT + " react-native";
      Platform.isReactNative = true;
      break;
    default:
      Platform.userAgent = BASE_USER_AGENT + " js";
      Platform.isReactNative = false;
      break;
  }
}
var getAmplifyUserAgent = function(content) {
  return "" + Platform.userAgent + (content ? content : "");
};

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/browser.js
var logger2 = new ConsoleLogger("ClientDevice_Browser");
function clientInfo() {
  if (typeof window === "undefined") {
    return {};
  }
  return browserClientInfo();
}
function browserClientInfo() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return {};
  }
  var nav = window.navigator;
  if (!nav) {
    logger2.warn("No navigator object available to get browser client info");
    return {};
  }
  var platform = nav.platform, product = nav.product, vendor = nav.vendor, userAgent2 = nav.userAgent, language = nav.language;
  var type = browserType(userAgent2);
  var timezone = browserTimezone();
  return {
    platform,
    make: product || vendor,
    model: type.type,
    version: type.version,
    appVersion: [type.type, type.version].join("/"),
    language,
    timezone
  };
}
function dimension() {
  if (typeof window === "undefined") {
    logger2.warn("No window object available to get browser client info");
    return { width: 320, height: 320 };
  }
  return {
    width: window.innerWidth,
    height: window.innerHeight
  };
}
function browserTimezone() {
  var tzMatch = /\(([A-Za-z\s].*)\)/.exec((/* @__PURE__ */ new Date()).toString());
  return tzMatch ? tzMatch[1] || "" : "";
}
function browserType(userAgent2) {
  var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent2);
  if (operaMatch) {
    return { type: operaMatch[1], version: operaMatch[2] };
  }
  var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent2);
  if (ieMatch) {
    return { type: ieMatch[1], version: ieMatch[2] };
  }
  var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent2);
  if (cfMatch) {
    return { type: cfMatch[1], version: cfMatch[2] };
  }
  var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent2);
  if (sMatch) {
    return { type: sMatch[1], version: sMatch[2] };
  }
  var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent2);
  if (awkMatch) {
    return { type: awkMatch[1], version: awkMatch[2] };
  }
  var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent2);
  if (anyMatch) {
    return { type: anyMatch[1], version: anyMatch[2] };
  }
  return { type: "", version: "" };
}

// node_modules/@aws-amplify/core/lib-esm/ClientDevice/index.js
var ClientDevice = (
  /** @class */
  function() {
    function ClientDevice2() {
    }
    ClientDevice2.clientInfo = function() {
      return clientInfo();
    };
    ClientDevice2.dimension = function() {
      return dimension();
    };
    return ClientDevice2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/Hub.js
var logger3 = new ConsoleLogger("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
  return callback.onHubCapsule !== void 0;
}
var HubClass = (
  /** @class */
  function() {
    function HubClass2(name) {
      this.listeners = [];
      this.patterns = [];
      this.protectedChannels = [
        "core",
        "auth",
        "api",
        "analytics",
        "interactions",
        "pubsub",
        "storage",
        "ui",
        "xr"
      ];
      this.name = name;
    }
    HubClass2.prototype._remove = function(channel, listener) {
      if (channel instanceof RegExp) {
        var pattern_1 = this.patterns.find(function(_a) {
          var pattern = _a.pattern;
          return pattern.source === channel.source;
        });
        if (!pattern_1) {
          logger3.warn("No listeners for " + channel);
          return;
        }
        this.patterns = __spread2(this.patterns.filter(function(x2) {
          return x2 !== pattern_1;
        }));
      } else {
        var holder = this.listeners[channel];
        if (!holder) {
          logger3.warn("No listeners for " + channel);
          return;
        }
        this.listeners[channel] = __spread2(holder.filter(function(_a) {
          var callback = _a.callback;
          return callback !== listener;
        }));
      }
    };
    HubClass2.prototype.remove = function(channel, listener) {
      this._remove(channel, listener);
    };
    HubClass2.prototype.dispatch = function(channel, payload, source, ampSymbol) {
      if (source === void 0) {
        source = "";
      }
      if (this.protectedChannels.indexOf(channel) > -1) {
        var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
        if (!hasAccess) {
          logger3.warn("WARNING: " + channel + " is protected and dispatching on it can have unintended consequences");
        }
      }
      var capsule = {
        channel,
        payload: __assign4({}, payload),
        source,
        patternInfo: []
      };
      try {
        this._toListeners(capsule);
      } catch (e) {
        logger3.error(e);
      }
    };
    HubClass2.prototype.listen = function(channel, callback, listenerName) {
      var _this = this;
      if (listenerName === void 0) {
        listenerName = "noname";
      }
      var cb;
      if (isLegacyCallback(callback)) {
        logger3.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
        cb = callback.onHubCapsule.bind(callback);
      } else if (typeof callback !== "function") {
        throw new Error("No callback supplied to Hub");
      } else {
        cb = callback;
      }
      if (channel instanceof RegExp) {
        this.patterns.push({
          pattern: channel,
          callback: cb
        });
      } else {
        var holder = this.listeners[channel];
        if (!holder) {
          holder = [];
          this.listeners[channel] = holder;
        }
        holder.push({
          name: listenerName,
          callback: cb
        });
      }
      return function() {
        _this._remove(channel, cb);
      };
    };
    HubClass2.prototype._toListeners = function(capsule) {
      var channel = capsule.channel, payload = capsule.payload;
      var holder = this.listeners[channel];
      if (holder) {
        holder.forEach(function(listener) {
          logger3.debug("Dispatching to " + channel + " with ", payload);
          try {
            listener.callback(capsule);
          } catch (e) {
            logger3.error(e);
          }
        });
      }
      if (this.patterns.length > 0) {
        if (!payload.message) {
          logger3.warn("Cannot perform pattern matching without a message key");
          return;
        }
        var payloadStr_1 = payload.message;
        this.patterns.forEach(function(pattern) {
          var match = payloadStr_1.match(pattern.pattern);
          if (match) {
            var _a = __read3(match), groups = _a.slice(1);
            var dispatchingCapsule = __assign4(__assign4({}, capsule), { patternInfo: groups });
            try {
              pattern.callback(dispatchingCapsule);
            } catch (e) {
              logger3.error(e);
            }
          }
        });
      }
    };
    return HubClass2;
  }()
);
var Hub = new HubClass("__default__");

// node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
var logger4 = new ConsoleLogger("I18n");
var I18n = (
  /** @class */
  function() {
    function I18n3(options) {
      this._options = null;
      this._lang = null;
      this._dict = {};
      this._options = Object.assign({}, options);
      this._lang = this._options.language;
      if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
        this._lang = window.navigator.language;
      }
      logger4.debug(this._lang);
    }
    I18n3.prototype.setLanguage = function(lang) {
      this._lang = lang;
    };
    I18n3.prototype.get = function(key, defVal) {
      if (defVal === void 0) {
        defVal = void 0;
      }
      if (!this._lang) {
        return typeof defVal !== "undefined" ? defVal : key;
      }
      var lang = this._lang;
      var val = this.getByLanguage(key, lang);
      if (val) {
        return val;
      }
      if (lang.indexOf("-") > 0) {
        val = this.getByLanguage(key, lang.split("-")[0]);
      }
      if (val) {
        return val;
      }
      return typeof defVal !== "undefined" ? defVal : key;
    };
    I18n3.prototype.getByLanguage = function(key, language, defVal) {
      if (defVal === void 0) {
        defVal = null;
      }
      if (!language) {
        return defVal;
      }
      var lang_dict = this._dict[language];
      if (!lang_dict) {
        return defVal;
      }
      return lang_dict[key];
    };
    I18n3.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
      var lang_dict = this._dict[language];
      if (!lang_dict) {
        lang_dict = this._dict[language] = {};
      }
      this._dict[language] = __assign4(__assign4({}, lang_dict), vocabularies);
    };
    I18n3.prototype.putVocabularies = function(vocabularies) {
      var _this = this;
      Object.keys(vocabularies).map(function(key) {
        _this.putVocabulariesForLanguage(key, vocabularies[key]);
      });
    };
    return I18n3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/I18n/index.js
var logger5 = new ConsoleLogger("I18n");
var _config = null;
var _i18n = null;
var I18n2 = (
  /** @class */
  function() {
    function I18n3() {
    }
    I18n3.configure = function(config) {
      logger5.debug("configure I18n");
      if (!config) {
        return _config;
      }
      _config = Object.assign({}, _config, config.I18n || config);
      I18n3.createInstance();
      return _config;
    };
    I18n3.getModuleName = function() {
      return "I18n";
    };
    I18n3.createInstance = function() {
      logger5.debug("create I18n instance");
      if (_i18n) {
        return;
      }
      _i18n = new I18n(_config);
    };
    I18n3.setLanguage = function(lang) {
      I18n3.checkConfig();
      return _i18n.setLanguage(lang);
    };
    I18n3.get = function(key, defVal) {
      if (!I18n3.checkConfig()) {
        return typeof defVal === "undefined" ? key : defVal;
      }
      return _i18n.get(key, defVal);
    };
    I18n3.putVocabulariesForLanguage = function(language, vocabularies) {
      I18n3.checkConfig();
      return _i18n.putVocabulariesForLanguage(language, vocabularies);
    };
    I18n3.putVocabularies = function(vocabularies) {
      I18n3.checkConfig();
      return _i18n.putVocabularies(vocabularies);
    };
    I18n3.checkConfig = function() {
      if (!_i18n) {
        _i18n = new I18n(_config);
      }
      return true;
    };
    return I18n3;
  }()
);
Amplify.register(I18n2);

// node_modules/@aws-amplify/core/lib-esm/JS.js
var makeQuerablePromise = function(promise) {
  if (promise.isResolved)
    return promise;
  var isPending = true;
  var isRejected = false;
  var isFullfilled = false;
  var result = promise.then(function(data) {
    isFullfilled = true;
    isPending = false;
    return data;
  }, function(e) {
    isRejected = true;
    isPending = false;
    throw e;
  });
  result.isFullfilled = function() {
    return isFullfilled;
  };
  result.isPending = function() {
    return isPending;
  };
  result.isRejected = function() {
    return isRejected;
  };
  return result;
};
var isWebWorker = function() {
  if (typeof self === "undefined") {
    return false;
  }
  var selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
  var isBrowser2 = typeof window !== "undefined" && typeof window.document !== "undefined";
  var isNode5 = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
  return {
    isBrowser: isBrowser2,
    isNode: isNode5
  };
};
var transferKeyToLowerCase = function(obj, whiteListForItself, whiteListForChildren) {
  if (whiteListForItself === void 0) {
    whiteListForItself = [];
  }
  if (whiteListForChildren === void 0) {
    whiteListForChildren = [];
  }
  if (!isStrictObject(obj))
    return obj;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      var transferedKey = whiteListForItself.includes(key) ? key : key[0].toLowerCase() + key.slice(1);
      ret[transferedKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
    }
  }
  return ret;
};
var transferKeyToUpperCase = function(obj, whiteListForItself, whiteListForChildren) {
  if (whiteListForItself === void 0) {
    whiteListForItself = [];
  }
  if (whiteListForChildren === void 0) {
    whiteListForChildren = [];
  }
  if (!isStrictObject(obj))
    return obj;
  var ret = {};
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      var transferredKey = whiteListForItself.includes(key) ? key : key[0].toUpperCase() + key.slice(1);
      ret[transferredKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
    }
  }
  return ret;
};
var isStrictObject = function(obj) {
  return obj instanceof Object && !(obj instanceof Array) && !(obj instanceof Function) && !(obj instanceof Number) && !(obj instanceof String) && !(obj instanceof Boolean);
};

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var import_sha256_js = __toESM(require_build2());

// node_modules/@aws-sdk/util-hex-encoding/dist/es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (i2 = 0; i2 < 256; i2++) {
  encodedByte = i2.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = "0" + encodedByte;
  }
  SHORT_TO_HEX[i2] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i2;
}
var encodedByte;
var i2;
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  var out = new Uint8Array(encoded.length / 2);
  for (var i2 = 0; i2 < encoded.length; i2 += 2) {
    var encodedByte = encoded.substr(i2, 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i2 / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
    }
  }
  return out;
}
function toHex(bytes) {
  var out = "";
  for (var i2 = 0; i2 < bytes.byteLength; i2++) {
    out += SHORT_TO_HEX[bytes[i2]];
  }
  return out;
}

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var import_url = __toESM(require_url());

// node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
var logger6 = new ConsoleLogger("Util");
var NonRetryableError = (
  /** @class */
  function(_super) {
    __extends3(NonRetryableError3, _super);
    function NonRetryableError3(message) {
      var _this = _super.call(this, message) || this;
      _this.nonRetryable = true;
      return _this;
    }
    return NonRetryableError3;
  }(Error)
);
var isNonRetryableError = function(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, onTerminate) {
  return __awaiter4(this, void 0, void 0, function() {
    var _this = this;
    return __generator4(this, function(_a) {
      if (typeof functionToRetry !== "function") {
        throw Error("functionToRetry must be a function");
      }
      return [2, new Promise(function(resolve4, reject) {
        return __awaiter4(_this, void 0, void 0, function() {
          var attempt, terminated, timeout, wakeUp, lastError, _loop_1, state_1;
          return __generator4(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                attempt = 0;
                terminated = false;
                wakeUp = function() {
                };
                onTerminate && onTerminate.then(function() {
                  terminated = true;
                  clearTimeout(timeout);
                  wakeUp();
                });
                _loop_1 = function() {
                  var _a3, _b, err_1, retryIn_1;
                  return __generator4(this, function(_c) {
                    switch (_c.label) {
                      case 0:
                        attempt++;
                        logger6.debug(functionToRetry.name + " attempt #" + attempt + " with this vars: " + JSON.stringify(args));
                        _c.label = 1;
                      case 1:
                        _c.trys.push([1, 3, , 7]);
                        _a3 = {};
                        _b = resolve4;
                        return [4, functionToRetry.apply(void 0, __spread2(args))];
                      case 2:
                        return [2, (_a3.value = _b.apply(void 0, [_c.sent()]), _a3)];
                      case 3:
                        err_1 = _c.sent();
                        lastError = err_1;
                        logger6.debug("error on " + functionToRetry.name, err_1);
                        if (isNonRetryableError(err_1)) {
                          logger6.debug(functionToRetry.name + " non retryable error", err_1);
                          return [2, { value: reject(err_1) }];
                        }
                        retryIn_1 = delayFn(attempt, args, err_1);
                        logger6.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
                        if (!(retryIn_1 === false || terminated))
                          return [3, 4];
                        return [2, { value: reject(err_1) }];
                      case 4:
                        return [4, new Promise(function(r2) {
                          wakeUp = r2;
                          timeout = setTimeout(wakeUp, retryIn_1);
                        })];
                      case 5:
                        _c.sent();
                        _c.label = 6;
                      case 6:
                        return [3, 7];
                      case 7:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                };
                _a2.label = 1;
              case 1:
                if (!!terminated)
                  return [3, 3];
                return [5, _loop_1()];
              case 2:
                state_1 = _a2.sent();
                if (typeof state_1 === "object")
                  return [2, state_1.value];
                return [3, 1];
              case 3:
                reject(lastError);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      })];
    });
  });
}
var MAX_DELAY_MS = 5 * 60 * 1e3;
function jitteredBackoff(maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs, onTerminate) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS;
  }
  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs), onTerminate);
};

// node_modules/@aws-amplify/core/lib-esm/Util/Mutex.js
var Mutex = (
  /** @class */
  function() {
    function Mutex2() {
      this._queue = [];
      this._pending = false;
    }
    Mutex2.prototype.isLocked = function() {
      return this._pending;
    };
    Mutex2.prototype.acquire = function() {
      var _this = this;
      var ticket = new Promise(function(resolve4) {
        return _this._queue.push(resolve4);
      });
      if (!this._pending) {
        this._dispatchNext();
      }
      return ticket;
    };
    Mutex2.prototype.runExclusive = function(callback) {
      return this.acquire().then(function(release) {
        var result;
        try {
          result = callback();
        } catch (e) {
          release();
          throw e;
        }
        return Promise.resolve(result).then(function(x2) {
          return release(), x2;
        }, function(e) {
          release();
          throw e;
        });
      });
    };
    Mutex2.prototype._dispatchNext = function() {
      if (this._queue.length > 0) {
        this._pending = true;
        this._queue.shift()(this._dispatchNext.bind(this));
      } else {
        this._pending = false;
      }
    };
    return Mutex2;
  }()
);
var Mutex_default = Mutex;

// node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable = __toESM(require_zen_observable());
var Observable = import_zen_observable.default;
var bundle_esm_default = Observable;

// node_modules/@aws-amplify/core/lib-esm/Util/Reachability.js
var ReachabilityNavigator = (
  /** @class */
  function() {
    function ReachabilityNavigator2() {
    }
    ReachabilityNavigator2.prototype.networkMonitor = function(netInfo) {
      if (browserOrNode().isNode) {
        return bundle_esm_default.from([{ online: true }]);
      }
      var globalObj = isWebWorker() ? self : window;
      return new bundle_esm_default(function(observer) {
        observer.next({ online: globalObj.navigator.onLine });
        var notifyOnline = function() {
          return observer.next({ online: true });
        };
        var notifyOffline = function() {
          return observer.next({ online: false });
        };
        globalObj.addEventListener("online", notifyOnline);
        globalObj.addEventListener("offline", notifyOffline);
        ReachabilityNavigator2._observers.push(observer);
        return function() {
          globalObj.removeEventListener("online", notifyOnline);
          globalObj.removeEventListener("offline", notifyOffline);
          ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
            return _observer !== observer;
          });
        };
      });
    };
    ReachabilityNavigator2._observerOverride = function(status) {
      var e_1, _a;
      var _loop_1 = function(observer2) {
        if (observer2.closed) {
          ReachabilityNavigator2._observers = ReachabilityNavigator2._observers.filter(function(_observer) {
            return _observer !== observer2;
          });
          return "continue";
        }
        observer2.next(status);
      };
      try {
        for (var _b = __values2(ReachabilityNavigator2._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
          var observer = _c.value;
          _loop_1(observer);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    ReachabilityNavigator2._observers = [];
    return ReachabilityNavigator2;
  }()
);
var Reachability_default = ReachabilityNavigator;

// node_modules/@aws-amplify/core/lib-esm/Util/DateUtils.js
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;
var DateUtils = {
  /**
   * Milliseconds to offset the date to compensate for clock skew between device & services
   */
  clockOffset: 0,
  getDateWithClockOffset: function() {
    if (DateUtils.clockOffset) {
      return new Date((/* @__PURE__ */ new Date()).getTime() + DateUtils.clockOffset);
    } else {
      return /* @__PURE__ */ new Date();
    }
  },
  /**
   * @returns {number} Clock offset in milliseconds
   */
  getClockOffset: function() {
    return DateUtils.clockOffset;
  },
  getHeaderStringFromDate: function(date) {
    if (date === void 0) {
      date = DateUtils.getDateWithClockOffset();
    }
    return date.toISOString().replace(/[:\-]|\.\d{3}/g, "");
  },
  getDateFromHeaderString: function(header) {
    var _a = __read3(header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];
    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
  },
  isClockSkewed: function(serverDate) {
    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
  },
  isClockSkewError: function(error) {
    if (!error.response || !error.response.headers) {
      return false;
    }
    var headers = error.response.headers;
    return Boolean(["BadRequestException", "InvalidSignatureException"].includes(headers["x-amzn-errortype"]) && (headers.date || headers.Date));
  },
  /**
   * @param {number} offset Clock offset in milliseconds
   */
  setClockOffset: function(offset) {
    DateUtils.clockOffset = offset;
  }
};

// node_modules/@aws-amplify/core/lib-esm/Util/StringUtils.js
function urlSafeEncode(str) {
  return str.split("").map(function(char) {
    return char.charCodeAt(0).toString(16).padStart(2, "0");
  }).join("");
}
function urlSafeDecode(hex) {
  return hex.match(/.{2}/g).map(function(char) {
    return String.fromCharCode(parseInt(char, 16));
  }).join("");
}

// node_modules/@aws-amplify/core/lib-esm/Util/BackgroundProcessManager.js
var BackgroundProcessManager = (
  /** @class */
  function() {
    function BackgroundProcessManager2() {
      this._state = BackgroundProcessManagerState.Open;
      this.jobs = /* @__PURE__ */ new Set();
    }
    BackgroundProcessManager2.prototype.add = function(jobOrDescription, optionalDescription) {
      var job;
      var description;
      if (typeof jobOrDescription === "string") {
        job = void 0;
        description = jobOrDescription;
      } else {
        job = jobOrDescription;
        description = optionalDescription;
      }
      var error = this.closedFailure(description);
      if (error)
        return error;
      if (job === void 0) {
        return this.addHook(description);
      } else if (typeof job === "function") {
        return this.addFunction(job, description);
      } else if (job instanceof BackgroundProcessManager2) {
        return this.addManager(job, description);
      } else {
        throw new Error("If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.");
      }
    };
    BackgroundProcessManager2.prototype.addCleaner = function(clean, description) {
      var _this = this;
      var _a = this.addHook(description), resolve4 = _a.resolve, onTerminate = _a.onTerminate;
      var proxy = function() {
        return __awaiter4(_this, void 0, void 0, function() {
          return __generator4(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, clean()];
              case 1:
                _a2.sent();
                resolve4();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      onTerminate.then(proxy);
      return proxy;
    };
    BackgroundProcessManager2.prototype.addFunction = function(job, description) {
      var terminate;
      var onTerminate = new Promise(function(resolve4) {
        terminate = resolve4;
      });
      var jobResult = job(onTerminate);
      if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === "function") {
        this.registerPromise(jobResult, terminate, description);
      }
      return jobResult;
    };
    BackgroundProcessManager2.prototype.addManager = function(manager, description) {
      var _this = this;
      this.addCleaner(function() {
        return __awaiter4(_this, void 0, void 0, function() {
          return __generator4(this, function(_a) {
            switch (_a.label) {
              case 0:
                return [4, manager.close()];
              case 1:
                return [2, _a.sent()];
            }
          });
        });
      }, description);
    };
    BackgroundProcessManager2.prototype.addHook = function(description) {
      var resolve4;
      var reject;
      var promise = new Promise(function(res, rej) {
        resolve4 = res;
        reject = rej;
      });
      var terminate;
      var onTerminate = new Promise(function(resolveTerminate) {
        terminate = resolveTerminate;
      });
      this.registerPromise(promise, terminate, description);
      return {
        resolve: resolve4,
        reject,
        onTerminate
      };
    };
    BackgroundProcessManager2.prototype.registerPromise = function(promise, terminate, description) {
      var _this = this;
      var jobEntry = { promise, terminate, description };
      this.jobs.add(jobEntry);
      promise.then(function() {
        _this.jobs.delete(jobEntry);
      }).catch(function() {
        _this.jobs.delete(jobEntry);
      });
    };
    Object.defineProperty(BackgroundProcessManager2.prototype, "length", {
      /**
       * The number of jobs being waited on.
       *
       * We don't use this for anything. It's just informational for the caller,
       * and can be used in logging and testing.
       *
       * @returns the number of jobs.
       */
      get: function() {
        return this.jobs.size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "state", {
      /**
       * The execution state of the manager. One of:
       *
       * 1. "Open" -> Accepting new jobs
       * 1. "Closing" -> Not accepting new work. Waiting for jobs to complete.
       * 1. "Closed" -> Not accepting new work. All submitted jobs are complete.
       */
      get: function() {
        return this._state;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "pending", {
      /**
       * The registered `description` of all still-pending jobs.
       *
       * @returns descriptions as an array.
       */
      get: function() {
        return Array.from(this.jobs).map(function(job) {
          return job.description;
        });
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "isOpen", {
      /**
       * Whether the manager is accepting new jobs.
       */
      get: function() {
        return this._state === BackgroundProcessManagerState.Open;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "isClosing", {
      /**
       * Whether the manager is rejecting new work, but still waiting for
       * submitted work to complete.
       */
      get: function() {
        return this._state === BackgroundProcessManagerState.Closing;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BackgroundProcessManager2.prototype, "isClosed", {
      /**
       * Whether the manager is rejecting work and done waiting for submitted
       * work to complete.
       */
      get: function() {
        return this._state === BackgroundProcessManagerState.Closed;
      },
      enumerable: true,
      configurable: true
    });
    BackgroundProcessManager2.prototype.closedFailure = function(description) {
      if (!this.isOpen) {
        return Promise.reject(new BackgroundManagerNotOpenError([
          "The manager is " + this.state + ".",
          'You tried to add "' + description + '".',
          "Pending jobs: [\n" + this.pending.map(function(t2) {
            return "    " + t2;
          }).join(",\n") + "\n]"
        ].join("\n")));
      }
    };
    BackgroundProcessManager2.prototype.close = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var _a, _b, job;
        var e_1, _c;
        return __generator4(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!this.isOpen)
                return [3, 2];
              this._state = BackgroundProcessManagerState.Closing;
              try {
                for (_a = __values2(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {
                  job = _b.value;
                  try {
                    job.terminate();
                  } catch (error) {
                    console.warn("Failed to send termination signal to job. Error: " + error.message, job);
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_b && !_b.done && (_c = _a.return))
                    _c.call(_a);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function(j2) {
                return j2.promise;
              }));
              return [4, this._closingPromise];
            case 1:
              _d.sent();
              this._state = BackgroundProcessManagerState.Closed;
              _d.label = 2;
            case 2:
              return [2, this._closingPromise];
          }
        });
      });
    };
    BackgroundProcessManager2.prototype.open = function() {
      return __awaiter4(this, void 0, void 0, function() {
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.isClosing)
                return [3, 2];
              return [4, this.close()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              this._state = BackgroundProcessManagerState.Open;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return BackgroundProcessManager2;
  }()
);
var BackgroundManagerNotOpenError = (
  /** @class */
  function(_super) {
    __extends3(BackgroundManagerNotOpenError2, _super);
    function BackgroundManagerNotOpenError2(message) {
      return _super.call(this, "BackgroundManagerNotOpenError: " + message) || this;
    }
    return BackgroundManagerNotOpenError2;
  }(Error)
);
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState2) {
  BackgroundProcessManagerState2["Open"] = "Open";
  BackgroundProcessManagerState2["Closing"] = "Closing";
  BackgroundProcessManagerState2["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

// node_modules/@aws-amplify/core/lib-esm/Signer.js
var logger7 = new ConsoleLogger("Signer");
var DEFAULT_ALGORITHM = "AWS4-HMAC-SHA256";
var IOT_SERVICE_NAME = "iotdevicegateway";
var encrypt = function(key, src) {
  var hash2 = new import_sha256_js.Sha256(key);
  hash2.update(src);
  return hash2.digestSync();
};
var hash = function(src) {
  var arg = src || "";
  var hash2 = new import_sha256_js.Sha256();
  hash2.update(arg);
  return toHex(hash2.digestSync());
};
var escape_RFC3986 = function(component) {
  return component.replace(/[!'()*]/g, function(c2) {
    return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
  });
};
var canonical_query = function(query) {
  if (!query || query.length === 0) {
    return "";
  }
  return query.split("&").map(function(e) {
    var key_val = e.split("=");
    if (key_val.length === 1) {
      return e;
    } else {
      var reencoded_val = escape_RFC3986(key_val[1]);
      return key_val[0] + "=" + reencoded_val;
    }
  }).sort(function(a2, b2) {
    var key_a = a2.split("=")[0];
    var key_b = b2.split("=")[0];
    if (key_a === key_b) {
      return a2 < b2 ? -1 : 1;
    } else {
      return key_a < key_b ? -1 : 1;
    }
  }).join("&");
};
var canonical_headers = function(headers) {
  if (!headers || Object.keys(headers).length === 0) {
    return "";
  }
  return Object.keys(headers).map(function(key) {
    return {
      key: key.toLowerCase(),
      value: headers[key] ? headers[key].trim().replace(/\s+/g, " ") : ""
    };
  }).sort(function(a2, b2) {
    return a2.key < b2.key ? -1 : 1;
  }).map(function(item) {
    return item.key + ":" + item.value;
  }).join("\n") + "\n";
};
var signed_headers = function(headers) {
  return Object.keys(headers).map(function(key) {
    return key.toLowerCase();
  }).sort().join(";");
};
var canonical_request = function(request) {
  var url_info = (0, import_url.parse)(request.url);
  return [
    request.method || "/",
    encodeURIComponent(url_info.pathname).replace(/%2F/gi, "/"),
    canonical_query(url_info.query),
    canonical_headers(request.headers),
    signed_headers(request.headers),
    hash(request.data)
  ].join("\n");
};
var parse_service_info = function(request) {
  var url_info = (0, import_url.parse)(request.url), host = url_info.host;
  var matched = host.match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
  var parsed = (matched || []).slice(1, 3);
  if (parsed[1] === "es") {
    parsed = parsed.reverse();
  }
  return {
    service: request.service || parsed[0],
    region: request.region || parsed[1]
  };
};
var credential_scope = function(d_str, region, service) {
  return [d_str, region, service, "aws4_request"].join("/");
};
var string_to_sign = function(algorithm, canonical_request2, dt_str, scope) {
  return [algorithm, dt_str, scope, hash(canonical_request2)].join("\n");
};
var get_signing_key = function(secret_key, d_str, service_info) {
  logger7.debug(service_info);
  var k2 = "AWS4" + secret_key, k_date = encrypt(k2, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, "aws4_request");
  return k_signing;
};
var get_signature = function(signing_key, str_to_sign) {
  return toHex(encrypt(signing_key, str_to_sign));
};
var get_authorization_header = function(algorithm, access_key, scope, signed_headers2, signature) {
  return [
    algorithm + " Credential=" + access_key + "/" + scope,
    "SignedHeaders=" + signed_headers2,
    "Signature=" + signature
  ].join(", ");
};
var Signer = (
  /** @class */
  function() {
    function Signer2() {
    }
    Signer2.sign = function(request, access_info, service_info) {
      if (service_info === void 0) {
        service_info = null;
      }
      request.headers = request.headers || {};
      if (request.body && !request.data) {
        throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
      }
      var dt = DateUtils.getDateWithClockOffset(), dt_str = dt.toISOString().replace(/[:\-]|\.\d{3}/g, ""), d_str = dt_str.substr(0, 8);
      var url_info = (0, import_url.parse)(request.url);
      request.headers["host"] = url_info.host;
      request.headers["x-amz-date"] = dt_str;
      if (access_info.session_token) {
        request.headers["X-Amz-Security-Token"] = access_info.session_token;
      }
      var request_str = canonical_request(request);
      logger7.debug(request_str);
      var serviceInfo = service_info || parse_service_info(request), scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service), str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);
      var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo), signature = get_signature(signing_key, str_to_sign);
      var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);
      request.headers["Authorization"] = authorization_header;
      return request;
    };
    Signer2.signUrl = function(urlOrRequest, accessInfo, serviceInfo, expiration) {
      var urlToSign = typeof urlOrRequest === "object" ? urlOrRequest.url : urlOrRequest;
      var method = typeof urlOrRequest === "object" ? urlOrRequest.method : "GET";
      var body = typeof urlOrRequest === "object" ? urlOrRequest.body : void 0;
      var now = DateUtils.getDateWithClockOffset().toISOString().replace(/[:\-]|\.\d{3}/g, "");
      var today = now.substr(0, 8);
      var _a = (0, import_url.parse)(urlToSign, true, true), search = _a.search, parsedUrl = __rest2(_a, ["search"]);
      var host = parsedUrl.host;
      var signedHeaders = { host };
      var _b = serviceInfo || parse_service_info({ url: (0, import_url.format)(parsedUrl) }), region = _b.region, service = _b.service;
      var credentialScope = credential_scope(today, region, service);
      var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;
      var queryParams = __assign4(__assign4(__assign4({ "X-Amz-Algorithm": DEFAULT_ALGORITHM, "X-Amz-Credential": [accessInfo.access_key, credentialScope].join("/"), "X-Amz-Date": now.substr(0, 16) }, sessionTokenRequired ? { "X-Amz-Security-Token": "" + accessInfo.session_token } : {}), expiration ? { "X-Amz-Expires": "" + expiration } : {}), { "X-Amz-SignedHeaders": Object.keys(signedHeaders).join(",") });
      var canonicalRequest = canonical_request({
        method,
        url: (0, import_url.format)(__assign4(__assign4({}, parsedUrl), { query: __assign4(__assign4({}, parsedUrl.query), queryParams) })),
        headers: signedHeaders,
        data: body
      });
      var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);
      var signing_key = get_signing_key(accessInfo.secret_key, today, {
        region,
        service
      });
      var signature = get_signature(signing_key, stringToSign);
      var additionalQueryParams = __assign4({ "X-Amz-Signature": signature }, accessInfo.session_token && {
        "X-Amz-Security-Token": accessInfo.session_token
      });
      var result = (0, import_url.format)({
        protocol: parsedUrl.protocol,
        slashes: true,
        hostname: parsedUrl.hostname,
        port: parsedUrl.port,
        pathname: parsedUrl.pathname,
        query: __assign4(__assign4(__assign4({}, parsedUrl.query), queryParams), additionalQueryParams)
      });
      return result;
    };
    return Signer2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/parseAWSExports.js
var logger8 = new ConsoleLogger("Parser");
var parseAWSExports = function(config) {
  var amplifyConfig = {};
  if (config["aws_mobile_analytics_app_id"]) {
    var Analytics = {
      AWSPinpoint: {
        appId: config["aws_mobile_analytics_app_id"],
        region: config["aws_mobile_analytics_app_region"]
      }
    };
    amplifyConfig.Analytics = Analytics;
  }
  if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) {
    amplifyConfig.Auth = {
      userPoolId: config["aws_user_pools_id"],
      userPoolWebClientId: config["aws_user_pools_web_client_id"],
      region: config["aws_cognito_region"],
      identityPoolId: config["aws_cognito_identity_pool_id"],
      identityPoolRegion: config["aws_cognito_region"],
      mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
      signUpVerificationMethod: config["aws_cognito_sign_up_verification_method"] || "code"
    };
  }
  var storageConfig;
  if (config["aws_user_files_s3_bucket"]) {
    storageConfig = {
      AWSS3: {
        bucket: config["aws_user_files_s3_bucket"],
        region: config["aws_user_files_s3_bucket_region"],
        dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
      }
    };
  } else {
    storageConfig = config ? config.Storage || config : {};
  }
  if (config["Logging"]) {
    amplifyConfig.Logging = __assign4(__assign4({}, config["Logging"]), { region: config["aws_project_region"] });
  }
  if (config["geo"]) {
    amplifyConfig.Geo = Object.assign({}, config.geo);
    if (config.geo["amazon_location_service"]) {
      amplifyConfig.Geo = {
        AmazonLocationService: config.geo["amazon_location_service"]
      };
    }
  }
  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
  amplifyConfig.Storage = Object.assign({}, storageConfig);
  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
  logger8.debug("parse config", config, "to amplifyconfig", amplifyConfig);
  return amplifyConfig;
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/package.json
var package_default = {
  name: "@aws-sdk/client-cloudwatch-logs",
  description: "AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    test: "exit 0",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cloudwatch-logs"
  }
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var import_sha256_browser = __toESM(require_build5());

// node_modules/@aws-sdk/fetch-http-handler/node_modules/tslib/tslib.es6.js
function __awaiter5(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator5(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values3(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpResponse.js
var HttpResponse = (
  /** @class */
  function() {
    function HttpResponse2(options) {
      this.statusCode = options.statusCode;
      this.headers = options.headers || {};
      this.body = options.body;
    }
    HttpResponse2.isInstance = function(response) {
      if (!response)
        return false;
      var resp = response;
      return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    };
    return HttpResponse2;
  }()
);

// node_modules/@aws-sdk/protocol-http/node_modules/tslib/tslib.es6.js
var __assign5 = function() {
  __assign5 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign5.apply(this, arguments);
};
function __read4(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread3() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read4(arguments[i2]));
  return ar;
}

// node_modules/@aws-sdk/protocol-http/dist/es/httpRequest.js
var HttpRequest = (
  /** @class */
  function() {
    function HttpRequest2(options) {
      this.method = options.method || "GET";
      this.hostname = options.hostname || "localhost";
      this.port = options.port;
      this.query = options.query || {};
      this.headers = options.headers || {};
      this.body = options.body;
      this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
      this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
    }
    HttpRequest2.isInstance = function(request) {
      if (!request)
        return false;
      var req = request;
      return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    };
    HttpRequest2.prototype.clone = function() {
      var cloned = new HttpRequest2(__assign5(__assign5({}, this), { headers: __assign5({}, this.headers) }));
      if (cloned.query)
        cloned.query = cloneQuery(cloned.query);
      return cloned;
    };
    return HttpRequest2;
  }()
);
function cloneQuery(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign5(__assign5({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread3(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/querystring-builder/node_modules/tslib/tslib.es6.js
function __values4(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

// node_modules/@aws-sdk/util-uri-escape/dist/es/escape-uri.js
var escapeUri = function(uri) {
  return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c2) {
  return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
};

// node_modules/@aws-sdk/querystring-builder/dist/es/index.js
function buildQueryString(query) {
  var e_1, _a;
  var parts = [];
  try {
    for (var _b = __values4(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var value = query[key];
      key = escapeUri(key);
      if (Array.isArray(value)) {
        for (var i2 = 0, iLen = value.length; i2 < iLen; i2++) {
          parts.push(key + "=" + escapeUri(value[i2]));
        }
      } else {
        var qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += "=" + escapeUri(value);
        }
        parts.push(qsEntry);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return parts.join("&");
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/request-timeout.js
function requestTimeout(timeoutInMs) {
  if (timeoutInMs === void 0) {
    timeoutInMs = 0;
  }
  return new Promise(function(resolve4, reject) {
    if (timeoutInMs) {
      setTimeout(function() {
        var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
        timeoutError.name = "TimeoutError";
        reject(timeoutError);
      }, timeoutInMs);
    }
  });
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/fetch-http-handler.js
var FetchHttpHandler = (
  /** @class */
  function() {
    function FetchHttpHandler2(_a) {
      var _b = _a === void 0 ? {} : _a, requestTimeout2 = _b.requestTimeout;
      this.requestTimeout = requestTimeout2;
    }
    FetchHttpHandler2.prototype.destroy = function() {
    };
    FetchHttpHandler2.prototype.handle = function(request, _a) {
      var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
      var requestTimeoutInMs = this.requestTimeout;
      if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
        var abortError = new Error("Request aborted");
        abortError.name = "AbortError";
        return Promise.reject(abortError);
      }
      var path = request.path;
      if (request.query) {
        var queryString = buildQueryString(request.query);
        if (queryString) {
          path += "?" + queryString;
        }
      }
      var port = request.port, method = request.method;
      var url2 = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
      var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
      var requestOptions = {
        body,
        headers: new Headers(request.headers),
        method
      };
      if (typeof AbortController !== "undefined") {
        requestOptions["signal"] = abortSignal;
      }
      var fetchRequest = new Request(url2, requestOptions);
      var raceOfPromises = [
        fetch(fetchRequest).then(function(response) {
          var e_1, _a2;
          var fetchHeaders = response.headers;
          var transformedHeaders = {};
          try {
            for (var _b2 = __values3(fetchHeaders.entries()), _c = _b2.next(); !_c.done; _c = _b2.next()) {
              var pair = _c.value;
              transformedHeaders[pair[0]] = pair[1];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b2.return))
                _a2.call(_b2);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          var hasReadableStream = response.body !== void 0;
          if (!hasReadableStream) {
            return response.blob().then(function(body2) {
              return {
                response: new HttpResponse({
                  headers: transformedHeaders,
                  statusCode: response.status,
                  body: body2
                })
              };
            });
          }
          return {
            response: new HttpResponse({
              headers: transformedHeaders,
              statusCode: response.status,
              body: response.body
            })
          };
        }),
        requestTimeout(requestTimeoutInMs)
      ];
      if (abortSignal) {
        raceOfPromises.push(new Promise(function(resolve4, reject) {
          abortSignal.onabort = function() {
            var abortError2 = new Error("Request aborted");
            abortError2.name = "AbortError";
            reject(abortError2);
          };
        }));
      }
      return Promise.race(raceOfPromises);
    };
    return FetchHttpHandler2;
  }()
);

// node_modules/@aws-sdk/util-base64-browser/dist/es/index.js
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for (i2 = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i2 + start <= limit; i2++) {
  char = String.fromCharCode(i2 + start);
  alphabetByEncoding[char] = i2;
  alphabetByValue[i2] = char;
}
var char;
var i2;
var start;
var limit;
for (i2 = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i2 + start <= limit; i2++) {
  char = String.fromCharCode(i2 + start);
  index = i2 + 26;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i2;
var start;
var limit;
for (i2 = 0; i2 < 10; i2++) {
  alphabetByEncoding[i2.toString(10)] = i2 + 52;
  char = i2.toString(10);
  index = i2 + 52;
  alphabetByEncoding[char] = index;
  alphabetByValue[index] = char;
}
var char;
var index;
var i2;
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
  var totalByteLength = input.length / 4 * 3;
  if (input.substr(-2) === "==") {
    totalByteLength -= 2;
  } else if (input.substr(-1) === "=") {
    totalByteLength--;
  }
  var out = new ArrayBuffer(totalByteLength);
  var dataView = new DataView(out);
  for (var i2 = 0; i2 < input.length; i2 += 4) {
    var bits = 0;
    var bitLength = 0;
    for (var j2 = i2, limit = i2 + 3; j2 <= limit; j2++) {
      if (input[j2] !== "=") {
        bits |= alphabetByEncoding[input[j2]] << (limit - j2) * bitsPerLetter;
        bitLength += bitsPerLetter;
      } else {
        bits >>= bitsPerLetter;
      }
    }
    var chunkOffset = i2 / 4 * 3;
    bits >>= bitLength % bitsPerByte;
    var byteLength = Math.floor(bitLength / bitsPerByte);
    for (var k2 = 0; k2 < byteLength; k2++) {
      var offset = (byteLength - k2 - 1) * bitsPerByte;
      dataView.setUint8(chunkOffset + k2, (bits & 255 << offset) >> offset);
    }
  }
  return new Uint8Array(out);
}
function toBase64(input) {
  var str = "";
  for (var i2 = 0; i2 < input.length; i2 += 3) {
    var bits = 0;
    var bitLength = 0;
    for (var j2 = i2, limit = Math.min(i2 + 3, input.length); j2 < limit; j2++) {
      bits |= input[j2] << (limit - j2 - 1) * bitsPerByte;
      bitLength += bitsPerByte;
    }
    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
    bits <<= bitClusterCount * bitsPerLetter - bitLength;
    for (var k2 = 1; k2 <= bitClusterCount; k2++) {
      var offset = (bitClusterCount - k2) * bitsPerLetter;
      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
    }
    str += "==".slice(0, 4 - bitClusterCount);
  }
  return str;
}

// node_modules/@aws-sdk/fetch-http-handler/dist/es/stream-collector.js
var streamCollector = function(stream) {
  if (typeof Blob === "function" && stream instanceof Blob) {
    return collectBlob(stream);
  }
  return collectStream(stream);
};
function collectBlob(blob) {
  return __awaiter5(this, void 0, void 0, function() {
    var base64, arrayBuffer;
    return __generator5(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, readToBase64(blob)];
        case 1:
          base64 = _a.sent();
          arrayBuffer = fromBase64(base64);
          return [2, new Uint8Array(arrayBuffer)];
      }
    });
  });
}
function collectStream(stream) {
  return __awaiter5(this, void 0, void 0, function() {
    var res, reader, isDone, _a, done, value, prior;
    return __generator5(this, function(_b) {
      switch (_b.label) {
        case 0:
          res = new Uint8Array(0);
          reader = stream.getReader();
          isDone = false;
          _b.label = 1;
        case 1:
          if (!!isDone)
            return [3, 3];
          return [4, reader.read()];
        case 2:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (value) {
            prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
          }
          isDone = done;
          return [3, 1];
        case 3:
          return [2, res];
      }
    });
  });
}
function readToBase64(blob) {
  return new Promise(function(resolve4, reject) {
    var reader = new FileReader();
    reader.onloadend = function() {
      var _a;
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
      var commaIndex = result.indexOf(",");
      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve4(result.substring(dataOffset));
    };
    reader.onabort = function() {
      return reject(new Error("Read aborted"));
    };
    reader.onerror = function() {
      return reject(reader.error);
    };
    reader.readAsDataURL(blob);
  });
}

// node_modules/@aws-sdk/invalid-dependency/dist/es/invalidProvider.js
var invalidProvider = function(message) {
  return function() {
    return Promise.reject(message);
  };
};

// node_modules/@aws-sdk/middleware-retry/node_modules/tslib/tslib.es6.js
var __assign6 = function() {
  __assign6 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign6.apply(this, arguments);
};
function __awaiter6(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator6(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read5(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread4() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read5(arguments[i2]));
  return ar;
}

// node_modules/@aws-sdk/middleware-retry/dist/es/retryMiddleware.js
var retryMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter6(void 0, void 0, void 0, function() {
        var _a;
        return __generator6(this, function(_b) {
          if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode)
            context.userAgent = __spread4(context.userAgent || [], [["cfg/retry-mode", options.retryStrategy.mode]]);
          return [2, options.retryStrategy.retry(next, args)];
        });
      });
    };
  };
};
var retryMiddlewareOptions = {
  name: "retryMiddleware",
  tags: ["RETRY"],
  step: "finalizeRequest",
  priority: "high",
  override: true
};
var getRetryPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-retry/dist/es/constants.js
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20 * 1e3;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

// node_modules/@aws-sdk/service-error-classification/dist/es/constants.js
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException",
  "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

// node_modules/@aws-sdk/service-error-classification/dist/es/index.js
var isRetryableByTrait = function(error) {
  return error.$retryable !== void 0;
};
var isClockSkewError = function(error) {
  return CLOCK_SKEW_ERROR_CODES.includes(error.name);
};
var isThrottlingError = function(error) {
  var _a, _b;
  return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
  var _a;
  return TRANSIENT_ERROR_CODES.includes(error.name) || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var import_uuid = __toESM(require_uuid());

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultRetryQuota.js
var getDefaultRetryQuota = function(initialRetryTokens) {
  var MAX_CAPACITY = initialRetryTokens;
  var availableCapacity = initialRetryTokens;
  var getCapacityAmount = function(error) {
    return error.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST;
  };
  var hasRetryTokens = function(error) {
    return getCapacityAmount(error) <= availableCapacity;
  };
  var retrieveRetryTokens = function(error) {
    if (!hasRetryTokens(error)) {
      throw new Error("No retry token available");
    }
    var capacityAmount = getCapacityAmount(error);
    availableCapacity -= capacityAmount;
    return capacityAmount;
  };
  var releaseRetryTokens = function(capacityReleaseAmount) {
    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;
    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
  };
  return Object.freeze({
    hasRetryTokens,
    retrieveRetryTokens,
    releaseRetryTokens
  });
};

// node_modules/@aws-sdk/middleware-retry/dist/es/delayDecider.js
var defaultDelayDecider = function(delayBase, attempts) {
  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));
};

// node_modules/@aws-sdk/middleware-retry/dist/es/retryDecider.js
var defaultRetryDecider = function(error) {
  if (!error) {
    return false;
  }
  return isRetryableByTrait(error) || isClockSkewError(error) || isThrottlingError(error) || isTransientError(error);
};

// node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = "standard";
var StandardRetryStrategy = (
  /** @class */
  function() {
    function StandardRetryStrategy2(maxAttemptsProvider, options) {
      var _a, _b, _c;
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = DEFAULT_RETRY_MODE;
      this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;
      this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;
      this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
    }
    StandardRetryStrategy2.prototype.shouldRetry = function(error, attempts, maxAttempts) {
      return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    };
    StandardRetryStrategy2.prototype.getMaxAttempts = function() {
      return __awaiter6(this, void 0, void 0, function() {
        var maxAttempts, error_1;
        return __generator6(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.maxAttemptsProvider()];
            case 1:
              maxAttempts = _a.sent();
              return [3, 3];
            case 2:
              error_1 = _a.sent();
              maxAttempts = DEFAULT_MAX_ATTEMPTS;
              return [3, 3];
            case 3:
              return [2, maxAttempts];
          }
        });
      });
    };
    StandardRetryStrategy2.prototype.retry = function(next, args) {
      return __awaiter6(this, void 0, void 0, function() {
        var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
        return __generator6(this, function(_a) {
          switch (_a.label) {
            case 0:
              attempts = 0;
              totalDelay = 0;
              return [4, this.getMaxAttempts()];
            case 1:
              maxAttempts = _a.sent();
              request = args.request;
              if (HttpRequest.isInstance(request)) {
                request.headers[INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
              }
              _loop_1 = function() {
                var _a2, response, output, err_1, delay_1;
                return __generator6(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      _b.trys.push([0, 2, , 5]);
                      if (HttpRequest.isInstance(request)) {
                        request.headers[REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                      }
                      return [4, next(args)];
                    case 1:
                      _a2 = _b.sent(), response = _a2.response, output = _a2.output;
                      this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                      output.$metadata.attempts = attempts + 1;
                      output.$metadata.totalRetryDelay = totalDelay;
                      return [2, { value: { response, output } }];
                    case 2:
                      err_1 = _b.sent();
                      attempts++;
                      if (!this_1.shouldRetry(err_1, attempts, maxAttempts))
                        return [3, 4];
                      retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                      delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);
                      totalDelay += delay_1;
                      return [4, new Promise(function(resolve4) {
                        return setTimeout(resolve4, delay_1);
                      })];
                    case 3:
                      _b.sent();
                      return [2, "continue"];
                    case 4:
                      if (!err_1.$metadata) {
                        err_1.$metadata = {};
                      }
                      err_1.$metadata.attempts = attempts;
                      err_1.$metadata.totalRetryDelay = totalDelay;
                      throw err_1;
                    case 5:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              };
              this_1 = this;
              _a.label = 2;
            case 2:
              if (false)
                return [3, 4];
              return [5, _loop_1()];
            case 3:
              state_1 = _a.sent();
              if (typeof state_1 === "object")
                return [2, state_1.value];
              return [3, 2];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return StandardRetryStrategy2;
  }()
);

// node_modules/@aws-sdk/middleware-retry/dist/es/configurations.js
var resolveRetryConfig = function(input) {
  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
  return __assign6(__assign6({}, input), { maxAttempts, retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts) });
};
var normalizeMaxAttempts = function(maxAttempts) {
  if (maxAttempts === void 0) {
    maxAttempts = DEFAULT_MAX_ATTEMPTS;
  }
  if (typeof maxAttempts === "number") {
    var promisified_1 = Promise.resolve(maxAttempts);
    return function() {
      return promisified_1;
    };
  }
  return maxAttempts;
};

// node_modules/@aws-sdk/util-body-length-browser/dist/es/index.js
function calculateBodyLength(body) {
  if (typeof body === "string") {
    var len = body.length;
    for (var i2 = len - 1; i2 >= 0; i2--) {
      var code = body.charCodeAt(i2);
      if (code > 127 && code <= 2047)
        len++;
      else if (code > 2047 && code <= 65535)
        len += 2;
    }
    return len;
  } else if (typeof body.byteLength === "number") {
    return body.byteLength;
  } else if (typeof body.size === "number") {
    return body.size;
  }
}

// node_modules/@aws-sdk/util-user-agent-browser/node_modules/tslib/tslib.es6.js
function __awaiter7(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator7(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/bowser/src/constants.js
var BROWSER_ALIASES_MAP = {
  "Amazon Silk": "amazon_silk",
  "Android Browser": "android",
  Bada: "bada",
  BlackBerry: "blackberry",
  Chrome: "chrome",
  Chromium: "chromium",
  Electron: "electron",
  Epiphany: "epiphany",
  Firefox: "firefox",
  Focus: "focus",
  Generic: "generic",
  "Google Search": "google_search",
  Googlebot: "googlebot",
  "Internet Explorer": "ie",
  "K-Meleon": "k_meleon",
  Maxthon: "maxthon",
  "Microsoft Edge": "edge",
  "MZ Browser": "mz",
  "NAVER Whale Browser": "naver",
  Opera: "opera",
  "Opera Coast": "opera_coast",
  PhantomJS: "phantomjs",
  Puffin: "puffin",
  QupZilla: "qupzilla",
  QQ: "qq",
  QQLite: "qqlite",
  Safari: "safari",
  Sailfish: "sailfish",
  "Samsung Internet for Android": "samsung_internet",
  SeaMonkey: "seamonkey",
  Sleipnir: "sleipnir",
  Swing: "swing",
  Tizen: "tizen",
  "UC Browser": "uc",
  Vivaldi: "vivaldi",
  "WebOS Browser": "webos",
  WeChat: "wechat",
  "Yandex Browser": "yandex",
  Roku: "roku"
};
var BROWSER_MAP = {
  amazon_silk: "Amazon Silk",
  android: "Android Browser",
  bada: "Bada",
  blackberry: "BlackBerry",
  chrome: "Chrome",
  chromium: "Chromium",
  electron: "Electron",
  epiphany: "Epiphany",
  firefox: "Firefox",
  focus: "Focus",
  generic: "Generic",
  googlebot: "Googlebot",
  google_search: "Google Search",
  ie: "Internet Explorer",
  k_meleon: "K-Meleon",
  maxthon: "Maxthon",
  edge: "Microsoft Edge",
  mz: "MZ Browser",
  naver: "NAVER Whale Browser",
  opera: "Opera",
  opera_coast: "Opera Coast",
  phantomjs: "PhantomJS",
  puffin: "Puffin",
  qupzilla: "QupZilla",
  qq: "QQ Browser",
  qqlite: "QQ Browser Lite",
  safari: "Safari",
  sailfish: "Sailfish",
  samsung_internet: "Samsung Internet for Android",
  seamonkey: "SeaMonkey",
  sleipnir: "Sleipnir",
  swing: "Swing",
  tizen: "Tizen",
  uc: "UC Browser",
  vivaldi: "Vivaldi",
  webos: "WebOS Browser",
  wechat: "WeChat",
  yandex: "Yandex Browser"
};
var PLATFORMS_MAP = {
  tablet: "tablet",
  mobile: "mobile",
  desktop: "desktop",
  tv: "tv"
};
var OS_MAP = {
  WindowsPhone: "Windows Phone",
  Windows: "Windows",
  MacOS: "macOS",
  iOS: "iOS",
  Android: "Android",
  WebOS: "WebOS",
  BlackBerry: "BlackBerry",
  Bada: "Bada",
  Tizen: "Tizen",
  Linux: "Linux",
  ChromeOS: "Chrome OS",
  PlayStation4: "PlayStation 4",
  Roku: "Roku"
};
var ENGINE_MAP = {
  EdgeHTML: "EdgeHTML",
  Blink: "Blink",
  Trident: "Trident",
  Presto: "Presto",
  Gecko: "Gecko",
  WebKit: "WebKit"
};

// node_modules/bowser/src/utils.js
var Utils = class {
  /**
   * Get first matched item for a string
   * @param {RegExp} regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */
  static getFirstMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 0 && match[1] || "";
  }
  /**
   * Get second matched item for a string
   * @param regexp
   * @param {String} ua
   * @return {Array|{index: number, input: string}|*|boolean|string}
   */
  static getSecondMatch(regexp, ua) {
    const match = ua.match(regexp);
    return match && match.length > 1 && match[2] || "";
  }
  /**
   * Match a regexp and return a constant or undefined
   * @param {RegExp} regexp
   * @param {String} ua
   * @param {*} _const Any const that will be returned if regexp matches the string
   * @return {*}
   */
  static matchAndReturnConst(regexp, ua, _const) {
    if (regexp.test(ua)) {
      return _const;
    }
    return void 0;
  }
  static getWindowsVersionName(version4) {
    switch (version4) {
      case "NT":
        return "NT";
      case "XP":
        return "XP";
      case "NT 5.0":
        return "2000";
      case "NT 5.1":
        return "XP";
      case "NT 5.2":
        return "2003";
      case "NT 6.0":
        return "Vista";
      case "NT 6.1":
        return "7";
      case "NT 6.2":
        return "8";
      case "NT 6.3":
        return "8.1";
      case "NT 10.0":
        return "10";
      default:
        return void 0;
    }
  }
  /**
   * Get macOS version name
   *    10.5 - Leopard
   *    10.6 - Snow Leopard
   *    10.7 - Lion
   *    10.8 - Mountain Lion
   *    10.9 - Mavericks
   *    10.10 - Yosemite
   *    10.11 - El Capitan
   *    10.12 - Sierra
   *    10.13 - High Sierra
   *    10.14 - Mojave
   *    10.15 - Catalina
   *
   * @example
   *   getMacOSVersionName("10.14") // 'Mojave'
   *
   * @param  {string} version
   * @return {string} versionName
   */
  static getMacOSVersionName(version4) {
    const v2 = version4.split(".").splice(0, 2).map((s2) => parseInt(s2, 10) || 0);
    v2.push(0);
    if (v2[0] !== 10)
      return void 0;
    switch (v2[1]) {
      case 5:
        return "Leopard";
      case 6:
        return "Snow Leopard";
      case 7:
        return "Lion";
      case 8:
        return "Mountain Lion";
      case 9:
        return "Mavericks";
      case 10:
        return "Yosemite";
      case 11:
        return "El Capitan";
      case 12:
        return "Sierra";
      case 13:
        return "High Sierra";
      case 14:
        return "Mojave";
      case 15:
        return "Catalina";
      default:
        return void 0;
    }
  }
  /**
   * Get Android version name
   *    1.5 - Cupcake
   *    1.6 - Donut
   *    2.0 - Eclair
   *    2.1 - Eclair
   *    2.2 - Froyo
   *    2.x - Gingerbread
   *    3.x - Honeycomb
   *    4.0 - Ice Cream Sandwich
   *    4.1 - Jelly Bean
   *    4.4 - KitKat
   *    5.x - Lollipop
   *    6.x - Marshmallow
   *    7.x - Nougat
   *    8.x - Oreo
   *    9.x - Pie
   *
   * @example
   *   getAndroidVersionName("7.0") // 'Nougat'
   *
   * @param  {string} version
   * @return {string} versionName
   */
  static getAndroidVersionName(version4) {
    const v2 = version4.split(".").splice(0, 2).map((s2) => parseInt(s2, 10) || 0);
    v2.push(0);
    if (v2[0] === 1 && v2[1] < 5)
      return void 0;
    if (v2[0] === 1 && v2[1] < 6)
      return "Cupcake";
    if (v2[0] === 1 && v2[1] >= 6)
      return "Donut";
    if (v2[0] === 2 && v2[1] < 2)
      return "Eclair";
    if (v2[0] === 2 && v2[1] === 2)
      return "Froyo";
    if (v2[0] === 2 && v2[1] > 2)
      return "Gingerbread";
    if (v2[0] === 3)
      return "Honeycomb";
    if (v2[0] === 4 && v2[1] < 1)
      return "Ice Cream Sandwich";
    if (v2[0] === 4 && v2[1] < 4)
      return "Jelly Bean";
    if (v2[0] === 4 && v2[1] >= 4)
      return "KitKat";
    if (v2[0] === 5)
      return "Lollipop";
    if (v2[0] === 6)
      return "Marshmallow";
    if (v2[0] === 7)
      return "Nougat";
    if (v2[0] === 8)
      return "Oreo";
    if (v2[0] === 9)
      return "Pie";
    return void 0;
  }
  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */
  static getVersionPrecision(version4) {
    return version4.split(".").length;
  }
  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1
   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1
   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0
   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1
   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0
   *
   * @param {String} versionA versions versions to compare
   * @param {String} versionB versions versions to compare
   * @param {boolean} [isLoose] enable loose comparison
   * @return {Number} comparison result: -1 when versionA is lower,
   * 1 when versionA is bigger, 0 when both equal
   */
  /* eslint consistent-return: 1 */
  static compareVersions(versionA, versionB, isLoose = false) {
    const versionAPrecision = Utils.getVersionPrecision(versionA);
    const versionBPrecision = Utils.getVersionPrecision(versionB);
    let precision = Math.max(versionAPrecision, versionBPrecision);
    let lastPrecision = 0;
    const chunks = Utils.map([versionA, versionB], (version4) => {
      const delta = precision - Utils.getVersionPrecision(version4);
      const _version = version4 + new Array(delta + 1).join(".0");
      return Utils.map(_version.split("."), (chunk) => new Array(20 - chunk.length).join("0") + chunk).reverse();
    });
    if (isLoose) {
      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);
    }
    precision -= 1;
    while (precision >= lastPrecision) {
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }
      if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === lastPrecision) {
          return 0;
        }
        precision -= 1;
      } else if (chunks[0][precision] < chunks[1][precision]) {
        return -1;
      }
    }
    return void 0;
  }
  /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */
  static map(arr, iterator) {
    const result = [];
    let i2;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i2 = 0; i2 < arr.length; i2 += 1) {
      result.push(iterator(arr[i2]));
    }
    return result;
  }
  /**
   * Array::find polyfill
   *
   * @param  {Array} arr
   * @param  {Function} predicate
   * @return {Array}
   */
  static find(arr, predicate) {
    let i2;
    let l2;
    if (Array.prototype.find) {
      return Array.prototype.find.call(arr, predicate);
    }
    for (i2 = 0, l2 = arr.length; i2 < l2; i2 += 1) {
      const value = arr[i2];
      if (predicate(value, i2)) {
        return value;
      }
    }
    return void 0;
  }
  /**
   * Object::assign polyfill
   *
   * @param  {Object} obj
   * @param  {Object} ...objs
   * @return {Object}
   */
  static assign(obj, ...assigners) {
    const result = obj;
    let i2;
    let l2;
    if (Object.assign) {
      return Object.assign(obj, ...assigners);
    }
    for (i2 = 0, l2 = assigners.length; i2 < l2; i2 += 1) {
      const assigner = assigners[i2];
      if (typeof assigner === "object" && assigner !== null) {
        const keys = Object.keys(assigner);
        keys.forEach((key) => {
          result[key] = assigner[key];
        });
      }
    }
    return obj;
  }
  /**
   * Get short version/alias for a browser name
   *
   * @example
   *   getBrowserAlias('Microsoft Edge') // edge
   *
   * @param  {string} browserName
   * @return {string}
   */
  static getBrowserAlias(browserName) {
    return BROWSER_ALIASES_MAP[browserName];
  }
  /**
   * Get short version/alias for a browser name
   *
   * @example
   *   getBrowserAlias('edge') // Microsoft Edge
   *
   * @param  {string} browserAlias
   * @return {string}
   */
  static getBrowserTypeByAlias(browserAlias) {
    return BROWSER_MAP[browserAlias] || "";
  }
};

// node_modules/bowser/src/parser-browsers.js
var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
var browsersList = [
  /* Googlebot */
  {
    test: [/googlebot/i],
    describe(ua) {
      const browser = {
        name: "Googlebot"
      };
      const version4 = Utils.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  /* Opera < 13.0 */
  {
    test: [/opera/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  /* Opera > 13.0 */
  {
    test: [/opr\/|opios/i],
    describe(ua) {
      const browser = {
        name: "Opera"
      };
      const version4 = Utils.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/SamsungBrowser/i],
    describe(ua) {
      const browser = {
        name: "Samsung Internet for Android"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/Whale/i],
    describe(ua) {
      const browser = {
        name: "NAVER Whale Browser"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/MZBrowser/i],
    describe(ua) {
      const browser = {
        name: "MZ Browser"
      };
      const version4 = Utils.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/focus/i],
    describe(ua) {
      const browser = {
        name: "Focus"
      };
      const version4 = Utils.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/swing/i],
    describe(ua) {
      const browser = {
        name: "Swing"
      };
      const version4 = Utils.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/coast/i],
    describe(ua) {
      const browser = {
        name: "Opera Coast"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/opt\/\d+(?:.?_?\d+)+/i],
    describe(ua) {
      const browser = {
        name: "Opera Touch"
      };
      const version4 = Utils.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/yabrowser/i],
    describe(ua) {
      const browser = {
        name: "Yandex Browser"
      };
      const version4 = Utils.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/ucbrowser/i],
    describe(ua) {
      const browser = {
        name: "UC Browser"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/Maxthon|mxios/i],
    describe(ua) {
      const browser = {
        name: "Maxthon"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/epiphany/i],
    describe(ua) {
      const browser = {
        name: "Epiphany"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/puffin/i],
    describe(ua) {
      const browser = {
        name: "Puffin"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/sleipnir/i],
    describe(ua) {
      const browser = {
        name: "Sleipnir"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/k-meleon/i],
    describe(ua) {
      const browser = {
        name: "K-Meleon"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/micromessenger/i],
    describe(ua) {
      const browser = {
        name: "WeChat"
      };
      const version4 = Utils.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/qqbrowser/i],
    describe(ua) {
      const browser = {
        name: /qqbrowserlite/i.test(ua) ? "QQ Browser Lite" : "QQ Browser"
      };
      const version4 = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/msie|trident/i],
    describe(ua) {
      const browser = {
        name: "Internet Explorer"
      };
      const version4 = Utils.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/\sedg\//i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version4 = Utils.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/edg([ea]|ios)/i],
    describe(ua) {
      const browser = {
        name: "Microsoft Edge"
      };
      const version4 = Utils.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/vivaldi/i],
    describe(ua) {
      const browser = {
        name: "Vivaldi"
      };
      const version4 = Utils.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/seamonkey/i],
    describe(ua) {
      const browser = {
        name: "SeaMonkey"
      };
      const version4 = Utils.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/sailfish/i],
    describe(ua) {
      const browser = {
        name: "Sailfish"
      };
      const version4 = Utils.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/silk/i],
    describe(ua) {
      const browser = {
        name: "Amazon Silk"
      };
      const version4 = Utils.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/phantom/i],
    describe(ua) {
      const browser = {
        name: "PhantomJS"
      };
      const version4 = Utils.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/slimerjs/i],
    describe(ua) {
      const browser = {
        name: "SlimerJS"
      };
      const version4 = Utils.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const browser = {
        name: "BlackBerry"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const browser = {
        name: "WebOS Browser"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/bada/i],
    describe(ua) {
      const browser = {
        name: "Bada"
      };
      const version4 = Utils.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/tizen/i],
    describe(ua) {
      const browser = {
        name: "Tizen"
      };
      const version4 = Utils.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/qupzilla/i],
    describe(ua) {
      const browser = {
        name: "QupZilla"
      };
      const version4 = Utils.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/firefox|iceweasel|fxios/i],
    describe(ua) {
      const browser = {
        name: "Firefox"
      };
      const version4 = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/electron/i],
    describe(ua) {
      const browser = {
        name: "Electron"
      };
      const version4 = Utils.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/MiuiBrowser/i],
    describe(ua) {
      const browser = {
        name: "Miui"
      };
      const version4 = Utils.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/chromium/i],
    describe(ua) {
      const browser = {
        name: "Chromium"
      };
      const version4 = Utils.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/chrome|crios|crmo/i],
    describe(ua) {
      const browser = {
        name: "Chrome"
      };
      const version4 = Utils.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  {
    test: [/GSA/i],
    describe(ua) {
      const browser = {
        name: "Google Search"
      };
      const version4 = Utils.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  /* Android Browser */
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const browser = {
        name: "Android Browser"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  /* PlayStation 4 */
  {
    test: [/playstation 4/i],
    describe(ua) {
      const browser = {
        name: "PlayStation 4"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  /* Safari */
  {
    test: [/safari|applewebkit/i],
    describe(ua) {
      const browser = {
        name: "Safari"
      };
      const version4 = Utils.getFirstMatch(commonVersionIdentifier, ua);
      if (version4) {
        browser.version = version4;
      }
      return browser;
    }
  },
  /* Something else */
  {
    test: [/.*/i],
    describe(ua) {
      const regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
      const regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
      const hasDeviceSpec = ua.search("\\(") !== -1;
      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
      return {
        name: Utils.getFirstMatch(regexp, ua),
        version: Utils.getSecondMatch(regexp, ua)
      };
    }
  }
];
var parser_browsers_default = browsersList;

// node_modules/bowser/src/parser-os.js
var parser_os_default = [
  /* Roku */
  {
    test: [/Roku\/DVP/],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
      return {
        name: OS_MAP.Roku,
        version: version4
      };
    }
  },
  /* Windows Phone */
  {
    test: [/windows phone/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.WindowsPhone,
        version: version4
      };
    }
  },
  /* Windows */
  {
    test: [/windows /i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
      const versionName = Utils.getWindowsVersionName(version4);
      return {
        name: OS_MAP.Windows,
        version: version4,
        versionName
      };
    }
  },
  /* Firefox on iPad */
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe(ua) {
      const result = {
        name: OS_MAP.iOS
      };
      const version4 = Utils.getSecondMatch(/(Version\/)(\d[\d.]+)/, ua);
      if (version4) {
        result.version = version4;
      }
      return result;
    }
  },
  /* macOS */
  {
    test: [/macintosh/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, ".");
      const versionName = Utils.getMacOSVersionName(version4);
      const os = {
        name: OS_MAP.MacOS,
        version: version4
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  /* iOS */
  {
    test: [/(ipod|iphone|ipad)/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, ".");
      return {
        name: OS_MAP.iOS,
        version: version4
      };
    }
  },
  /* Android */
  {
    test(parser) {
      const notLikeAndroid = !parser.test(/like android/i);
      const butAndroid = parser.test(/android/i);
      return notLikeAndroid && butAndroid;
    },
    describe(ua) {
      const version4 = Utils.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
      const versionName = Utils.getAndroidVersionName(version4);
      const os = {
        name: OS_MAP.Android,
        version: version4
      };
      if (versionName) {
        os.versionName = versionName;
      }
      return os;
    }
  },
  /* WebOS */
  {
    test: [/(web|hpw)[o0]s/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
      const os = {
        name: OS_MAP.WebOS
      };
      if (version4 && version4.length) {
        os.version = version4;
      }
      return os;
    }
  },
  /* BlackBerry */
  {
    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || Utils.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || Utils.getFirstMatch(/\bbb(\d+)/i, ua);
      return {
        name: OS_MAP.BlackBerry,
        version: version4
      };
    }
  },
  /* Bada */
  {
    test: [/bada/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Bada,
        version: version4
      };
    }
  },
  /* Tizen */
  {
    test: [/tizen/i],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.Tizen,
        version: version4
      };
    }
  },
  /* Linux */
  {
    test: [/linux/i],
    describe() {
      return {
        name: OS_MAP.Linux
      };
    }
  },
  /* Chrome OS */
  {
    test: [/CrOS/],
    describe() {
      return {
        name: OS_MAP.ChromeOS
      };
    }
  },
  /* Playstation 4 */
  {
    test: [/PlayStation 4/],
    describe(ua) {
      const version4 = Utils.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
      return {
        name: OS_MAP.PlayStation4,
        version: version4
      };
    }
  }
];

// node_modules/bowser/src/parser-platforms.js
var parser_platforms_default = [
  /* Googlebot */
  {
    test: [/googlebot/i],
    describe() {
      return {
        type: "bot",
        vendor: "Google"
      };
    }
  },
  /* Huawei */
  {
    test: [/huawei/i],
    describe(ua) {
      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && "Nova";
      const platform = {
        type: PLATFORMS_MAP.mobile,
        vendor: "Huawei"
      };
      if (model) {
        platform.model = model;
      }
      return platform;
    }
  },
  /* Nexus Tablet */
  {
    test: [/nexus\s*(?:7|8|9|10).*/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Nexus"
      };
    }
  },
  /* iPad */
  {
    test: [/ipad/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  /* Firefox on iPad */
  {
    test: [/Macintosh(.*?) FxiOS(.*?)\//],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Apple",
        model: "iPad"
      };
    }
  },
  /* Amazon Kindle Fire */
  {
    test: [/kftt build/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon",
        model: "Kindle Fire HD 7"
      };
    }
  },
  /* Another Amazon Tablet with Silk */
  {
    test: [/silk/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet,
        vendor: "Amazon"
      };
    }
  },
  /* Tablet */
  {
    test: [/tablet(?! pc)/i],
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  /* iPod/iPhone */
  {
    test(parser) {
      const iDevice = parser.test(/ipod|iphone/i);
      const likeIDevice = parser.test(/like (ipod|iphone)/i);
      return iDevice && !likeIDevice;
    },
    describe(ua) {
      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Apple",
        model
      };
    }
  },
  /* Nexus Mobile */
  {
    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Nexus"
      };
    }
  },
  /* Mobile */
  {
    test: [/[^-]mobi/i],
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  /* BlackBerry */
  {
    test(parser) {
      return parser.getBrowserName(true) === "blackberry";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "BlackBerry"
      };
    }
  },
  /* Bada */
  {
    test(parser) {
      return parser.getBrowserName(true) === "bada";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  /* Windows Phone */
  {
    test(parser) {
      return parser.getBrowserName() === "windows phone";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile,
        vendor: "Microsoft"
      };
    }
  },
  /* Android Tablet */
  {
    test(parser) {
      const osMajorVersion = Number(String(parser.getOSVersion()).split(".")[0]);
      return parser.getOSName(true) === "android" && osMajorVersion >= 3;
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tablet
      };
    }
  },
  /* Android Mobile */
  {
    test(parser) {
      return parser.getOSName(true) === "android";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.mobile
      };
    }
  },
  /* desktop */
  {
    test(parser) {
      return parser.getOSName(true) === "macos";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop,
        vendor: "Apple"
      };
    }
  },
  /* Windows */
  {
    test(parser) {
      return parser.getOSName(true) === "windows";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  /* Linux */
  {
    test(parser) {
      return parser.getOSName(true) === "linux";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.desktop
      };
    }
  },
  /* PlayStation 4 */
  {
    test(parser) {
      return parser.getOSName(true) === "playstation 4";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  },
  /* Roku */
  {
    test(parser) {
      return parser.getOSName(true) === "roku";
    },
    describe() {
      return {
        type: PLATFORMS_MAP.tv
      };
    }
  }
];

// node_modules/bowser/src/parser-engines.js
var parser_engines_default = [
  /* EdgeHTML */
  {
    test(parser) {
      return parser.getBrowserName(true) === "microsoft edge";
    },
    describe(ua) {
      const isBlinkBased = /\sedg\//i.test(ua);
      if (isBlinkBased) {
        return {
          name: ENGINE_MAP.Blink
        };
      }
      const version4 = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);
      return {
        name: ENGINE_MAP.EdgeHTML,
        version: version4
      };
    }
  },
  /* Trident */
  {
    test: [/trident/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Trident
      };
      const version4 = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        engine.version = version4;
      }
      return engine;
    }
  },
  /* Presto */
  {
    test(parser) {
      return parser.test(/presto/i);
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Presto
      };
      const version4 = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        engine.version = version4;
      }
      return engine;
    }
  },
  /* Gecko */
  {
    test(parser) {
      const isGecko = parser.test(/gecko/i);
      const likeGecko = parser.test(/like gecko/i);
      return isGecko && !likeGecko;
    },
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Gecko
      };
      const version4 = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        engine.version = version4;
      }
      return engine;
    }
  },
  /* Blink */
  {
    test: [/(apple)?webkit\/537\.36/i],
    describe() {
      return {
        name: ENGINE_MAP.Blink
      };
    }
  },
  /* WebKit */
  {
    test: [/(apple)?webkit/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.WebKit
      };
      const version4 = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);
      if (version4) {
        engine.version = version4;
      }
      return engine;
    }
  }
];

// node_modules/bowser/src/parser.js
var Parser = class {
  /**
   * Create instance of Parser
   *
   * @param {String} UA User-Agent string
   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance
   * improvements if you need to make a more particular parsing
   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}
   *
   * @throw {Error} in case of empty UA String
   *
   * @constructor
   */
  constructor(UA, skipParsing = false) {
    if (UA === void 0 || UA === null || UA === "") {
      throw new Error("UserAgent parameter can't be empty");
    }
    this._ua = UA;
    this.parsedResult = {};
    if (skipParsing !== true) {
      this.parse();
    }
  }
  /**
   * Get UserAgent string of current Parser instance
   * @return {String} User-Agent String of the current <Parser> object
   *
   * @public
   */
  getUA() {
    return this._ua;
  }
  /**
   * Test a UA string for a regexp
   * @param {RegExp} regex
   * @return {Boolean}
   */
  test(regex) {
    return regex.test(this._ua);
  }
  /**
   * Get parsed browser object
   * @return {Object}
   */
  parseBrowser() {
    this.parsedResult.browser = {};
    const browserDescriptor = Utils.find(parser_browsers_default, (_browser) => {
      if (typeof _browser.test === "function") {
        return _browser.test(this);
      }
      if (_browser.test instanceof Array) {
        return _browser.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (browserDescriptor) {
      this.parsedResult.browser = browserDescriptor.describe(this.getUA());
    }
    return this.parsedResult.browser;
  }
  /**
   * Get parsed browser object
   * @return {Object}
   *
   * @public
   */
  getBrowser() {
    if (this.parsedResult.browser) {
      return this.parsedResult.browser;
    }
    return this.parseBrowser();
  }
  /**
   * Get browser's name
   * @return {String} Browser's name or an empty string
   *
   * @public
   */
  getBrowserName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getBrowser().name).toLowerCase() || "";
    }
    return this.getBrowser().name || "";
  }
  /**
   * Get browser's version
   * @return {String} version of browser
   *
   * @public
   */
  getBrowserVersion() {
    return this.getBrowser().version;
  }
  /**
   * Get OS
   * @return {Object}
   *
   * @example
   * this.getOS();
   * {
   *   name: 'macOS',
   *   version: '10.11.12'
   * }
   */
  getOS() {
    if (this.parsedResult.os) {
      return this.parsedResult.os;
    }
    return this.parseOS();
  }
  /**
   * Parse OS and save it to this.parsedResult.os
   * @return {*|{}}
   */
  parseOS() {
    this.parsedResult.os = {};
    const os = Utils.find(parser_os_default, (_os) => {
      if (typeof _os.test === "function") {
        return _os.test(this);
      }
      if (_os.test instanceof Array) {
        return _os.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (os) {
      this.parsedResult.os = os.describe(this.getUA());
    }
    return this.parsedResult.os;
  }
  /**
   * Get OS name
   * @param {Boolean} [toLowerCase] return lower-cased value
   * @return {String} name of the OS — macOS, Windows, Linux, etc.
   */
  getOSName(toLowerCase) {
    const { name } = this.getOS();
    if (toLowerCase) {
      return String(name).toLowerCase() || "";
    }
    return name || "";
  }
  /**
   * Get OS version
   * @return {String} full version with dots ('10.11.12', '5.6', etc)
   */
  getOSVersion() {
    return this.getOS().version;
  }
  /**
   * Get parsed platform
   * @return {{}}
   */
  getPlatform() {
    if (this.parsedResult.platform) {
      return this.parsedResult.platform;
    }
    return this.parsePlatform();
  }
  /**
   * Get platform name
   * @param {Boolean} [toLowerCase=false]
   * @return {*}
   */
  getPlatformType(toLowerCase = false) {
    const { type } = this.getPlatform();
    if (toLowerCase) {
      return String(type).toLowerCase() || "";
    }
    return type || "";
  }
  /**
   * Get parsed platform
   * @return {{}}
   */
  parsePlatform() {
    this.parsedResult.platform = {};
    const platform = Utils.find(parser_platforms_default, (_platform) => {
      if (typeof _platform.test === "function") {
        return _platform.test(this);
      }
      if (_platform.test instanceof Array) {
        return _platform.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (platform) {
      this.parsedResult.platform = platform.describe(this.getUA());
    }
    return this.parsedResult.platform;
  }
  /**
   * Get parsed engine
   * @return {{}}
   */
  getEngine() {
    if (this.parsedResult.engine) {
      return this.parsedResult.engine;
    }
    return this.parseEngine();
  }
  /**
   * Get engines's name
   * @return {String} Engines's name or an empty string
   *
   * @public
   */
  getEngineName(toLowerCase) {
    if (toLowerCase) {
      return String(this.getEngine().name).toLowerCase() || "";
    }
    return this.getEngine().name || "";
  }
  /**
   * Get parsed platform
   * @return {{}}
   */
  parseEngine() {
    this.parsedResult.engine = {};
    const engine = Utils.find(parser_engines_default, (_engine) => {
      if (typeof _engine.test === "function") {
        return _engine.test(this);
      }
      if (_engine.test instanceof Array) {
        return _engine.test.some((condition) => this.test(condition));
      }
      throw new Error("Browser's test function is not valid");
    });
    if (engine) {
      this.parsedResult.engine = engine.describe(this.getUA());
    }
    return this.parsedResult.engine;
  }
  /**
   * Parse full information about the browser
   * @returns {Parser}
   */
  parse() {
    this.parseBrowser();
    this.parseOS();
    this.parsePlatform();
    this.parseEngine();
    return this;
  }
  /**
   * Get parsed result
   * @return {ParsedResult}
   */
  getResult() {
    return Utils.assign({}, this.parsedResult);
  }
  /**
   * Check if parsed browser matches certain conditions
   *
   * @param {Object} checkTree It's one or two layered object,
   * which can include a platform or an OS on the first layer
   * and should have browsers specs on the bottom-laying layer
   *
   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.
   * Returns `undefined` when the browser is no described in the checkTree object.
   *
   * @example
   * const browser = Bowser.getParser(window.navigator.userAgent);
   * if (browser.satisfies({chrome: '>118.01.1322' }))
   * // or with os
   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))
   * // or with platforms
   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))
   */
  satisfies(checkTree) {
    const platformsAndOSes = {};
    let platformsAndOSCounter = 0;
    const browsers = {};
    let browsersCounter = 0;
    const allDefinitions = Object.keys(checkTree);
    allDefinitions.forEach((key) => {
      const currentDefinition = checkTree[key];
      if (typeof currentDefinition === "string") {
        browsers[key] = currentDefinition;
        browsersCounter += 1;
      } else if (typeof currentDefinition === "object") {
        platformsAndOSes[key] = currentDefinition;
        platformsAndOSCounter += 1;
      }
    });
    if (platformsAndOSCounter > 0) {
      const platformsAndOSNames = Object.keys(platformsAndOSes);
      const OSMatchingDefinition = Utils.find(platformsAndOSNames, (name) => this.isOS(name));
      if (OSMatchingDefinition) {
        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);
        if (osResult !== void 0) {
          return osResult;
        }
      }
      const platformMatchingDefinition = Utils.find(
        platformsAndOSNames,
        (name) => this.isPlatform(name)
      );
      if (platformMatchingDefinition) {
        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);
        if (platformResult !== void 0) {
          return platformResult;
        }
      }
    }
    if (browsersCounter > 0) {
      const browserNames = Object.keys(browsers);
      const matchingDefinition = Utils.find(browserNames, (name) => this.isBrowser(name, true));
      if (matchingDefinition !== void 0) {
        return this.compareVersion(browsers[matchingDefinition]);
      }
    }
    return void 0;
  }
  /**
   * Check if the browser name equals the passed string
   * @param browserName The string to compare with the browser name
   * @param [includingAlias=false] The flag showing whether alias will be included into comparison
   * @returns {boolean}
   */
  isBrowser(browserName, includingAlias = false) {
    const defaultBrowserName = this.getBrowserName().toLowerCase();
    let browserNameLower = browserName.toLowerCase();
    const alias = Utils.getBrowserTypeByAlias(browserNameLower);
    if (includingAlias && alias) {
      browserNameLower = alias.toLowerCase();
    }
    return browserNameLower === defaultBrowserName;
  }
  compareVersion(version4) {
    let expectedResults = [0];
    let comparableVersion = version4;
    let isLoose = false;
    const currentBrowserVersion = this.getBrowserVersion();
    if (typeof currentBrowserVersion !== "string") {
      return void 0;
    }
    if (version4[0] === ">" || version4[0] === "<") {
      comparableVersion = version4.substr(1);
      if (version4[1] === "=") {
        isLoose = true;
        comparableVersion = version4.substr(2);
      } else {
        expectedResults = [];
      }
      if (version4[0] === ">") {
        expectedResults.push(1);
      } else {
        expectedResults.push(-1);
      }
    } else if (version4[0] === "=") {
      comparableVersion = version4.substr(1);
    } else if (version4[0] === "~") {
      isLoose = true;
      comparableVersion = version4.substr(1);
    }
    return expectedResults.indexOf(
      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)
    ) > -1;
  }
  isOS(osName) {
    return this.getOSName(true) === String(osName).toLowerCase();
  }
  isPlatform(platformType) {
    return this.getPlatformType(true) === String(platformType).toLowerCase();
  }
  isEngine(engineName) {
    return this.getEngineName(true) === String(engineName).toLowerCase();
  }
  /**
   * Is anything? Check if the browser is called "anything",
   * the OS called "anything" or the platform called "anything"
   * @param {String} anything
   * @param [includingAlias=false] The flag showing whether alias will be included into comparison
   * @returns {Boolean}
   */
  is(anything, includingAlias = false) {
    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);
  }
  /**
   * Check if any of the given values satisfies this.is(anything)
   * @param {String[]} anythings
   * @returns {Boolean}
   */
  some(anythings = []) {
    return anythings.some((anything) => this.is(anything));
  }
};
var parser_default = Parser;

// node_modules/bowser/src/bowser.js
var Bowser = class {
  /**
   * Creates a {@link Parser} instance
   *
   * @param {String} UA UserAgent string
   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it
   * explicitly. Same as `skipParsing` for {@link Parser}.
   * @returns {Parser}
   * @throws {Error} when UA is not a String
   *
   * @example
   * const parser = Bowser.getParser(window.navigator.userAgent);
   * const result = parser.getResult();
   */
  static getParser(UA, skipParsing = false) {
    if (typeof UA !== "string") {
      throw new Error("UserAgent should be a string");
    }
    return new parser_default(UA, skipParsing);
  }
  /**
   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately
   *
   * @param UA
   * @return {ParsedResult}
   *
   * @example
   * const result = Bowser.parse(window.navigator.userAgent);
   */
  static parse(UA) {
    return new parser_default(UA).getResult();
  }
  static get BROWSER_MAP() {
    return BROWSER_MAP;
  }
  static get ENGINE_MAP() {
    return ENGINE_MAP;
  }
  static get OS_MAP() {
    return OS_MAP;
  }
  static get PLATFORMS_MAP() {
    return PLATFORMS_MAP;
  }
};
var bowser_default = Bowser;

// node_modules/@aws-sdk/util-user-agent-browser/dist/es/index.js
var defaultUserAgent = function(_a) {
  var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
  return function() {
    return __awaiter7(void 0, void 0, void 0, function() {
      var parsedUA, sections;
      var _a2, _b, _c, _d, _e, _f, _g;
      return __generator7(this, function(_h) {
        parsedUA = ((_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) ? bowser_default.parse(window.navigator.userAgent) : void 0;
        sections = [
          // sdk-metadata
          ["aws-sdk-js", clientVersion],
          // os-metadata
          ["os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version],
          // language-metadata
          // ECMAScript edition doesn't matter in JS.
          ["lang/js"],
          // browser vendor and version.
          ["md/browser", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")]
        ];
        if (serviceId) {
          sections.push(["api/" + serviceId, clientVersion]);
        }
        return [2, sections];
      });
    });
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
init_es();

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/endpoints.js
var AWS_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "logs.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "logs.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "logs.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "logs.{region}.amazonaws.com";
var AWS_REGIONS = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "af-south-1":
      regionInfo = {
        hostname: "logs.af-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-east-1":
      regionInfo = {
        hostname: "logs.ap-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-1":
      regionInfo = {
        hostname: "logs.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "logs.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "logs.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "logs.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "logs.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "logs.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "logs.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "cn-northwest-1":
      regionInfo = {
        hostname: "logs.cn-northwest-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "logs.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "logs.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-south-1":
      regionInfo = {
        hostname: "logs.eu-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "logs.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "logs.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "logs.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "logs-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "logs-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-west-1":
      regionInfo = {
        hostname: "logs-fips.us-west-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "logs-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "me-south-1":
      regionInfo = {
        hostname: "logs.me-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "logs.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "logs.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "logs.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-east-1":
      regionInfo = {
        hostname: "logs.us-gov-east-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-east-1"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "logs.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "us-iso-east-1":
      regionInfo = {
        hostname: "logs.us-iso-east-1.c2s.ic.gov",
        partition: "aws-iso"
      };
      break;
    case "us-isob-east-1":
      regionInfo = {
        hostname: "logs.us-isob-east-1.sc2s.sgov.gov",
        partition: "aws-iso-b"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "logs.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "logs.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign({ signingService: "logs" }, regionInfo));
};

// node_modules/@aws-sdk/querystring-parser/node_modules/tslib/tslib.es6.js
function __values5(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read6(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/querystring-parser/dist/es/index.js
function parseQueryString(querystring) {
  var e_1, _a;
  var query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    try {
      for (var _b = __values5(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var pair = _c.value;
        var _d = __read6(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  return query;
}

// node_modules/@aws-sdk/url-parser/dist/es/index.js
var parseUrl = function(url2) {
  var _a = new URL(url2), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
  var query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : void 0,
    protocol,
    path: pathname,
    query
  };
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.shared.js
var ClientSharedValues = {
  apiVersion: "2014-03-28",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider,
  serviceId: "CloudWatch Logs",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/runtimeConfig.browser.js
var ClientDefaultValues = __assign(__assign({}, ClientSharedValues), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_2) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues.serviceId,
  clientVersion: package_default.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser.Sha256, streamCollector, utf8Decoder: fromUtf83, utf8Encoder: toUtf83 });

// node_modules/@aws-sdk/config-resolver/node_modules/tslib/tslib.es6.js
var __assign7 = function() {
  __assign7 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign7.apply(this, arguments);
};
function __awaiter8(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator8(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/config-resolver/dist/es/EndpointsConfig.js
var resolveEndpointsConfig = function(input) {
  var _a;
  return __assign7(__assign7({}, input), { tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true, endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
    return getEndPointFromRegion(input);
  }, isCustomEndpoint: input.endpoint ? true : false });
};
var normalizeEndpoint = function(input) {
  var endpoint = input.endpoint, urlParser = input.urlParser;
  if (typeof endpoint === "string") {
    var promisified_1 = Promise.resolve(urlParser(endpoint));
    return function() {
      return promisified_1;
    };
  } else if (typeof endpoint === "object") {
    var promisified_2 = Promise.resolve(endpoint);
    return function() {
      return promisified_2;
    };
  }
  return endpoint;
};
var getEndPointFromRegion = function(input) {
  return __awaiter8(void 0, void 0, void 0, function() {
    var _a, tls, region, dnsHostRegex, hostname;
    var _b;
    return __generator8(this, function(_c) {
      switch (_c.label) {
        case 0:
          _a = input.tls, tls = _a === void 0 ? true : _a;
          return [4, input.region()];
        case 1:
          region = _c.sent();
          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
          if (!dnsHostRegex.test(region)) {
            throw new Error("Invalid region in client config");
          }
          return [4, input.regionInfoProvider(region)];
        case 2:
          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
          if (!hostname) {
            throw new Error("Cannot resolve hostname from client config");
          }
          return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
      }
    });
  });
};

// node_modules/@aws-sdk/config-resolver/dist/es/RegionConfig.js
var resolveRegionConfig = function(input) {
  if (!input.region) {
    throw new Error("Region is missing");
  }
  return __assign7(__assign7({}, input), { region: normalizeRegion(input.region) });
};
var normalizeRegion = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  }
  return region;
};

// node_modules/@aws-sdk/middleware-content-length/node_modules/tslib/tslib.es6.js
var __assign8 = function() {
  __assign8 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign8.apply(this, arguments);
};
function __awaiter9(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator9(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-content-length/dist/es/index.js
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
  var _this = this;
  return function(next) {
    return function(args) {
      return __awaiter9(_this, void 0, void 0, function() {
        var request, body, headers, length;
        var _a;
        return __generator9(this, function(_b) {
          request = args.request;
          if (HttpRequest.isInstance(request)) {
            body = request.body, headers = request.headers;
            if (body && Object.keys(headers).map(function(str) {
              return str.toLowerCase();
            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
              length = bodyLengthChecker(body);
              if (length !== void 0) {
                request.headers = __assign8(__assign8({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
              }
            }
          }
          return [2, next(__assign8(__assign8({}, args), { request }))];
        });
      });
    };
  };
}
var contentLengthMiddlewareOptions = {
  step: "build",
  tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
  name: "contentLengthMiddleware",
  override: true
};
var getContentLengthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-host-header/node_modules/tslib/tslib.es6.js
function __awaiter10(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator10(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-host-header/dist/es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware = function(options) {
  return function(next) {
    return function(args) {
      return __awaiter10(void 0, void 0, void 0, function() {
        var request, _a, handlerProtocol;
        return __generator10(this, function(_b) {
          if (!HttpRequest.isInstance(args.request))
            return [2, next(args)];
          request = args.request;
          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
          if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
            delete request.headers["host"];
            request.headers[":authority"] = "";
          } else if (!request.headers["host"]) {
            request.headers["host"] = request.hostname;
          }
          return [2, next(args)];
        });
      });
    };
  };
};
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-logger/node_modules/tslib/tslib.es6.js
function __rest3(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter11(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator11(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-logger/dist/es/loggerMiddleware.js
var loggerMiddleware = function() {
  return function(next, context) {
    return function(args) {
      return __awaiter11(void 0, void 0, void 0, function() {
        var clientName, commandName, inputFilterSensitiveLog, logger38, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
        return __generator11(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger38 = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
              return [4, next(args)];
            case 1:
              response = _b.sent();
              if (!logger38) {
                return [2, response];
              }
              if (typeof logger38.info === "function") {
                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest3(_a, ["$metadata"]);
                logger38.info({
                  clientName,
                  commandName,
                  input: inputFilterSensitiveLog(args.input),
                  output: outputFilterSensitiveLog(outputWithoutMetadata),
                  metadata: $metadata
                });
              }
              return [2, response];
          }
        });
      });
    };
  };
};
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-signing/node_modules/tslib/tslib.es6.js
var __assign9 = function() {
  __assign9 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign9.apply(this, arguments);
};
function __awaiter12(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator12(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read7(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/signature-v4/node_modules/tslib/tslib.es6.js
var __assign10 = function() {
  __assign10 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign10.apply(this, arguments);
};
function __rest4(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter13(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator13(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values6(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read8(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread5() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read8(arguments[i2]));
  return ar;
}

// node_modules/@aws-sdk/signature-v4/dist/es/constants.js
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var ALWAYS_UNSIGNABLE_HEADERS = {
  authorization: true,
  "cache-control": true,
  connection: true,
  expect: true,
  from: true,
  "keep-alive": true,
  "max-forwards": true,
  pragma: true,
  referer: true,
  te: true,
  trailer: true,
  "transfer-encoding": true,
  upgrade: true,
  "user-agent": true,
  "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER = "aws4_request";
var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

// node_modules/@aws-sdk/signature-v4/dist/es/credentialDerivation.js
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
  return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
}
var getSigningKey = function(sha256Constructor, credentials, shortDate, region, service) {
  return __awaiter13(void 0, void 0, void 0, function() {
    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
    var e_1, _c;
    return __generator13(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];
        case 1:
          credsHash = _d.sent();
          cacheKey = shortDate + ":" + region + ":" + service + ":" + toHex(credsHash) + ":" + credentials.sessionToken;
          if (cacheKey in signingKeyCache) {
            return [2, signingKeyCache[cacheKey]];
          }
          cacheQueue.push(cacheKey);
          while (cacheQueue.length > MAX_CACHE_SIZE) {
            delete signingKeyCache[cacheQueue.shift()];
          }
          key = "AWS4" + credentials.secretAccessKey;
          _d.label = 2;
        case 2:
          _d.trys.push([2, 7, 8, 9]);
          _a = __values6([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();
          _d.label = 3;
        case 3:
          if (!!_b.done)
            return [3, 6];
          signable = _b.value;
          return [4, hmac(sha256Constructor, key, signable)];
        case 4:
          key = _d.sent();
          _d.label = 5;
        case 5:
          _b = _a.next();
          return [3, 3];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 9:
          return [2, signingKeyCache[cacheKey] = key];
      }
    });
  });
};
function hmac(ctor, secret, data) {
  var hash2 = new ctor(secret);
  hash2.update(data);
  return hash2.digest();
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalHeaders.js
function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
  var e_1, _b;
  var headers = _a.headers;
  var canonical = {};
  try {
    for (var _c = __values6(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {
      var headerName = _d.value;
      var canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_d && !_d.done && (_b = _c.return))
        _b.call(_c);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return canonical;
}

// node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalQuery.js
function getCanonicalQuery(_a) {
  var e_1, _b;
  var _c = _a.query, query = _c === void 0 ? {} : _c;
  var keys = [];
  var serialized = {};
  var _loop_1 = function(key2) {
    if (key2.toLowerCase() === SIGNATURE_HEADER) {
      return "continue";
    }
    keys.push(key2);
    var value = query[key2];
    if (typeof value === "string") {
      serialized[key2] = escapeUri(key2) + "=" + escapeUri(value);
    } else if (Array.isArray(value)) {
      serialized[key2] = value.slice(0).sort().reduce(function(encoded, value2) {
        return encoded.concat([escapeUri(key2) + "=" + escapeUri(value2)]);
      }, []).join("&");
    }
  };
  try {
    for (var _d = __values6(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {
      var key = _e.value;
      _loop_1(key);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_e && !_e.done && (_b = _d.return))
        _b.call(_d);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return keys.map(function(key2) {
    return serialized[key2];
  }).filter(function(serialized2) {
    return serialized2;
  }).join("&");
}

// node_modules/@aws-sdk/is-array-buffer/dist/es/index.js
var isArrayBuffer = function(arg) {
  return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

// node_modules/@aws-sdk/signature-v4/dist/es/getPayloadHash.js
function getPayloadHash(_a, hashConstructor) {
  var headers = _a.headers, body = _a.body;
  return __awaiter13(this, void 0, void 0, function() {
    var _b, _c, headerName, hashCtor, _d;
    var e_1, _e;
    return __generator13(this, function(_f) {
      switch (_f.label) {
        case 0:
          try {
            for (_b = __values6(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
              headerName = _c.value;
              if (headerName.toLowerCase() === SHA256_HEADER) {
                return [2, headers[headerName]];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_e = _b.return))
                _e.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          if (!(body == void 0))
            return [3, 1];
          return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
        case 1:
          if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)))
            return [3, 3];
          hashCtor = new hashConstructor();
          hashCtor.update(body);
          _d = toHex;
          return [4, hashCtor.digest()];
        case 2:
          return [2, _d.apply(void 0, [_f.sent()])];
        case 3:
          return [2, UNSIGNED_PAYLOAD];
      }
    });
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/hasHeader.js
function hasHeader(soughtHeader, headers) {
  var e_1, _a;
  soughtHeader = soughtHeader.toLowerCase();
  try {
    for (var _b = __values6(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return false;
}

// node_modules/@aws-sdk/signature-v4/dist/es/cloneRequest.js
function cloneRequest(_a) {
  var headers = _a.headers, query = _a.query, rest = __rest4(_a, ["headers", "query"]);
  return __assign10(__assign10({}, rest), { headers: __assign10({}, headers), query: query ? cloneQuery2(query) : void 0 });
}
function cloneQuery2(query) {
  return Object.keys(query).reduce(function(carry, paramName) {
    var _a;
    var param = query[paramName];
    return __assign10(__assign10({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread5(param) : param, _a));
  }, {});
}

// node_modules/@aws-sdk/signature-v4/dist/es/moveHeadersToQuery.js
function moveHeadersToQuery(request, options) {
  var e_1, _a;
  var _b;
  if (options === void 0) {
    options = {};
  }
  var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
  try {
    for (var _e = __values6(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
      var name = _f.value;
      var lname = name.toLowerCase();
      if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e.return))
        _a.call(_e);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return __assign10(__assign10({}, request), {
    headers,
    query
  });
}

// node_modules/@aws-sdk/signature-v4/dist/es/prepareRequest.js
function prepareRequest(request) {
  var e_1, _a;
  request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
  try {
    for (var _b = __values6(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var headerName = _c.value;
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return request;
}

// node_modules/@aws-sdk/signature-v4/dist/es/utilDate.js
function iso8601(time) {
  return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
  if (typeof time === "number") {
    return new Date(time * 1e3);
  }
  if (typeof time === "string") {
    if (Number(time)) {
      return new Date(Number(time) * 1e3);
    }
    return new Date(time);
  }
  return time;
}

// node_modules/@aws-sdk/signature-v4/dist/es/SignatureV4.js
var SignatureV4 = (
  /** @class */
  function() {
    function SignatureV42(_a) {
      var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
      this.service = service;
      this.sha256 = sha256;
      this.uriEscapePath = uriEscapePath;
      this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
      this.regionProvider = normalizeRegionProvider(region);
      this.credentialProvider = normalizeCredentialsProvider(credentials);
    }
    SignatureV42.prototype.presign = function(originalRequest, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter13(this, void 0, void 0, function() {
        var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
        return __generator13(this, function(_l) {
          switch (_l.label) {
            case 0:
              _a = options.signingDate, signingDate = _a === void 0 ? /* @__PURE__ */ new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
              return [4, this.credentialProvider()];
            case 1:
              credentials = _l.sent();
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 2];
              _c = signingRegion;
              return [3, 4];
            case 2:
              return [4, this.regionProvider()];
            case 3:
              _c = _l.sent();
              _l.label = 4;
            case 4:
              region = _c;
              _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
              if (expiresIn > MAX_PRESIGNED_TTL) {
                return [2, Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")];
              }
              scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
              request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
              if (credentials.sessionToken) {
                request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
              }
              request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
              request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
              request.query[AMZ_DATE_QUERY_PARAM] = longDate;
              request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
              canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
              request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
              _e = request.query;
              _f = SIGNATURE_QUERY_PARAM;
              _g = this.getSignature;
              _h = [
                longDate,
                scope,
                this.getSigningKey(credentials, region, shortDate, signingService)
              ];
              _j = this.createCanonicalRequest;
              _k = [request, canonicalHeaders];
              return [4, getPayloadHash(originalRequest, this.sha256)];
            case 5:
              return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
            case 6:
              _e[_f] = _l.sent();
              return [2, request];
          }
        });
      });
    };
    SignatureV42.prototype.sign = function(toSign, options) {
      return __awaiter13(this, void 0, void 0, function() {
        return __generator13(this, function(_a) {
          if (typeof toSign === "string") {
            return [2, this.signString(toSign, options)];
          } else if (toSign.headers && toSign.payload) {
            return [2, this.signEvent(toSign, options)];
          } else {
            return [2, this.signRequest(toSign, options)];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    SignatureV42.prototype.signEvent = function(_a, _b) {
      var headers = _a.headers, payload = _a.payload;
      var _c = _b.signingDate, signingDate = _c === void 0 ? /* @__PURE__ */ new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
      return __awaiter13(this, void 0, void 0, function() {
        var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash2, hashedHeaders, _f, stringToSign;
        return __generator13(this, function(_g) {
          switch (_g.label) {
            case 0:
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 1];
              _d = signingRegion;
              return [3, 3];
            case 1:
              return [4, this.regionProvider()];
            case 2:
              _d = _g.sent();
              _g.label = 3;
            case 3:
              region = _d;
              _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
              scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
              return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
            case 4:
              hashedPayload = _g.sent();
              hash2 = new this.sha256();
              hash2.update(headers);
              _f = toHex;
              return [4, hash2.digest()];
            case 5:
              hashedHeaders = _f.apply(void 0, [_g.sent()]);
              stringToSign = [
                EVENT_ALGORITHM_IDENTIFIER,
                longDate,
                scope,
                priorSignature,
                hashedHeaders,
                hashedPayload
              ].join("\n");
              return [2, this.signString(stringToSign, { signingDate, signingRegion: region, signingService })];
          }
        });
      });
    };
    SignatureV42.prototype.signString = function(stringToSign, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? /* @__PURE__ */ new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
      return __awaiter13(this, void 0, void 0, function() {
        var credentials, region, _d, shortDate, hash2, _e, _f, _g;
        return __generator13(this, function(_h) {
          switch (_h.label) {
            case 0:
              return [4, this.credentialProvider()];
            case 1:
              credentials = _h.sent();
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 2];
              _d = signingRegion;
              return [3, 4];
            case 2:
              return [4, this.regionProvider()];
            case 3:
              _d = _h.sent();
              _h.label = 4;
            case 4:
              region = _d;
              shortDate = formatDate(signingDate).shortDate;
              _f = (_e = this.sha256).bind;
              return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
            case 5:
              hash2 = new (_f.apply(_e, [void 0, _h.sent()]))();
              hash2.update(stringToSign);
              _g = toHex;
              return [4, hash2.digest()];
            case 6:
              return [2, _g.apply(void 0, [_h.sent()])];
          }
        });
      });
    };
    SignatureV42.prototype.signRequest = function(requestToSign, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? /* @__PURE__ */ new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
      return __awaiter13(this, void 0, void 0, function() {
        var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
        return __generator13(this, function(_f) {
          switch (_f.label) {
            case 0:
              return [4, this.credentialProvider()];
            case 1:
              credentials = _f.sent();
              if (!(signingRegion !== null && signingRegion !== void 0))
                return [3, 2];
              _d = signingRegion;
              return [3, 4];
            case 2:
              return [4, this.regionProvider()];
            case 3:
              _d = _f.sent();
              _f.label = 4;
            case 4:
              region = _d;
              request = prepareRequest(requestToSign);
              _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
              scope = createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
              request.headers[AMZ_DATE_HEADER] = longDate;
              if (credentials.sessionToken) {
                request.headers[TOKEN_HEADER] = credentials.sessionToken;
              }
              return [4, getPayloadHash(request, this.sha256)];
            case 5:
              payloadHash = _f.sent();
              if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
                request.headers[SHA256_HEADER] = payloadHash;
              }
              canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
              return [4, this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))];
            case 6:
              signature = _f.sent();
              request.headers[AUTH_HEADER] = ALGORITHM_IDENTIFIER + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
              return [2, request];
          }
        });
      });
    };
    SignatureV42.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
      var sortedHeaders = Object.keys(canonicalHeaders).sort();
      return request.method + "\n" + this.getCanonicalPath(request) + "\n" + getCanonicalQuery(request) + "\n" + sortedHeaders.map(function(name) {
        return name + ":" + canonicalHeaders[name];
      }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
    };
    SignatureV42.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
      return __awaiter13(this, void 0, void 0, function() {
        var hash2, hashedRequest;
        return __generator13(this, function(_a) {
          switch (_a.label) {
            case 0:
              hash2 = new this.sha256();
              hash2.update(canonicalRequest);
              return [4, hash2.digest()];
            case 1:
              hashedRequest = _a.sent();
              return [2, ALGORITHM_IDENTIFIER + "\n" + longDate + "\n" + credentialScope + "\n" + toHex(hashedRequest)];
          }
        });
      });
    };
    SignatureV42.prototype.getCanonicalPath = function(_a) {
      var path = _a.path;
      if (this.uriEscapePath) {
        var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
        return "/" + doubleEncoded.replace(/%2F/g, "/");
      }
      return path;
    };
    SignatureV42.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
      return __awaiter13(this, void 0, void 0, function() {
        var stringToSign, hash2, _a, _b, _c;
        return __generator13(this, function(_d) {
          switch (_d.label) {
            case 0:
              return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
            case 1:
              stringToSign = _d.sent();
              _b = (_a = this.sha256).bind;
              return [4, keyPromise];
            case 2:
              hash2 = new (_b.apply(_a, [void 0, _d.sent()]))();
              hash2.update(stringToSign);
              _c = toHex;
              return [4, hash2.digest()];
            case 3:
              return [2, _c.apply(void 0, [_d.sent()])];
          }
        });
      });
    };
    SignatureV42.prototype.getSigningKey = function(credentials, region, shortDate, service) {
      return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    };
    return SignatureV42;
  }()
);
var formatDate = function(now) {
  var longDate = iso8601(now).replace(/[\-:]/g, "");
  return {
    longDate,
    shortDate: longDate.substr(0, 8)
  };
};
var getCanonicalHeaderList = function(headers) {
  return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
  if (typeof region === "string") {
    var promisified_1 = Promise.resolve(region);
    return function() {
      return promisified_1;
    };
  } else {
    return region;
  }
};
var normalizeCredentialsProvider = function(credentials) {
  if (typeof credentials === "object") {
    var promisified_2 = Promise.resolve(credentials);
    return function() {
      return promisified_2;
    };
  } else {
    return credentials;
  }
};

// node_modules/@aws-sdk/middleware-signing/dist/es/configurations.js
function resolveAwsAuthConfig(input) {
  var _this = this;
  var credentials = input.credentials || input.credentialDefaultProvider(input);
  var normalizedCreds = normalizeProvider(credentials);
  var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
  var signer;
  if (input.signer) {
    signer = normalizeProvider(input.signer);
  } else {
    signer = function() {
      return normalizeProvider(input.region)().then(function(region) {
        return __awaiter12(_this, void 0, void 0, function() {
          return __generator12(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, input.regionInfoProvider(region)];
              case 1:
                return [2, [_a2.sent() || {}, region]];
            }
          });
        });
      }).then(function(_a2) {
        var _b2 = __read7(_a2, 2), regionInfo = _b2[0], region = _b2[1];
        var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        return new SignatureV4({
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        });
      });
    };
  }
  return __assign9(__assign9({}, input), {
    systemClockOffset,
    signingEscapePath,
    credentials: normalizedCreds,
    signer
  });
}
function normalizeProvider(input) {
  if (typeof input === "object") {
    var promisified_1 = Promise.resolve(input);
    return function() {
      return promisified_1;
    };
  }
  return input;
}

// node_modules/@aws-sdk/middleware-signing/dist/es/middleware.js
var isClockSkewed = function(newServerTime, systemClockOffset) {
  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 3e5;
};
var getSkewCorrectedDate = function(systemClockOffset) {
  return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter12(this, void 0, void 0, function() {
        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
        var _d;
        return __generator12(this, function(_e) {
          switch (_e.label) {
            case 0:
              if (!HttpRequest.isInstance(args.request))
                return [2, next(args)];
              if (!(typeof options.signer === "function"))
                return [3, 2];
              return [4, options.signer()];
            case 1:
              _a = _e.sent();
              return [3, 3];
            case 2:
              _a = options.signer;
              _e.label = 3;
            case 3:
              signer = _a;
              _b = next;
              _c = [__assign9({}, args)];
              _d = {};
              return [4, signer.sign(args.request, {
                signingDate: new Date(Date.now() + options.systemClockOffset),
                signingRegion: context["signing_region"],
                signingService: context["signing_service"]
              })];
            case 4:
              return [4, _b.apply(void 0, [__assign9.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];
            case 5:
              output = _e.sent();
              headers = output.response.headers;
              dateHeader = headers && (headers.date || headers.Date);
              if (dateHeader) {
                serverTime = Date.parse(dateHeader);
                if (isClockSkewed(serverTime, options.systemClockOffset)) {
                  options.systemClockOffset = serverTime - Date.now();
                }
              }
              return [2, output];
          }
        });
      });
    };
  };
}
var awsAuthMiddlewareOptions = {
  name: "awsAuthMiddleware",
  tags: ["SIGNATURE", "AWSAUTH"],
  relation: "after",
  toMiddleware: "retryMiddleware",
  override: true
};
var getAwsAuthPlugin = function(options) {
  return {
    applyToStack: function(clientStack) {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-user-agent/node_modules/tslib/tslib.es6.js
var __assign11 = function() {
  __assign11 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign11.apply(this, arguments);
};
function __awaiter14(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator14(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read9(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread6() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read9(arguments[i2]));
  return ar;
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/configurations.js
function resolveUserAgentConfig(input) {
  return __assign11(__assign11({}, input), { customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent });
}

// node_modules/@aws-sdk/middleware-user-agent/dist/es/constants.js
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

// node_modules/@aws-sdk/middleware-user-agent/dist/es/user-agent-middleware.js
var userAgentMiddleware = function(options) {
  return function(next, context) {
    return function(args) {
      return __awaiter14(void 0, void 0, void 0, function() {
        var request, headers, userAgent2, defaultUserAgent2, customUserAgent, normalUAValue;
        var _a, _b;
        return __generator14(this, function(_c) {
          switch (_c.label) {
            case 0:
              request = args.request;
              if (!HttpRequest.isInstance(request))
                return [2, next(args)];
              headers = request.headers;
              userAgent2 = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
              return [4, options.defaultUserAgentProvider()];
            case 1:
              defaultUserAgent2 = _c.sent().map(escapeUserAgent);
              customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
              headers[X_AMZ_USER_AGENT] = __spread6(defaultUserAgent2, userAgent2, customUserAgent).join(SPACE);
              normalUAValue = __spread6(defaultUserAgent2.filter(function(section) {
                return section.startsWith("aws-sdk-");
              }), customUserAgent).join(SPACE);
              if (options.runtime !== "browser" && normalUAValue) {
                headers[USER_AGENT] = headers[USER_AGENT] ? headers[USER_AGENT] + " " + normalUAValue : normalUAValue;
              }
              return [2, next(__assign11(__assign11({}, args), { request }))];
          }
        });
      });
    };
  };
};
var escapeUserAgent = function(_a) {
  var _b = __read9(_a, 2), name = _b[0], version4 = _b[1];
  var prefixSeparatorIndex = name.indexOf("/");
  var prefix = name.substring(0, prefixSeparatorIndex);
  var uaName = name.substring(prefixSeparatorIndex + 1);
  if (prefix === "api") {
    uaName = uaName.toLowerCase();
  }
  return [prefix, uaName, version4].filter(function(item) {
    return item && item.length > 0;
  }).map(function(item) {
    return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
  }).join("/");
};
var getUserAgentMiddlewareOptions = {
  name: "getUserAgentMiddleware",
  step: "build",
  priority: "low",
  tags: ["SET_USER_AGENT", "USER_AGENT"],
  override: true
};
var getUserAgentPlugin = function(config) {
  return {
    applyToStack: function(clientStack) {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  };
};

// node_modules/@aws-sdk/middleware-stack/node_modules/tslib/tslib.es6.js
var __assign12 = function() {
  __assign12 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign12.apply(this, arguments);
};
function __values7(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read10(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread7() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read10(arguments[i2]));
  return ar;
}

// node_modules/@aws-sdk/middleware-stack/dist/es/MiddlewareStack.js
var constructStack = function() {
  var absoluteEntries = [];
  var relativeEntries = [];
  var entriesNameSet = /* @__PURE__ */ new Set();
  var sort = function(entries) {
    return entries.sort(function(a2, b2) {
      return stepWeights[b2.step] - stepWeights[a2.step] || priorityWeights[b2.priority || "normal"] - priorityWeights[a2.priority || "normal"];
    });
  };
  var removeByName = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.name && entry.name === toRemove) {
        isRemoved = true;
        entriesNameSet.delete(toRemove);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var removeByReference = function(toRemove) {
    var isRemoved = false;
    var filterCb = function(entry) {
      if (entry.middleware === toRemove) {
        isRemoved = true;
        if (entry.name)
          entriesNameSet.delete(entry.name);
        return false;
      }
      return true;
    };
    absoluteEntries = absoluteEntries.filter(filterCb);
    relativeEntries = relativeEntries.filter(filterCb);
    return isRemoved;
  };
  var cloneTo = function(toStack) {
    absoluteEntries.forEach(function(entry) {
      toStack.add(entry.middleware, __assign12({}, entry));
    });
    relativeEntries.forEach(function(entry) {
      toStack.addRelativeTo(entry.middleware, __assign12({}, entry));
    });
    return toStack;
  };
  var expandRelativeMiddlewareList = function(from) {
    var expandedMiddlewareList = [];
    from.before.forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread7(expandRelativeMiddlewareList(entry)));
      }
    });
    expandedMiddlewareList.push(from);
    from.after.reverse().forEach(function(entry) {
      if (entry.before.length === 0 && entry.after.length === 0) {
        expandedMiddlewareList.push(entry);
      } else {
        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread7(expandRelativeMiddlewareList(entry)));
      }
    });
    return expandedMiddlewareList;
  };
  var getMiddlewareList = function() {
    var normalizedAbsoluteEntries = [];
    var normalizedRelativeEntries = [];
    var normalizedEntriesNameMap = {};
    absoluteEntries.forEach(function(entry) {
      var normalizedEntry = __assign12(__assign12({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedAbsoluteEntries.push(normalizedEntry);
    });
    relativeEntries.forEach(function(entry) {
      var normalizedEntry = __assign12(__assign12({}, entry), { before: [], after: [] });
      if (normalizedEntry.name)
        normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
      normalizedRelativeEntries.push(normalizedEntry);
    });
    normalizedRelativeEntries.forEach(function(entry) {
      if (entry.toMiddleware) {
        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
        if (toMiddleware === void 0) {
          throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
        }
        if (entry.relation === "after") {
          toMiddleware.after.push(entry);
        }
        if (entry.relation === "before") {
          toMiddleware.before.push(entry);
        }
      }
    });
    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
      wholeList.push.apply(wholeList, __spread7(expendedMiddlewareList));
      return wholeList;
    }, []);
    return mainChain.map(function(entry) {
      return entry.middleware;
    });
  };
  var stack = {
    add: function(middleware, options) {
      if (options === void 0) {
        options = {};
      }
      var name = options.name, override = options.override;
      var entry = __assign12({ step: "initialize", priority: "normal", middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = absoluteEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = absoluteEntries[toOverrideIndex];
          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
            throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
          }
          absoluteEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      absoluteEntries.push(entry);
    },
    addRelativeTo: function(middleware, options) {
      var name = options.name, override = options.override;
      var entry = __assign12({ middleware }, options);
      if (name) {
        if (entriesNameSet.has(name)) {
          if (!override)
            throw new Error("Duplicate middleware name '" + name + "'");
          var toOverrideIndex = relativeEntries.findIndex(function(entry2) {
            return entry2.name === name;
          });
          var toOverride = relativeEntries[toOverrideIndex];
          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
            throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
          }
          relativeEntries.splice(toOverrideIndex, 1);
        }
        entriesNameSet.add(name);
      }
      relativeEntries.push(entry);
    },
    clone: function() {
      return cloneTo(constructStack());
    },
    use: function(plugin) {
      plugin.applyToStack(stack);
    },
    remove: function(toRemove) {
      if (typeof toRemove === "string")
        return removeByName(toRemove);
      else
        return removeByReference(toRemove);
    },
    removeByTag: function(toRemove) {
      var isRemoved = false;
      var filterCb = function(entry) {
        var tags = entry.tags, name = entry.name;
        if (tags && tags.includes(toRemove)) {
          if (name)
            entriesNameSet.delete(name);
          isRemoved = true;
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    },
    concat: function(from) {
      var cloned = cloneTo(constructStack());
      cloned.use(from);
      return cloned;
    },
    applyToStack: cloneTo,
    resolve: function(handler, context) {
      var e_1, _a;
      try {
        for (var _b = __values7(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var middleware = _c.value;
          handler = middleware(handler, context);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return handler;
    }
  };
  return stack;
};
var stepWeights = {
  initialize: 5,
  serialize: 4,
  build: 3,
  finalizeRequest: 2,
  deserialize: 1
};
var priorityWeights = {
  high: 3,
  normal: 2,
  low: 1
};

// node_modules/@aws-sdk/smithy-client/dist/es/client.js
var Client = (
  /** @class */
  function() {
    function Client4(config) {
      this.middlewareStack = constructStack();
      this.config = config;
    }
    Client4.prototype.send = function(command, optionsOrCb, cb) {
      var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
      var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
      var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
      if (callback) {
        handler(command).then(function(result) {
          return callback(null, result.output);
        }, function(err) {
          return callback(err);
        }).catch(
          // prevent any errors thrown in the callback from triggering an
          // unhandled promise rejection
          function() {
          }
        );
      } else {
        return handler(command).then(function(result) {
          return result.output;
        });
      }
    };
    Client4.prototype.destroy = function() {
      if (this.config.requestHandler.destroy)
        this.config.requestHandler.destroy();
    };
    return Client4;
  }()
);

// node_modules/@aws-sdk/smithy-client/dist/es/command.js
var Command = (
  /** @class */
  function() {
    function Command2() {
      this.middlewareStack = constructStack();
    }
    return Command2;
  }()
);

// node_modules/@aws-sdk/smithy-client/dist/es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c2) {
    return "%" + c2.charCodeAt(0).toString(16);
  });
}

// node_modules/@aws-sdk/smithy-client/dist/es/get-array-if-single-item.js
var getArrayIfSingleItem = function(mayBeArray) {
  return Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
};

// node_modules/@aws-sdk/smithy-client/dist/es/get-value-from-text-node.js
var getValueFromTextNode = function(obj) {
  var textNodeName = "#text";
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
      obj[key] = obj[key][textNodeName];
    } else if (typeof obj[key] === "object" && obj[key] !== null) {
      obj[key] = getValueFromTextNode(obj[key]);
    }
  }
  return obj;
};

// node_modules/@aws-sdk/smithy-client/node_modules/tslib/tslib.es6.js
var extendStatics4 = function(d2, b2) {
  extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (b3.hasOwnProperty(p2))
        d3[p2] = b3[p2];
  };
  return extendStatics4(d2, b2);
};
function __extends4(d2, b2) {
  extendStatics4(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
function __read11(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread8() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read11(arguments[i2]));
  return ar;
}

// node_modules/@aws-sdk/smithy-client/dist/es/lazy-json.js
var StringWrapper = function() {
  var Class = Object.getPrototypeOf(this).constructor;
  var Constructor = Function.bind.apply(String, __spread8([null], arguments));
  var instance2 = new Constructor();
  Object.setPrototypeOf(instance2, Class.prototype);
  return instance2;
};
StringWrapper.prototype = Object.create(String.prototype, {
  constructor: {
    value: StringWrapper,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = (
  /** @class */
  function(_super) {
    __extends4(LazyJsonString2, _super);
    function LazyJsonString2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LazyJsonString2.prototype.deserializeJSON = function() {
      return JSON.parse(_super.prototype.toString.call(this));
    };
    LazyJsonString2.prototype.toJSON = function() {
      return _super.prototype.toString.call(this);
    };
    LazyJsonString2.fromObject = function(object) {
      if (object instanceof LazyJsonString2) {
        return object;
      } else if (object instanceof String || typeof object === "string") {
        return new LazyJsonString2(object);
      }
      return new LazyJsonString2(JSON.stringify(object));
    };
    return LazyJsonString2;
  }(StringWrapper)
);

// node_modules/@aws-sdk/smithy-client/dist/es/date-utils.js
var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
  var year = date.getUTCFullYear();
  var month = date.getUTCMonth();
  var dayOfWeek = date.getUTCDay();
  var dayOfMonthInt = date.getUTCDate();
  var hoursInt = date.getUTCHours();
  var minutesInt = date.getUTCMinutes();
  var secondsInt = date.getUTCSeconds();
  var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
  var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
  var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
  var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
  return days[dayOfWeek] + ", " + dayOfMonthString + " " + months[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
}

// node_modules/@aws-sdk/smithy-client/dist/es/constants.js
var SENSITIVE_STRING = "***SensitiveInformation***";

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogsClient.js
var CloudWatchLogsClient = (
  /** @class */
  function(_super) {
    __extends(CloudWatchLogsClient2, _super);
    function CloudWatchLogsClient2(configuration) {
      var _this = this;
      var _config_0 = __assign(__assign({}, ClientDefaultValues), configuration);
      var _config_1 = resolveRegionConfig(_config_0);
      var _config_2 = resolveEndpointsConfig(_config_1);
      var _config_3 = resolveAwsAuthConfig(_config_2);
      var _config_4 = resolveRetryConfig(_config_3);
      var _config_5 = resolveHostHeaderConfig(_config_4);
      var _config_6 = resolveUserAgentConfig(_config_5);
      _this = _super.call(this, _config_6) || this;
      _this.config = _config_6;
      _this.middlewareStack.use(getAwsAuthPlugin(_this.config));
      _this.middlewareStack.use(getRetryPlugin(_this.config));
      _this.middlewareStack.use(getContentLengthPlugin(_this.config));
      _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
      _this.middlewareStack.use(getLoggerPlugin(_this.config));
      _this.middlewareStack.use(getUserAgentPlugin(_this.config));
      return _this;
    }
    CloudWatchLogsClient2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return CloudWatchLogsClient2;
  }(Client)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/models/models_0.js
var AssociateKmsKeyRequest;
(function(AssociateKmsKeyRequest2) {
  AssociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(AssociateKmsKeyRequest || (AssociateKmsKeyRequest = {}));
var InvalidParameterException;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidParameterException || (InvalidParameterException = {}));
var OperationAbortedException;
(function(OperationAbortedException2) {
  OperationAbortedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OperationAbortedException || (OperationAbortedException = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var ServiceUnavailableException;
(function(ServiceUnavailableException2) {
  ServiceUnavailableException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ServiceUnavailableException || (ServiceUnavailableException = {}));
var CancelExportTaskRequest;
(function(CancelExportTaskRequest2) {
  CancelExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CancelExportTaskRequest || (CancelExportTaskRequest = {}));
var InvalidOperationException;
(function(InvalidOperationException2) {
  InvalidOperationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidOperationException || (InvalidOperationException = {}));
var CreateExportTaskRequest;
(function(CreateExportTaskRequest2) {
  CreateExportTaskRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateExportTaskRequest || (CreateExportTaskRequest = {}));
var CreateExportTaskResponse;
(function(CreateExportTaskResponse2) {
  CreateExportTaskResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateExportTaskResponse || (CreateExportTaskResponse = {}));
var LimitExceededException;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LimitExceededException || (LimitExceededException = {}));
var ResourceAlreadyExistsException;
(function(ResourceAlreadyExistsException2) {
  ResourceAlreadyExistsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceAlreadyExistsException || (ResourceAlreadyExistsException = {}));
var CreateLogGroupRequest;
(function(CreateLogGroupRequest2) {
  CreateLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateLogGroupRequest || (CreateLogGroupRequest = {}));
var CreateLogStreamRequest;
(function(CreateLogStreamRequest2) {
  CreateLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateLogStreamRequest || (CreateLogStreamRequest = {}));
var DataAlreadyAcceptedException;
(function(DataAlreadyAcceptedException2) {
  DataAlreadyAcceptedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DataAlreadyAcceptedException || (DataAlreadyAcceptedException = {}));
var DeleteDestinationRequest;
(function(DeleteDestinationRequest2) {
  DeleteDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteDestinationRequest || (DeleteDestinationRequest = {}));
var DeleteLogGroupRequest;
(function(DeleteLogGroupRequest2) {
  DeleteLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteLogGroupRequest || (DeleteLogGroupRequest = {}));
var DeleteLogStreamRequest;
(function(DeleteLogStreamRequest2) {
  DeleteLogStreamRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteLogStreamRequest || (DeleteLogStreamRequest = {}));
var DeleteMetricFilterRequest;
(function(DeleteMetricFilterRequest2) {
  DeleteMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteMetricFilterRequest || (DeleteMetricFilterRequest = {}));
var DeleteQueryDefinitionRequest;
(function(DeleteQueryDefinitionRequest2) {
  DeleteQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteQueryDefinitionRequest || (DeleteQueryDefinitionRequest = {}));
var DeleteQueryDefinitionResponse;
(function(DeleteQueryDefinitionResponse2) {
  DeleteQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteQueryDefinitionResponse || (DeleteQueryDefinitionResponse = {}));
var DeleteResourcePolicyRequest;
(function(DeleteResourcePolicyRequest2) {
  DeleteResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteResourcePolicyRequest || (DeleteResourcePolicyRequest = {}));
var DeleteRetentionPolicyRequest;
(function(DeleteRetentionPolicyRequest2) {
  DeleteRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteRetentionPolicyRequest || (DeleteRetentionPolicyRequest = {}));
var DeleteSubscriptionFilterRequest;
(function(DeleteSubscriptionFilterRequest2) {
  DeleteSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteSubscriptionFilterRequest || (DeleteSubscriptionFilterRequest = {}));
var DescribeDestinationsRequest;
(function(DescribeDestinationsRequest2) {
  DescribeDestinationsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeDestinationsRequest || (DescribeDestinationsRequest = {}));
var Destination;
(function(Destination2) {
  Destination2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Destination || (Destination = {}));
var DescribeDestinationsResponse;
(function(DescribeDestinationsResponse2) {
  DescribeDestinationsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeDestinationsResponse || (DescribeDestinationsResponse = {}));
var ExportTaskStatusCode;
(function(ExportTaskStatusCode2) {
  ExportTaskStatusCode2["CANCELLED"] = "CANCELLED";
  ExportTaskStatusCode2["COMPLETED"] = "COMPLETED";
  ExportTaskStatusCode2["FAILED"] = "FAILED";
  ExportTaskStatusCode2["PENDING"] = "PENDING";
  ExportTaskStatusCode2["PENDING_CANCEL"] = "PENDING_CANCEL";
  ExportTaskStatusCode2["RUNNING"] = "RUNNING";
})(ExportTaskStatusCode || (ExportTaskStatusCode = {}));
var DescribeExportTasksRequest;
(function(DescribeExportTasksRequest2) {
  DescribeExportTasksRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeExportTasksRequest || (DescribeExportTasksRequest = {}));
var ExportTaskExecutionInfo;
(function(ExportTaskExecutionInfo2) {
  ExportTaskExecutionInfo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportTaskExecutionInfo || (ExportTaskExecutionInfo = {}));
var ExportTaskStatus;
(function(ExportTaskStatus2) {
  ExportTaskStatus2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportTaskStatus || (ExportTaskStatus = {}));
var ExportTask;
(function(ExportTask2) {
  ExportTask2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExportTask || (ExportTask = {}));
var DescribeExportTasksResponse;
(function(DescribeExportTasksResponse2) {
  DescribeExportTasksResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeExportTasksResponse || (DescribeExportTasksResponse = {}));
var DescribeLogGroupsRequest;
(function(DescribeLogGroupsRequest2) {
  DescribeLogGroupsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLogGroupsRequest || (DescribeLogGroupsRequest = {}));
var LogGroup;
(function(LogGroup2) {
  LogGroup2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LogGroup || (LogGroup = {}));
var DescribeLogGroupsResponse;
(function(DescribeLogGroupsResponse2) {
  DescribeLogGroupsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLogGroupsResponse || (DescribeLogGroupsResponse = {}));
var OrderBy;
(function(OrderBy2) {
  OrderBy2["LastEventTime"] = "LastEventTime";
  OrderBy2["LogStreamName"] = "LogStreamName";
})(OrderBy || (OrderBy = {}));
var DescribeLogStreamsRequest;
(function(DescribeLogStreamsRequest2) {
  DescribeLogStreamsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLogStreamsRequest || (DescribeLogStreamsRequest = {}));
var LogStream;
(function(LogStream2) {
  LogStream2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LogStream || (LogStream = {}));
var DescribeLogStreamsResponse;
(function(DescribeLogStreamsResponse2) {
  DescribeLogStreamsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeLogStreamsResponse || (DescribeLogStreamsResponse = {}));
var DescribeMetricFiltersRequest;
(function(DescribeMetricFiltersRequest2) {
  DescribeMetricFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeMetricFiltersRequest || (DescribeMetricFiltersRequest = {}));
var MetricTransformation;
(function(MetricTransformation2) {
  MetricTransformation2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MetricTransformation || (MetricTransformation = {}));
var MetricFilter;
(function(MetricFilter2) {
  MetricFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MetricFilter || (MetricFilter = {}));
var DescribeMetricFiltersResponse;
(function(DescribeMetricFiltersResponse2) {
  DescribeMetricFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeMetricFiltersResponse || (DescribeMetricFiltersResponse = {}));
var QueryStatus;
(function(QueryStatus2) {
  QueryStatus2["Cancelled"] = "Cancelled";
  QueryStatus2["Complete"] = "Complete";
  QueryStatus2["Failed"] = "Failed";
  QueryStatus2["Running"] = "Running";
  QueryStatus2["Scheduled"] = "Scheduled";
})(QueryStatus || (QueryStatus = {}));
var DescribeQueriesRequest;
(function(DescribeQueriesRequest2) {
  DescribeQueriesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeQueriesRequest || (DescribeQueriesRequest = {}));
var QueryInfo;
(function(QueryInfo2) {
  QueryInfo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueryInfo || (QueryInfo = {}));
var DescribeQueriesResponse;
(function(DescribeQueriesResponse2) {
  DescribeQueriesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeQueriesResponse || (DescribeQueriesResponse = {}));
var DescribeQueryDefinitionsRequest;
(function(DescribeQueryDefinitionsRequest2) {
  DescribeQueryDefinitionsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeQueryDefinitionsRequest || (DescribeQueryDefinitionsRequest = {}));
var QueryDefinition;
(function(QueryDefinition2) {
  QueryDefinition2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueryDefinition || (QueryDefinition = {}));
var DescribeQueryDefinitionsResponse;
(function(DescribeQueryDefinitionsResponse2) {
  DescribeQueryDefinitionsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeQueryDefinitionsResponse || (DescribeQueryDefinitionsResponse = {}));
var DescribeResourcePoliciesRequest;
(function(DescribeResourcePoliciesRequest2) {
  DescribeResourcePoliciesRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeResourcePoliciesRequest || (DescribeResourcePoliciesRequest = {}));
var ResourcePolicy;
(function(ResourcePolicy2) {
  ResourcePolicy2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourcePolicy || (ResourcePolicy = {}));
var DescribeResourcePoliciesResponse;
(function(DescribeResourcePoliciesResponse2) {
  DescribeResourcePoliciesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeResourcePoliciesResponse || (DescribeResourcePoliciesResponse = {}));
var DescribeSubscriptionFiltersRequest;
(function(DescribeSubscriptionFiltersRequest2) {
  DescribeSubscriptionFiltersRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeSubscriptionFiltersRequest || (DescribeSubscriptionFiltersRequest = {}));
var Distribution;
(function(Distribution2) {
  Distribution2["ByLogStream"] = "ByLogStream";
  Distribution2["Random"] = "Random";
})(Distribution || (Distribution = {}));
var SubscriptionFilter;
(function(SubscriptionFilter2) {
  SubscriptionFilter2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SubscriptionFilter || (SubscriptionFilter = {}));
var DescribeSubscriptionFiltersResponse;
(function(DescribeSubscriptionFiltersResponse2) {
  DescribeSubscriptionFiltersResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeSubscriptionFiltersResponse || (DescribeSubscriptionFiltersResponse = {}));
var DisassociateKmsKeyRequest;
(function(DisassociateKmsKeyRequest2) {
  DisassociateKmsKeyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DisassociateKmsKeyRequest || (DisassociateKmsKeyRequest = {}));
var FilteredLogEvent;
(function(FilteredLogEvent2) {
  FilteredLogEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FilteredLogEvent || (FilteredLogEvent = {}));
var FilterLogEventsRequest;
(function(FilterLogEventsRequest2) {
  FilterLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FilterLogEventsRequest || (FilterLogEventsRequest = {}));
var SearchedLogStream;
(function(SearchedLogStream2) {
  SearchedLogStream2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SearchedLogStream || (SearchedLogStream = {}));
var FilterLogEventsResponse;
(function(FilterLogEventsResponse2) {
  FilterLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(FilterLogEventsResponse || (FilterLogEventsResponse = {}));
var GetLogEventsRequest;
(function(GetLogEventsRequest2) {
  GetLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetLogEventsRequest || (GetLogEventsRequest = {}));
var OutputLogEvent;
(function(OutputLogEvent2) {
  OutputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(OutputLogEvent || (OutputLogEvent = {}));
var GetLogEventsResponse;
(function(GetLogEventsResponse2) {
  GetLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetLogEventsResponse || (GetLogEventsResponse = {}));
var GetLogGroupFieldsRequest;
(function(GetLogGroupFieldsRequest2) {
  GetLogGroupFieldsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetLogGroupFieldsRequest || (GetLogGroupFieldsRequest = {}));
var LogGroupField;
(function(LogGroupField2) {
  LogGroupField2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LogGroupField || (LogGroupField = {}));
var GetLogGroupFieldsResponse;
(function(GetLogGroupFieldsResponse2) {
  GetLogGroupFieldsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetLogGroupFieldsResponse || (GetLogGroupFieldsResponse = {}));
var GetLogRecordRequest;
(function(GetLogRecordRequest2) {
  GetLogRecordRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetLogRecordRequest || (GetLogRecordRequest = {}));
var GetLogRecordResponse;
(function(GetLogRecordResponse2) {
  GetLogRecordResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetLogRecordResponse || (GetLogRecordResponse = {}));
var GetQueryResultsRequest;
(function(GetQueryResultsRequest2) {
  GetQueryResultsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetQueryResultsRequest || (GetQueryResultsRequest = {}));
var ResultField;
(function(ResultField2) {
  ResultField2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResultField || (ResultField = {}));
var QueryStatistics;
(function(QueryStatistics2) {
  QueryStatistics2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueryStatistics || (QueryStatistics = {}));
var GetQueryResultsResponse;
(function(GetQueryResultsResponse2) {
  GetQueryResultsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetQueryResultsResponse || (GetQueryResultsResponse = {}));
var InputLogEvent;
(function(InputLogEvent2) {
  InputLogEvent2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InputLogEvent || (InputLogEvent = {}));
var InvalidSequenceTokenException;
(function(InvalidSequenceTokenException2) {
  InvalidSequenceTokenException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidSequenceTokenException || (InvalidSequenceTokenException = {}));
var ListTagsLogGroupRequest;
(function(ListTagsLogGroupRequest2) {
  ListTagsLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsLogGroupRequest || (ListTagsLogGroupRequest = {}));
var ListTagsLogGroupResponse;
(function(ListTagsLogGroupResponse2) {
  ListTagsLogGroupResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsLogGroupResponse || (ListTagsLogGroupResponse = {}));
var PutDestinationRequest;
(function(PutDestinationRequest2) {
  PutDestinationRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutDestinationRequest || (PutDestinationRequest = {}));
var PutDestinationResponse;
(function(PutDestinationResponse2) {
  PutDestinationResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutDestinationResponse || (PutDestinationResponse = {}));
var PutDestinationPolicyRequest;
(function(PutDestinationPolicyRequest2) {
  PutDestinationPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutDestinationPolicyRequest || (PutDestinationPolicyRequest = {}));
var PutLogEventsRequest;
(function(PutLogEventsRequest2) {
  PutLogEventsRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutLogEventsRequest || (PutLogEventsRequest = {}));
var RejectedLogEventsInfo;
(function(RejectedLogEventsInfo2) {
  RejectedLogEventsInfo2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RejectedLogEventsInfo || (RejectedLogEventsInfo = {}));
var PutLogEventsResponse;
(function(PutLogEventsResponse2) {
  PutLogEventsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutLogEventsResponse || (PutLogEventsResponse = {}));
var UnrecognizedClientException;
(function(UnrecognizedClientException2) {
  UnrecognizedClientException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UnrecognizedClientException || (UnrecognizedClientException = {}));
var PutMetricFilterRequest;
(function(PutMetricFilterRequest2) {
  PutMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutMetricFilterRequest || (PutMetricFilterRequest = {}));
var PutQueryDefinitionRequest;
(function(PutQueryDefinitionRequest2) {
  PutQueryDefinitionRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutQueryDefinitionRequest || (PutQueryDefinitionRequest = {}));
var PutQueryDefinitionResponse;
(function(PutQueryDefinitionResponse2) {
  PutQueryDefinitionResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutQueryDefinitionResponse || (PutQueryDefinitionResponse = {}));
var PutResourcePolicyRequest;
(function(PutResourcePolicyRequest2) {
  PutResourcePolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutResourcePolicyRequest || (PutResourcePolicyRequest = {}));
var PutResourcePolicyResponse;
(function(PutResourcePolicyResponse2) {
  PutResourcePolicyResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutResourcePolicyResponse || (PutResourcePolicyResponse = {}));
var PutRetentionPolicyRequest;
(function(PutRetentionPolicyRequest2) {
  PutRetentionPolicyRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutRetentionPolicyRequest || (PutRetentionPolicyRequest = {}));
var PutSubscriptionFilterRequest;
(function(PutSubscriptionFilterRequest2) {
  PutSubscriptionFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(PutSubscriptionFilterRequest || (PutSubscriptionFilterRequest = {}));
var QueryCompileErrorLocation;
(function(QueryCompileErrorLocation2) {
  QueryCompileErrorLocation2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueryCompileErrorLocation || (QueryCompileErrorLocation = {}));
var QueryCompileError;
(function(QueryCompileError2) {
  QueryCompileError2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(QueryCompileError || (QueryCompileError = {}));
var MalformedQueryException;
(function(MalformedQueryException2) {
  MalformedQueryException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MalformedQueryException || (MalformedQueryException = {}));
var StartQueryRequest;
(function(StartQueryRequest2) {
  StartQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StartQueryRequest || (StartQueryRequest = {}));
var StartQueryResponse;
(function(StartQueryResponse2) {
  StartQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StartQueryResponse || (StartQueryResponse = {}));
var StopQueryRequest;
(function(StopQueryRequest2) {
  StopQueryRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StopQueryRequest || (StopQueryRequest = {}));
var StopQueryResponse;
(function(StopQueryResponse2) {
  StopQueryResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(StopQueryResponse || (StopQueryResponse = {}));
var TagLogGroupRequest;
(function(TagLogGroupRequest2) {
  TagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagLogGroupRequest || (TagLogGroupRequest = {}));
var TestMetricFilterRequest;
(function(TestMetricFilterRequest2) {
  TestMetricFilterRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TestMetricFilterRequest || (TestMetricFilterRequest = {}));
var MetricFilterMatchRecord;
(function(MetricFilterMatchRecord2) {
  MetricFilterMatchRecord2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MetricFilterMatchRecord || (MetricFilterMatchRecord = {}));
var TestMetricFilterResponse;
(function(TestMetricFilterResponse2) {
  TestMetricFilterResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TestMetricFilterResponse || (TestMetricFilterResponse = {}));
var UntagLogGroupRequest;
(function(UntagLogGroupRequest2) {
  UntagLogGroupRequest2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagLogGroupRequest || (UntagLogGroupRequest = {}));

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1AssociateKmsKeyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.AssociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1AssociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CancelExportTaskCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CancelExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CancelExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateExportTaskCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateExportTask"
      };
      body = JSON.stringify(serializeAws_json1_1CreateExportTaskRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogGroupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1CreateLogStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.CreateLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1CreateLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteDestination"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogGroupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteLogStreamCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteLogStream"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteLogStreamRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteMetricFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteQueryDefinitionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteResourcePolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteRetentionPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteSubscriptionFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DeleteSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeDestinationsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeDestinations"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeDestinationsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeExportTasksCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeExportTasks"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeExportTasksRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogGroupsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogGroups"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogGroupsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeLogStreamsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeLogStreams"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeLogStreamsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeMetricFiltersCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeMetricFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeMetricFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueriesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueries"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueriesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeQueryDefinitionsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeQueryDefinitions"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeQueryDefinitionsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeResourcePoliciesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeResourcePolicies"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeResourcePoliciesRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeSubscriptionFiltersCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DescribeSubscriptionFilters"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeSubscriptionFiltersRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DisassociateKmsKeyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.DisassociateKmsKey"
      };
      body = JSON.stringify(serializeAws_json1_1DisassociateKmsKeyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1FilterLogEventsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.FilterLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1FilterLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogEventsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogGroupFieldsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogGroupFields"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogGroupFieldsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetLogRecordCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetLogRecord"
      };
      body = JSON.stringify(serializeAws_json1_1GetLogRecordRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetQueryResultsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.GetQueryResults"
      };
      body = JSON.stringify(serializeAws_json1_1GetQueryResultsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsLogGroupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.ListTagsLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestination"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutDestinationPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutDestinationPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutDestinationPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutLogEventsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutLogEvents"
      };
      body = JSON.stringify(serializeAws_json1_1PutLogEventsRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutMetricFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutQueryDefinitionCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutQueryDefinition"
      };
      body = JSON.stringify(serializeAws_json1_1PutQueryDefinitionRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutResourcePolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutResourcePolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutRetentionPolicyCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutRetentionPolicy"
      };
      body = JSON.stringify(serializeAws_json1_1PutRetentionPolicyRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1PutSubscriptionFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.PutSubscriptionFilter"
      };
      body = JSON.stringify(serializeAws_json1_1PutSubscriptionFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StartQueryCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StartQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StartQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1StopQueryCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.StopQuery"
      };
      body = JSON.stringify(serializeAws_json1_1StopQueryRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagLogGroupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1TagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TestMetricFilterCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.TestMetricFilter"
      };
      body = JSON.stringify(serializeAws_json1_1TestMetricFilterRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagLogGroupCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Logs_20140328.UntagLogGroup"
      };
      body = JSON.stringify(serializeAws_json1_1UntagLogGroupRequest(input, context));
      return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1AssociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1AssociateKmsKeyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CancelExportTaskCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CancelExportTaskCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidOperationException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidOperationException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateExportTaskCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1CreateExportTaskResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateExportTaskCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 10];
            case "ServiceUnavailableException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogGroupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceAlreadyExistsException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateLogStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceAlreadyExistsException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteDestinationCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogGroupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteLogStreamCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteLogStreamCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteMetricFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteQueryDefinitionResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteQueryDefinitionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteResourcePolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteRetentionPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteSubscriptionFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeDestinationsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeDestinationsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeDestinationsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeExportTasksCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeExportTasksResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeExportTasksCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogGroupsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogGroupsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogGroupsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeLogStreamsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeLogStreamsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeLogStreamsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeMetricFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeMetricFiltersResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeMetricFiltersCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueriesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueriesResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueriesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeQueryDefinitionsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeQueryDefinitionsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeQueryDefinitionsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeResourcePoliciesCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeResourcePoliciesResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeResourcePoliciesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeSubscriptionFiltersCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DescribeSubscriptionFiltersResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeSubscriptionFiltersCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DisassociateKmsKeyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DisassociateKmsKeyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1FilterLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1FilterLogEventsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1FilterLogEventsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogEventsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogEventsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogGroupFieldsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogGroupFieldsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogGroupFieldsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetLogRecordCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetLogRecordResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetLogRecordCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetQueryResultsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetQueryResultsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetQueryResultsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsLogGroupCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsLogGroupResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsLogGroupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutDestinationResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutDestinationPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutDestinationPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutLogEventsCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutLogEventsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutLogEventsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DataAlreadyAcceptedException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 4];
            case "InvalidSequenceTokenException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
            case "UnrecognizedClientException":
              return [3, 12];
            case "com.amazonaws.cloudwatchlogs#UnrecognizedClientException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidSequenceTokenExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1UnrecognizedClientExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutMetricFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutMetricFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutQueryDefinitionCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutQueryDefinitionResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutQueryDefinitionCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutResourcePolicyCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutResourcePolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutRetentionPolicyCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutRetentionPolicyCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function(_h) {
      switch (_h.label) {
        case 0:
          _a = [__assign({}, output)];
          _g = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "OperationAbortedException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 4];
            case "ResourceNotFoundException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 6];
            case "ServiceUnavailableException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 8];
          }
          return [3, 10];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 11];
        case 10:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _h.label = 11;
        case 11:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1PutSubscriptionFilterCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1PutSubscriptionFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "OperationAbortedException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#OperationAbortedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1OperationAbortedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StartQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StartQueryResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StartQueryCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "LimitExceededException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#LimitExceededException":
              return [3, 4];
            case "MalformedQueryException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#MalformedQueryException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 8];
            case "ServiceUnavailableException":
              return [3, 10];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1MalformedQueryExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1StopQueryCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1StopQueryResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1StopQueryCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
            case "ServiceUnavailableException":
              return [3, 6];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagLogGroupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ResourceNotFoundException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TestMetricFilterCommandError(output, context)];
          }
          return [4, parseBody(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TestMetricFilterResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TestMetricFilterCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function(_f) {
      switch (_f.label) {
        case 0:
          _a = [__assign({}, output)];
          _e = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InvalidParameterException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#InvalidParameterException":
              return [3, 2];
            case "ServiceUnavailableException":
              return [3, 4];
            case "com.amazonaws.cloudwatchlogs#ServiceUnavailableException":
              return [3, 4];
          }
          return [3, 6];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 7];
        case 6:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _f.label = 7;
        case 7:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagLogGroupCommandError(output, context)];
          }
          return [4, collectBody(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagLogGroupCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
    var _d;
    return __generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _a = [__assign({}, output)];
          _d = {};
          return [4, parseBody(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ResourceNotFoundException":
              return [3, 2];
            case "com.amazonaws.cloudwatchlogs#ResourceNotFoundException":
              return [3, 2];
          }
          return [3, 4];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
          return [3, 5];
        case 4:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
          _e.label = 5;
        case 5:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DataAlreadyAcceptedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DataAlreadyAcceptedException(body, context);
      contents = __assign({ name: "DataAlreadyAcceptedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidOperationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
      contents = __assign({ name: "InvalidOperationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
      contents = __assign({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidSequenceTokenExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidSequenceTokenException(body, context);
      contents = __assign({ name: "InvalidSequenceTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1MalformedQueryExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1MalformedQueryException(body, context);
      contents = __assign({ name: "MalformedQueryException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1OperationAbortedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1OperationAbortedException(body, context);
      contents = __assign({ name: "OperationAbortedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
      contents = __assign({ name: "ResourceAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
      contents = __assign({ name: "ServiceUnavailableException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1UnrecognizedClientExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1UnrecognizedClientException(body, context);
      contents = __assign({ name: "UnrecognizedClientException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1AssociateKmsKeyRequest = function(input, context) {
  return __assign(__assign({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1CancelExportTaskRequest = function(input, context) {
  return __assign({}, input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1CreateExportTaskRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.destination !== void 0 && input.destination !== null && { destination: input.destination }), input.destinationPrefix !== void 0 && input.destinationPrefix !== null && { destinationPrefix: input.destinationPrefix }), input.from !== void 0 && input.from !== null && { from: input.from }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.taskName !== void 0 && input.taskName !== null && { taskName: input.taskName }), input.to !== void 0 && input.to !== null && { to: input.to });
};
var serializeAws_json1_1CreateLogGroupRequest = function(input, context) {
  return __assign(__assign(__assign({}, input.kmsKeyId !== void 0 && input.kmsKeyId !== null && { kmsKeyId: input.kmsKeyId }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1CreateLogStreamRequest = function(input, context) {
  return __assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteDestinationRequest = function(input, context) {
  return __assign({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1DeleteLogGroupRequest = function(input, context) {
  return __assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteLogStreamRequest = function(input, context) {
  return __assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName });
};
var serializeAws_json1_1DeleteMetricFilterRequest = function(input, context) {
  return __assign(__assign({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteQueryDefinitionRequest = function(input, context) {
  return __assign({}, input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId });
};
var serializeAws_json1_1DeleteResourcePolicyRequest = function(input, context) {
  return __assign({}, input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1DeleteRetentionPolicyRequest = function(input, context) {
  return __assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DeleteSubscriptionFilterRequest = function(input, context) {
  return __assign(__assign({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1DescribeDestinationsRequest = function(input, context) {
  return __assign(__assign(__assign({}, input.DestinationNamePrefix !== void 0 && input.DestinationNamePrefix !== null && { DestinationNamePrefix: input.DestinationNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeExportTasksRequest = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.statusCode !== void 0 && input.statusCode !== null && { statusCode: input.statusCode }), input.taskId !== void 0 && input.taskId !== null && { taskId: input.taskId });
};
var serializeAws_json1_1DescribeLogGroupsRequest = function(input, context) {
  return __assign(__assign(__assign({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupNamePrefix !== void 0 && input.logGroupNamePrefix !== null && { logGroupNamePrefix: input.logGroupNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeLogStreamsRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.descending !== void 0 && input.descending !== null && { descending: input.descending }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.orderBy !== void 0 && input.orderBy !== null && { orderBy: input.orderBy });
};
var serializeAws_json1_1DescribeMetricFiltersRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeQueriesRequest = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.status !== void 0 && input.status !== null && { status: input.status });
};
var serializeAws_json1_1DescribeQueryDefinitionsRequest = function(input, context) {
  return __assign(__assign(__assign({}, input.maxResults !== void 0 && input.maxResults !== null && { maxResults: input.maxResults }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.queryDefinitionNamePrefix !== void 0 && input.queryDefinitionNamePrefix !== null && { queryDefinitionNamePrefix: input.queryDefinitionNamePrefix });
};
var serializeAws_json1_1DescribeResourcePoliciesRequest = function(input, context) {
  return __assign(__assign({}, input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DescribeSubscriptionFiltersRequest = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.filterNamePrefix !== void 0 && input.filterNamePrefix !== null && { filterNamePrefix: input.filterNamePrefix }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken });
};
var serializeAws_json1_1DisassociateKmsKeyRequest = function(input, context) {
  return __assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1FilterLogEventsRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.interleaved !== void 0 && input.interleaved !== null && { interleaved: input.interleaved }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamNamePrefix !== void 0 && input.logStreamNamePrefix !== null && { logStreamNamePrefix: input.logStreamNamePrefix }), input.logStreamNames !== void 0 && input.logStreamNames !== null && {
    logStreamNames: serializeAws_json1_1InputLogStreamNames(input.logStreamNames, context)
  }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogEventsRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.nextToken !== void 0 && input.nextToken !== null && { nextToken: input.nextToken }), input.startFromHead !== void 0 && input.startFromHead !== null && { startFromHead: input.startFromHead }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1GetLogGroupFieldsRequest = function(input, context) {
  return __assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.time !== void 0 && input.time !== null && { time: input.time });
};
var serializeAws_json1_1GetLogRecordRequest = function(input, context) {
  return __assign({}, input.logRecordPointer !== void 0 && input.logRecordPointer !== null && { logRecordPointer: input.logRecordPointer });
};
var serializeAws_json1_1GetQueryResultsRequest = function(input, context) {
  return __assign({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1InputLogEvent = function(input, context) {
  return __assign(__assign({}, input.message !== void 0 && input.message !== null && { message: input.message }), input.timestamp !== void 0 && input.timestamp !== null && { timestamp: input.timestamp });
};
var serializeAws_json1_1InputLogEvents = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1InputLogEvent(entry, context);
  });
};
var serializeAws_json1_1InputLogStreamNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1ListTagsLogGroupRequest = function(input, context) {
  return __assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName });
};
var serializeAws_json1_1LogGroupNames = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1MetricTransformation = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.defaultValue !== void 0 && input.defaultValue !== null && { defaultValue: input.defaultValue }), input.metricName !== void 0 && input.metricName !== null && { metricName: input.metricName }), input.metricNamespace !== void 0 && input.metricNamespace !== null && { metricNamespace: input.metricNamespace }), input.metricValue !== void 0 && input.metricValue !== null && { metricValue: input.metricValue });
};
var serializeAws_json1_1MetricTransformations = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MetricTransformation(entry, context);
  });
};
var serializeAws_json1_1PutDestinationPolicyRequest = function(input, context) {
  return __assign(__assign({}, input.accessPolicy !== void 0 && input.accessPolicy !== null && { accessPolicy: input.accessPolicy }), input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName });
};
var serializeAws_json1_1PutDestinationRequest = function(input, context) {
  return __assign(__assign(__assign({}, input.destinationName !== void 0 && input.destinationName !== null && { destinationName: input.destinationName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn }), input.targetArn !== void 0 && input.targetArn !== null && { targetArn: input.targetArn });
};
var serializeAws_json1_1PutLogEventsRequest = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.logEvents !== void 0 && input.logEvents !== null && { logEvents: serializeAws_json1_1InputLogEvents(input.logEvents, context) }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logStreamName !== void 0 && input.logStreamName !== null && { logStreamName: input.logStreamName }), input.sequenceToken !== void 0 && input.sequenceToken !== null && { sequenceToken: input.sequenceToken });
};
var serializeAws_json1_1PutMetricFilterRequest = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.metricTransformations !== void 0 && input.metricTransformations !== null && {
    metricTransformations: serializeAws_json1_1MetricTransformations(input.metricTransformations, context)
  });
};
var serializeAws_json1_1PutQueryDefinitionRequest = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.name !== void 0 && input.name !== null && { name: input.name }), input.queryDefinitionId !== void 0 && input.queryDefinitionId !== null && { queryDefinitionId: input.queryDefinitionId }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString });
};
var serializeAws_json1_1PutResourcePolicyRequest = function(input, context) {
  return __assign(__assign({}, input.policyDocument !== void 0 && input.policyDocument !== null && { policyDocument: input.policyDocument }), input.policyName !== void 0 && input.policyName !== null && { policyName: input.policyName });
};
var serializeAws_json1_1PutRetentionPolicyRequest = function(input, context) {
  return __assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.retentionInDays !== void 0 && input.retentionInDays !== null && { retentionInDays: input.retentionInDays });
};
var serializeAws_json1_1PutSubscriptionFilterRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.destinationArn !== void 0 && input.destinationArn !== null && { destinationArn: input.destinationArn }), input.distribution !== void 0 && input.distribution !== null && { distribution: input.distribution }), input.filterName !== void 0 && input.filterName !== null && { filterName: input.filterName }), input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.roleArn !== void 0 && input.roleArn !== null && { roleArn: input.roleArn });
};
var serializeAws_json1_1StartQueryRequest = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign({}, input.endTime !== void 0 && input.endTime !== null && { endTime: input.endTime }), input.limit !== void 0 && input.limit !== null && { limit: input.limit }), input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.logGroupNames !== void 0 && input.logGroupNames !== null && {
    logGroupNames: serializeAws_json1_1LogGroupNames(input.logGroupNames, context)
  }), input.queryString !== void 0 && input.queryString !== null && { queryString: input.queryString }), input.startTime !== void 0 && input.startTime !== null && { startTime: input.startTime });
};
var serializeAws_json1_1StopQueryRequest = function(input, context) {
  return __assign({}, input.queryId !== void 0 && input.queryId !== null && { queryId: input.queryId });
};
var serializeAws_json1_1TagList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TagLogGroupRequest = function(input, context) {
  return __assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1Tags(input.tags, context) });
};
var serializeAws_json1_1Tags = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1TestEventMessages = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1TestMetricFilterRequest = function(input, context) {
  return __assign(__assign({}, input.filterPattern !== void 0 && input.filterPattern !== null && { filterPattern: input.filterPattern }), input.logEventMessages !== void 0 && input.logEventMessages !== null && {
    logEventMessages: serializeAws_json1_1TestEventMessages(input.logEventMessages, context)
  });
};
var serializeAws_json1_1UntagLogGroupRequest = function(input, context) {
  return __assign(__assign({}, input.logGroupName !== void 0 && input.logGroupName !== null && { logGroupName: input.logGroupName }), input.tags !== void 0 && input.tags !== null && { tags: serializeAws_json1_1TagList(input.tags, context) });
};
var deserializeAws_json1_1CreateExportTaskResponse = function(output, context) {
  return {
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0
  };
};
var deserializeAws_json1_1DataAlreadyAcceptedException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeleteQueryDefinitionResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1DescribeDestinationsResponse = function(output, context) {
  return {
    destinations: output.destinations !== void 0 && output.destinations !== null ? deserializeAws_json1_1Destinations(output.destinations, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeExportTasksResponse = function(output, context) {
  return {
    exportTasks: output.exportTasks !== void 0 && output.exportTasks !== null ? deserializeAws_json1_1ExportTasks(output.exportTasks, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogGroupsResponse = function(output, context) {
  return {
    logGroups: output.logGroups !== void 0 && output.logGroups !== null ? deserializeAws_json1_1LogGroups(output.logGroups, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeLogStreamsResponse = function(output, context) {
  return {
    logStreams: output.logStreams !== void 0 && output.logStreams !== null ? deserializeAws_json1_1LogStreams(output.logStreams, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeMetricFiltersResponse = function(output, context) {
  return {
    metricFilters: output.metricFilters !== void 0 && output.metricFilters !== null ? deserializeAws_json1_1MetricFilters(output.metricFilters, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0
  };
};
var deserializeAws_json1_1DescribeQueriesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queries: output.queries !== void 0 && output.queries !== null ? deserializeAws_json1_1QueryInfoList(output.queries, context) : void 0
  };
};
var deserializeAws_json1_1DescribeQueryDefinitionsResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    queryDefinitions: output.queryDefinitions !== void 0 && output.queryDefinitions !== null ? deserializeAws_json1_1QueryDefinitionList(output.queryDefinitions, context) : void 0
  };
};
var deserializeAws_json1_1DescribeResourcePoliciesResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    resourcePolicies: output.resourcePolicies !== void 0 && output.resourcePolicies !== null ? deserializeAws_json1_1ResourcePolicies(output.resourcePolicies, context) : void 0
  };
};
var deserializeAws_json1_1DescribeSubscriptionFiltersResponse = function(output, context) {
  return {
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    subscriptionFilters: output.subscriptionFilters !== void 0 && output.subscriptionFilters !== null ? deserializeAws_json1_1SubscriptionFilters(output.subscriptionFilters, context) : void 0
  };
};
var deserializeAws_json1_1Destination = function(output, context) {
  return {
    accessPolicy: output.accessPolicy !== void 0 && output.accessPolicy !== null ? output.accessPolicy : void 0,
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationName: output.destinationName !== void 0 && output.destinationName !== null ? output.destinationName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0,
    targetArn: output.targetArn !== void 0 && output.targetArn !== null ? output.targetArn : void 0
  };
};
var deserializeAws_json1_1Destinations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1Destination(entry, context);
  });
};
var deserializeAws_json1_1ExportTask = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? output.destination : void 0,
    destinationPrefix: output.destinationPrefix !== void 0 && output.destinationPrefix !== null ? output.destinationPrefix : void 0,
    executionInfo: output.executionInfo !== void 0 && output.executionInfo !== null ? deserializeAws_json1_1ExportTaskExecutionInfo(output.executionInfo, context) : void 0,
    from: output.from !== void 0 && output.from !== null ? output.from : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    status: output.status !== void 0 && output.status !== null ? deserializeAws_json1_1ExportTaskStatus(output.status, context) : void 0,
    taskId: output.taskId !== void 0 && output.taskId !== null ? output.taskId : void 0,
    taskName: output.taskName !== void 0 && output.taskName !== null ? output.taskName : void 0,
    to: output.to !== void 0 && output.to !== null ? output.to : void 0
  };
};
var deserializeAws_json1_1ExportTaskExecutionInfo = function(output, context) {
  return {
    completionTime: output.completionTime !== void 0 && output.completionTime !== null ? output.completionTime : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0
  };
};
var deserializeAws_json1_1ExportTasks = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ExportTask(entry, context);
  });
};
var deserializeAws_json1_1ExportTaskStatus = function(output, context) {
  return {
    code: output.code !== void 0 && output.code !== null ? output.code : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ExtractedValues = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1FilteredLogEvent = function(output, context) {
  return {
    eventId: output.eventId !== void 0 && output.eventId !== null ? output.eventId : void 0,
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1FilteredLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1FilteredLogEvent(entry, context);
  });
};
var deserializeAws_json1_1FilterLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1FilteredLogEvents(output.events, context) : void 0,
    nextToken: output.nextToken !== void 0 && output.nextToken !== null ? output.nextToken : void 0,
    searchedLogStreams: output.searchedLogStreams !== void 0 && output.searchedLogStreams !== null ? deserializeAws_json1_1SearchedLogStreams(output.searchedLogStreams, context) : void 0
  };
};
var deserializeAws_json1_1GetLogEventsResponse = function(output, context) {
  return {
    events: output.events !== void 0 && output.events !== null ? deserializeAws_json1_1OutputLogEvents(output.events, context) : void 0,
    nextBackwardToken: output.nextBackwardToken !== void 0 && output.nextBackwardToken !== null ? output.nextBackwardToken : void 0,
    nextForwardToken: output.nextForwardToken !== void 0 && output.nextForwardToken !== null ? output.nextForwardToken : void 0
  };
};
var deserializeAws_json1_1GetLogGroupFieldsResponse = function(output, context) {
  return {
    logGroupFields: output.logGroupFields !== void 0 && output.logGroupFields !== null ? deserializeAws_json1_1LogGroupFieldList(output.logGroupFields, context) : void 0
  };
};
var deserializeAws_json1_1GetLogRecordResponse = function(output, context) {
  return {
    logRecord: output.logRecord !== void 0 && output.logRecord !== null ? deserializeAws_json1_1LogRecord(output.logRecord, context) : void 0
  };
};
var deserializeAws_json1_1GetQueryResultsResponse = function(output, context) {
  return {
    results: output.results !== void 0 && output.results !== null ? deserializeAws_json1_1QueryResults(output.results, context) : void 0,
    statistics: output.statistics !== void 0 && output.statistics !== null ? deserializeAws_json1_1QueryStatistics(output.statistics, context) : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1InvalidOperationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidSequenceTokenException = function(output, context) {
  return {
    expectedSequenceToken: output.expectedSequenceToken !== void 0 && output.expectedSequenceToken !== null ? output.expectedSequenceToken : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListTagsLogGroupResponse = function(output, context) {
  return {
    tags: output.tags !== void 0 && output.tags !== null ? deserializeAws_json1_1Tags(output.tags, context) : void 0
  };
};
var deserializeAws_json1_1LogGroup = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    kmsKeyId: output.kmsKeyId !== void 0 && output.kmsKeyId !== null ? output.kmsKeyId : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricFilterCount: output.metricFilterCount !== void 0 && output.metricFilterCount !== null ? output.metricFilterCount : void 0,
    retentionInDays: output.retentionInDays !== void 0 && output.retentionInDays !== null ? output.retentionInDays : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0
  };
};
var deserializeAws_json1_1LogGroupField = function(output, context) {
  return {
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    percent: output.percent !== void 0 && output.percent !== null ? output.percent : void 0
  };
};
var deserializeAws_json1_1LogGroupFieldList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroupField(entry, context);
  });
};
var deserializeAws_json1_1LogGroupNames = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LogGroups = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogGroup(entry, context);
  });
};
var deserializeAws_json1_1LogRecord = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1LogStream = function(output, context) {
  return {
    arn: output.arn !== void 0 && output.arn !== null ? output.arn : void 0,
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    firstEventTimestamp: output.firstEventTimestamp !== void 0 && output.firstEventTimestamp !== null ? output.firstEventTimestamp : void 0,
    lastEventTimestamp: output.lastEventTimestamp !== void 0 && output.lastEventTimestamp !== null ? output.lastEventTimestamp : void 0,
    lastIngestionTime: output.lastIngestionTime !== void 0 && output.lastIngestionTime !== null ? output.lastIngestionTime : void 0,
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    storedBytes: output.storedBytes !== void 0 && output.storedBytes !== null ? output.storedBytes : void 0,
    uploadSequenceToken: output.uploadSequenceToken !== void 0 && output.uploadSequenceToken !== null ? output.uploadSequenceToken : void 0
  };
};
var deserializeAws_json1_1LogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1LogStream(entry, context);
  });
};
var deserializeAws_json1_1MalformedQueryException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    queryCompileError: output.queryCompileError !== void 0 && output.queryCompileError !== null ? deserializeAws_json1_1QueryCompileError(output.queryCompileError, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    metricTransformations: output.metricTransformations !== void 0 && output.metricTransformations !== null ? deserializeAws_json1_1MetricTransformations(output.metricTransformations, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilterMatches = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilterMatchRecord(entry, context);
  });
};
var deserializeAws_json1_1MetricFilterMatchRecord = function(output, context) {
  return {
    eventMessage: output.eventMessage !== void 0 && output.eventMessage !== null ? output.eventMessage : void 0,
    eventNumber: output.eventNumber !== void 0 && output.eventNumber !== null ? output.eventNumber : void 0,
    extractedValues: output.extractedValues !== void 0 && output.extractedValues !== null ? deserializeAws_json1_1ExtractedValues(output.extractedValues, context) : void 0
  };
};
var deserializeAws_json1_1MetricFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricFilter(entry, context);
  });
};
var deserializeAws_json1_1MetricTransformation = function(output, context) {
  return {
    defaultValue: output.defaultValue !== void 0 && output.defaultValue !== null ? output.defaultValue : void 0,
    metricName: output.metricName !== void 0 && output.metricName !== null ? output.metricName : void 0,
    metricNamespace: output.metricNamespace !== void 0 && output.metricNamespace !== null ? output.metricNamespace : void 0,
    metricValue: output.metricValue !== void 0 && output.metricValue !== null ? output.metricValue : void 0
  };
};
var deserializeAws_json1_1MetricTransformations = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MetricTransformation(entry, context);
  });
};
var deserializeAws_json1_1OperationAbortedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OutputLogEvent = function(output, context) {
  return {
    ingestionTime: output.ingestionTime !== void 0 && output.ingestionTime !== null ? output.ingestionTime : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0,
    timestamp: output.timestamp !== void 0 && output.timestamp !== null ? output.timestamp : void 0
  };
};
var deserializeAws_json1_1OutputLogEvents = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1OutputLogEvent(entry, context);
  });
};
var deserializeAws_json1_1PutDestinationResponse = function(output, context) {
  return {
    destination: output.destination !== void 0 && output.destination !== null ? deserializeAws_json1_1Destination(output.destination, context) : void 0
  };
};
var deserializeAws_json1_1PutLogEventsResponse = function(output, context) {
  return {
    nextSequenceToken: output.nextSequenceToken !== void 0 && output.nextSequenceToken !== null ? output.nextSequenceToken : void 0,
    rejectedLogEventsInfo: output.rejectedLogEventsInfo !== void 0 && output.rejectedLogEventsInfo !== null ? deserializeAws_json1_1RejectedLogEventsInfo(output.rejectedLogEventsInfo, context) : void 0
  };
};
var deserializeAws_json1_1PutQueryDefinitionResponse = function(output, context) {
  return {
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0
  };
};
var deserializeAws_json1_1PutResourcePolicyResponse = function(output, context) {
  return {
    resourcePolicy: output.resourcePolicy !== void 0 && output.resourcePolicy !== null ? deserializeAws_json1_1ResourcePolicy(output.resourcePolicy, context) : void 0
  };
};
var deserializeAws_json1_1QueryCompileError = function(output, context) {
  return {
    location: output.location !== void 0 && output.location !== null ? deserializeAws_json1_1QueryCompileErrorLocation(output.location, context) : void 0,
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1QueryCompileErrorLocation = function(output, context) {
  return {
    endCharOffset: output.endCharOffset !== void 0 && output.endCharOffset !== null ? output.endCharOffset : void 0,
    startCharOffset: output.startCharOffset !== void 0 && output.startCharOffset !== null ? output.startCharOffset : void 0
  };
};
var deserializeAws_json1_1QueryDefinition = function(output, context) {
  return {
    lastModified: output.lastModified !== void 0 && output.lastModified !== null ? output.lastModified : void 0,
    logGroupNames: output.logGroupNames !== void 0 && output.logGroupNames !== null ? deserializeAws_json1_1LogGroupNames(output.logGroupNames, context) : void 0,
    name: output.name !== void 0 && output.name !== null ? output.name : void 0,
    queryDefinitionId: output.queryDefinitionId !== void 0 && output.queryDefinitionId !== null ? output.queryDefinitionId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0
  };
};
var deserializeAws_json1_1QueryDefinitionList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryDefinition(entry, context);
  });
};
var deserializeAws_json1_1QueryInfo = function(output, context) {
  return {
    createTime: output.createTime !== void 0 && output.createTime !== null ? output.createTime : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0,
    queryString: output.queryString !== void 0 && output.queryString !== null ? output.queryString : void 0,
    status: output.status !== void 0 && output.status !== null ? output.status : void 0
  };
};
var deserializeAws_json1_1QueryInfoList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1QueryInfo(entry, context);
  });
};
var deserializeAws_json1_1QueryResults = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultRows(entry, context);
  });
};
var deserializeAws_json1_1QueryStatistics = function(output, context) {
  return {
    bytesScanned: output.bytesScanned !== void 0 && output.bytesScanned !== null ? output.bytesScanned : void 0,
    recordsMatched: output.recordsMatched !== void 0 && output.recordsMatched !== null ? output.recordsMatched : void 0,
    recordsScanned: output.recordsScanned !== void 0 && output.recordsScanned !== null ? output.recordsScanned : void 0
  };
};
var deserializeAws_json1_1RejectedLogEventsInfo = function(output, context) {
  return {
    expiredLogEventEndIndex: output.expiredLogEventEndIndex !== void 0 && output.expiredLogEventEndIndex !== null ? output.expiredLogEventEndIndex : void 0,
    tooNewLogEventStartIndex: output.tooNewLogEventStartIndex !== void 0 && output.tooNewLogEventStartIndex !== null ? output.tooNewLogEventStartIndex : void 0,
    tooOldLogEventEndIndex: output.tooOldLogEventEndIndex !== void 0 && output.tooOldLogEventEndIndex !== null ? output.tooOldLogEventEndIndex : void 0
  };
};
var deserializeAws_json1_1ResourceAlreadyExistsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourcePolicies = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResourcePolicy(entry, context);
  });
};
var deserializeAws_json1_1ResourcePolicy = function(output, context) {
  return {
    lastUpdatedTime: output.lastUpdatedTime !== void 0 && output.lastUpdatedTime !== null ? output.lastUpdatedTime : void 0,
    policyDocument: output.policyDocument !== void 0 && output.policyDocument !== null ? output.policyDocument : void 0,
    policyName: output.policyName !== void 0 && output.policyName !== null ? output.policyName : void 0
  };
};
var deserializeAws_json1_1ResultField = function(output, context) {
  return {
    field: output.field !== void 0 && output.field !== null ? output.field : void 0,
    value: output.value !== void 0 && output.value !== null ? output.value : void 0
  };
};
var deserializeAws_json1_1ResultRows = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1ResultField(entry, context);
  });
};
var deserializeAws_json1_1SearchedLogStream = function(output, context) {
  return {
    logStreamName: output.logStreamName !== void 0 && output.logStreamName !== null ? output.logStreamName : void 0,
    searchedCompletely: output.searchedCompletely !== void 0 && output.searchedCompletely !== null ? output.searchedCompletely : void 0
  };
};
var deserializeAws_json1_1SearchedLogStreams = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SearchedLogStream(entry, context);
  });
};
var deserializeAws_json1_1ServiceUnavailableException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1StartQueryResponse = function(output, context) {
  return {
    queryId: output.queryId !== void 0 && output.queryId !== null ? output.queryId : void 0
  };
};
var deserializeAws_json1_1StopQueryResponse = function(output, context) {
  return {
    success: output.success !== void 0 && output.success !== null ? output.success : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilter = function(output, context) {
  return {
    creationTime: output.creationTime !== void 0 && output.creationTime !== null ? output.creationTime : void 0,
    destinationArn: output.destinationArn !== void 0 && output.destinationArn !== null ? output.destinationArn : void 0,
    distribution: output.distribution !== void 0 && output.distribution !== null ? output.distribution : void 0,
    filterName: output.filterName !== void 0 && output.filterName !== null ? output.filterName : void 0,
    filterPattern: output.filterPattern !== void 0 && output.filterPattern !== null ? output.filterPattern : void 0,
    logGroupName: output.logGroupName !== void 0 && output.logGroupName !== null ? output.logGroupName : void 0,
    roleArn: output.roleArn !== void 0 && output.roleArn !== null ? output.roleArn : void 0
  };
};
var deserializeAws_json1_1SubscriptionFilters = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1SubscriptionFilter(entry, context);
  });
};
var deserializeAws_json1_1Tags = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1TestMetricFilterResponse = function(output, context) {
  return {
    matches: output.matches !== void 0 && output.matches !== null ? deserializeAws_json1_1MetricFilterMatches(output.matches, context) : void 0
  };
};
var deserializeAws_json1_1UnrecognizedClientException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeMetadata = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function(streamBody, context) {
  return collectBody(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody = function(streamBody, context) {
  return collectBodyString(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k2) {
      return k2.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/middleware-serde/node_modules/tslib/tslib.es6.js
var __assign13 = function() {
  __assign13 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign13.apply(this, arguments);
};
function __awaiter15(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator15(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-sdk/middleware-serde/dist/es/deserializerMiddleware.js
var deserializerMiddleware = function(options, deserializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter15(void 0, void 0, void 0, function() {
        var response, parsed;
        return __generator15(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(args)];
            case 1:
              response = _a.sent().response;
              return [4, deserializer(response, options)];
            case 2:
              parsed = _a.sent();
              return [2, {
                response,
                output: parsed
              }];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serializerMiddleware.js
var serializerMiddleware = function(options, serializer) {
  return function(next, context) {
    return function(args) {
      return __awaiter15(void 0, void 0, void 0, function() {
        var request;
        return __generator15(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, serializer(args.input, options)];
            case 1:
              request = _a.sent();
              return [2, next(__assign13(__assign13({}, args), { request }))];
          }
        });
      });
    };
  };
};

// node_modules/@aws-sdk/middleware-serde/dist/es/serdePlugin.js
var deserializerMiddlewareOption = {
  name: "deserializerMiddleware",
  step: "deserialize",
  tags: ["DESERIALIZER"],
  override: true
};
var serializerMiddlewareOption = {
  name: "serializerMiddleware",
  step: "serialize",
  tags: ["SERIALIZER"],
  override: true
};
function getSerdePlugin(config, serializer, deserializer) {
  return {
    applyToStack: function(commandStack) {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/AssociateKmsKeyCommand.js
var AssociateKmsKeyCommand = (
  /** @class */
  function(_super) {
    __extends(AssociateKmsKeyCommand2, _super);
    function AssociateKmsKeyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    AssociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "AssociateKmsKeyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    AssociateKmsKeyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1AssociateKmsKeyCommand(input, context);
    };
    AssociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);
    };
    return AssociateKmsKeyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CancelExportTaskCommand.js
var CancelExportTaskCommand = (
  /** @class */
  function(_super) {
    __extends(CancelExportTaskCommand2, _super);
    function CancelExportTaskCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CancelExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CancelExportTaskCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: CancelExportTaskRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CancelExportTaskCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CancelExportTaskCommand(input, context);
    };
    CancelExportTaskCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CancelExportTaskCommand(output, context);
    };
    return CancelExportTaskCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateExportTaskCommand.js
var CreateExportTaskCommand = (
  /** @class */
  function(_super) {
    __extends(CreateExportTaskCommand2, _super);
    function CreateExportTaskCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateExportTaskCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CreateExportTaskCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateExportTaskRequest.filterSensitiveLog,
        outputFilterSensitiveLog: CreateExportTaskResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateExportTaskCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateExportTaskCommand(input, context);
    };
    CreateExportTaskCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateExportTaskCommand(output, context);
    };
    return CreateExportTaskCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogGroupCommand.js
var CreateLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends(CreateLogGroupCommand2, _super);
    function CreateLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CreateLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateLogGroupCommand(input, context);
    };
    CreateLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateLogGroupCommand(output, context);
    };
    return CreateLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/CreateLogStreamCommand.js
var CreateLogStreamCommand = (
  /** @class */
  function(_super) {
    __extends(CreateLogStreamCommand2, _super);
    function CreateLogStreamCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "CreateLogStreamCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateLogStreamRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateLogStreamCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateLogStreamCommand(input, context);
    };
    CreateLogStreamCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateLogStreamCommand(output, context);
    };
    return CreateLogStreamCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteDestinationCommand.js
var DeleteDestinationCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteDestinationCommand2, _super);
    function DeleteDestinationCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteDestinationCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteDestinationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteDestinationCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteDestinationCommand(input, context);
    };
    DeleteDestinationCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteDestinationCommand(output, context);
    };
    return DeleteDestinationCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogGroupCommand.js
var DeleteLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteLogGroupCommand2, _super);
    function DeleteLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteLogGroupCommand(input, context);
    };
    DeleteLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteLogGroupCommand(output, context);
    };
    return DeleteLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteLogStreamCommand.js
var DeleteLogStreamCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteLogStreamCommand2, _super);
    function DeleteLogStreamCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteLogStreamCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteLogStreamCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteLogStreamRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteLogStreamCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteLogStreamCommand(input, context);
    };
    DeleteLogStreamCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteLogStreamCommand(output, context);
    };
    return DeleteLogStreamCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteMetricFilterCommand.js
var DeleteMetricFilterCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteMetricFilterCommand2, _super);
    function DeleteMetricFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteMetricFilterCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteMetricFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteMetricFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteMetricFilterCommand(input, context);
    };
    DeleteMetricFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteMetricFilterCommand(output, context);
    };
    return DeleteMetricFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteQueryDefinitionCommand.js
var DeleteQueryDefinitionCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteQueryDefinitionCommand2, _super);
    function DeleteQueryDefinitionCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteQueryDefinitionCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteQueryDefinitionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DeleteQueryDefinitionResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteQueryDefinitionCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteQueryDefinitionCommand(input, context);
    };
    DeleteQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteQueryDefinitionCommand(output, context);
    };
    return DeleteQueryDefinitionCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteResourcePolicyCommand.js
var DeleteResourcePolicyCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteResourcePolicyCommand2, _super);
    function DeleteResourcePolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteResourcePolicyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteResourcePolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteResourcePolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteResourcePolicyCommand(input, context);
    };
    DeleteResourcePolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteResourcePolicyCommand(output, context);
    };
    return DeleteResourcePolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteRetentionPolicyCommand.js
var DeleteRetentionPolicyCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteRetentionPolicyCommand2, _super);
    function DeleteRetentionPolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteRetentionPolicyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteRetentionPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteRetentionPolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteRetentionPolicyCommand(input, context);
    };
    DeleteRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteRetentionPolicyCommand(output, context);
    };
    return DeleteRetentionPolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DeleteSubscriptionFilterCommand.js
var DeleteSubscriptionFilterCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteSubscriptionFilterCommand2, _super);
    function DeleteSubscriptionFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DeleteSubscriptionFilterCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteSubscriptionFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteSubscriptionFilterCommand(input, context);
    };
    DeleteSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteSubscriptionFilterCommand(output, context);
    };
    return DeleteSubscriptionFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeDestinationsCommand.js
var DescribeDestinationsCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeDestinationsCommand2, _super);
    function DescribeDestinationsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeDestinationsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeDestinationsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeDestinationsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeDestinationsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeDestinationsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeDestinationsCommand(input, context);
    };
    DescribeDestinationsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeDestinationsCommand(output, context);
    };
    return DescribeDestinationsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeExportTasksCommand.js
var DescribeExportTasksCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeExportTasksCommand2, _super);
    function DescribeExportTasksCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeExportTasksCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeExportTasksCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeExportTasksRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeExportTasksResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeExportTasksCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeExportTasksCommand(input, context);
    };
    DescribeExportTasksCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeExportTasksCommand(output, context);
    };
    return DescribeExportTasksCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogGroupsCommand.js
var DescribeLogGroupsCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeLogGroupsCommand2, _super);
    function DescribeLogGroupsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeLogGroupsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeLogGroupsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeLogGroupsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeLogGroupsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeLogGroupsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeLogGroupsCommand(input, context);
    };
    DescribeLogGroupsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeLogGroupsCommand(output, context);
    };
    return DescribeLogGroupsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeLogStreamsCommand.js
var DescribeLogStreamsCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeLogStreamsCommand2, _super);
    function DescribeLogStreamsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeLogStreamsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeLogStreamsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeLogStreamsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeLogStreamsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeLogStreamsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeLogStreamsCommand(input, context);
    };
    DescribeLogStreamsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeLogStreamsCommand(output, context);
    };
    return DescribeLogStreamsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeMetricFiltersCommand.js
var DescribeMetricFiltersCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeMetricFiltersCommand2, _super);
    function DescribeMetricFiltersCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeMetricFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeMetricFiltersCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeMetricFiltersRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeMetricFiltersResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeMetricFiltersCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeMetricFiltersCommand(input, context);
    };
    DescribeMetricFiltersCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeMetricFiltersCommand(output, context);
    };
    return DescribeMetricFiltersCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueriesCommand.js
var DescribeQueriesCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeQueriesCommand2, _super);
    function DescribeQueriesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeQueriesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeQueriesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeQueriesRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeQueriesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeQueriesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeQueriesCommand(input, context);
    };
    DescribeQueriesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeQueriesCommand(output, context);
    };
    return DescribeQueriesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeQueryDefinitionsCommand.js
var DescribeQueryDefinitionsCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeQueryDefinitionsCommand2, _super);
    function DescribeQueryDefinitionsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeQueryDefinitionsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeQueryDefinitionsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeQueryDefinitionsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeQueryDefinitionsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeQueryDefinitionsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeQueryDefinitionsCommand(input, context);
    };
    DescribeQueryDefinitionsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeQueryDefinitionsCommand(output, context);
    };
    return DescribeQueryDefinitionsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeResourcePoliciesCommand.js
var DescribeResourcePoliciesCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeResourcePoliciesCommand2, _super);
    function DescribeResourcePoliciesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeResourcePoliciesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeResourcePoliciesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeResourcePoliciesRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeResourcePoliciesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeResourcePoliciesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeResourcePoliciesCommand(input, context);
    };
    DescribeResourcePoliciesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeResourcePoliciesCommand(output, context);
    };
    return DescribeResourcePoliciesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DescribeSubscriptionFiltersCommand.js
var DescribeSubscriptionFiltersCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeSubscriptionFiltersCommand2, _super);
    function DescribeSubscriptionFiltersCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeSubscriptionFiltersCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DescribeSubscriptionFiltersCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeSubscriptionFiltersRequest.filterSensitiveLog,
        outputFilterSensitiveLog: DescribeSubscriptionFiltersResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeSubscriptionFiltersCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeSubscriptionFiltersCommand(input, context);
    };
    DescribeSubscriptionFiltersCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeSubscriptionFiltersCommand(output, context);
    };
    return DescribeSubscriptionFiltersCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/DisassociateKmsKeyCommand.js
var DisassociateKmsKeyCommand = (
  /** @class */
  function(_super) {
    __extends(DisassociateKmsKeyCommand2, _super);
    function DisassociateKmsKeyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DisassociateKmsKeyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "DisassociateKmsKeyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DisassociateKmsKeyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DisassociateKmsKeyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DisassociateKmsKeyCommand(input, context);
    };
    DisassociateKmsKeyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DisassociateKmsKeyCommand(output, context);
    };
    return DisassociateKmsKeyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/FilterLogEventsCommand.js
var FilterLogEventsCommand = (
  /** @class */
  function(_super) {
    __extends(FilterLogEventsCommand2, _super);
    function FilterLogEventsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    FilterLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "FilterLogEventsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: FilterLogEventsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: FilterLogEventsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    FilterLogEventsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1FilterLogEventsCommand(input, context);
    };
    FilterLogEventsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1FilterLogEventsCommand(output, context);
    };
    return FilterLogEventsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogEventsCommand.js
var GetLogEventsCommand = (
  /** @class */
  function(_super) {
    __extends(GetLogEventsCommand2, _super);
    function GetLogEventsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetLogEventsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetLogEventsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetLogEventsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetLogEventsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetLogEventsCommand(input, context);
    };
    GetLogEventsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetLogEventsCommand(output, context);
    };
    return GetLogEventsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogGroupFieldsCommand.js
var GetLogGroupFieldsCommand = (
  /** @class */
  function(_super) {
    __extends(GetLogGroupFieldsCommand2, _super);
    function GetLogGroupFieldsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetLogGroupFieldsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetLogGroupFieldsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetLogGroupFieldsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetLogGroupFieldsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetLogGroupFieldsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetLogGroupFieldsCommand(input, context);
    };
    GetLogGroupFieldsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetLogGroupFieldsCommand(output, context);
    };
    return GetLogGroupFieldsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetLogRecordCommand.js
var GetLogRecordCommand = (
  /** @class */
  function(_super) {
    __extends(GetLogRecordCommand2, _super);
    function GetLogRecordCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetLogRecordCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetLogRecordCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetLogRecordRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetLogRecordResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetLogRecordCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetLogRecordCommand(input, context);
    };
    GetLogRecordCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetLogRecordCommand(output, context);
    };
    return GetLogRecordCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/GetQueryResultsCommand.js
var GetQueryResultsCommand = (
  /** @class */
  function(_super) {
    __extends(GetQueryResultsCommand2, _super);
    function GetQueryResultsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetQueryResultsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "GetQueryResultsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetQueryResultsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: GetQueryResultsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetQueryResultsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetQueryResultsCommand(input, context);
    };
    GetQueryResultsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetQueryResultsCommand(output, context);
    };
    return GetQueryResultsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/ListTagsLogGroupCommand.js
var ListTagsLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends(ListTagsLogGroupCommand2, _super);
    function ListTagsLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    ListTagsLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "ListTagsLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: ListTagsLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: ListTagsLogGroupResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    ListTagsLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1ListTagsLogGroupCommand(input, context);
    };
    ListTagsLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1ListTagsLogGroupCommand(output, context);
    };
    return ListTagsLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationCommand.js
var PutDestinationCommand = (
  /** @class */
  function(_super) {
    __extends(PutDestinationCommand2, _super);
    function PutDestinationCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutDestinationCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutDestinationCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutDestinationRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutDestinationResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutDestinationCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutDestinationCommand(input, context);
    };
    PutDestinationCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutDestinationCommand(output, context);
    };
    return PutDestinationCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutDestinationPolicyCommand.js
var PutDestinationPolicyCommand = (
  /** @class */
  function(_super) {
    __extends(PutDestinationPolicyCommand2, _super);
    function PutDestinationPolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutDestinationPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutDestinationPolicyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutDestinationPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutDestinationPolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutDestinationPolicyCommand(input, context);
    };
    PutDestinationPolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutDestinationPolicyCommand(output, context);
    };
    return PutDestinationPolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutLogEventsCommand.js
var PutLogEventsCommand = (
  /** @class */
  function(_super) {
    __extends(PutLogEventsCommand2, _super);
    function PutLogEventsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutLogEventsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutLogEventsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutLogEventsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutLogEventsCommand(input, context);
    };
    PutLogEventsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutLogEventsCommand(output, context);
    };
    return PutLogEventsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutMetricFilterCommand.js
var PutMetricFilterCommand = (
  /** @class */
  function(_super) {
    __extends(PutMetricFilterCommand2, _super);
    function PutMetricFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutMetricFilterCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutMetricFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutMetricFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutMetricFilterCommand(input, context);
    };
    PutMetricFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutMetricFilterCommand(output, context);
    };
    return PutMetricFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutQueryDefinitionCommand.js
var PutQueryDefinitionCommand = (
  /** @class */
  function(_super) {
    __extends(PutQueryDefinitionCommand2, _super);
    function PutQueryDefinitionCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutQueryDefinitionCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutQueryDefinitionCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutQueryDefinitionRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutQueryDefinitionResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutQueryDefinitionCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutQueryDefinitionCommand(input, context);
    };
    PutQueryDefinitionCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutQueryDefinitionCommand(output, context);
    };
    return PutQueryDefinitionCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutResourcePolicyCommand.js
var PutResourcePolicyCommand = (
  /** @class */
  function(_super) {
    __extends(PutResourcePolicyCommand2, _super);
    function PutResourcePolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutResourcePolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutResourcePolicyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutResourcePolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: PutResourcePolicyResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutResourcePolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutResourcePolicyCommand(input, context);
    };
    PutResourcePolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutResourcePolicyCommand(output, context);
    };
    return PutResourcePolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutRetentionPolicyCommand.js
var PutRetentionPolicyCommand = (
  /** @class */
  function(_super) {
    __extends(PutRetentionPolicyCommand2, _super);
    function PutRetentionPolicyCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutRetentionPolicyCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutRetentionPolicyCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutRetentionPolicyRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutRetentionPolicyCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutRetentionPolicyCommand(input, context);
    };
    PutRetentionPolicyCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutRetentionPolicyCommand(output, context);
    };
    return PutRetentionPolicyCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/PutSubscriptionFilterCommand.js
var PutSubscriptionFilterCommand = (
  /** @class */
  function(_super) {
    __extends(PutSubscriptionFilterCommand2, _super);
    function PutSubscriptionFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    PutSubscriptionFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "PutSubscriptionFilterCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    PutSubscriptionFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);
    };
    PutSubscriptionFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);
    };
    return PutSubscriptionFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StartQueryCommand.js
var StartQueryCommand = (
  /** @class */
  function(_super) {
    __extends(StartQueryCommand2, _super);
    function StartQueryCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    StartQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "StartQueryCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: StartQueryRequest.filterSensitiveLog,
        outputFilterSensitiveLog: StartQueryResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    StartQueryCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1StartQueryCommand(input, context);
    };
    StartQueryCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1StartQueryCommand(output, context);
    };
    return StartQueryCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/StopQueryCommand.js
var StopQueryCommand = (
  /** @class */
  function(_super) {
    __extends(StopQueryCommand2, _super);
    function StopQueryCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    StopQueryCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "StopQueryCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: StopQueryRequest.filterSensitiveLog,
        outputFilterSensitiveLog: StopQueryResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    StopQueryCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1StopQueryCommand(input, context);
    };
    StopQueryCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1StopQueryCommand(output, context);
    };
    return StopQueryCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TagLogGroupCommand.js
var TagLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends(TagLogGroupCommand2, _super);
    function TagLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    TagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "TagLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: TagLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    TagLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1TagLogGroupCommand(input, context);
    };
    TagLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1TagLogGroupCommand(output, context);
    };
    return TagLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/TestMetricFilterCommand.js
var TestMetricFilterCommand = (
  /** @class */
  function(_super) {
    __extends(TestMetricFilterCommand2, _super);
    function TestMetricFilterCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    TestMetricFilterCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "TestMetricFilterCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: TestMetricFilterRequest.filterSensitiveLog,
        outputFilterSensitiveLog: TestMetricFilterResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    TestMetricFilterCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1TestMetricFilterCommand(input, context);
    };
    TestMetricFilterCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1TestMetricFilterCommand(output, context);
    };
    return TestMetricFilterCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/commands/UntagLogGroupCommand.js
var UntagLogGroupCommand = (
  /** @class */
  function(_super) {
    __extends(UntagLogGroupCommand2, _super);
    function UntagLogGroupCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    UntagLogGroupCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CloudWatchLogsClient";
      var commandName = "UntagLogGroupCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: UntagLogGroupRequest.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    UntagLogGroupCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1UntagLogGroupCommand(input, context);
    };
    UntagLogGroupCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1UntagLogGroupCommand(output, context);
    };
    return UntagLogGroupCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cloudwatch-logs/dist/es/CloudWatchLogs.js
var CloudWatchLogs = (
  /** @class */
  function(_super) {
    __extends(CloudWatchLogs2, _super);
    function CloudWatchLogs2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CloudWatchLogs2.prototype.associateKmsKey = function(args, optionsOrCb, cb) {
      var command = new AssociateKmsKeyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.cancelExportTask = function(args, optionsOrCb, cb) {
      var command = new CancelExportTaskCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.createExportTask = function(args, optionsOrCb, cb) {
      var command = new CreateExportTaskCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.createLogGroup = function(args, optionsOrCb, cb) {
      var command = new CreateLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.createLogStream = function(args, optionsOrCb, cb) {
      var command = new CreateLogStreamCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteDestination = function(args, optionsOrCb, cb) {
      var command = new DeleteDestinationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteLogGroup = function(args, optionsOrCb, cb) {
      var command = new DeleteLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteLogStream = function(args, optionsOrCb, cb) {
      var command = new DeleteLogStreamCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteMetricFilter = function(args, optionsOrCb, cb) {
      var command = new DeleteMetricFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteQueryDefinition = function(args, optionsOrCb, cb) {
      var command = new DeleteQueryDefinitionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteResourcePolicy = function(args, optionsOrCb, cb) {
      var command = new DeleteResourcePolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteRetentionPolicy = function(args, optionsOrCb, cb) {
      var command = new DeleteRetentionPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.deleteSubscriptionFilter = function(args, optionsOrCb, cb) {
      var command = new DeleteSubscriptionFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeDestinations = function(args, optionsOrCb, cb) {
      var command = new DescribeDestinationsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeExportTasks = function(args, optionsOrCb, cb) {
      var command = new DescribeExportTasksCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeLogGroups = function(args, optionsOrCb, cb) {
      var command = new DescribeLogGroupsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeLogStreams = function(args, optionsOrCb, cb) {
      var command = new DescribeLogStreamsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeMetricFilters = function(args, optionsOrCb, cb) {
      var command = new DescribeMetricFiltersCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeQueries = function(args, optionsOrCb, cb) {
      var command = new DescribeQueriesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeQueryDefinitions = function(args, optionsOrCb, cb) {
      var command = new DescribeQueryDefinitionsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeResourcePolicies = function(args, optionsOrCb, cb) {
      var command = new DescribeResourcePoliciesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.describeSubscriptionFilters = function(args, optionsOrCb, cb) {
      var command = new DescribeSubscriptionFiltersCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.disassociateKmsKey = function(args, optionsOrCb, cb) {
      var command = new DisassociateKmsKeyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.filterLogEvents = function(args, optionsOrCb, cb) {
      var command = new FilterLogEventsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getLogEvents = function(args, optionsOrCb, cb) {
      var command = new GetLogEventsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getLogGroupFields = function(args, optionsOrCb, cb) {
      var command = new GetLogGroupFieldsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getLogRecord = function(args, optionsOrCb, cb) {
      var command = new GetLogRecordCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.getQueryResults = function(args, optionsOrCb, cb) {
      var command = new GetQueryResultsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.listTagsLogGroup = function(args, optionsOrCb, cb) {
      var command = new ListTagsLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putDestination = function(args, optionsOrCb, cb) {
      var command = new PutDestinationCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putDestinationPolicy = function(args, optionsOrCb, cb) {
      var command = new PutDestinationPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putLogEvents = function(args, optionsOrCb, cb) {
      var command = new PutLogEventsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putMetricFilter = function(args, optionsOrCb, cb) {
      var command = new PutMetricFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putQueryDefinition = function(args, optionsOrCb, cb) {
      var command = new PutQueryDefinitionCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putResourcePolicy = function(args, optionsOrCb, cb) {
      var command = new PutResourcePolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putRetentionPolicy = function(args, optionsOrCb, cb) {
      var command = new PutRetentionPolicyCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.putSubscriptionFilter = function(args, optionsOrCb, cb) {
      var command = new PutSubscriptionFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.startQuery = function(args, optionsOrCb, cb) {
      var command = new StartQueryCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.stopQuery = function(args, optionsOrCb, cb) {
      var command = new StopQueryCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.tagLogGroup = function(args, optionsOrCb, cb) {
      var command = new TagLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.testMetricFilter = function(args, optionsOrCb, cb) {
      var command = new TestMetricFilterCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CloudWatchLogs2.prototype.untagLogGroup = function(args, optionsOrCb, cb) {
      var command = new UntagLogGroupCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    return CloudWatchLogs2;
  }(CloudWatchLogsClient)
);

// node_modules/@aws-amplify/core/lib-esm/Providers/AWSCloudWatchProvider.js
var logger9 = new ConsoleLogger("AWSCloudWatch");
var AWSCloudWatchProvider = (
  /** @class */
  function() {
    function AWSCloudWatchProvider2(config) {
      this.configure(config);
      this._dataTracker = {
        eventUploadInProgress: false,
        logEvents: []
      };
      this._currentLogBatch = [];
      this._initiateLogPushInterval();
    }
    AWSCloudWatchProvider2.prototype.getProviderName = function() {
      return AWSCloudWatchProvider2.PROVIDER_NAME;
    };
    AWSCloudWatchProvider2.prototype.getCategoryName = function() {
      return AWSCloudWatchProvider2.CATEGORY;
    };
    AWSCloudWatchProvider2.prototype.getLogQueue = function() {
      return this._dataTracker.logEvents;
    };
    AWSCloudWatchProvider2.prototype.configure = function(config) {
      if (!config)
        return this._config || {};
      var conf = Object.assign({}, this._config, parseAWSExports(config).Logging, config);
      this._config = conf;
      return this._config;
    };
    AWSCloudWatchProvider2.prototype.createLogGroup = function(params) {
      return __awaiter4(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_1;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger9.debug("creating new log group in CloudWatch - ", params.logGroupName);
              cmd = new CreateLogGroupCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_1 = _a.sent();
              logger9.error("error creating log group - " + error_1);
              throw error_1;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.getLogGroups = function(params) {
      return __awaiter4(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_2;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger9.debug("getting list of log groups");
              cmd = new DescribeLogGroupsCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_2 = _a.sent();
              logger9.error("error getting log group - " + error_2);
              throw error_2;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.createLogStream = function(params) {
      return __awaiter4(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_3;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger9.debug("creating new log stream in CloudWatch - ", params.logStreamName);
              cmd = new CreateLogStreamCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_3 = _a.sent();
              logger9.error("error creating log stream - " + error_3);
              throw error_3;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.getLogStreams = function(params) {
      return __awaiter4(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_4;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger9.debug("getting list of log streams");
              cmd = new DescribeLogStreamsCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_4 = _a.sent();
              logger9.error("error getting log stream - " + error_4);
              throw error_4;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.getLogEvents = function(params) {
      return __awaiter4(this, void 0, void 0, function() {
        var cmd, credentialsOK, client, output, error_5;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger9.debug("getting log events from stream - ", params.logStreamName);
              cmd = new GetLogEventsCommand(params);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 3:
              output = _a.sent();
              return [2, output];
            case 4:
              error_5 = _a.sent();
              logger9.error("error getting log events - " + error_5);
              throw error_5;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype.pushLogs = function(logs) {
      logger9.debug("pushing log events to Cloudwatch...");
      this._dataTracker.logEvents = __spread2(this._dataTracker.logEvents, logs);
    };
    AWSCloudWatchProvider2.prototype._validateLogGroupExistsAndCreate = function(logGroupName) {
      return __awaiter4(this, void 0, void 0, function() {
        var credentialsOK, currGroups, foundGroups, err_1, errString;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this._dataTracker.verifiedLogGroup) {
                return [2, this._dataTracker.verifiedLogGroup];
              }
              _a.label = 1;
            case 1:
              _a.trys.push([1, 5, , 6]);
              return [4, this._ensureCredentials()];
            case 2:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              return [4, this.getLogGroups({
                logGroupNamePrefix: logGroupName
              })];
            case 3:
              currGroups = _a.sent();
              if (!(typeof currGroups === "string") && currGroups.logGroups) {
                foundGroups = currGroups.logGroups.filter(function(group) {
                  return group.logGroupName === logGroupName;
                });
                if (foundGroups.length > 0) {
                  this._dataTracker.verifiedLogGroup = foundGroups[0];
                  return [2, foundGroups[0]];
                }
              }
              return [4, this.createLogGroup({ logGroupName })];
            case 4:
              _a.sent();
              return [2, null];
            case 5:
              err_1 = _a.sent();
              errString = "failure during log group search: " + err_1;
              logger9.error(errString);
              throw err_1;
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._validateLogStreamExists = function(logGroupName, logStreamName) {
      return __awaiter4(this, void 0, void 0, function() {
        var credentialsOK, currStreams, foundStreams, err_2, errString;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 4, , 5]);
              return [4, this._ensureCredentials()];
            case 1:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              return [4, this.getLogStreams({
                logGroupName,
                logStreamNamePrefix: logStreamName
              })];
            case 2:
              currStreams = _a.sent();
              if (currStreams.logStreams) {
                foundStreams = currStreams.logStreams.filter(function(stream) {
                  return stream.logStreamName === logStreamName;
                });
                if (foundStreams.length > 0) {
                  this._nextSequenceToken = foundStreams[0].uploadSequenceToken;
                  return [2, foundStreams[0]];
                }
              }
              return [4, this.createLogStream({
                logGroupName,
                logStreamName
              })];
            case 3:
              _a.sent();
              return [2, null];
            case 4:
              err_2 = _a.sent();
              errString = "failure during log stream search: " + err_2;
              logger9.error(errString);
              throw err_2;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._sendLogEvents = function(params) {
      return __awaiter4(this, void 0, void 0, function() {
        var credentialsOK, cmd, client, output, err_3, errString;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              return [4, this._ensureCredentials()];
            case 1:
              credentialsOK = _a.sent();
              if (!credentialsOK) {
                throw new Error(NO_CREDS_ERROR_STRING);
              }
              logger9.debug("sending log events to stream - ", params.logStreamName);
              cmd = new PutLogEventsCommand(params);
              client = this._initCloudWatchLogs();
              return [4, client.send(cmd)];
            case 2:
              output = _a.sent();
              return [2, output];
            case 3:
              err_3 = _a.sent();
              errString = "failure during log push: " + err_3;
              logger9.error(errString);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._initCloudWatchLogs = function() {
      return new CloudWatchLogsClient({
        region: this._config.region,
        credentials: this._config.credentials,
        customUserAgent: getAmplifyUserAgent(),
        endpoint: this._config.endpoint
      });
    };
    AWSCloudWatchProvider2.prototype._ensureCredentials = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var _this = this;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, Credentials.get().then(function(credentials) {
                if (!credentials)
                  return false;
                var cred = Credentials.shear(credentials);
                logger9.debug("set credentials for logging", cred);
                _this._config.credentials = cred;
                return true;
              }).catch(function(error) {
                logger9.warn("ensure credentials error", error);
                return false;
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._getNextSequenceToken = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var logStream, err_4;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {
                return [2, this._nextSequenceToken];
              }
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this._validateLogGroupExistsAndCreate(this._config.logGroupName)];
            case 2:
              _a.sent();
              this._nextSequenceToken = void 0;
              return [4, this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];
            case 3:
              logStream = _a.sent();
              if (logStream) {
                this._nextSequenceToken = logStream.uploadSequenceToken;
              }
              return [2, this._nextSequenceToken];
            case 4:
              err_4 = _a.sent();
              logger9.error("failure while getting next sequence token: " + err_4);
              throw err_4;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._safeUploadLogEvents = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              return [4, this._getNextSequenceToken()];
            case 1:
              seqToken = _a.sent();
              logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;
              putLogsPayload = {
                logGroupName: this._config.logGroupName,
                logStreamName: this._config.logStreamName,
                logEvents: logBatch,
                sequenceToken: seqToken
              };
              this._dataTracker.eventUploadInProgress = true;
              return [4, this._sendLogEvents(putLogsPayload)];
            case 2:
              sendLogEventsResponse = _a.sent();
              this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;
              this._dataTracker.eventUploadInProgress = false;
              this._currentLogBatch = [];
              return [2, sendLogEventsResponse];
            case 3:
              err_5 = _a.sent();
              logger9.error("error during _safeUploadLogEvents: " + err_5);
              if (RETRY_ERROR_CODES.includes(err_5.name)) {
                this._getNewSequenceTokenAndSubmit({
                  logEvents: this._currentLogBatch,
                  logGroupName: this._config.logGroupName,
                  logStreamName: this._config.logStreamName
                });
              } else {
                this._dataTracker.eventUploadInProgress = false;
                throw err_5;
              }
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._getBufferedBatchOfLogs = function() {
      var currentEventIdx = 0;
      var totalByteSize = 0;
      while (currentEventIdx < this._dataTracker.logEvents.length) {
        var currentEvent = this._dataTracker.logEvents[currentEventIdx];
        var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;
        if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {
          var errString = "Log entry exceeds maximum size for CloudWatch logs. Log size: " + eventSize + ". Truncating log message.";
          logger9.warn(errString);
          currentEvent.message = currentEvent.message.substring(0, eventSize);
        }
        if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)
          break;
        totalByteSize += eventSize;
        currentEventIdx++;
      }
      this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);
      return this._currentLogBatch;
    };
    AWSCloudWatchProvider2.prototype._getNewSequenceTokenAndSubmit = function(payload) {
      return __awaiter4(this, void 0, void 0, function() {
        var seqToken, sendLogEventsRepsonse, err_6;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3, , 4]);
              this._nextSequenceToken = void 0;
              this._dataTracker.eventUploadInProgress = true;
              return [4, this._getNextSequenceToken()];
            case 1:
              seqToken = _a.sent();
              payload.sequenceToken = seqToken;
              return [4, this._sendLogEvents(payload)];
            case 2:
              sendLogEventsRepsonse = _a.sent();
              this._dataTracker.eventUploadInProgress = false;
              this._currentLogBatch = [];
              return [2, sendLogEventsRepsonse];
            case 3:
              err_6 = _a.sent();
              logger9.error("error when retrying log submission with new sequence token: " + err_6);
              this._dataTracker.eventUploadInProgress = false;
              throw err_6;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSCloudWatchProvider2.prototype._initiateLogPushInterval = function() {
      var _this = this;
      if (this._timer) {
        clearInterval(this._timer);
      }
      this._timer = setInterval(function() {
        return __awaiter4(_this, void 0, void 0, function() {
          var err_7;
          return __generator4(this, function(_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 3, , 4]);
                if (!this._getDocUploadPermissibility())
                  return [3, 2];
                return [4, this._safeUploadLogEvents()];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                return [3, 4];
              case 3:
                err_7 = _a.sent();
                logger9.error("error when calling _safeUploadLogEvents in the timer interval - " + err_7);
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, 2e3);
    };
    AWSCloudWatchProvider2.prototype._getDocUploadPermissibility = function() {
      return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;
    };
    AWSCloudWatchProvider2.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;
    AWSCloudWatchProvider2.CATEGORY = AWS_CLOUDWATCH_CATEGORY;
    return AWSCloudWatchProvider2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
var logger10 = new ConsoleLogger("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger10.debug("not in the browser, directly resolved");
    return res();
  }
  var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
  if (ga) {
    logger10.debug("google api already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var GoogleOAuth = (
  /** @class */
  function() {
    function GoogleOAuth3() {
      this.initialized = false;
      this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
      this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
    }
    GoogleOAuth3.prototype.refreshGoogleToken = function() {
      return __awaiter4(this, void 0, void 0, function() {
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.initialized)
                return [3, 2];
              logger10.debug("need to wait for the Google SDK loaded");
              return [4, waitForInit];
            case 1:
              _a.sent();
              this.initialized = true;
              logger10.debug("finish waiting");
              _a.label = 2;
            case 2:
              return [2, this._refreshGoogleTokenImpl()];
          }
        });
      });
    };
    GoogleOAuth3.prototype._refreshGoogleTokenImpl = function() {
      var ga = null;
      if (browserOrNode().isBrowser)
        ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
      if (!ga) {
        logger10.debug("no gapi auth2 available");
        return Promise.reject("no gapi auth2 available");
      }
      return new Promise(function(res, rej) {
        ga.getAuthInstance().then(function(googleAuth) {
          if (!googleAuth) {
            logger10.debug("google Auth undefined");
            rej(new NonRetryableError("google Auth undefined"));
          }
          var googleUser = googleAuth.currentUser.get();
          if (googleUser.isSignedIn()) {
            logger10.debug("refreshing the google access token");
            googleUser.reloadAuthResponse().then(function(authResponse) {
              var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
              res({ token: id_token, expires_at });
            }).catch(function(err) {
              if (err && err.error === "network_error") {
                rej("Network error reloading google auth response");
              } else {
                rej(new NonRetryableError("Failed to reload google auth response"));
              }
            });
          } else {
            rej(new NonRetryableError("User is not signed in with Google"));
          }
        }).catch(function(err) {
          logger10.debug("Failed to refresh google token", err);
          rej(new NonRetryableError("Failed to refresh google token"));
        });
      });
    };
    return GoogleOAuth3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
var logger11 = new ConsoleLogger("CognitoCredentials");
var waitForInit2 = new Promise(function(res, rej) {
  if (!browserOrNode().isBrowser) {
    logger11.debug("not in the browser, directly resolved");
    return res();
  }
  var fb = window["FB"];
  if (fb) {
    logger11.debug("FB SDK already loaded");
    return res();
  } else {
    setTimeout(function() {
      return res();
    }, 2e3);
  }
});
var FacebookOAuth = (
  /** @class */
  function() {
    function FacebookOAuth3() {
      this.initialized = false;
      this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
      this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
    }
    FacebookOAuth3.prototype.refreshFacebookToken = function() {
      return __awaiter4(this, void 0, void 0, function() {
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this.initialized)
                return [3, 2];
              logger11.debug("need to wait for the Facebook SDK loaded");
              return [4, waitForInit2];
            case 1:
              _a.sent();
              this.initialized = true;
              logger11.debug("finish waiting");
              _a.label = 2;
            case 2:
              return [2, this._refreshFacebookTokenImpl()];
          }
        });
      });
    };
    FacebookOAuth3.prototype._refreshFacebookTokenImpl = function() {
      var fb = null;
      if (browserOrNode().isBrowser)
        fb = window["FB"];
      if (!fb) {
        var errorMessage = "no fb sdk available";
        logger11.debug(errorMessage);
        return Promise.reject(new NonRetryableError(errorMessage));
      }
      return new Promise(function(res, rej) {
        fb.getLoginStatus(function(fbResponse) {
          if (!fbResponse || !fbResponse.authResponse) {
            var errorMessage2 = "no response from facebook when refreshing the jwt token";
            logger11.debug(errorMessage2);
            rej(new NonRetryableError(errorMessage2));
          } else {
            var response = fbResponse.authResponse;
            var accessToken = response.accessToken, expiresIn = response.expiresIn;
            var date = /* @__PURE__ */ new Date();
            var expires_at = expiresIn * 1e3 + date.getTime();
            if (!accessToken) {
              var errorMessage2 = "the jwtToken is undefined";
              logger11.debug(errorMessage2);
              rej(new NonRetryableError(errorMessage2));
            }
            res({
              token: accessToken,
              expires_at
            });
          }
        }, { scope: "public_profile,email" });
      });
    };
    return FacebookOAuth3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
var GoogleOAuth2 = new GoogleOAuth();
var FacebookOAuth2 = new FacebookOAuth();

// node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
var dataMemory = {};
var MemoryStorage = (
  /** @class */
  function() {
    function MemoryStorage3() {
    }
    MemoryStorage3.setItem = function(key, value) {
      dataMemory[key] = value;
      return dataMemory[key];
    };
    MemoryStorage3.getItem = function(key) {
      return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
    };
    MemoryStorage3.removeItem = function(key) {
      return delete dataMemory[key];
    };
    MemoryStorage3.clear = function() {
      dataMemory = {};
      return dataMemory;
    };
    return MemoryStorage3;
  }()
);
var StorageHelper = (
  /** @class */
  function() {
    function StorageHelper3() {
      try {
        this.storageWindow = window.localStorage;
        this.storageWindow.setItem("aws.amplify.test-ls", 1);
        this.storageWindow.removeItem("aws.amplify.test-ls");
      } catch (exception) {
        this.storageWindow = MemoryStorage;
      }
    }
    StorageHelper3.prototype.getStorage = function() {
      return this.storageWindow;
    };
    return StorageHelper3;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/RNComponents/index.js
var AsyncStorage = browserOrNode().isBrowser ? new StorageHelper().getStorage() : void 0;

// node_modules/@aws-sdk/credential-provider-cognito-identity/node_modules/tslib/tslib.es6.js
function __awaiter16(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator16(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read12(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-sdk/client-cognito-identity/dist/es/package.json
var package_default2 = {
  name: "@aws-sdk/client-cognito-identity",
  description: "AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native",
  version: "3.6.1",
  scripts: {
    clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
    "build-documentation": "yarn remove-documentation && typedoc ./",
    prepublishOnly: "yarn build",
    pretest: "yarn build:cjs",
    "remove-definitions": "rimraf ./types",
    "remove-dist": "rimraf ./dist",
    "remove-documentation": "rimraf ./docs",
    "test:unit": "mocha **/cjs/**/*.spec.js",
    "test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
    test: "yarn test:unit",
    "build:cjs": "tsc -p tsconfig.json",
    "build:es": "tsc -p tsconfig.es.json",
    build: "yarn build:cjs && yarn build:es",
    postbuild: "downlevel-dts types types/ts3.4"
  },
  main: "./dist/cjs/index.js",
  types: "./types/index.d.ts",
  module: "./dist/es/index.js",
  browser: {
    "./runtimeConfig": "./runtimeConfig.browser"
  },
  "react-native": {
    "./runtimeConfig": "./runtimeConfig.native"
  },
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "^1.0.0",
    "@aws-crypto/sha256-js": "^1.0.0",
    "@aws-sdk/config-resolver": "3.6.1",
    "@aws-sdk/credential-provider-node": "3.6.1",
    "@aws-sdk/fetch-http-handler": "3.6.1",
    "@aws-sdk/hash-node": "3.6.1",
    "@aws-sdk/invalid-dependency": "3.6.1",
    "@aws-sdk/middleware-content-length": "3.6.1",
    "@aws-sdk/middleware-host-header": "3.6.1",
    "@aws-sdk/middleware-logger": "3.6.1",
    "@aws-sdk/middleware-retry": "3.6.1",
    "@aws-sdk/middleware-serde": "3.6.1",
    "@aws-sdk/middleware-signing": "3.6.1",
    "@aws-sdk/middleware-stack": "3.6.1",
    "@aws-sdk/middleware-user-agent": "3.6.1",
    "@aws-sdk/node-config-provider": "3.6.1",
    "@aws-sdk/node-http-handler": "3.6.1",
    "@aws-sdk/protocol-http": "3.6.1",
    "@aws-sdk/smithy-client": "3.6.1",
    "@aws-sdk/types": "3.6.1",
    "@aws-sdk/url-parser": "3.6.1",
    "@aws-sdk/url-parser-native": "3.6.1",
    "@aws-sdk/util-base64-browser": "3.6.1",
    "@aws-sdk/util-base64-node": "3.6.1",
    "@aws-sdk/util-body-length-browser": "3.6.1",
    "@aws-sdk/util-body-length-node": "3.6.1",
    "@aws-sdk/util-user-agent-browser": "3.6.1",
    "@aws-sdk/util-user-agent-node": "3.6.1",
    "@aws-sdk/util-utf8-browser": "3.6.1",
    "@aws-sdk/util-utf8-node": "3.6.1",
    tslib: "^2.0.0"
  },
  devDependencies: {
    "@aws-sdk/client-documentation-generator": "3.6.1",
    "@aws-sdk/client-iam": "3.6.1",
    "@types/chai": "^4.2.11",
    "@types/mocha": "^8.0.4",
    "@types/node": "^12.7.5",
    "downlevel-dts": "0.7.0",
    jest: "^26.1.0",
    rimraf: "^3.0.0",
    typedoc: "^0.19.2",
    typescript: "~4.1.2"
  },
  engines: {
    node: ">=10.0.0"
  },
  typesVersions: {
    "<4.0": {
      "types/*": [
        "types/ts3.4/*"
      ]
    }
  },
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-cognito-identity"
  }
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
var import_sha256_browser2 = __toESM(require_build5());
init_es();

// node_modules/@aws-sdk/client-cognito-identity/dist/es/endpoints.js
var AWS_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com";
var AWS_CN_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE2 = "cognito-identity.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE2 = "cognito-identity.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE2 = "cognito-identity.{region}.amazonaws.com";
var AWS_REGIONS2 = /* @__PURE__ */ new Set([
  "af-south-1",
  "ap-east-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-south-1",
  "ap-southeast-1",
  "ap-southeast-2",
  "ca-central-1",
  "eu-central-1",
  "eu-north-1",
  "eu-south-1",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "me-south-1",
  "sa-east-1",
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2"
]);
var AWS_CN_REGIONS2 = /* @__PURE__ */ new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS2 = /* @__PURE__ */ new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS2 = /* @__PURE__ */ new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS2 = /* @__PURE__ */ new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider2 = function(region, options) {
  var regionInfo = void 0;
  switch (region) {
    case "ap-northeast-1":
      regionInfo = {
        hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-northeast-2":
      regionInfo = {
        hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-south-1":
      regionInfo = {
        hostname: "cognito-identity.ap-south-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-1":
      regionInfo = {
        hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ap-southeast-2":
      regionInfo = {
        hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "ca-central-1":
      regionInfo = {
        hostname: "cognito-identity.ca-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "cn-north-1":
      regionInfo = {
        hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
        partition: "aws-cn"
      };
      break;
    case "eu-central-1":
      regionInfo = {
        hostname: "cognito-identity.eu-central-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-north-1":
      regionInfo = {
        hostname: "cognito-identity.eu-north-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-1":
      regionInfo = {
        hostname: "cognito-identity.eu-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-2":
      regionInfo = {
        hostname: "cognito-identity.eu-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "eu-west-3":
      regionInfo = {
        hostname: "cognito-identity.eu-west-3.amazonaws.com",
        partition: "aws"
      };
      break;
    case "fips-us-east-1":
      regionInfo = {
        hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-1"
      };
      break;
    case "fips-us-east-2":
      regionInfo = {
        hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-east-2"
      };
      break;
    case "fips-us-gov-west-1":
      regionInfo = {
        hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov",
        signingRegion: "us-gov-west-1"
      };
      break;
    case "fips-us-west-2":
      regionInfo = {
        hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
        partition: "aws",
        signingRegion: "us-west-2"
      };
      break;
    case "sa-east-1":
      regionInfo = {
        hostname: "cognito-identity.sa-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-1":
      regionInfo = {
        hostname: "cognito-identity.us-east-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-east-2":
      regionInfo = {
        hostname: "cognito-identity.us-east-2.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-gov-west-1":
      regionInfo = {
        hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
        partition: "aws-us-gov"
      };
      break;
    case "us-west-1":
      regionInfo = {
        hostname: "cognito-identity.us-west-1.amazonaws.com",
        partition: "aws"
      };
      break;
    case "us-west-2":
      regionInfo = {
        hostname: "cognito-identity.us-west-2.amazonaws.com",
        partition: "aws"
      };
      break;
    default:
      if (AWS_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_TEMPLATE2.replace("{region}", region),
          partition: "aws"
        };
      }
      if (AWS_CN_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_CN_TEMPLATE2.replace("{region}", region),
          partition: "aws-cn"
        };
      }
      if (AWS_ISO_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_TEMPLATE2.replace("{region}", region),
          partition: "aws-iso"
        };
      }
      if (AWS_ISO_B_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_ISO_B_TEMPLATE2.replace("{region}", region),
          partition: "aws-iso-b"
        };
      }
      if (AWS_US_GOV_REGIONS2.has(region)) {
        regionInfo = {
          hostname: AWS_US_GOV_TEMPLATE2.replace("{region}", region),
          partition: "aws-us-gov"
        };
      }
      if (regionInfo === void 0) {
        regionInfo = {
          hostname: AWS_TEMPLATE2.replace("{region}", region),
          partition: "aws"
        };
      }
  }
  return Promise.resolve(__assign({ signingService: "cognito-identity" }, regionInfo));
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.shared.js
var ClientSharedValues2 = {
  apiVersion: "2014-06-30",
  disableHostPrefix: false,
  logger: {},
  regionInfoProvider: defaultRegionInfoProvider2,
  serviceId: "Cognito Identity",
  urlParser: parseUrl
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
var ClientDefaultValues2 = __assign(__assign({}, ClientSharedValues2), { runtime: "browser", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: function(_2) {
  return function() {
    return Promise.reject(new Error("Credential is missing"));
  };
}, defaultUserAgentProvider: defaultUserAgent({
  serviceId: ClientSharedValues2.serviceId,
  clientVersion: package_default2.version
}), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidProvider("Region is missing"), requestHandler: new FetchHttpHandler(), sha256: import_sha256_browser2.Sha256, streamCollector, utf8Decoder: fromUtf83, utf8Encoder: toUtf83 });

// node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentityClient.js
var CognitoIdentityClient = (
  /** @class */
  function(_super) {
    __extends(CognitoIdentityClient2, _super);
    function CognitoIdentityClient2(configuration) {
      var _this = this;
      var _config_0 = __assign(__assign({}, ClientDefaultValues2), configuration);
      var _config_1 = resolveRegionConfig(_config_0);
      var _config_2 = resolveEndpointsConfig(_config_1);
      var _config_3 = resolveAwsAuthConfig(_config_2);
      var _config_4 = resolveRetryConfig(_config_3);
      var _config_5 = resolveHostHeaderConfig(_config_4);
      var _config_6 = resolveUserAgentConfig(_config_5);
      _this = _super.call(this, _config_6) || this;
      _this.config = _config_6;
      _this.middlewareStack.use(getRetryPlugin(_this.config));
      _this.middlewareStack.use(getContentLengthPlugin(_this.config));
      _this.middlewareStack.use(getHostHeaderPlugin(_this.config));
      _this.middlewareStack.use(getLoggerPlugin(_this.config));
      _this.middlewareStack.use(getUserAgentPlugin(_this.config));
      return _this;
    }
    CognitoIdentityClient2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
    };
    return CognitoIdentityClient2;
  }(Client)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/models/models_0.js
var AmbiguousRoleResolutionType;
(function(AmbiguousRoleResolutionType2) {
  AmbiguousRoleResolutionType2["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
  AmbiguousRoleResolutionType2["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
var CognitoIdentityProvider;
(function(CognitoIdentityProvider2) {
  CognitoIdentityProvider2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
var CreateIdentityPoolInput;
(function(CreateIdentityPoolInput2) {
  CreateIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
var IdentityPool;
(function(IdentityPool2) {
  IdentityPool2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityPool || (IdentityPool = {}));
var InternalErrorException;
(function(InternalErrorException2) {
  InternalErrorException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InternalErrorException || (InternalErrorException = {}));
var InvalidParameterException2;
(function(InvalidParameterException3) {
  InvalidParameterException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidParameterException2 || (InvalidParameterException2 = {}));
var LimitExceededException2;
(function(LimitExceededException3) {
  LimitExceededException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LimitExceededException2 || (LimitExceededException2 = {}));
var NotAuthorizedException;
(function(NotAuthorizedException2) {
  NotAuthorizedException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(NotAuthorizedException || (NotAuthorizedException = {}));
var ResourceConflictException;
(function(ResourceConflictException2) {
  ResourceConflictException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceConflictException || (ResourceConflictException = {}));
var TooManyRequestsException;
(function(TooManyRequestsException2) {
  TooManyRequestsException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TooManyRequestsException || (TooManyRequestsException = {}));
var DeleteIdentitiesInput;
(function(DeleteIdentitiesInput2) {
  DeleteIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["ACCESS_DENIED"] = "AccessDenied";
  ErrorCode2["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
var UnprocessedIdentityId;
(function(UnprocessedIdentityId2) {
  UnprocessedIdentityId2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
var DeleteIdentitiesResponse;
(function(DeleteIdentitiesResponse2) {
  DeleteIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
var DeleteIdentityPoolInput;
(function(DeleteIdentityPoolInput2) {
  DeleteIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
var ResourceNotFoundException2;
(function(ResourceNotFoundException3) {
  ResourceNotFoundException3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ResourceNotFoundException2 || (ResourceNotFoundException2 = {}));
var DescribeIdentityInput;
(function(DescribeIdentityInput2) {
  DescribeIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeIdentityInput || (DescribeIdentityInput = {}));
var IdentityDescription;
(function(IdentityDescription2) {
  IdentityDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityDescription || (IdentityDescription = {}));
var DescribeIdentityPoolInput;
(function(DescribeIdentityPoolInput2) {
  DescribeIdentityPoolInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
var ExternalServiceException;
(function(ExternalServiceException2) {
  ExternalServiceException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ExternalServiceException || (ExternalServiceException = {}));
var GetCredentialsForIdentityInput;
(function(GetCredentialsForIdentityInput2) {
  GetCredentialsForIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
var Credentials2;
(function(Credentials3) {
  Credentials3.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(Credentials2 || (Credentials2 = {}));
var GetCredentialsForIdentityResponse;
(function(GetCredentialsForIdentityResponse2) {
  GetCredentialsForIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
var InvalidIdentityPoolConfigurationException;
(function(InvalidIdentityPoolConfigurationException2) {
  InvalidIdentityPoolConfigurationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
var GetIdInput;
(function(GetIdInput2) {
  GetIdInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdInput || (GetIdInput = {}));
var GetIdResponse;
(function(GetIdResponse2) {
  GetIdResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdResponse || (GetIdResponse = {}));
var GetIdentityPoolRolesInput;
(function(GetIdentityPoolRolesInput2) {
  GetIdentityPoolRolesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
var MappingRuleMatchType;
(function(MappingRuleMatchType2) {
  MappingRuleMatchType2["CONTAINS"] = "Contains";
  MappingRuleMatchType2["EQUALS"] = "Equals";
  MappingRuleMatchType2["NOT_EQUAL"] = "NotEqual";
  MappingRuleMatchType2["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var MappingRule;
(function(MappingRule2) {
  MappingRule2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MappingRule || (MappingRule = {}));
var RulesConfigurationType;
(function(RulesConfigurationType2) {
  RulesConfigurationType2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RulesConfigurationType || (RulesConfigurationType = {}));
var RoleMappingType;
(function(RoleMappingType2) {
  RoleMappingType2["RULES"] = "Rules";
  RoleMappingType2["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
var RoleMapping;
(function(RoleMapping2) {
  RoleMapping2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(RoleMapping || (RoleMapping = {}));
var GetIdentityPoolRolesResponse;
(function(GetIdentityPoolRolesResponse2) {
  GetIdentityPoolRolesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
var GetOpenIdTokenInput;
(function(GetOpenIdTokenInput2) {
  GetOpenIdTokenInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
var GetOpenIdTokenResponse;
(function(GetOpenIdTokenResponse2) {
  GetOpenIdTokenResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
var DeveloperUserAlreadyRegisteredException;
(function(DeveloperUserAlreadyRegisteredException2) {
  DeveloperUserAlreadyRegisteredException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
var GetOpenIdTokenForDeveloperIdentityInput;
(function(GetOpenIdTokenForDeveloperIdentityInput2) {
  GetOpenIdTokenForDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
var GetOpenIdTokenForDeveloperIdentityResponse;
(function(GetOpenIdTokenForDeveloperIdentityResponse2) {
  GetOpenIdTokenForDeveloperIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {}));
var ListIdentitiesInput;
(function(ListIdentitiesInput2) {
  ListIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentitiesInput || (ListIdentitiesInput = {}));
var ListIdentitiesResponse;
(function(ListIdentitiesResponse2) {
  ListIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
var ListIdentityPoolsInput;
(function(ListIdentityPoolsInput2) {
  ListIdentityPoolsInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
var IdentityPoolShortDescription;
(function(IdentityPoolShortDescription2) {
  IdentityPoolShortDescription2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
var ListIdentityPoolsResponse;
(function(ListIdentityPoolsResponse2) {
  ListIdentityPoolsResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
var ListTagsForResourceInput;
(function(ListTagsForResourceInput2) {
  ListTagsForResourceInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
var ListTagsForResourceResponse;
(function(ListTagsForResourceResponse2) {
  ListTagsForResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
var LookupDeveloperIdentityInput;
(function(LookupDeveloperIdentityInput2) {
  LookupDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
var LookupDeveloperIdentityResponse;
(function(LookupDeveloperIdentityResponse2) {
  LookupDeveloperIdentityResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
var MergeDeveloperIdentitiesInput;
(function(MergeDeveloperIdentitiesInput2) {
  MergeDeveloperIdentitiesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
var MergeDeveloperIdentitiesResponse;
(function(MergeDeveloperIdentitiesResponse2) {
  MergeDeveloperIdentitiesResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
var ConcurrentModificationException;
(function(ConcurrentModificationException2) {
  ConcurrentModificationException2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(ConcurrentModificationException || (ConcurrentModificationException = {}));
var SetIdentityPoolRolesInput;
(function(SetIdentityPoolRolesInput2) {
  SetIdentityPoolRolesInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
var TagResourceInput;
(function(TagResourceInput2) {
  TagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagResourceInput || (TagResourceInput = {}));
var TagResourceResponse;
(function(TagResourceResponse2) {
  TagResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(TagResourceResponse || (TagResourceResponse = {}));
var UnlinkDeveloperIdentityInput;
(function(UnlinkDeveloperIdentityInput2) {
  UnlinkDeveloperIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
var UnlinkIdentityInput;
(function(UnlinkIdentityInput2) {
  UnlinkIdentityInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
var UntagResourceInput;
(function(UntagResourceInput2) {
  UntagResourceInput2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagResourceInput || (UntagResourceInput = {}));
var UntagResourceResponse;
(function(UntagResourceResponse2) {
  UntagResourceResponse2.filterSensitiveLog = function(obj) {
    return __assign({}, obj);
  };
})(UntagResourceResponse || (UntagResourceResponse = {}));

// node_modules/@aws-sdk/client-cognito-identity/dist/es/protocols/Aws_json1_1.js
var serializeAws_json1_1CreateIdentityPoolCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteIdentitiesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DeleteIdentityPoolCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1DescribeIdentityPoolCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetCredentialsForIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetIdCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetId"
      };
      body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetIdentityPoolRolesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles"
      };
      body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetOpenIdTokenCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken"
      };
      body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListIdentitiesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListIdentityPoolsCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools"
      };
      body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1ListTagsForResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource"
      };
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1LookupDeveloperIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1MergeDeveloperIdentitiesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities"
      };
      body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1SetIdentityPoolRolesCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles"
      };
      body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1TagResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.TagResource"
      };
      body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UnlinkDeveloperIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UnlinkIdentityCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity"
      };
      body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UntagResourceCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UntagResource"
      };
      body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var serializeAws_json1_1UpdateIdentityPoolCommand = function(input, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var headers, body;
    return __generator(this, function(_a) {
      headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool"
      };
      body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
      return [2, buildHttpRpcRequest2(context, headers, "/", void 0, body)];
    });
  });
};
var deserializeAws_json1_1CreateIdentityPoolCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1CreateIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1CreateIdentityPoolCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "LimitExceededException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentitiesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentitiesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          _a = [__assign({}, output)];
          _f = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "TooManyRequestsException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 6];
          }
          return [3, 8];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 9];
        case 8:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _g.label = 9;
        case 9:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentityPoolCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DeleteIdentityPoolCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityDescription(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityPoolCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1DescribeIdentityPoolCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidIdentityPoolConfigurationException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
              return [3, 6];
            case "InvalidParameterException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetIdCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetIdCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetIdResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetIdCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetOpenIdTokenCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "DeveloperUserAlreadyRegisteredException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentitiesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentitiesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentityPoolsCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListIdentityPoolsCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListIdentityPoolsCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1ListTagsForResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1ListTagsForResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConcurrentModificationException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1TagResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1TagResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1TagResourceResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1TagResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function(_k) {
      switch (_k.label) {
        case 0:
          _a = [__assign({}, output)];
          _j = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceConflictException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 8];
            case "ResourceNotFoundException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 10];
            case "TooManyRequestsException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 12];
          }
          return [3, 14];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_k.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 15];
        case 14:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _k.label = 15;
        case 15:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkIdentityCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UnlinkIdentityCommandError(output, context)];
          }
          return [4, collectBody2(output.body, context)];
        case 1:
          _a.sent();
          response = {
            $metadata: deserializeMetadata2(output)
          };
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UnlinkIdentityCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function(_l) {
      switch (_l.label) {
        case 0:
          _a = [__assign({}, output)];
          _k = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ExternalServiceException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ExternalServiceException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "NotAuthorizedException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 8];
            case "ResourceConflictException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 10];
            case "ResourceNotFoundException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 12];
            case "TooManyRequestsException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 14];
          }
          return [3, 16];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 17];
        case 16:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _l.label = 17;
        case 17:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UntagResourceCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UntagResourceCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1UntagResourceResponse(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UntagResourceCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function(_j) {
      switch (_j.label) {
        case 0:
          _a = [__assign({}, output)];
          _h = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "InternalErrorException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 2];
            case "InvalidParameterException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 4];
            case "NotAuthorizedException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 6];
            case "ResourceNotFoundException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 8];
            case "TooManyRequestsException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 10];
          }
          return [3, 12];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 13];
        case 12:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _j.label = 13;
        case 13:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1UpdateIdentityPoolCommand = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var data, contents, response;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (output.statusCode >= 300) {
            return [2, deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context)];
          }
          return [4, parseBody2(output.body, context)];
        case 1:
          data = _a.sent();
          contents = {};
          contents = deserializeAws_json1_1IdentityPool(data, context);
          response = __assign({ $metadata: deserializeMetadata2(output) }, contents);
          return [2, Promise.resolve(response)];
      }
    });
  });
};
var deserializeAws_json1_1UpdateIdentityPoolCommandError = function(output, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function(_m) {
      switch (_m.label) {
        case 0:
          _a = [__assign({}, output)];
          _l = {};
          return [4, parseBody2(output.body, context)];
        case 1:
          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
          errorCode = "UnknownError";
          errorCode = loadRestJsonErrorCode2(output, parsedOutput.body);
          _b = errorCode;
          switch (_b) {
            case "ConcurrentModificationException":
              return [3, 2];
            case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
              return [3, 2];
            case "InternalErrorException":
              return [3, 4];
            case "com.amazonaws.cognitoidentity#InternalErrorException":
              return [3, 4];
            case "InvalidParameterException":
              return [3, 6];
            case "com.amazonaws.cognitoidentity#InvalidParameterException":
              return [3, 6];
            case "LimitExceededException":
              return [3, 8];
            case "com.amazonaws.cognitoidentity#LimitExceededException":
              return [3, 8];
            case "NotAuthorizedException":
              return [3, 10];
            case "com.amazonaws.cognitoidentity#NotAuthorizedException":
              return [3, 10];
            case "ResourceConflictException":
              return [3, 12];
            case "com.amazonaws.cognitoidentity#ResourceConflictException":
              return [3, 12];
            case "ResourceNotFoundException":
              return [3, 14];
            case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
              return [3, 14];
            case "TooManyRequestsException":
              return [3, 16];
            case "com.amazonaws.cognitoidentity#TooManyRequestsException":
              return [3, 16];
          }
          return [3, 18];
        case 2:
          _c = [{}];
          return [4, deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)];
        case 3:
          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 4:
          _d = [{}];
          return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
        case 5:
          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 6:
          _e = [{}];
          return [4, deserializeAws_json1_1InvalidParameterExceptionResponse2(parsedOutput, context)];
        case 7:
          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 8:
          _f = [{}];
          return [4, deserializeAws_json1_1LimitExceededExceptionResponse2(parsedOutput, context)];
        case 9:
          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 10:
          _g = [{}];
          return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
        case 11:
          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 12:
          _h = [{}];
          return [4, deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)];
        case 13:
          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 14:
          _j = [{}];
          return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse2(parsedOutput, context)];
        case 15:
          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 16:
          _k = [{}];
          return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
        case 17:
          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), { name: errorCode, $metadata: deserializeMetadata2(output) }]);
          return [3, 19];
        case 18:
          parsedBody = parsedOutput.body;
          errorCode = parsedBody.code || parsedBody.Code || errorCode;
          response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata2(output) });
          _m.label = 19;
        case 19:
          message = response.message || response.Message || errorCode;
          response.message = message;
          delete response.Message;
          return [2, Promise.reject(Object.assign(new Error(message), response))];
      }
    });
  });
};
var deserializeAws_json1_1ConcurrentModificationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
      contents = __assign({ name: "ConcurrentModificationException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
      contents = __assign({ name: "DeveloperUserAlreadyRegisteredException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ExternalServiceExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
      contents = __assign({ name: "ExternalServiceException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InternalErrorExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InternalErrorException(body, context);
      contents = __assign({ name: "InternalErrorException", $fault: "server", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
      contents = __assign({ name: "InvalidIdentityPoolConfigurationException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1InvalidParameterException2(body, context);
      contents = __assign({ name: "InvalidParameterException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1LimitExceededExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1LimitExceededException2(body, context);
      contents = __assign({ name: "LimitExceededException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1NotAuthorizedExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
      contents = __assign({ name: "NotAuthorizedException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceConflictExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
      contents = __assign({ name: "ResourceConflictException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse2 = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1ResourceNotFoundException2(body, context);
      contents = __assign({ name: "ResourceNotFoundException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function(parsedOutput, context) {
  return __awaiter(void 0, void 0, void 0, function() {
    var body, deserialized, contents;
    return __generator(this, function(_a) {
      body = parsedOutput.body;
      deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
      contents = __assign({ name: "TooManyRequestsException", $fault: "client", $metadata: deserializeMetadata2(parsedOutput) }, deserialized);
      return [2, contents];
    });
  });
};
var serializeAws_json1_1CognitoIdentityProvider = function(input, context) {
  return __assign(__assign(__assign({}, input.ClientId !== void 0 && input.ClientId !== null && { ClientId: input.ClientId }), input.ProviderName !== void 0 && input.ProviderName !== null && { ProviderName: input.ProviderName }), input.ServerSideTokenCheck !== void 0 && input.ServerSideTokenCheck !== null && { ServerSideTokenCheck: input.ServerSideTokenCheck });
};
var serializeAws_json1_1CognitoIdentityProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1CognitoIdentityProvider(entry, context);
  });
};
var serializeAws_json1_1CreateIdentityPoolInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AllowClassicFlow !== void 0 && input.AllowClassicFlow !== null && { AllowClassicFlow: input.AllowClassicFlow }), input.AllowUnauthenticatedIdentities !== void 0 && input.AllowUnauthenticatedIdentities !== null && {
    AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
  }), input.CognitoIdentityProviders !== void 0 && input.CognitoIdentityProviders !== null && {
    CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
  }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolName !== void 0 && input.IdentityPoolName !== null && { IdentityPoolName: input.IdentityPoolName }), input.IdentityPoolTags !== void 0 && input.IdentityPoolTags !== null && {
    IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
  }), input.OpenIdConnectProviderARNs !== void 0 && input.OpenIdConnectProviderARNs !== null && {
    OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
  }), input.SamlProviderARNs !== void 0 && input.SamlProviderARNs !== null && {
    SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
  }), input.SupportedLoginProviders !== void 0 && input.SupportedLoginProviders !== null && {
    SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
  });
};
var serializeAws_json1_1DeleteIdentitiesInput = function(input, context) {
  return __assign({}, input.IdentityIdsToDelete !== void 0 && input.IdentityIdsToDelete !== null && {
    IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context)
  });
};
var serializeAws_json1_1DeleteIdentityPoolInput = function(input, context) {
  return __assign({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1DescribeIdentityInput = function(input, context) {
  return __assign({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId });
};
var serializeAws_json1_1DescribeIdentityPoolInput = function(input, context) {
  return __assign({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1GetCredentialsForIdentityInput = function(input, context) {
  return __assign(__assign(__assign({}, input.CustomRoleArn !== void 0 && input.CustomRoleArn !== null && { CustomRoleArn: input.CustomRoleArn }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1GetIdentityPoolRolesInput = function(input, context) {
  return __assign({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1GetIdInput = function(input, context) {
  return __assign(__assign(__assign({}, input.AccountId !== void 0 && input.AccountId !== null && { AccountId: input.AccountId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }), input.TokenDuration !== void 0 && input.TokenDuration !== null && { TokenDuration: input.TokenDuration });
};
var serializeAws_json1_1GetOpenIdTokenInput = function(input, context) {
  return __assign(__assign({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) });
};
var serializeAws_json1_1IdentityIdList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1IdentityPool = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.AllowClassicFlow !== void 0 && input.AllowClassicFlow !== null && { AllowClassicFlow: input.AllowClassicFlow }), input.AllowUnauthenticatedIdentities !== void 0 && input.AllowUnauthenticatedIdentities !== null && {
    AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
  }), input.CognitoIdentityProviders !== void 0 && input.CognitoIdentityProviders !== null && {
    CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
  }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.IdentityPoolName !== void 0 && input.IdentityPoolName !== null && { IdentityPoolName: input.IdentityPoolName }), input.IdentityPoolTags !== void 0 && input.IdentityPoolTags !== null && {
    IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
  }), input.OpenIdConnectProviderARNs !== void 0 && input.OpenIdConnectProviderARNs !== null && {
    OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
  }), input.SamlProviderARNs !== void 0 && input.SamlProviderARNs !== null && {
    SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
  }), input.SupportedLoginProviders !== void 0 && input.SupportedLoginProviders !== null && {
    SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
  });
};
var serializeAws_json1_1IdentityPoolTagsListType = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1IdentityPoolTagsType = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1IdentityProviders = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1ListIdentitiesInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.HideDisabled !== void 0 && input.HideDisabled !== null && { HideDisabled: input.HideDisabled }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1ListIdentityPoolsInput = function(input, context) {
  return __assign(__assign({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1ListTagsForResourceInput = function(input, context) {
  return __assign({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn });
};
var serializeAws_json1_1LoginsList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1LoginsMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1LookupDeveloperIdentityInput = function(input, context) {
  return __assign(__assign(__assign(__assign(__assign({}, input.DeveloperUserIdentifier !== void 0 && input.DeveloperUserIdentifier !== null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken });
};
var serializeAws_json1_1MappingRule = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.Claim !== void 0 && input.Claim !== null && { Claim: input.Claim }), input.MatchType !== void 0 && input.MatchType !== null && { MatchType: input.MatchType }), input.RoleARN !== void 0 && input.RoleARN !== null && { RoleARN: input.RoleARN }), input.Value !== void 0 && input.Value !== null && { Value: input.Value });
};
var serializeAws_json1_1MappingRulesList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return serializeAws_json1_1MappingRule(entry, context);
  });
};
var serializeAws_json1_1MergeDeveloperIdentitiesInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.DestinationUserIdentifier !== void 0 && input.DestinationUserIdentifier !== null && { DestinationUserIdentifier: input.DestinationUserIdentifier }), input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.SourceUserIdentifier !== void 0 && input.SourceUserIdentifier !== null && { SourceUserIdentifier: input.SourceUserIdentifier });
};
var serializeAws_json1_1OIDCProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1RoleMapping = function(input, context) {
  return __assign(__assign(__assign({}, input.AmbiguousRoleResolution !== void 0 && input.AmbiguousRoleResolution !== null && { AmbiguousRoleResolution: input.AmbiguousRoleResolution }), input.RulesConfiguration !== void 0 && input.RulesConfiguration !== null && {
    RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context)
  }), input.Type !== void 0 && input.Type !== null && { Type: input.Type });
};
var serializeAws_json1_1RoleMappingMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_json1_1RoleMapping(value, context), _b));
  }, {});
};
var serializeAws_json1_1RolesMap = function(input, context) {
  return Object.entries(input).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var serializeAws_json1_1RulesConfigurationType = function(input, context) {
  return __assign({}, input.Rules !== void 0 && input.Rules !== null && { Rules: serializeAws_json1_1MappingRulesList(input.Rules, context) });
};
var serializeAws_json1_1SAMLProviderList = function(input, context) {
  return input.filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var serializeAws_json1_1SetIdentityPoolRolesInput = function(input, context) {
  return __assign(__assign(__assign({}, input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }), input.RoleMappings !== void 0 && input.RoleMappings !== null && { RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context) }), input.Roles !== void 0 && input.Roles !== null && { Roles: serializeAws_json1_1RolesMap(input.Roles, context) });
};
var serializeAws_json1_1TagResourceInput = function(input, context) {
  return __assign(__assign({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context) });
};
var serializeAws_json1_1UnlinkDeveloperIdentityInput = function(input, context) {
  return __assign(__assign(__assign(__assign({}, input.DeveloperProviderName !== void 0 && input.DeveloperProviderName !== null && { DeveloperProviderName: input.DeveloperProviderName }), input.DeveloperUserIdentifier !== void 0 && input.DeveloperUserIdentifier !== null && { DeveloperUserIdentifier: input.DeveloperUserIdentifier }), input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.IdentityPoolId !== void 0 && input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId });
};
var serializeAws_json1_1UnlinkIdentityInput = function(input, context) {
  return __assign(__assign(__assign({}, input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }), input.Logins !== void 0 && input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }), input.LoginsToRemove !== void 0 && input.LoginsToRemove !== null && {
    LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context)
  });
};
var serializeAws_json1_1UntagResourceInput = function(input, context) {
  return __assign(__assign({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context) });
};
var deserializeAws_json1_1CognitoIdentityProvider = function(output, context) {
  return {
    ClientId: output.ClientId !== void 0 && output.ClientId !== null ? output.ClientId : void 0,
    ProviderName: output.ProviderName !== void 0 && output.ProviderName !== null ? output.ProviderName : void 0,
    ServerSideTokenCheck: output.ServerSideTokenCheck !== void 0 && output.ServerSideTokenCheck !== null ? output.ServerSideTokenCheck : void 0
  };
};
var deserializeAws_json1_1CognitoIdentityProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
  });
};
var deserializeAws_json1_1ConcurrentModificationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1Credentials = function(output, context) {
  return {
    AccessKeyId: output.AccessKeyId !== void 0 && output.AccessKeyId !== null ? output.AccessKeyId : void 0,
    Expiration: output.Expiration !== void 0 && output.Expiration !== null ? new Date(Math.round(output.Expiration * 1e3)) : void 0,
    SecretKey: output.SecretKey !== void 0 && output.SecretKey !== null ? output.SecretKey : void 0,
    SessionToken: output.SessionToken !== void 0 && output.SessionToken !== null ? output.SessionToken : void 0
  };
};
var deserializeAws_json1_1DeleteIdentitiesResponse = function(output, context) {
  return {
    UnprocessedIdentityIds: output.UnprocessedIdentityIds !== void 0 && output.UnprocessedIdentityIds !== null ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context) : void 0
  };
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1DeveloperUserIdentifierList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1ExternalServiceException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1GetCredentialsForIdentityResponse = function(output, context) {
  return {
    Credentials: output.Credentials !== void 0 && output.Credentials !== null ? deserializeAws_json1_1Credentials(output.Credentials, context) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1GetIdentityPoolRolesResponse = function(output, context) {
  return {
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    RoleMappings: output.RoleMappings !== void 0 && output.RoleMappings !== null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : void 0,
    Roles: output.Roles !== void 0 && output.Roles !== null ? deserializeAws_json1_1RolesMap(output.Roles, context) : void 0
  };
};
var deserializeAws_json1_1GetIdResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    Token: output.Token !== void 0 && output.Token !== null ? output.Token : void 0
  };
};
var deserializeAws_json1_1GetOpenIdTokenResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    Token: output.Token !== void 0 && output.Token !== null ? output.Token : void 0
  };
};
var deserializeAws_json1_1IdentitiesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1IdentityDescription(entry, context);
  });
};
var deserializeAws_json1_1IdentityDescription = function(output, context) {
  return {
    CreationDate: output.CreationDate !== void 0 && output.CreationDate !== null ? new Date(Math.round(output.CreationDate * 1e3)) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    LastModifiedDate: output.LastModifiedDate !== void 0 && output.LastModifiedDate !== null ? new Date(Math.round(output.LastModifiedDate * 1e3)) : void 0,
    Logins: output.Logins !== void 0 && output.Logins !== null ? deserializeAws_json1_1LoginsList(output.Logins, context) : void 0
  };
};
var deserializeAws_json1_1IdentityPool = function(output, context) {
  return {
    AllowClassicFlow: output.AllowClassicFlow !== void 0 && output.AllowClassicFlow !== null ? output.AllowClassicFlow : void 0,
    AllowUnauthenticatedIdentities: output.AllowUnauthenticatedIdentities !== void 0 && output.AllowUnauthenticatedIdentities !== null ? output.AllowUnauthenticatedIdentities : void 0,
    CognitoIdentityProviders: output.CognitoIdentityProviders !== void 0 && output.CognitoIdentityProviders !== null ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context) : void 0,
    DeveloperProviderName: output.DeveloperProviderName !== void 0 && output.DeveloperProviderName !== null ? output.DeveloperProviderName : void 0,
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    IdentityPoolName: output.IdentityPoolName !== void 0 && output.IdentityPoolName !== null ? output.IdentityPoolName : void 0,
    IdentityPoolTags: output.IdentityPoolTags !== void 0 && output.IdentityPoolTags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context) : void 0,
    OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs !== void 0 && output.OpenIdConnectProviderARNs !== null ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context) : void 0,
    SamlProviderARNs: output.SamlProviderARNs !== void 0 && output.SamlProviderARNs !== null ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context) : void 0,
    SupportedLoginProviders: output.SupportedLoginProviders !== void 0 && output.SupportedLoginProviders !== null ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context) : void 0
  };
};
var deserializeAws_json1_1IdentityPoolShortDescription = function(output, context) {
  return {
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    IdentityPoolName: output.IdentityPoolName !== void 0 && output.IdentityPoolName !== null ? output.IdentityPoolName : void 0
  };
};
var deserializeAws_json1_1IdentityPoolsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
  });
};
var deserializeAws_json1_1IdentityPoolTagsType = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1IdentityProviders = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1InternalErrorException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1InvalidParameterException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1LimitExceededException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ListIdentitiesResponse = function(output, context) {
  return {
    Identities: output.Identities !== void 0 && output.Identities !== null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : void 0,
    IdentityPoolId: output.IdentityPoolId !== void 0 && output.IdentityPoolId !== null ? output.IdentityPoolId : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1ListIdentityPoolsResponse = function(output, context) {
  return {
    IdentityPools: output.IdentityPools !== void 0 && output.IdentityPools !== null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1ListTagsForResourceResponse = function(output, context) {
  return {
    Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : void 0
  };
};
var deserializeAws_json1_1LoginsList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1LookupDeveloperIdentityResponse = function(output, context) {
  return {
    DeveloperUserIdentifierList: output.DeveloperUserIdentifierList !== void 0 && output.DeveloperUserIdentifierList !== null ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context) : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
    NextToken: output.NextToken !== void 0 && output.NextToken !== null ? output.NextToken : void 0
  };
};
var deserializeAws_json1_1MappingRule = function(output, context) {
  return {
    Claim: output.Claim !== void 0 && output.Claim !== null ? output.Claim : void 0,
    MatchType: output.MatchType !== void 0 && output.MatchType !== null ? output.MatchType : void 0,
    RoleARN: output.RoleARN !== void 0 && output.RoleARN !== null ? output.RoleARN : void 0,
    Value: output.Value !== void 0 && output.Value !== null ? output.Value : void 0
  };
};
var deserializeAws_json1_1MappingRulesList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1MappingRule(entry, context);
  });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesResponse = function(output, context) {
  return {
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1NotAuthorizedException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1OIDCProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1ResourceConflictException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1ResourceNotFoundException2 = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1RoleMapping = function(output, context) {
  return {
    AmbiguousRoleResolution: output.AmbiguousRoleResolution !== void 0 && output.AmbiguousRoleResolution !== null ? output.AmbiguousRoleResolution : void 0,
    RulesConfiguration: output.RulesConfiguration !== void 0 && output.RulesConfiguration !== null ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context) : void 0,
    Type: output.Type !== void 0 && output.Type !== null ? output.Type : void 0
  };
};
var deserializeAws_json1_1RoleMappingMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_json1_1RoleMapping(value, context), _b));
  }, {});
};
var deserializeAws_json1_1RolesMap = function(output, context) {
  return Object.entries(output).reduce(function(acc, _a) {
    var _b;
    var _c = __read(_a, 2), key = _c[0], value = _c[1];
    if (value === null) {
      return acc;
    }
    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
  }, {});
};
var deserializeAws_json1_1RulesConfigurationType = function(output, context) {
  return {
    Rules: output.Rules !== void 0 && output.Rules !== null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : void 0
  };
};
var deserializeAws_json1_1SAMLProviderList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return entry;
  });
};
var deserializeAws_json1_1TagResourceResponse = function(output, context) {
  return {};
};
var deserializeAws_json1_1TooManyRequestsException = function(output, context) {
  return {
    message: output.message !== void 0 && output.message !== null ? output.message : void 0
  };
};
var deserializeAws_json1_1UnprocessedIdentityId = function(output, context) {
  return {
    ErrorCode: output.ErrorCode !== void 0 && output.ErrorCode !== null ? output.ErrorCode : void 0,
    IdentityId: output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0
  };
};
var deserializeAws_json1_1UnprocessedIdentityIdList = function(output, context) {
  return (output || []).filter(function(e) {
    return e != null;
  }).map(function(entry) {
    if (entry === null) {
      return null;
    }
    return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
  });
};
var deserializeAws_json1_1UntagResourceResponse = function(output, context) {
  return {};
};
var deserializeMetadata2 = function(output) {
  var _a;
  return {
    httpStatusCode: output.statusCode,
    requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  };
};
var collectBody2 = function(streamBody, context) {
  if (streamBody === void 0) {
    streamBody = new Uint8Array();
  }
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString2 = function(streamBody, context) {
  return collectBody2(streamBody, context).then(function(body) {
    return context.utf8Encoder(body);
  });
};
var buildHttpRpcRequest2 = function(context, headers, path, resolvedHostname, body) {
  return __awaiter(void 0, void 0, void 0, function() {
    var _a, hostname, _b, protocol, port, contents;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          return [4, context.endpoint()];
        case 1:
          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
          contents = {
            protocol,
            hostname,
            port,
            method: "POST",
            path,
            headers
          };
          if (resolvedHostname !== void 0) {
            contents.hostname = resolvedHostname;
          }
          if (body !== void 0) {
            contents.body = body;
          }
          return [2, new HttpRequest(contents)];
      }
    });
  });
};
var parseBody2 = function(streamBody, context) {
  return collectBodyString2(streamBody, context).then(function(encoded) {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
};
var loadRestJsonErrorCode2 = function(output, data) {
  var findKey = function(object, key) {
    return Object.keys(object).find(function(k2) {
      return k2.toLowerCase() === key.toLowerCase();
    });
  };
  var sanitizeErrorCode = function(rawValue) {
    var cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  var headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
  return "";
};

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/CreateIdentityPoolCommand.js
var CreateIdentityPoolCommand = (
  /** @class */
  function(_super) {
    __extends(CreateIdentityPoolCommand2, _super);
    function CreateIdentityPoolCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    CreateIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "CreateIdentityPoolCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateIdentityPoolInput.filterSensitiveLog,
        outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    CreateIdentityPoolCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1CreateIdentityPoolCommand(input, context);
    };
    CreateIdentityPoolCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1CreateIdentityPoolCommand(output, context);
    };
    return CreateIdentityPoolCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DeleteIdentitiesCommand.js
var DeleteIdentitiesCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteIdentitiesCommand2, _super);
    function DeleteIdentitiesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "DeleteIdentitiesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteIdentitiesInput.filterSensitiveLog,
        outputFilterSensitiveLog: DeleteIdentitiesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteIdentitiesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteIdentitiesCommand(input, context);
    };
    DeleteIdentitiesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteIdentitiesCommand(output, context);
    };
    return DeleteIdentitiesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DeleteIdentityPoolCommand.js
var DeleteIdentityPoolCommand = (
  /** @class */
  function(_super) {
    __extends(DeleteIdentityPoolCommand2, _super);
    function DeleteIdentityPoolCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DeleteIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "DeleteIdentityPoolCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DeleteIdentityPoolInput.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DeleteIdentityPoolCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DeleteIdentityPoolCommand(input, context);
    };
    DeleteIdentityPoolCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DeleteIdentityPoolCommand(output, context);
    };
    return DeleteIdentityPoolCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DescribeIdentityCommand.js
var DescribeIdentityCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeIdentityCommand2, _super);
    function DescribeIdentityCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "DescribeIdentityCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeIdentityInput.filterSensitiveLog,
        outputFilterSensitiveLog: IdentityDescription.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeIdentityCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeIdentityCommand(input, context);
    };
    DescribeIdentityCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeIdentityCommand(output, context);
    };
    return DescribeIdentityCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/DescribeIdentityPoolCommand.js
var DescribeIdentityPoolCommand = (
  /** @class */
  function(_super) {
    __extends(DescribeIdentityPoolCommand2, _super);
    function DescribeIdentityPoolCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    DescribeIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "DescribeIdentityPoolCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: DescribeIdentityPoolInput.filterSensitiveLog,
        outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    DescribeIdentityPoolCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1DescribeIdentityPoolCommand(input, context);
    };
    DescribeIdentityPoolCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1DescribeIdentityPoolCommand(output, context);
    };
    return DescribeIdentityPoolCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetCredentialsForIdentityCommand.js
var GetCredentialsForIdentityCommand = (
  /** @class */
  function(_super) {
    __extends(GetCredentialsForIdentityCommand2, _super);
    function GetCredentialsForIdentityCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetCredentialsForIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "GetCredentialsForIdentityCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,
        outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetCredentialsForIdentityCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);
    };
    GetCredentialsForIdentityCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);
    };
    return GetCredentialsForIdentityCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdCommand.js
var GetIdCommand = (
  /** @class */
  function(_super) {
    __extends(GetIdCommand2, _super);
    function GetIdCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetIdCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "GetIdCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetIdInput.filterSensitiveLog,
        outputFilterSensitiveLog: GetIdResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetIdCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetIdCommand(input, context);
    };
    GetIdCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetIdCommand(output, context);
    };
    return GetIdCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdentityPoolRolesCommand.js
var GetIdentityPoolRolesCommand = (
  /** @class */
  function(_super) {
    __extends(GetIdentityPoolRolesCommand2, _super);
    function GetIdentityPoolRolesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetIdentityPoolRolesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "GetIdentityPoolRolesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetIdentityPoolRolesInput.filterSensitiveLog,
        outputFilterSensitiveLog: GetIdentityPoolRolesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetIdentityPoolRolesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetIdentityPoolRolesCommand(input, context);
    };
    GetIdentityPoolRolesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetIdentityPoolRolesCommand(output, context);
    };
    return GetIdentityPoolRolesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetOpenIdTokenCommand.js
var GetOpenIdTokenCommand = (
  /** @class */
  function(_super) {
    __extends(GetOpenIdTokenCommand2, _super);
    function GetOpenIdTokenCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetOpenIdTokenCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "GetOpenIdTokenCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetOpenIdTokenInput.filterSensitiveLog,
        outputFilterSensitiveLog: GetOpenIdTokenResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetOpenIdTokenCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetOpenIdTokenCommand(input, context);
    };
    GetOpenIdTokenCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetOpenIdTokenCommand(output, context);
    };
    return GetOpenIdTokenCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js
var GetOpenIdTokenForDeveloperIdentityCommand = (
  /** @class */
  function(_super) {
    __extends(GetOpenIdTokenForDeveloperIdentityCommand2, _super);
    function GetOpenIdTokenForDeveloperIdentityCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    GetOpenIdTokenForDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,
        outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    GetOpenIdTokenForDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);
    };
    GetOpenIdTokenForDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);
    };
    return GetOpenIdTokenForDeveloperIdentityCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListIdentitiesCommand.js
var ListIdentitiesCommand = (
  /** @class */
  function(_super) {
    __extends(ListIdentitiesCommand2, _super);
    function ListIdentitiesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    ListIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "ListIdentitiesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: ListIdentitiesInput.filterSensitiveLog,
        outputFilterSensitiveLog: ListIdentitiesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    ListIdentitiesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1ListIdentitiesCommand(input, context);
    };
    ListIdentitiesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1ListIdentitiesCommand(output, context);
    };
    return ListIdentitiesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListIdentityPoolsCommand.js
var ListIdentityPoolsCommand = (
  /** @class */
  function(_super) {
    __extends(ListIdentityPoolsCommand2, _super);
    function ListIdentityPoolsCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    ListIdentityPoolsCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "ListIdentityPoolsCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: ListIdentityPoolsInput.filterSensitiveLog,
        outputFilterSensitiveLog: ListIdentityPoolsResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    ListIdentityPoolsCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1ListIdentityPoolsCommand(input, context);
    };
    ListIdentityPoolsCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1ListIdentityPoolsCommand(output, context);
    };
    return ListIdentityPoolsCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand = (
  /** @class */
  function(_super) {
    __extends(ListTagsForResourceCommand2, _super);
    function ListTagsForResourceCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    ListTagsForResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "ListTagsForResourceCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: ListTagsForResourceInput.filterSensitiveLog,
        outputFilterSensitiveLog: ListTagsForResourceResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    ListTagsForResourceCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1ListTagsForResourceCommand(input, context);
    };
    ListTagsForResourceCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1ListTagsForResourceCommand(output, context);
    };
    return ListTagsForResourceCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/LookupDeveloperIdentityCommand.js
var LookupDeveloperIdentityCommand = (
  /** @class */
  function(_super) {
    __extends(LookupDeveloperIdentityCommand2, _super);
    function LookupDeveloperIdentityCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    LookupDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "LookupDeveloperIdentityCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: LookupDeveloperIdentityInput.filterSensitiveLog,
        outputFilterSensitiveLog: LookupDeveloperIdentityResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    LookupDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1LookupDeveloperIdentityCommand(input, context);
    };
    LookupDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1LookupDeveloperIdentityCommand(output, context);
    };
    return LookupDeveloperIdentityCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/MergeDeveloperIdentitiesCommand.js
var MergeDeveloperIdentitiesCommand = (
  /** @class */
  function(_super) {
    __extends(MergeDeveloperIdentitiesCommand2, _super);
    function MergeDeveloperIdentitiesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    MergeDeveloperIdentitiesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "MergeDeveloperIdentitiesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: MergeDeveloperIdentitiesInput.filterSensitiveLog,
        outputFilterSensitiveLog: MergeDeveloperIdentitiesResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    MergeDeveloperIdentitiesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1MergeDeveloperIdentitiesCommand(input, context);
    };
    MergeDeveloperIdentitiesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1MergeDeveloperIdentitiesCommand(output, context);
    };
    return MergeDeveloperIdentitiesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/SetIdentityPoolRolesCommand.js
var SetIdentityPoolRolesCommand = (
  /** @class */
  function(_super) {
    __extends(SetIdentityPoolRolesCommand2, _super);
    function SetIdentityPoolRolesCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    SetIdentityPoolRolesCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "SetIdentityPoolRolesCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: SetIdentityPoolRolesInput.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    SetIdentityPoolRolesCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1SetIdentityPoolRolesCommand(input, context);
    };
    SetIdentityPoolRolesCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1SetIdentityPoolRolesCommand(output, context);
    };
    return SetIdentityPoolRolesCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/TagResourceCommand.js
var TagResourceCommand = (
  /** @class */
  function(_super) {
    __extends(TagResourceCommand2, _super);
    function TagResourceCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    TagResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "TagResourceCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: TagResourceInput.filterSensitiveLog,
        outputFilterSensitiveLog: TagResourceResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    TagResourceCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1TagResourceCommand(input, context);
    };
    TagResourceCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1TagResourceCommand(output, context);
    };
    return TagResourceCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UnlinkDeveloperIdentityCommand.js
var UnlinkDeveloperIdentityCommand = (
  /** @class */
  function(_super) {
    __extends(UnlinkDeveloperIdentityCommand2, _super);
    function UnlinkDeveloperIdentityCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    UnlinkDeveloperIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "UnlinkDeveloperIdentityCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: UnlinkDeveloperIdentityInput.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    UnlinkDeveloperIdentityCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1UnlinkDeveloperIdentityCommand(input, context);
    };
    UnlinkDeveloperIdentityCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1UnlinkDeveloperIdentityCommand(output, context);
    };
    return UnlinkDeveloperIdentityCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UnlinkIdentityCommand.js
var UnlinkIdentityCommand = (
  /** @class */
  function(_super) {
    __extends(UnlinkIdentityCommand2, _super);
    function UnlinkIdentityCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    UnlinkIdentityCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "UnlinkIdentityCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: UnlinkIdentityInput.filterSensitiveLog,
        outputFilterSensitiveLog: function(output) {
          return output;
        }
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    UnlinkIdentityCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1UnlinkIdentityCommand(input, context);
    };
    UnlinkIdentityCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1UnlinkIdentityCommand(output, context);
    };
    return UnlinkIdentityCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UntagResourceCommand.js
var UntagResourceCommand = (
  /** @class */
  function(_super) {
    __extends(UntagResourceCommand2, _super);
    function UntagResourceCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    UntagResourceCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "UntagResourceCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: UntagResourceInput.filterSensitiveLog,
        outputFilterSensitiveLog: UntagResourceResponse.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    UntagResourceCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1UntagResourceCommand(input, context);
    };
    UntagResourceCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1UntagResourceCommand(output, context);
    };
    return UntagResourceCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/UpdateIdentityPoolCommand.js
var UpdateIdentityPoolCommand = (
  /** @class */
  function(_super) {
    __extends(UpdateIdentityPoolCommand2, _super);
    function UpdateIdentityPoolCommand2(input) {
      var _this = (
        // Start section: command_constructor
        _super.call(this) || this
      );
      _this.input = input;
      return _this;
    }
    UpdateIdentityPoolCommand2.prototype.resolveMiddleware = function(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getAwsAuthPlugin(configuration));
      var stack = clientStack.concat(this.middlewareStack);
      var logger38 = configuration.logger;
      var clientName = "CognitoIdentityClient";
      var commandName = "UpdateIdentityPoolCommand";
      var handlerExecutionContext = {
        logger: logger38,
        clientName,
        commandName,
        inputFilterSensitiveLog: IdentityPool.filterSensitiveLog,
        outputFilterSensitiveLog: IdentityPool.filterSensitiveLog
      };
      var requestHandler = configuration.requestHandler;
      return stack.resolve(function(request) {
        return requestHandler.handle(request.request, options || {});
      }, handlerExecutionContext);
    };
    UpdateIdentityPoolCommand2.prototype.serialize = function(input, context) {
      return serializeAws_json1_1UpdateIdentityPoolCommand(input, context);
    };
    UpdateIdentityPoolCommand2.prototype.deserialize = function(output, context) {
      return deserializeAws_json1_1UpdateIdentityPoolCommand(output, context);
    };
    return UpdateIdentityPoolCommand2;
  }(Command)
);

// node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentity.js
var CognitoIdentity = (
  /** @class */
  function(_super) {
    __extends(CognitoIdentity2, _super);
    function CognitoIdentity2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CognitoIdentity2.prototype.createIdentityPool = function(args, optionsOrCb, cb) {
      var command = new CreateIdentityPoolCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.deleteIdentities = function(args, optionsOrCb, cb) {
      var command = new DeleteIdentitiesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.deleteIdentityPool = function(args, optionsOrCb, cb) {
      var command = new DeleteIdentityPoolCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.describeIdentity = function(args, optionsOrCb, cb) {
      var command = new DescribeIdentityCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.describeIdentityPool = function(args, optionsOrCb, cb) {
      var command = new DescribeIdentityPoolCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.getCredentialsForIdentity = function(args, optionsOrCb, cb) {
      var command = new GetCredentialsForIdentityCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.getId = function(args, optionsOrCb, cb) {
      var command = new GetIdCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.getIdentityPoolRoles = function(args, optionsOrCb, cb) {
      var command = new GetIdentityPoolRolesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.getOpenIdToken = function(args, optionsOrCb, cb) {
      var command = new GetOpenIdTokenCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.getOpenIdTokenForDeveloperIdentity = function(args, optionsOrCb, cb) {
      var command = new GetOpenIdTokenForDeveloperIdentityCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.listIdentities = function(args, optionsOrCb, cb) {
      var command = new ListIdentitiesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.listIdentityPools = function(args, optionsOrCb, cb) {
      var command = new ListIdentityPoolsCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.listTagsForResource = function(args, optionsOrCb, cb) {
      var command = new ListTagsForResourceCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.lookupDeveloperIdentity = function(args, optionsOrCb, cb) {
      var command = new LookupDeveloperIdentityCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.mergeDeveloperIdentities = function(args, optionsOrCb, cb) {
      var command = new MergeDeveloperIdentitiesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.setIdentityPoolRoles = function(args, optionsOrCb, cb) {
      var command = new SetIdentityPoolRolesCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.tagResource = function(args, optionsOrCb, cb) {
      var command = new TagResourceCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.unlinkDeveloperIdentity = function(args, optionsOrCb, cb) {
      var command = new UnlinkDeveloperIdentityCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.unlinkIdentity = function(args, optionsOrCb, cb) {
      var command = new UnlinkIdentityCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.untagResource = function(args, optionsOrCb, cb) {
      var command = new UntagResourceCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    CognitoIdentity2.prototype.updateIdentityPool = function(args, optionsOrCb, cb) {
      var command = new UpdateIdentityPoolCommand(args);
      if (typeof optionsOrCb === "function") {
        this.send(command, optionsOrCb);
      } else if (typeof cb === "function") {
        if (typeof optionsOrCb !== "object")
          throw new Error("Expect http options but get " + typeof optionsOrCb);
        this.send(command, optionsOrCb || {}, cb);
      } else {
        return this.send(command, optionsOrCb);
      }
    };
    return CognitoIdentity2;
  }(CognitoIdentityClient)
);

// node_modules/@aws-sdk/property-provider/node_modules/tslib/tslib.es6.js
var extendStatics5 = function(d2, b2) {
  extendStatics5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (b3.hasOwnProperty(p2))
        d3[p2] = b3[p2];
  };
  return extendStatics5(d2, b2);
};
function __extends5(d2, b2) {
  extendStatics5(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}

// node_modules/@aws-sdk/property-provider/dist/es/ProviderError.js
var ProviderError = (
  /** @class */
  function(_super) {
    __extends5(ProviderError2, _super);
    function ProviderError2(message, tryNextLink) {
      if (tryNextLink === void 0) {
        tryNextLink = true;
      }
      var _this = _super.call(this, message) || this;
      _this.tryNextLink = tryNextLink;
      return _this;
    }
    return ProviderError2;
  }(Error)
);

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/resolveLogins.js
function resolveLogins(logins) {
  return Promise.all(Object.keys(logins).reduce(function(arr, name) {
    var tokenOrProvider = logins[name];
    if (typeof tokenOrProvider === "string") {
      arr.push([name, tokenOrProvider]);
    } else {
      arr.push(tokenOrProvider().then(function(token) {
        return [name, token];
      }));
    }
    return arr;
  }, [])).then(function(resolvedPairs) {
    return resolvedPairs.reduce(function(logins2, _a) {
      var _b = __read12(_a, 2), key = _b[0], value = _b[1];
      logins2[key] = value;
      return logins2;
    }, {});
  });
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentity.js
function fromCognitoIdentity(parameters) {
  var _this = this;
  return function() {
    return __awaiter16(_this, void 0, void 0, function() {
      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
      var _j;
      return __generator16(this, function(_k) {
        switch (_k.label) {
          case 0:
            _f = (_e = parameters.client).send;
            _g = GetCredentialsForIdentityCommand.bind;
            _j = {
              CustomRoleArn: parameters.customRoleArn,
              IdentityId: parameters.identityId
            };
            if (!parameters.logins)
              return [3, 2];
            return [4, resolveLogins(parameters.logins)];
          case 1:
            _h = _k.sent();
            return [3, 3];
          case 2:
            _h = void 0;
            _k.label = 3;
          case 3:
            return [4, _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];
          case 4:
            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
            return [2, {
              identityId: parameters.identityId,
              accessKeyId: AccessKeyId,
              secretAccessKey: SecretKey,
              sessionToken: SessionToken,
              expiration: Expiration
            }];
        }
      });
    });
  };
}
function throwOnMissingAccessKeyId() {
  throw new ProviderError("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
  throw new ProviderError("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
  throw new ProviderError("Response from Amazon Cognito contained no secret key");
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/IndexedDbStorage.js
var STORE_NAME = "IdentityIds";
var IndexedDbStorage = (
  /** @class */
  function() {
    function IndexedDbStorage2(dbName) {
      if (dbName === void 0) {
        dbName = "aws:cognito-identity-ids";
      }
      this.dbName = dbName;
    }
    IndexedDbStorage2.prototype.getItem = function(key) {
      return this.withObjectStore("readonly", function(store2) {
        var req = store2.get(key);
        return new Promise(function(resolve4) {
          req.onerror = function() {
            return resolve4(null);
          };
          req.onsuccess = function() {
            return resolve4(req.result ? req.result.value : null);
          };
        });
      }).catch(function() {
        return null;
      });
    };
    IndexedDbStorage2.prototype.removeItem = function(key) {
      return this.withObjectStore("readwrite", function(store2) {
        var req = store2.delete(key);
        return new Promise(function(resolve4, reject) {
          req.onerror = function() {
            return reject(req.error);
          };
          req.onsuccess = function() {
            return resolve4();
          };
        });
      });
    };
    IndexedDbStorage2.prototype.setItem = function(id, value) {
      return this.withObjectStore("readwrite", function(store2) {
        var req = store2.put({ id, value });
        return new Promise(function(resolve4, reject) {
          req.onerror = function() {
            return reject(req.error);
          };
          req.onsuccess = function() {
            return resolve4();
          };
        });
      });
    };
    IndexedDbStorage2.prototype.getDb = function() {
      var openDbRequest = self.indexedDB.open(this.dbName, 1);
      return new Promise(function(resolve4, reject) {
        openDbRequest.onsuccess = function() {
          resolve4(openDbRequest.result);
        };
        openDbRequest.onerror = function() {
          reject(openDbRequest.error);
        };
        openDbRequest.onblocked = function() {
          reject(new Error("Unable to access DB"));
        };
        openDbRequest.onupgradeneeded = function() {
          var db = openDbRequest.result;
          db.onerror = function() {
            reject(new Error("Failed to create object store"));
          };
          db.createObjectStore(STORE_NAME, { keyPath: "id" });
        };
      });
    };
    IndexedDbStorage2.prototype.withObjectStore = function(mode, action) {
      return this.getDb().then(function(db) {
        var tx = db.transaction(STORE_NAME, mode);
        tx.oncomplete = function() {
          return db.close();
        };
        return new Promise(function(resolve4, reject) {
          tx.onerror = function() {
            return reject(tx.error);
          };
          resolve4(action(tx.objectStore(STORE_NAME)));
        }).catch(function(err) {
          db.close();
          throw err;
        });
      });
    };
    return IndexedDbStorage2;
  }()
);

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/InMemoryStorage.js
var InMemoryStorage = (
  /** @class */
  function() {
    function InMemoryStorage2(store2) {
      if (store2 === void 0) {
        store2 = {};
      }
      this.store = store2;
    }
    InMemoryStorage2.prototype.getItem = function(key) {
      if (key in this.store) {
        return this.store[key];
      }
      return null;
    };
    InMemoryStorage2.prototype.removeItem = function(key) {
      delete this.store[key];
    };
    InMemoryStorage2.prototype.setItem = function(key, value) {
      this.store[key] = value;
    };
    return InMemoryStorage2;
  }()
);

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/localStorage.js
var inMemoryStorage = new InMemoryStorage();
function localStorage() {
  if (typeof self === "object" && self.indexedDB) {
    return new IndexedDbStorage();
  }
  if (typeof window === "object" && window.localStorage) {
    return window.localStorage;
  }
  return inMemoryStorage;
}

// node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentityPool.js
function fromCognitoIdentityPool(_a) {
  var _this = this;
  var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? localStorage() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : void 0 : _c;
  var cacheKey = userIdentifier ? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier : void 0;
  var provider = function() {
    return __awaiter16(_this, void 0, void 0, function() {
      var identityId, _a2, _b2, IdentityId, _c2, _d, _e, _f;
      var _g;
      return __generator16(this, function(_h) {
        switch (_h.label) {
          case 0:
            _a2 = cacheKey;
            if (!_a2)
              return [3, 2];
            return [4, cache.getItem(cacheKey)];
          case 1:
            _a2 = _h.sent();
            _h.label = 2;
          case 2:
            identityId = _a2;
            if (!!identityId)
              return [3, 7];
            _d = (_c2 = client).send;
            _e = GetIdCommand.bind;
            _g = {
              AccountId: accountId,
              IdentityPoolId: identityPoolId
            };
            if (!logins)
              return [3, 4];
            return [4, resolveLogins(logins)];
          case 3:
            _f = _h.sent();
            return [3, 5];
          case 4:
            _f = void 0;
            _h.label = 5;
          case 5:
            return [4, _d.apply(_c2, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];
          case 6:
            _b2 = _h.sent().IdentityId, IdentityId = _b2 === void 0 ? throwOnMissingId() : _b2;
            identityId = IdentityId;
            if (cacheKey) {
              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function() {
              });
            }
            _h.label = 7;
          case 7:
            provider = fromCognitoIdentity({
              client,
              customRoleArn,
              logins,
              identityId
            });
            return [2, provider()];
        }
      });
    });
  };
  return function() {
    return provider().catch(function(err) {
      return __awaiter16(_this, void 0, void 0, function() {
        return __generator16(this, function(_a2) {
          if (cacheKey) {
            Promise.resolve(cache.removeItem(cacheKey)).catch(function() {
            });
          }
          throw err;
        });
      });
    });
  };
}
function throwOnMissingId() {
  throw new ProviderError("Response from Amazon Cognito contained no identity ID");
}

// node_modules/@aws-amplify/core/lib-esm/Util/CognitoIdentityClient.js
function createCognitoIdentityClient(config) {
  var client = new CognitoIdentityClient({
    region: config.region,
    customUserAgent: getAmplifyUserAgent()
  });
  client.middlewareStack.add(function(next, _2) {
    return function(args) {
      return next(middlewareArgs(args));
    };
  }, {
    step: "build",
    name: "cacheControlMiddleWare"
  });
  return client;
}
function middlewareArgs(args) {
  return __assign4(__assign4({}, args), { request: __assign4(__assign4({}, args.request), { headers: __assign4(__assign4({}, args.request.headers), { "cache-control": "no-store" }) }) });
}

// node_modules/@aws-amplify/core/lib-esm/Credentials.js
var logger12 = new ConsoleLogger("Credentials");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var AMPLIFY_SYMBOL2 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchCredentialsEvent = function(event, data, message) {
  Hub.dispatch("core", { event, data, message }, "Credentials", AMPLIFY_SYMBOL2);
};
var CredentialsClass = (
  /** @class */
  function() {
    function CredentialsClass2(config) {
      this._gettingCredPromise = null;
      this._refreshHandlers = {};
      this.Auth = void 0;
      this.configure(config);
      this._refreshHandlers["google"] = GoogleOAuth2.refreshGoogleToken;
      this._refreshHandlers["facebook"] = FacebookOAuth2.refreshFacebookToken;
    }
    CredentialsClass2.prototype.getModuleName = function() {
      return "Credentials";
    };
    CredentialsClass2.prototype.getCredSource = function() {
      return this._credentials_source;
    };
    CredentialsClass2.prototype.configure = function(config) {
      if (!config)
        return this._config || {};
      this._config = Object.assign({}, this._config, config);
      var refreshHandlers = this._config.refreshHandlers;
      if (refreshHandlers) {
        this._refreshHandlers = __assign4(__assign4({}, this._refreshHandlers), refreshHandlers);
      }
      this._storage = this._config.storage;
      if (!this._storage) {
        this._storage = new StorageHelper().getStorage();
      }
      this._storageSync = Promise.resolve();
      if (typeof this._storage["sync"] === "function") {
        this._storageSync = this._storage["sync"]();
      }
      dispatchCredentialsEvent("credentials_configured", null, "Credentials has been configured successfully");
      return this._config;
    };
    CredentialsClass2.prototype.get = function() {
      logger12.debug("getting credentials");
      return this._pickupCredentials();
    };
    CredentialsClass2.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
      return "" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;
    };
    CredentialsClass2.prototype._pickupCredentials = function() {
      logger12.debug("picking up credentials");
      if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
        logger12.debug("getting new cred promise");
        this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
      } else {
        logger12.debug("getting old cred promise");
      }
      return this._gettingCredPromise;
    };
    CredentialsClass2.prototype._keepAlive = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var cred, _a, Auth2, user_1, session, refreshToken_1, refreshRequest, err_1;
        return __generator4(this, function(_b) {
          switch (_b.label) {
            case 0:
              logger12.debug("checking if credentials exists and not expired");
              cred = this._credentials;
              if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
                logger12.debug("credentials not changed and not expired, directly return");
                return [2, Promise.resolve(cred)];
              }
              logger12.debug("need to get a new credential or refresh the existing one");
              _a = this.Auth, Auth2 = _a === void 0 ? Amplify.Auth : _a;
              if (!Auth2 || typeof Auth2.currentUserCredentials !== "function") {
                return [2, this._setCredentialsForGuest()];
              }
              if (!(!this._isExpired(cred) && this._isPastTTL()))
                return [3, 6];
              logger12.debug("ttl has passed but token is not yet expired");
              _b.label = 1;
            case 1:
              _b.trys.push([1, 5, , 6]);
              return [4, Auth2.currentUserPoolUser()];
            case 2:
              user_1 = _b.sent();
              return [4, Auth2.currentSession()];
            case 3:
              session = _b.sent();
              refreshToken_1 = session.refreshToken;
              refreshRequest = new Promise(function(res, rej) {
                user_1.refreshSession(refreshToken_1, function(err, data) {
                  return err ? rej(err) : res(data);
                });
              });
              return [4, refreshRequest];
            case 4:
              _b.sent();
              return [3, 6];
            case 5:
              err_1 = _b.sent();
              logger12.debug("Error attempting to refreshing the session", err_1);
              return [3, 6];
            case 6:
              return [2, Auth2.currentUserCredentials()];
          }
        });
      });
    };
    CredentialsClass2.prototype.refreshFederatedToken = function(federatedInfo) {
      logger12.debug("Getting federated credentials");
      var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
      var expires_at = federatedInfo.expires_at;
      expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1e3 : expires_at;
      var that = this;
      logger12.debug("checking if federated jwt token expired");
      if (expires_at > (/* @__PURE__ */ new Date()).getTime()) {
        logger12.debug("token not expired");
        return this._setCredentialsFromFederation({
          provider,
          token,
          user,
          identity_id,
          expires_at
        });
      } else {
        if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
          logger12.debug("getting refreshed jwt token from federation provider");
          return this._providerRefreshWithRetry({
            refreshHandler: that._refreshHandlers[provider],
            provider,
            user
          });
        } else {
          logger12.debug("no refresh handler for provider:", provider);
          this.clear();
          return Promise.reject("no refresh handler for provider");
        }
      }
    };
    CredentialsClass2.prototype._providerRefreshWithRetry = function(_a) {
      var _this = this;
      var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
      var MAX_DELAY_MS4 = 10 * 1e3;
      return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS4).then(function(data) {
        logger12.debug("refresh federated token sucessfully", data);
        return _this._setCredentialsFromFederation({
          provider,
          token: data.token,
          user,
          identity_id: data.identity_id,
          expires_at: data.expires_at
        });
      }).catch(function(e) {
        var isNetworkError = typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
        if (!isNetworkError) {
          _this.clear();
        }
        logger12.debug("refresh federated token failed", e);
        return Promise.reject("refreshing federation token failed: " + e);
      });
    };
    CredentialsClass2.prototype._isExpired = function(credentials) {
      if (!credentials) {
        logger12.debug("no credentials for expiration check");
        return true;
      }
      logger12.debug("are these credentials expired?", credentials);
      var ts = Date.now();
      var expiration = credentials.expiration;
      return expiration.getTime() <= ts;
    };
    CredentialsClass2.prototype._isPastTTL = function() {
      return this._nextCredentialsRefresh <= Date.now();
    };
    CredentialsClass2.prototype._setCredentialsForGuest = function() {
      var _a;
      return __awaiter4(this, void 0, void 0, function() {
        var _b, identityPoolId, region, mandatorySignIn, identityPoolRegion, identityId, _c, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;
        var _this = this;
        return __generator4(this, function(_d) {
          switch (_d.label) {
            case 0:
              logger12.debug("setting credentials for guest");
              if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {
                this._config = Object.assign({}, this._config, parseAWSExports(this._config || {}).Auth);
              }
              _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn, identityPoolRegion = _b.identityPoolRegion;
              if (mandatorySignIn) {
                return [2, Promise.reject("cannot get guest credentials when mandatory signin enabled")];
              }
              if (!identityPoolId) {
                logger12.debug("No Cognito Identity pool provided for unauthenticated access");
                return [2, Promise.reject("No Cognito Identity pool provided for unauthenticated access")];
              }
              if (!identityPoolRegion && !region) {
                logger12.debug("region is not configured for getting the credentials");
                return [2, Promise.reject("region is not configured for getting the credentials")];
              }
              _c = this;
              return [4, this._getGuestIdentityId()];
            case 1:
              identityId = _c._identityId = _d.sent();
              cognitoClient = createCognitoIdentityClient({
                region: identityPoolRegion || region
              });
              credentials = void 0;
              if (identityId) {
                cognitoIdentityParams = {
                  identityId,
                  client: cognitoClient
                };
                credentials = fromCognitoIdentity(cognitoIdentityParams)();
              } else {
                credentialsProvider = function() {
                  return __awaiter4(_this, void 0, void 0, function() {
                    var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
                    return __generator4(this, function(_a2) {
                      switch (_a2.label) {
                        case 0:
                          return [4, cognitoClient.send(new GetIdCommand({
                            IdentityPoolId: identityPoolId
                          }))];
                        case 1:
                          IdentityId = _a2.sent().IdentityId;
                          this._identityId = IdentityId;
                          cognitoIdentityParams2 = {
                            client: cognitoClient,
                            identityId: IdentityId
                          };
                          credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams2);
                          return [2, credentialsFromCognitoIdentity()];
                      }
                    });
                  });
                };
                credentials = credentialsProvider().catch(function(err) {
                  return __awaiter4(_this, void 0, void 0, function() {
                    return __generator4(this, function(_a2) {
                      throw err;
                    });
                  });
                });
              }
              return [2, this._loadCredentials(credentials, "guest", false, null).then(function(res) {
                return res;
              }).catch(function(e) {
                return __awaiter4(_this, void 0, void 0, function() {
                  var credentialsProvider2;
                  var _this2 = this;
                  return __generator4(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!(e.name === "ResourceNotFoundException" && e.message === "Identity '" + identityId + "' not found."))
                          return [3, 2];
                        logger12.debug("Failed to load guest credentials");
                        return [4, this._removeGuestIdentityId()];
                      case 1:
                        _a2.sent();
                        credentialsProvider2 = function() {
                          return __awaiter4(_this2, void 0, void 0, function() {
                            var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
                            return __generator4(this, function(_a3) {
                              switch (_a3.label) {
                                case 0:
                                  return [4, cognitoClient.send(new GetIdCommand({
                                    IdentityPoolId: identityPoolId
                                  }))];
                                case 1:
                                  IdentityId = _a3.sent().IdentityId;
                                  this._identityId = IdentityId;
                                  cognitoIdentityParams2 = {
                                    client: cognitoClient,
                                    identityId: IdentityId
                                  };
                                  credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams2);
                                  return [2, credentialsFromCognitoIdentity()];
                              }
                            });
                          });
                        };
                        credentials = credentialsProvider2().catch(function(err) {
                          return __awaiter4(_this2, void 0, void 0, function() {
                            return __generator4(this, function(_a3) {
                              throw err;
                            });
                          });
                        });
                        return [2, this._loadCredentials(credentials, "guest", false, null)];
                      case 2:
                        return [2, e];
                    }
                  });
                });
              })];
          }
        });
      });
    };
    CredentialsClass2.prototype._setCredentialsFromFederation = function(params) {
      var provider = params.provider, token = params.token, identity_id = params.identity_id;
      var domains = {
        google: "accounts.google.com",
        facebook: "graph.facebook.com",
        amazon: "www.amazon.com",
        developer: "cognito-identity.amazonaws.com"
      };
      var domain = domains[provider] || provider;
      if (!domain) {
        return Promise.reject("You must specify a federated provider");
      }
      var logins = {};
      logins[domain] = token;
      var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, identityPoolRegion = _a.identityPoolRegion;
      if (!identityPoolId) {
        logger12.debug("No Cognito Federated Identity pool provided");
        return Promise.reject("No Cognito Federated Identity pool provided");
      }
      if (!identityPoolRegion && !region) {
        logger12.debug("region is not configured for getting the credentials");
        return Promise.reject("region is not configured for getting the credentials");
      }
      var cognitoClient = createCognitoIdentityClient({
        region: identityPoolRegion || region
      });
      var credentials = void 0;
      if (identity_id) {
        var cognitoIdentityParams = {
          identityId: identity_id,
          logins,
          client: cognitoClient
        };
        credentials = fromCognitoIdentity(cognitoIdentityParams)();
      } else {
        var cognitoIdentityParams = {
          logins,
          identityPoolId,
          client: cognitoClient
        };
        credentials = fromCognitoIdentityPool(cognitoIdentityParams)();
      }
      return this._loadCredentials(credentials, "federated", true, params);
    };
    CredentialsClass2.prototype._setCredentialsFromSession = function(session) {
      var _this = this;
      logger12.debug("set credentials from session");
      var idToken = session.getIdToken().getJwtToken();
      var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId, identityPoolRegion = _a.identityPoolRegion;
      if (!identityPoolId) {
        logger12.debug("No Cognito Federated Identity pool provided");
        return Promise.reject("No Cognito Federated Identity pool provided");
      }
      if (!identityPoolRegion && !region) {
        logger12.debug("region is not configured for getting the credentials");
        return Promise.reject("region is not configured for getting the credentials");
      }
      var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
      var logins = {};
      logins[key] = idToken;
      var cognitoClient = createCognitoIdentityClient({
        region: identityPoolRegion || region
      });
      var credentialsProvider = function() {
        return __awaiter4(_this, void 0, void 0, function() {
          var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a2, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
          return __generator4(this, function(_c) {
            switch (_c.label) {
              case 0:
                return [4, this._getGuestIdentityId()];
              case 1:
                guestIdentityId = _c.sent();
                if (!!guestIdentityId)
                  return [3, 3];
                return [4, cognitoClient.send(new GetIdCommand({
                  IdentityPoolId: identityPoolId,
                  Logins: logins
                }))];
              case 2:
                IdentityId = _c.sent().IdentityId;
                generatedOrRetrievedIdentityId = IdentityId;
                _c.label = 3;
              case 3:
                return [4, cognitoClient.send(new GetCredentialsForIdentityCommand({
                  IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                  Logins: logins
                }))];
              case 4:
                _a2 = _c.sent(), _b = _a2.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a2.IdentityId;
                this._identityId = primaryIdentityId;
                if (!guestIdentityId)
                  return [3, 6];
                logger12.debug("The guest identity " + guestIdentityId + " has been successfully linked to the logins");
                if (guestIdentityId === primaryIdentityId) {
                  logger12.debug("The guest identity " + guestIdentityId + " has become the primary identity");
                }
                return [4, this._removeGuestIdentityId()];
              case 5:
                _c.sent();
                _c.label = 6;
              case 6:
                return [2, {
                  accessKeyId: AccessKeyId,
                  secretAccessKey: SecretKey,
                  sessionToken: SessionToken,
                  expiration: Expiration,
                  identityId: primaryIdentityId
                }];
            }
          });
        });
      };
      var credentials = credentialsProvider().catch(function(err) {
        return __awaiter4(_this, void 0, void 0, function() {
          return __generator4(this, function(_a2) {
            throw err;
          });
        });
      });
      return this._loadCredentials(credentials, "userPool", true, null);
    };
    CredentialsClass2.prototype._loadCredentials = function(credentials, source, authenticated, info) {
      var _this = this;
      var that = this;
      return new Promise(function(res, rej) {
        credentials.then(function(credentials2) {
          return __awaiter4(_this, void 0, void 0, function() {
            var user, provider, token, expires_at, identity_id;
            return __generator4(this, function(_a) {
              switch (_a.label) {
                case 0:
                  logger12.debug("Load credentials successfully", credentials2);
                  if (this._identityId && !credentials2.identityId) {
                    credentials2["identityId"] = this._identityId;
                  }
                  that._credentials = credentials2;
                  that._credentials.authenticated = authenticated;
                  that._credentials_source = source;
                  that._nextCredentialsRefresh = (/* @__PURE__ */ new Date()).getTime() + CREDENTIALS_TTL;
                  if (source === "federated") {
                    user = Object.assign({ id: this._credentials.identityId }, info.user);
                    provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                    try {
                      this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                        provider,
                        token,
                        user,
                        expires_at,
                        identity_id
                      }));
                    } catch (e) {
                      logger12.debug("Failed to put federated info into auth storage", e);
                    }
                  }
                  if (!(source === "guest"))
                    return [3, 2];
                  return [4, this._setGuestIdentityId(credentials2.identityId)];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  res(that._credentials);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }).catch(function(err) {
          if (err) {
            logger12.debug("Failed to load credentials", credentials);
            logger12.debug("Error loading credentials", err);
            rej(err);
            return;
          }
        });
      });
    };
    CredentialsClass2.prototype.set = function(params, source) {
      if (source === "session") {
        return this._setCredentialsFromSession(params);
      } else if (source === "federation") {
        return this._setCredentialsFromFederation(params);
      } else if (source === "guest") {
        return this._setCredentialsForGuest();
      } else {
        logger12.debug("no source specified for setting credentials");
        return Promise.reject("invalid source");
      }
    };
    CredentialsClass2.prototype.clear = function() {
      return __awaiter4(this, void 0, void 0, function() {
        return __generator4(this, function(_a) {
          this._credentials = null;
          this._credentials_source = null;
          logger12.debug("removing aws-amplify-federatedInfo from storage");
          this._storage.removeItem("aws-amplify-federatedInfo");
          return [
            2
            /*return*/
          ];
        });
      });
    };
    CredentialsClass2.prototype._getGuestIdentityId = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var identityPoolId, e_1;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              identityPoolId = this._config.identityPoolId;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              return [2, this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];
            case 3:
              e_1 = _a.sent();
              logger12.debug("Failed to get the cached guest identityId", e_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    CredentialsClass2.prototype._setGuestIdentityId = function(identityId) {
      return __awaiter4(this, void 0, void 0, function() {
        var identityPoolId, e_2;
        return __generator4(this, function(_a) {
          switch (_a.label) {
            case 0:
              identityPoolId = this._config.identityPoolId;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
              return [3, 4];
            case 3:
              e_2 = _a.sent();
              logger12.debug("Failed to cache guest identityId", e_2);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    CredentialsClass2.prototype._removeGuestIdentityId = function() {
      return __awaiter4(this, void 0, void 0, function() {
        var identityPoolId;
        return __generator4(this, function(_a) {
          identityPoolId = this._config.identityPoolId;
          logger12.debug("removing " + this._getCognitoIdentityIdStorageKey(identityPoolId) + " from storage");
          this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
          return [
            2
            /*return*/
          ];
        });
      });
    };
    CredentialsClass2.prototype.shear = function(credentials) {
      return {
        accessKeyId: credentials.accessKeyId,
        sessionToken: credentials.sessionToken,
        secretAccessKey: credentials.secretAccessKey,
        identityId: credentials.identityId,
        authenticated: credentials.authenticated
      };
    };
    return CredentialsClass2;
  }()
);
var Credentials = new CredentialsClass(null);
Amplify.register(Credentials);

// node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js
var ServiceWorkerClass = (
  /** @class */
  function() {
    function ServiceWorkerClass2() {
      this._logger = new ConsoleLogger("ServiceWorker");
    }
    Object.defineProperty(ServiceWorkerClass2.prototype, "serviceWorker", {
      /**
       * Get the currently active service worker
       */
      get: function() {
        return this._serviceWorker;
      },
      enumerable: true,
      configurable: true
    });
    ServiceWorkerClass2.prototype.register = function(filePath, scope) {
      var _this = this;
      if (filePath === void 0) {
        filePath = "/service-worker.js";
      }
      if (scope === void 0) {
        scope = "/";
      }
      this._logger.debug("registering " + filePath);
      this._logger.debug("registering service worker with scope " + scope);
      return new Promise(function(resolve4, reject) {
        if (navigator && "serviceWorker" in navigator) {
          navigator.serviceWorker.register(filePath, {
            scope
          }).then(function(registration) {
            if (registration.installing) {
              _this._serviceWorker = registration.installing;
            } else if (registration.waiting) {
              _this._serviceWorker = registration.waiting;
            } else if (registration.active) {
              _this._serviceWorker = registration.active;
            }
            _this._registration = registration;
            _this._setupListeners();
            _this._logger.debug("Service Worker Registration Success: " + registration);
            return resolve4(registration);
          }).catch(function(error) {
            _this._logger.debug("Service Worker Registration Failed " + error);
            return reject(error);
          });
        } else {
          return reject(new Error("Service Worker not available"));
        }
      });
    };
    ServiceWorkerClass2.prototype.enablePush = function(publicKey) {
      var _this = this;
      if (!this._registration)
        throw new Error("Service Worker not registered");
      this._publicKey = publicKey;
      return new Promise(function(resolve4, reject) {
        if (browserOrNode().isBrowser) {
          _this._registration.pushManager.getSubscription().then(function(subscription) {
            if (subscription) {
              _this._subscription = subscription;
              _this._logger.debug("User is subscribed to push: " + JSON.stringify(subscription));
              resolve4(subscription);
            } else {
              _this._logger.debug("User is NOT subscribed to push");
              return _this._registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: _this._urlB64ToUint8Array(publicKey)
              }).then(function(subscription2) {
                _this._subscription = subscription2;
                _this._logger.debug("User subscribed: " + JSON.stringify(subscription2));
                resolve4(subscription2);
              }).catch(function(error) {
                _this._logger.error(error);
              });
            }
          });
        } else {
          return reject(new Error("Service Worker not available"));
        }
      });
    };
    ServiceWorkerClass2.prototype._urlB64ToUint8Array = function(base64String) {
      var padding = "=".repeat((4 - base64String.length % 4) % 4);
      var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
      var rawData = window.atob(base64);
      var outputArray = new Uint8Array(rawData.length);
      for (var i2 = 0; i2 < rawData.length; ++i2) {
        outputArray[i2] = rawData.charCodeAt(i2);
      }
      return outputArray;
    };
    ServiceWorkerClass2.prototype.send = function(message) {
      if (this._serviceWorker) {
        this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
      }
    };
    ServiceWorkerClass2.prototype._setupListeners = function() {
      var _this = this;
      this._serviceWorker.addEventListener("statechange", function(event) {
        var currentState = _this._serviceWorker.state;
        _this._logger.debug("ServiceWorker statechange: " + currentState);
        if (Amplify.Analytics && typeof Amplify.Analytics.record === "function") {
          Amplify.Analytics.record({
            name: "ServiceWorker",
            attributes: {
              state: currentState
            }
          });
        }
      });
      this._serviceWorker.addEventListener("message", function(event) {
        _this._logger.debug("ServiceWorker message event: " + event);
      });
    };
    return ServiceWorkerClass2;
  }()
);

// node_modules/universal-cookie/es6/Cookies.js
var cookie2 = __toESM(require_cookie());

// node_modules/universal-cookie/es6/utils.js
var cookie = __toESM(require_cookie());
function hasDocumentCookie() {
  return typeof document === "object" && typeof document.cookie === "string";
}
function parseCookies(cookies, options) {
  if (typeof cookies === "string") {
    return cookie.parse(cookies, options);
  } else if (typeof cookies === "object" && cookies !== null) {
    return cookies;
  } else {
    return {};
  }
}
function isParsingCookie(value, doNotParse) {
  if (typeof doNotParse === "undefined") {
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
  }
  return !doNotParse;
}
function readCookie(value, options) {
  if (options === void 0) {
    options = {};
  }
  var cleanValue = cleanupCookieValue(value);
  if (isParsingCookie(cleanValue, options.doNotParse)) {
    try {
      return JSON.parse(cleanValue);
    } catch (e) {
    }
  }
  return value;
}
function cleanupCookieValue(value) {
  if (value && value[0] === "j" && value[1] === ":") {
    return value.substr(2);
  }
  return value;
}

// node_modules/universal-cookie/es6/Cookies.js
var __assign14 = function() {
  __assign14 = Object.assign || function(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign14.apply(this, arguments);
};
var Cookies = (
  /** @class */
  function() {
    function Cookies3(cookies, options) {
      var _this = this;
      this.changeListeners = [];
      this.HAS_DOCUMENT_COOKIE = false;
      this.cookies = parseCookies(cookies, options);
      new Promise(function() {
        _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
      }).catch(function() {
      });
    }
    Cookies3.prototype._updateBrowserValues = function(parseOptions) {
      if (!this.HAS_DOCUMENT_COOKIE) {
        return;
      }
      this.cookies = cookie2.parse(document.cookie, parseOptions);
    };
    Cookies3.prototype._emitChange = function(params) {
      for (var i2 = 0; i2 < this.changeListeners.length; ++i2) {
        this.changeListeners[i2](params);
      }
    };
    Cookies3.prototype.get = function(name, options, parseOptions) {
      if (options === void 0) {
        options = {};
      }
      this._updateBrowserValues(parseOptions);
      return readCookie(this.cookies[name], options);
    };
    Cookies3.prototype.getAll = function(options, parseOptions) {
      if (options === void 0) {
        options = {};
      }
      this._updateBrowserValues(parseOptions);
      var result = {};
      for (var name_1 in this.cookies) {
        result[name_1] = readCookie(this.cookies[name_1], options);
      }
      return result;
    };
    Cookies3.prototype.set = function(name, value, options) {
      var _a;
      if (typeof value === "object") {
        value = JSON.stringify(value);
      }
      this.cookies = __assign14(__assign14({}, this.cookies), (_a = {}, _a[name] = value, _a));
      if (this.HAS_DOCUMENT_COOKIE) {
        document.cookie = cookie2.serialize(name, value, options);
      }
      this._emitChange({ name, value, options });
    };
    Cookies3.prototype.remove = function(name, options) {
      var finalOptions = options = __assign14(__assign14({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 });
      this.cookies = __assign14({}, this.cookies);
      delete this.cookies[name];
      if (this.HAS_DOCUMENT_COOKIE) {
        document.cookie = cookie2.serialize(name, "", finalOptions);
      }
      this._emitChange({ name, value: void 0, options });
    };
    Cookies3.prototype.addChangeListener = function(callback) {
      this.changeListeners.push(callback);
    };
    Cookies3.prototype.removeChangeListener = function(callback) {
      var idx = this.changeListeners.indexOf(callback);
      if (idx >= 0) {
        this.changeListeners.splice(idx, 1);
      }
    };
    return Cookies3;
  }()
);
var Cookies_default = Cookies;

// node_modules/universal-cookie/es6/index.js
var es6_default = Cookies_default;

// node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
var isBrowser = browserOrNode().isBrowser;
var ONE_YEAR_IN_MS = 365 * 24 * 60 * 60 * 1e3;
var UniversalStorage = (
  /** @class */
  function() {
    function UniversalStorage2(context) {
      if (context === void 0) {
        context = {};
      }
      this.cookies = new es6_default();
      this.store = isBrowser ? window.localStorage : /* @__PURE__ */ Object.create(null);
      this.cookies = context.req ? new es6_default(context.req.headers.cookie) : new es6_default();
      Object.assign(this.store, this.cookies.getAll());
    }
    Object.defineProperty(UniversalStorage2.prototype, "length", {
      get: function() {
        return Object.entries(this.store).length;
      },
      enumerable: true,
      configurable: true
    });
    UniversalStorage2.prototype.clear = function() {
      var _this = this;
      Array.from(new Array(this.length)).map(function(_2, i2) {
        return _this.key(i2);
      }).forEach(function(key) {
        return _this.removeItem(key);
      });
    };
    UniversalStorage2.prototype.getItem = function(key) {
      return this.getLocalItem(key);
    };
    UniversalStorage2.prototype.getLocalItem = function(key) {
      return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
    };
    UniversalStorage2.prototype.getUniversalItem = function(key) {
      return this.cookies.get(key);
    };
    UniversalStorage2.prototype.key = function(index) {
      return Object.keys(this.store)[index];
    };
    UniversalStorage2.prototype.removeItem = function(key) {
      this.removeLocalItem(key);
      this.removeUniversalItem(key);
    };
    UniversalStorage2.prototype.removeLocalItem = function(key) {
      delete this.store[key];
    };
    UniversalStorage2.prototype.removeUniversalItem = function(key) {
      this.cookies.remove(key, {
        path: "/"
      });
    };
    UniversalStorage2.prototype.setItem = function(key, value) {
      this.setLocalItem(key, value);
      var tokenType = key.split(".").pop();
      var sessionTokenTypes = [
        "LastAuthUser",
        "accessToken",
        // refreshToken originates on the client, but SSR pages won't fail when this expires
        // Note: the new `accessToken` will also be refreshed on the client (since Amplify doesn't set server-side cookies)
        "refreshToken",
        // Required for CognitoUserSession
        "idToken"
      ];
      if (sessionTokenTypes.includes(tokenType !== null && tokenType !== void 0 ? tokenType : "")) {
        this.setUniversalItem(key, value, {
          expires: new Date(Date.now() + ONE_YEAR_IN_MS)
        });
      }
    };
    UniversalStorage2.prototype.setLocalItem = function(key, value) {
      this.store[key] = value;
    };
    UniversalStorage2.prototype.setUniversalItem = function(key, value, options) {
      if (options === void 0) {
        options = {};
      }
      this.cookies.set(key, value, __assign4(__assign4({}, options), {
        path: "/",
        // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie
        sameSite: true,
        // Allow unsecure requests to http://localhost:3000/ when in development.
        secure: isBrowser && window.location.hostname === "localhost" ? false : true
      }));
    };
    return UniversalStorage2;
  }()
);

// node_modules/@aws-amplify/core/lib-esm/constants.js
var hasSymbol = typeof Symbol !== "undefined" && typeof Symbol.for === "function";
var INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER = hasSymbol ? Symbol.for("INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER") : "@@INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER";
var USER_AGENT_HEADER = "x-amz-user-agent";

// node_modules/@aws-amplify/core/lib-esm/index.js
var Constants = {
  userAgent: Platform.userAgent
};

// node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js
var AuthenticationDetails = function() {
  function AuthenticationDetails2(data) {
    var _ref = data || {}, ValidationData = _ref.ValidationData, Username = _ref.Username, Password = _ref.Password, AuthParameters = _ref.AuthParameters, ClientMetadata = _ref.ClientMetadata;
    this.validationData = ValidationData || {};
    this.authParameters = AuthParameters || {};
    this.clientMetadata = ClientMetadata || {};
    this.username = Username;
    this.password = Password;
  }
  var _proto = AuthenticationDetails2.prototype;
  _proto.getUsername = function getUsername() {
    return this.username;
  };
  _proto.getPassword = function getPassword() {
    return this.password;
  };
  _proto.getValidationData = function getValidationData() {
    return this.validationData;
  };
  _proto.getAuthParameters = function getAuthParameters() {
    return this.authParameters;
  };
  _proto.getClientMetadata = function getClientMetadata() {
    return this.clientMetadata;
  };
  return AuthenticationDetails2;
}();

// node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
var import_buffer = __toESM(require_buffer());

// node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js
var crypto2;
if (typeof window !== "undefined" && window.crypto) {
  crypto2 = window.crypto;
}
if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
  crypto2 = window.msCrypto;
}
if (!crypto2 && typeof global !== "undefined" && global.crypto) {
  crypto2 = global.crypto;
}
if (!crypto2 && typeof __require === "function") {
  try {
    crypto2 = require_crypto();
  } catch (err) {
  }
}
function cryptoSecureRandomInt() {
  if (crypto2) {
    if (typeof crypto2.getRandomValues === "function") {
      try {
        return crypto2.getRandomValues(new Uint32Array(1))[0];
      } catch (err) {
      }
    }
    if (typeof crypto2.randomBytes === "function") {
      try {
        return crypto2.randomBytes(4).readInt32LE();
      } catch (err) {
      }
    }
  }
  throw new Error("Native crypto module could not be used to get secure random number.");
}

// node_modules/amazon-cognito-identity-js/es/utils/WordArray.js
function hexStringify(wordArray) {
  var words = wordArray.words;
  var sigBytes = wordArray.sigBytes;
  var hexChars = [];
  for (var i2 = 0; i2 < sigBytes; i2++) {
    var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
    hexChars.push((bite >>> 4).toString(16));
    hexChars.push((bite & 15).toString(16));
  }
  return hexChars.join("");
}
var WordArray = function() {
  function WordArray2(words, sigBytes) {
    words = this.words = words || [];
    if (sigBytes != void 0) {
      this.sigBytes = sigBytes;
    } else {
      this.sigBytes = words.length * 4;
    }
  }
  var _proto = WordArray2.prototype;
  _proto.random = function random(nBytes) {
    var words = [];
    for (var i2 = 0; i2 < nBytes; i2 += 4) {
      words.push(cryptoSecureRandomInt());
    }
    return new WordArray2(words, nBytes);
  };
  _proto.toString = function toString3() {
    return hexStringify(this);
  };
  return WordArray2;
}();

// node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
var import_sha256_js2 = __toESM(require_build2());

// node_modules/amazon-cognito-identity-js/es/BigInteger.js
var BigInteger_default = BigInteger;
function BigInteger(a2, b2) {
  if (a2 != null)
    this.fromString(a2, b2);
}
function nbi() {
  return new BigInteger(null);
}
var dbits;
var canary = 244837814094590;
var j_lm = (canary & 16777215) == 15715070;
function am1(i2, x2, w2, j2, c2, n2) {
  while (--n2 >= 0) {
    var v2 = x2 * this[i2++] + w2[j2] + c2;
    c2 = Math.floor(v2 / 67108864);
    w2[j2++] = v2 & 67108863;
  }
  return c2;
}
function am2(i2, x2, w2, j2, c2, n2) {
  var xl = x2 & 32767, xh = x2 >> 15;
  while (--n2 >= 0) {
    var l2 = this[i2] & 32767;
    var h2 = this[i2++] >> 15;
    var m2 = xh * l2 + h2 * xl;
    l2 = xl * l2 + ((m2 & 32767) << 15) + w2[j2] + (c2 & 1073741823);
    c2 = (l2 >>> 30) + (m2 >>> 15) + xh * h2 + (c2 >>> 30);
    w2[j2++] = l2 & 1073741823;
  }
  return c2;
}
function am3(i2, x2, w2, j2, c2, n2) {
  var xl = x2 & 16383, xh = x2 >> 14;
  while (--n2 >= 0) {
    var l2 = this[i2] & 16383;
    var h2 = this[i2++] >> 14;
    var m2 = xh * l2 + h2 * xl;
    l2 = xl * l2 + ((m2 & 16383) << 14) + w2[j2] + c2;
    c2 = (l2 >> 28) + (m2 >> 14) + xh * h2;
    w2[j2++] = l2 & 268435455;
  }
  return c2;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  BigInteger.prototype.am = am3;
  dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr;
var vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv)
  BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
function int2char(n2) {
  return BI_RM.charAt(n2);
}
function intAt(s2, i2) {
  var c2 = BI_RC[s2.charCodeAt(i2)];
  return c2 == null ? -1 : c2;
}
function bnpCopyTo(r2) {
  for (var i2 = this.t - 1; i2 >= 0; --i2)
    r2[i2] = this[i2];
  r2.t = this.t;
  r2.s = this.s;
}
function bnpFromInt(x2) {
  this.t = 1;
  this.s = x2 < 0 ? -1 : 0;
  if (x2 > 0)
    this[0] = x2;
  else if (x2 < -1)
    this[0] = x2 + this.DV;
  else
    this.t = 0;
}
function nbv(i2) {
  var r2 = nbi();
  r2.fromInt(i2);
  return r2;
}
function bnpFromString(s2, b2) {
  var k2;
  if (b2 == 16)
    k2 = 4;
  else if (b2 == 8)
    k2 = 3;
  else if (b2 == 2)
    k2 = 1;
  else if (b2 == 32)
    k2 = 5;
  else if (b2 == 4)
    k2 = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  this.t = 0;
  this.s = 0;
  var i2 = s2.length, mi = false, sh = 0;
  while (--i2 >= 0) {
    var x2 = intAt(s2, i2);
    if (x2 < 0) {
      if (s2.charAt(i2) == "-")
        mi = true;
      continue;
    }
    mi = false;
    if (sh == 0)
      this[this.t++] = x2;
    else if (sh + k2 > this.DB) {
      this[this.t - 1] |= (x2 & (1 << this.DB - sh) - 1) << sh;
      this[this.t++] = x2 >> this.DB - sh;
    } else
      this[this.t - 1] |= x2 << sh;
    sh += k2;
    if (sh >= this.DB)
      sh -= this.DB;
  }
  this.clamp();
  if (mi)
    BigInteger.ZERO.subTo(this, this);
}
function bnpClamp() {
  var c2 = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c2)
    --this.t;
}
function bnToString(b2) {
  if (this.s < 0)
    return "-" + this.negate().toString(b2);
  var k2;
  if (b2 == 16)
    k2 = 4;
  else if (b2 == 8)
    k2 = 3;
  else if (b2 == 2)
    k2 = 1;
  else if (b2 == 32)
    k2 = 5;
  else if (b2 == 4)
    k2 = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  var km = (1 << k2) - 1, d2, m2 = false, r2 = "", i2 = this.t;
  var p2 = this.DB - i2 * this.DB % k2;
  if (i2-- > 0) {
    if (p2 < this.DB && (d2 = this[i2] >> p2) > 0) {
      m2 = true;
      r2 = int2char(d2);
    }
    while (i2 >= 0) {
      if (p2 < k2) {
        d2 = (this[i2] & (1 << p2) - 1) << k2 - p2;
        d2 |= this[--i2] >> (p2 += this.DB - k2);
      } else {
        d2 = this[i2] >> (p2 -= k2) & km;
        if (p2 <= 0) {
          p2 += this.DB;
          --i2;
        }
      }
      if (d2 > 0)
        m2 = true;
      if (m2)
        r2 += int2char(d2);
    }
  }
  return m2 ? r2 : "0";
}
function bnNegate() {
  var r2 = nbi();
  BigInteger.ZERO.subTo(this, r2);
  return r2;
}
function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}
function bnCompareTo(a2) {
  var r2 = this.s - a2.s;
  if (r2 != 0)
    return r2;
  var i2 = this.t;
  r2 = i2 - a2.t;
  if (r2 != 0)
    return this.s < 0 ? -r2 : r2;
  while (--i2 >= 0)
    if ((r2 = this[i2] - a2[i2]) != 0)
      return r2;
  return 0;
}
function nbits(x2) {
  var r2 = 1, t2;
  if ((t2 = x2 >>> 16) != 0) {
    x2 = t2;
    r2 += 16;
  }
  if ((t2 = x2 >> 8) != 0) {
    x2 = t2;
    r2 += 8;
  }
  if ((t2 = x2 >> 4) != 0) {
    x2 = t2;
    r2 += 4;
  }
  if ((t2 = x2 >> 2) != 0) {
    x2 = t2;
    r2 += 2;
  }
  if ((t2 = x2 >> 1) != 0) {
    x2 = t2;
    r2 += 1;
  }
  return r2;
}
function bnBitLength() {
  if (this.t <= 0)
    return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
function bnpDLShiftTo(n2, r2) {
  var i2;
  for (i2 = this.t - 1; i2 >= 0; --i2)
    r2[i2 + n2] = this[i2];
  for (i2 = n2 - 1; i2 >= 0; --i2)
    r2[i2] = 0;
  r2.t = this.t + n2;
  r2.s = this.s;
}
function bnpDRShiftTo(n2, r2) {
  for (var i2 = n2; i2 < this.t; ++i2)
    r2[i2 - n2] = this[i2];
  r2.t = Math.max(this.t - n2, 0);
  r2.s = this.s;
}
function bnpLShiftTo(n2, r2) {
  var bs = n2 % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n2 / this.DB), c2 = this.s << bs & this.DM, i2;
  for (i2 = this.t - 1; i2 >= 0; --i2) {
    r2[i2 + ds + 1] = this[i2] >> cbs | c2;
    c2 = (this[i2] & bm) << bs;
  }
  for (i2 = ds - 1; i2 >= 0; --i2)
    r2[i2] = 0;
  r2[ds] = c2;
  r2.t = this.t + ds + 1;
  r2.s = this.s;
  r2.clamp();
}
function bnpRShiftTo(n2, r2) {
  r2.s = this.s;
  var ds = Math.floor(n2 / this.DB);
  if (ds >= this.t) {
    r2.t = 0;
    return;
  }
  var bs = n2 % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r2[0] = this[ds] >> bs;
  for (var i2 = ds + 1; i2 < this.t; ++i2) {
    r2[i2 - ds - 1] |= (this[i2] & bm) << cbs;
    r2[i2 - ds] = this[i2] >> bs;
  }
  if (bs > 0)
    r2[this.t - ds - 1] |= (this.s & bm) << cbs;
  r2.t = this.t - ds;
  r2.clamp();
}
function bnpSubTo(a2, r2) {
  var i2 = 0, c2 = 0, m2 = Math.min(a2.t, this.t);
  while (i2 < m2) {
    c2 += this[i2] - a2[i2];
    r2[i2++] = c2 & this.DM;
    c2 >>= this.DB;
  }
  if (a2.t < this.t) {
    c2 -= a2.s;
    while (i2 < this.t) {
      c2 += this[i2];
      r2[i2++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 += this.s;
  } else {
    c2 += this.s;
    while (i2 < a2.t) {
      c2 -= a2[i2];
      r2[i2++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 -= a2.s;
  }
  r2.s = c2 < 0 ? -1 : 0;
  if (c2 < -1)
    r2[i2++] = this.DV + c2;
  else if (c2 > 0)
    r2[i2++] = c2;
  r2.t = i2;
  r2.clamp();
}
function bnpMultiplyTo(a2, r2) {
  var x2 = this.abs(), y2 = a2.abs();
  var i2 = x2.t;
  r2.t = i2 + y2.t;
  while (--i2 >= 0)
    r2[i2] = 0;
  for (i2 = 0; i2 < y2.t; ++i2)
    r2[i2 + x2.t] = x2.am(0, y2[i2], r2, i2, 0, x2.t);
  r2.s = 0;
  r2.clamp();
  if (this.s != a2.s)
    BigInteger.ZERO.subTo(r2, r2);
}
function bnpSquareTo(r2) {
  var x2 = this.abs();
  var i2 = r2.t = 2 * x2.t;
  while (--i2 >= 0)
    r2[i2] = 0;
  for (i2 = 0; i2 < x2.t - 1; ++i2) {
    var c2 = x2.am(i2, x2[i2], r2, 2 * i2, 0, 1);
    if ((r2[i2 + x2.t] += x2.am(i2 + 1, 2 * x2[i2], r2, 2 * i2 + 1, c2, x2.t - i2 - 1)) >= x2.DV) {
      r2[i2 + x2.t] -= x2.DV;
      r2[i2 + x2.t + 1] = 1;
    }
  }
  if (r2.t > 0)
    r2[r2.t - 1] += x2.am(i2, x2[i2], r2, 2 * i2, 0, 1);
  r2.s = 0;
  r2.clamp();
}
function bnpDivRemTo(m2, q2, r2) {
  var pm = m2.abs();
  if (pm.t <= 0)
    return;
  var pt = this.abs();
  if (pt.t < pm.t) {
    if (q2 != null)
      q2.fromInt(0);
    if (r2 != null)
      this.copyTo(r2);
    return;
  }
  if (r2 == null)
    r2 = nbi();
  var y2 = nbi(), ts = this.s, ms = m2.s;
  var nsh = this.DB - nbits(pm[pm.t - 1]);
  if (nsh > 0) {
    pm.lShiftTo(nsh, y2);
    pt.lShiftTo(nsh, r2);
  } else {
    pm.copyTo(y2);
    pt.copyTo(r2);
  }
  var ys = y2.t;
  var y0 = y2[ys - 1];
  if (y0 == 0)
    return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y2[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
  var i2 = r2.t, j2 = i2 - ys, t2 = q2 == null ? nbi() : q2;
  y2.dlShiftTo(j2, t2);
  if (r2.compareTo(t2) >= 0) {
    r2[r2.t++] = 1;
    r2.subTo(t2, r2);
  }
  BigInteger.ONE.dlShiftTo(ys, t2);
  t2.subTo(y2, y2);
  while (y2.t < ys)
    y2[y2.t++] = 0;
  while (--j2 >= 0) {
    var qd = r2[--i2] == y0 ? this.DM : Math.floor(r2[i2] * d1 + (r2[i2 - 1] + e) * d2);
    if ((r2[i2] += y2.am(0, qd, r2, j2, 0, ys)) < qd) {
      y2.dlShiftTo(j2, t2);
      r2.subTo(t2, r2);
      while (r2[i2] < --qd)
        r2.subTo(t2, r2);
    }
  }
  if (q2 != null) {
    r2.drShiftTo(ys, q2);
    if (ts != ms)
      BigInteger.ZERO.subTo(q2, q2);
  }
  r2.t = ys;
  r2.clamp();
  if (nsh > 0)
    r2.rShiftTo(nsh, r2);
  if (ts < 0)
    BigInteger.ZERO.subTo(r2, r2);
}
function bnMod(a2) {
  var r2 = nbi();
  this.abs().divRemTo(a2, null, r2);
  if (this.s < 0 && r2.compareTo(BigInteger.ZERO) > 0)
    a2.subTo(r2, r2);
  return r2;
}
function bnpInvDigit() {
  if (this.t < 1)
    return 0;
  var x2 = this[0];
  if ((x2 & 1) == 0)
    return 0;
  var y2 = x2 & 3;
  y2 = y2 * (2 - (x2 & 15) * y2) & 15;
  y2 = y2 * (2 - (x2 & 255) * y2) & 255;
  y2 = y2 * (2 - ((x2 & 65535) * y2 & 65535)) & 65535;
  y2 = y2 * (2 - x2 * y2 % this.DV) % this.DV;
  return y2 > 0 ? this.DV - y2 : -y2;
}
function bnEquals(a2) {
  return this.compareTo(a2) == 0;
}
function bnpAddTo(a2, r2) {
  var i2 = 0, c2 = 0, m2 = Math.min(a2.t, this.t);
  while (i2 < m2) {
    c2 += this[i2] + a2[i2];
    r2[i2++] = c2 & this.DM;
    c2 >>= this.DB;
  }
  if (a2.t < this.t) {
    c2 += a2.s;
    while (i2 < this.t) {
      c2 += this[i2];
      r2[i2++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 += this.s;
  } else {
    c2 += this.s;
    while (i2 < a2.t) {
      c2 += a2[i2];
      r2[i2++] = c2 & this.DM;
      c2 >>= this.DB;
    }
    c2 += a2.s;
  }
  r2.s = c2 < 0 ? -1 : 0;
  if (c2 > 0)
    r2[i2++] = c2;
  else if (c2 < -1)
    r2[i2++] = this.DV + c2;
  r2.t = i2;
  r2.clamp();
}
function bnAdd(a2) {
  var r2 = nbi();
  this.addTo(a2, r2);
  return r2;
}
function bnSubtract(a2) {
  var r2 = nbi();
  this.subTo(a2, r2);
  return r2;
}
function bnMultiply(a2) {
  var r2 = nbi();
  this.multiplyTo(a2, r2);
  return r2;
}
function bnDivide(a2) {
  var r2 = nbi();
  this.divRemTo(a2, r2, null);
  return r2;
}
function Montgomery(m2) {
  this.m = m2;
  this.mp = m2.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m2.DB - 15) - 1;
  this.mt2 = 2 * m2.t;
}
function montConvert(x2) {
  var r2 = nbi();
  x2.abs().dlShiftTo(this.m.t, r2);
  r2.divRemTo(this.m, null, r2);
  if (x2.s < 0 && r2.compareTo(BigInteger.ZERO) > 0)
    this.m.subTo(r2, r2);
  return r2;
}
function montRevert(x2) {
  var r2 = nbi();
  x2.copyTo(r2);
  this.reduce(r2);
  return r2;
}
function montReduce(x2) {
  while (x2.t <= this.mt2)
    x2[x2.t++] = 0;
  for (var i2 = 0; i2 < this.m.t; ++i2) {
    var j2 = x2[i2] & 32767;
    var u0 = j2 * this.mpl + ((j2 * this.mph + (x2[i2] >> 15) * this.mpl & this.um) << 15) & x2.DM;
    j2 = i2 + this.m.t;
    x2[j2] += this.m.am(0, u0, x2, i2, 0, this.m.t);
    while (x2[j2] >= x2.DV) {
      x2[j2] -= x2.DV;
      x2[++j2]++;
    }
  }
  x2.clamp();
  x2.drShiftTo(this.m.t, x2);
  if (x2.compareTo(this.m) >= 0)
    x2.subTo(this.m, x2);
}
function montSqrTo(x2, r2) {
  x2.squareTo(r2);
  this.reduce(r2);
}
function montMulTo(x2, y2, r2) {
  x2.multiplyTo(y2, r2);
  this.reduce(r2);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
function bnModPow(e, m2, callback) {
  var i2 = e.bitLength(), k2, r2 = nbv(1), z2 = new Montgomery(m2);
  if (i2 <= 0)
    return r2;
  else if (i2 < 18)
    k2 = 1;
  else if (i2 < 48)
    k2 = 3;
  else if (i2 < 144)
    k2 = 4;
  else if (i2 < 768)
    k2 = 5;
  else
    k2 = 6;
  var g2 = new Array(), n2 = 3, k1 = k2 - 1, km = (1 << k2) - 1;
  g2[1] = z2.convert(this);
  if (k2 > 1) {
    var g22 = nbi();
    z2.sqrTo(g2[1], g22);
    while (n2 <= km) {
      g2[n2] = nbi();
      z2.mulTo(g22, g2[n2 - 2], g2[n2]);
      n2 += 2;
    }
  }
  var j2 = e.t - 1, w2, is1 = true, r22 = nbi(), t2;
  i2 = nbits(e[j2]) - 1;
  while (j2 >= 0) {
    if (i2 >= k1)
      w2 = e[j2] >> i2 - k1 & km;
    else {
      w2 = (e[j2] & (1 << i2 + 1) - 1) << k1 - i2;
      if (j2 > 0)
        w2 |= e[j2 - 1] >> this.DB + i2 - k1;
    }
    n2 = k2;
    while ((w2 & 1) == 0) {
      w2 >>= 1;
      --n2;
    }
    if ((i2 -= n2) < 0) {
      i2 += this.DB;
      --j2;
    }
    if (is1) {
      g2[w2].copyTo(r2);
      is1 = false;
    } else {
      while (n2 > 1) {
        z2.sqrTo(r2, r22);
        z2.sqrTo(r22, r2);
        n2 -= 2;
      }
      if (n2 > 0)
        z2.sqrTo(r2, r22);
      else {
        t2 = r2;
        r2 = r22;
        r22 = t2;
      }
      z2.mulTo(r22, g2[w2], r2);
    }
    while (j2 >= 0 && (e[j2] & 1 << i2) == 0) {
      z2.sqrTo(r2, r22);
      t2 = r2;
      r2 = r22;
      r22 = t2;
      if (--i2 < 0) {
        i2 = this.DB - 1;
        --j2;
      }
    }
  }
  var result = z2.revert(r2);
  callback(null, result);
  return result;
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
function randomBytes(nBytes) {
  return import_buffer.Buffer.from(new WordArray().random(nBytes).toString(), "hex");
}
var HEX_MSB_REGEX = /^[89a-f]/i;
var initN = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
var newPasswordRequiredChallengeUserAttributePrefix = "userAttributes.";
var AuthenticationHelper = function() {
  function AuthenticationHelper2(PoolName) {
    this.N = new BigInteger_default(initN, 16);
    this.g = new BigInteger_default("2", 16);
    this.k = new BigInteger_default(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
    this.smallAValue = this.generateRandomSmallA();
    this.getLargeAValue(function() {
    });
    this.infoBits = import_buffer.Buffer.from("Caldera Derived Key", "utf8");
    this.poolName = PoolName;
  }
  var _proto = AuthenticationHelper2.prototype;
  _proto.getSmallAValue = function getSmallAValue() {
    return this.smallAValue;
  };
  _proto.getLargeAValue = function getLargeAValue(callback) {
    var _this = this;
    if (this.largeAValue) {
      callback(null, this.largeAValue);
    } else {
      this.calculateA(this.smallAValue, function(err, largeAValue) {
        if (err) {
          callback(err, null);
        }
        _this.largeAValue = largeAValue;
        callback(null, _this.largeAValue);
      });
    }
  };
  _proto.generateRandomSmallA = function generateRandomSmallA() {
    var hexRandom = randomBytes(128).toString("hex");
    var randomBigInt = new BigInteger_default(hexRandom, 16);
    return randomBigInt;
  };
  _proto.generateRandomString = function generateRandomString2() {
    return randomBytes(40).toString("base64");
  };
  _proto.getRandomPassword = function getRandomPassword() {
    return this.randomPassword;
  };
  _proto.getSaltDevices = function getSaltDevices() {
    return this.SaltToHashDevices;
  };
  _proto.getVerifierDevices = function getVerifierDevices() {
    return this.verifierDevices;
  };
  _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
    var _this2 = this;
    this.randomPassword = this.generateRandomString();
    var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
    var hashedString = this.hash(combinedString);
    var hexRandom = randomBytes(16).toString("hex");
    this.SaltToHashDevices = this.padHex(new BigInteger_default(hexRandom, 16));
    this.g.modPow(new BigInteger_default(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function(err, verifierDevicesNotPadded) {
      if (err) {
        callback(err, null);
      }
      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
      callback(null, null);
    });
  };
  _proto.calculateA = function calculateA(a2, callback) {
    var _this3 = this;
    this.g.modPow(a2, this.N, function(err, A2) {
      if (err) {
        callback(err, null);
      }
      if (A2.mod(_this3.N).equals(BigInteger_default.ZERO)) {
        callback(new Error("Illegal paramater. A mod N cannot be 0."), null);
      }
      callback(null, A2);
    });
  };
  _proto.calculateU = function calculateU(A2, B2) {
    this.UHexHash = this.hexHash(this.padHex(A2) + this.padHex(B2));
    var finalU = new BigInteger_default(this.UHexHash, 16);
    return finalU;
  };
  _proto.hash = function hash2(buf) {
    var awsCryptoHash = new import_sha256_js2.Sha256();
    awsCryptoHash.update(buf);
    var resultFromAWSCrypto = awsCryptoHash.digestSync();
    var hashHex = import_buffer.Buffer.from(resultFromAWSCrypto).toString("hex");
    return new Array(64 - hashHex.length).join("0") + hashHex;
  };
  _proto.hexHash = function hexHash(hexStr) {
    return this.hash(import_buffer.Buffer.from(hexStr, "hex"));
  };
  _proto.computehkdf = function computehkdf(ikm, salt) {
    var infoBitsBuffer = import_buffer.Buffer.concat([this.infoBits, import_buffer.Buffer.from(String.fromCharCode(1), "utf8")]);
    var awsCryptoHash = new import_sha256_js2.Sha256(salt);
    awsCryptoHash.update(ikm);
    var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
    var awsCryptoHashHmac = new import_sha256_js2.Sha256(resultFromAWSCryptoPrk);
    awsCryptoHashHmac.update(infoBitsBuffer);
    var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
    var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
    var currentHex = hashHexFromAWSCrypto.slice(0, 16);
    return currentHex;
  };
  _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
    var _this4 = this;
    if (serverBValue.mod(this.N).equals(BigInteger_default.ZERO)) {
      throw new Error("B cannot be zero.");
    }
    this.UValue = this.calculateU(this.largeAValue, serverBValue);
    if (this.UValue.equals(BigInteger_default.ZERO)) {
      throw new Error("U cannot be zero.");
    }
    var usernamePassword = "" + this.poolName + username + ":" + password;
    var usernamePasswordHash = this.hash(usernamePassword);
    var xValue = new BigInteger_default(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
    this.calculateS(xValue, serverBValue, function(err, sValue) {
      if (err) {
        callback(err, null);
      }
      var hkdf = _this4.computehkdf(import_buffer.Buffer.from(_this4.padHex(sValue), "hex"), import_buffer.Buffer.from(_this4.padHex(_this4.UValue), "hex"));
      callback(null, hkdf);
    });
  };
  _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
    var _this5 = this;
    this.g.modPow(xValue, this.N, function(err, gModPowXN) {
      if (err) {
        callback(err, null);
      }
      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function(err2, result) {
        if (err2) {
          callback(err2, null);
        }
        callback(null, result.mod(_this5.N));
      });
    });
  };
  _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
    return newPasswordRequiredChallengeUserAttributePrefix;
  };
  _proto.padHex = function padHex(bigInt) {
    if (!(bigInt instanceof BigInteger_default)) {
      throw new Error("Not a BigInteger");
    }
    var isNegative = bigInt.compareTo(BigInteger_default.ZERO) < 0;
    var hexStr = bigInt.abs().toString(16);
    hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
    hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
    if (isNegative) {
      var invertedNibbles = hexStr.split("").map(function(x2) {
        var invertedNibble = ~parseInt(x2, 16) & 15;
        return "0123456789ABCDEF".charAt(invertedNibble);
      }).join("");
      var flippedBitsBI = new BigInteger_default(invertedNibbles, 16).add(BigInteger_default.ONE);
      hexStr = flippedBitsBI.toString(16);
      if (hexStr.toUpperCase().startsWith("FF8")) {
        hexStr = hexStr.substring(2);
      }
    }
    return hexStr;
  };
  return AuthenticationHelper2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js
var import_buffer2 = __toESM(require_buffer());
var CognitoJwtToken = function() {
  function CognitoJwtToken2(token) {
    this.jwtToken = token || "";
    this.payload = this.decodePayload();
  }
  var _proto = CognitoJwtToken2.prototype;
  _proto.getJwtToken = function getJwtToken() {
    return this.jwtToken;
  };
  _proto.getExpiration = function getExpiration() {
    return this.payload.exp;
  };
  _proto.getIssuedAt = function getIssuedAt() {
    return this.payload.iat;
  };
  _proto.decodePayload = function decodePayload() {
    var payload = this.jwtToken.split(".")[1];
    try {
      return JSON.parse(import_buffer2.Buffer.from(payload, "base64").toString("utf8"));
    } catch (err) {
      return {};
    }
  };
  return CognitoJwtToken2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf5(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
var CognitoAccessToken = function(_CognitoJwtToken) {
  _inheritsLoose(CognitoAccessToken2, _CognitoJwtToken);
  function CognitoAccessToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, AccessToken = _ref.AccessToken;
    return _CognitoJwtToken.call(this, AccessToken || "") || this;
  }
  return CognitoAccessToken2;
}(CognitoJwtToken);

// node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o2, p2) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf5(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf2(o2, p2);
}
var CognitoIdToken = function(_CognitoJwtToken) {
  _inheritsLoose2(CognitoIdToken2, _CognitoJwtToken);
  function CognitoIdToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken;
    return _CognitoJwtToken.call(this, IdToken || "") || this;
  }
  return CognitoIdToken2;
}(CognitoJwtToken);

// node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js
var CognitoRefreshToken = function() {
  function CognitoRefreshToken2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, RefreshToken = _ref.RefreshToken;
    this.token = RefreshToken || "";
  }
  var _proto = CognitoRefreshToken2.prototype;
  _proto.getToken = function getToken() {
    return this.token;
  };
  return CognitoRefreshToken2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoUser.js
var import_buffer3 = __toESM(require_buffer());
var import_sha256_js3 = __toESM(require_build2());

// node_modules/amazon-cognito-identity-js/es/Platform/version.js
var version2 = "5.0.4";

// node_modules/amazon-cognito-identity-js/es/Platform/index.js
var BASE_USER_AGENT2 = "aws-amplify/" + version2;
var Platform2 = {
  userAgent: BASE_USER_AGENT2 + " js",
  product: "",
  navigator: null,
  isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
  Platform2.product = navigator.product || "";
  Platform2.navigator = navigator || null;
  switch (navigator.product) {
    case "ReactNative":
      Platform2.userAgent = BASE_USER_AGENT2 + " react-native";
      Platform2.isReactNative = true;
      break;
    default:
      Platform2.userAgent = BASE_USER_AGENT2 + " js";
      Platform2.isReactNative = false;
      break;
  }
}
var getUserAgent = function getUserAgent2() {
  return Platform2.userAgent;
};

// node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js
var CognitoUserSession = function() {
  function CognitoUserSession2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken, RefreshToken = _ref.RefreshToken, AccessToken = _ref.AccessToken, ClockDrift = _ref.ClockDrift;
    if (AccessToken == null || IdToken == null) {
      throw new Error("Id token and Access Token must be present.");
    }
    this.idToken = IdToken;
    this.refreshToken = RefreshToken;
    this.accessToken = AccessToken;
    this.clockDrift = ClockDrift === void 0 ? this.calculateClockDrift() : ClockDrift;
  }
  var _proto = CognitoUserSession2.prototype;
  _proto.getIdToken = function getIdToken() {
    return this.idToken;
  };
  _proto.getRefreshToken = function getRefreshToken() {
    return this.refreshToken;
  };
  _proto.getAccessToken = function getAccessToken() {
    return this.accessToken;
  };
  _proto.getClockDrift = function getClockDrift() {
    return this.clockDrift;
  };
  _proto.calculateClockDrift = function calculateClockDrift() {
    var now = Math.floor(/* @__PURE__ */ new Date() / 1e3);
    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
    return now - iat;
  };
  _proto.isValid = function isValid2() {
    var now = Math.floor(/* @__PURE__ */ new Date() / 1e3);
    var adjusted = now - this.clockDrift;
    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
  };
  return CognitoUserSession2;
}();

// node_modules/amazon-cognito-identity-js/es/DateHelper.js
var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var weekNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var DateHelper = function() {
  function DateHelper2() {
  }
  var _proto = DateHelper2.prototype;
  _proto.getNowString = function getNowString() {
    var now = /* @__PURE__ */ new Date();
    var weekDay = weekNames[now.getUTCDay()];
    var month = monthNames[now.getUTCMonth()];
    var day = now.getUTCDate();
    var hours = now.getUTCHours();
    if (hours < 10) {
      hours = "0" + hours;
    }
    var minutes = now.getUTCMinutes();
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    var seconds = now.getUTCSeconds();
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    var year = now.getUTCFullYear();
    var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
    return dateNow;
  };
  return DateHelper2;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js
var CognitoUserAttribute = function() {
  function CognitoUserAttribute2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, Name2 = _ref.Name, Value = _ref.Value;
    this.Name = Name2 || "";
    this.Value = Value || "";
  }
  var _proto = CognitoUserAttribute2.prototype;
  _proto.getValue = function getValue() {
    return this.Value;
  };
  _proto.setValue = function setValue(value) {
    this.Value = value;
    return this;
  };
  _proto.getName = function getName() {
    return this.Name;
  };
  _proto.setName = function setName(name) {
    this.Name = name;
    return this;
  };
  _proto.toString = function toString3() {
    return JSON.stringify(this);
  };
  _proto.toJSON = function toJSON3() {
    return {
      Name: this.Name,
      Value: this.Value
    };
  };
  return CognitoUserAttribute2;
}();

// node_modules/amazon-cognito-identity-js/es/StorageHelper.js
var dataMemory2 = {};
var MemoryStorage2 = function() {
  function MemoryStorage3() {
  }
  MemoryStorage3.setItem = function setItem(key, value) {
    dataMemory2[key] = value;
    return dataMemory2[key];
  };
  MemoryStorage3.getItem = function getItem(key) {
    return Object.prototype.hasOwnProperty.call(dataMemory2, key) ? dataMemory2[key] : void 0;
  };
  MemoryStorage3.removeItem = function removeItem(key) {
    return delete dataMemory2[key];
  };
  MemoryStorage3.clear = function clear() {
    dataMemory2 = {};
    return dataMemory2;
  };
  return MemoryStorage3;
}();
var StorageHelper2 = function() {
  function StorageHelper3() {
    try {
      this.storageWindow = window.localStorage;
      this.storageWindow.setItem("aws.cognito.test-ls", 1);
      this.storageWindow.removeItem("aws.cognito.test-ls");
    } catch (exception) {
      this.storageWindow = MemoryStorage2;
    }
  }
  var _proto = StorageHelper3.prototype;
  _proto.getStorage = function getStorage() {
    return this.storageWindow;
  };
  return StorageHelper3;
}();

// node_modules/amazon-cognito-identity-js/es/CognitoUser.js
var isNavigatorAvailable = typeof navigator !== "undefined";
var userAgent = isNavigatorAvailable ? Platform2.isReactNative ? "react-native" : navigator.userAgent : "nodejs";
var CognitoUser = function() {
  function CognitoUser2(data) {
    if (data == null || data.Username == null || data.Pool == null) {
      throw new Error("Username and Pool information are required.");
    }
    this.username = data.Username || "";
    this.pool = data.Pool;
    this.Session = null;
    this.client = data.Pool.client;
    this.signInUserSession = null;
    this.authenticationFlowType = "USER_SRP_AUTH";
    this.storage = data.Storage || new StorageHelper2().getStorage();
    this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
  }
  var _proto = CognitoUser2.prototype;
  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
    this.clearCachedUserData();
    this.signInUserSession = signInUserSession;
    this.cacheTokens();
  };
  _proto.getSignInUserSession = function getSignInUserSession() {
    return this.signInUserSession;
  };
  _proto.getUsername = function getUsername() {
    return this.username;
  };
  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
    return this.authenticationFlowType;
  };
  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
    this.authenticationFlowType = authenticationFlowType;
  };
  _proto.initiateAuth = function initiateAuth(authDetails, callback) {
    var _this = this;
    var authParameters = authDetails.getAuthParameters();
    authParameters.USERNAME = this.username;
    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
    var jsonReq = {
      AuthFlow: "CUSTOM_AUTH",
      ClientId: this.pool.getClientId(),
      AuthParameters: authParameters,
      ClientMetadata: clientMetaData
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("InitiateAuth", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      var challengeName = data.ChallengeName;
      var challengeParameters = data.ChallengeParameters;
      if (challengeName === "CUSTOM_CHALLENGE") {
        _this.Session = data.Session;
        return callback.customChallenge(challengeParameters);
      }
      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
      _this.cacheTokens();
      return callback.onSuccess(_this.signInUserSession);
    });
  };
  _proto.authenticateUser = function authenticateUser(authDetails, callback) {
    if (this.authenticationFlowType === "USER_PASSWORD_AUTH") {
      return this.authenticateUserPlainUsernamePassword(authDetails, callback);
    } else if (this.authenticationFlowType === "USER_SRP_AUTH" || this.authenticationFlowType === "CUSTOM_AUTH") {
      return this.authenticateUserDefaultAuth(authDetails, callback);
    }
    return callback.onFailure(new Error("Authentication flow type is invalid."));
  };
  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
    var _this2 = this;
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    var dateHelper = new DateHelper();
    var serverBValue;
    var salt;
    var authParameters = {};
    if (this.deviceKey != null) {
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    authParameters.USERNAME = this.username;
    authenticationHelper.getLargeAValue(function(errOnAValue, aValue) {
      if (errOnAValue) {
        callback.onFailure(errOnAValue);
      }
      authParameters.SRP_A = aValue.toString(16);
      if (_this2.authenticationFlowType === "CUSTOM_AUTH") {
        authParameters.CHALLENGE_NAME = "SRP_A";
      }
      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
      var jsonReq = {
        AuthFlow: _this2.authenticationFlowType,
        ClientId: _this2.pool.getClientId(),
        AuthParameters: authParameters,
        ClientMetadata: clientMetaData
      };
      if (_this2.getUserContextData(_this2.username)) {
        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
      }
      _this2.client.request("InitiateAuth", jsonReq, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        var challengeParameters = data.ChallengeParameters;
        _this2.username = challengeParameters.USER_ID_FOR_SRP;
        _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
        serverBValue = new BigInteger_default(challengeParameters.SRP_B, 16);
        salt = new BigInteger_default(challengeParameters.SALT, 16);
        _this2.getCachedDeviceKeyAndPassword();
        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function(errOnHkdf, hkdf) {
          if (errOnHkdf) {
            callback.onFailure(errOnHkdf);
          }
          var dateNow = dateHelper.getNowString();
          var concatBuffer = import_buffer3.Buffer.concat([import_buffer3.Buffer.from(_this2.pool.getUserPoolName(), "utf8"), import_buffer3.Buffer.from(_this2.username, "utf8"), import_buffer3.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"), import_buffer3.Buffer.from(dateNow, "utf8")]);
          var awsCryptoHash = new import_sha256_js3.Sha256(hkdf);
          awsCryptoHash.update(concatBuffer);
          var resultFromAWSCrypto = awsCryptoHash.digestSync();
          var signatureString = import_buffer3.Buffer.from(resultFromAWSCrypto).toString("base64");
          var challengeResponses = {};
          challengeResponses.USERNAME = _this2.username;
          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
          challengeResponses.TIMESTAMP = dateNow;
          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
          if (_this2.deviceKey != null) {
            challengeResponses.DEVICE_KEY = _this2.deviceKey;
          }
          var respondToAuthChallenge = function respondToAuthChallenge2(challenge, challengeCallback) {
            return _this2.client.request("RespondToAuthChallenge", challenge, function(errChallenge, dataChallenge) {
              if (errChallenge && errChallenge.code === "ResourceNotFoundException" && errChallenge.message.toLowerCase().indexOf("device") !== -1) {
                challengeResponses.DEVICE_KEY = null;
                _this2.deviceKey = null;
                _this2.randomPassword = null;
                _this2.deviceGroupKey = null;
                _this2.clearCachedDeviceKeyAndPassword();
                return respondToAuthChallenge2(challenge, challengeCallback);
              }
              return challengeCallback(errChallenge, dataChallenge);
            });
          };
          var jsonReqResp = {
            ChallengeName: "PASSWORD_VERIFIER",
            ClientId: _this2.pool.getClientId(),
            ChallengeResponses: challengeResponses,
            Session: data.Session,
            ClientMetadata: clientMetaData
          };
          if (_this2.getUserContextData()) {
            jsonReqResp.UserContextData = _this2.getUserContextData();
          }
          respondToAuthChallenge(jsonReqResp, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) {
              return callback.onFailure(errAuthenticate);
            }
            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
          });
          return void 0;
        });
        return void 0;
      });
    });
  };
  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
    var _this3 = this;
    var authParameters = {};
    authParameters.USERNAME = this.username;
    authParameters.PASSWORD = authDetails.getPassword();
    if (!authParameters.PASSWORD) {
      callback.onFailure(new Error("PASSWORD parameter is required"));
      return;
    }
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    this.getCachedDeviceKeyAndPassword();
    if (this.deviceKey != null) {
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
    var jsonReq = {
      AuthFlow: "USER_PASSWORD_AUTH",
      ClientId: this.pool.getClientId(),
      AuthParameters: authParameters,
      ClientMetadata: clientMetaData
    };
    if (this.getUserContextData(this.username)) {
      jsonReq.UserContextData = this.getUserContextData(this.username);
    }
    this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
      if (err) {
        return callback.onFailure(err);
      }
      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
    });
  };
  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
    var _this4 = this;
    var challengeName = dataAuthenticate.ChallengeName;
    var challengeParameters = dataAuthenticate.ChallengeParameters;
    if (challengeName === "SMS_MFA") {
      this.Session = dataAuthenticate.Session;
      return callback.mfaRequired(challengeName, challengeParameters);
    }
    if (challengeName === "SELECT_MFA_TYPE") {
      this.Session = dataAuthenticate.Session;
      return callback.selectMFAType(challengeName, challengeParameters);
    }
    if (challengeName === "MFA_SETUP") {
      this.Session = dataAuthenticate.Session;
      return callback.mfaSetup(challengeName, challengeParameters);
    }
    if (challengeName === "SOFTWARE_TOKEN_MFA") {
      this.Session = dataAuthenticate.Session;
      return callback.totpRequired(challengeName, challengeParameters);
    }
    if (challengeName === "CUSTOM_CHALLENGE") {
      this.Session = dataAuthenticate.Session;
      return callback.customChallenge(challengeParameters);
    }
    if (challengeName === "NEW_PASSWORD_REQUIRED") {
      this.Session = dataAuthenticate.Session;
      var userAttributes = null;
      var rawRequiredAttributes = null;
      var requiredAttributes = [];
      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
      if (challengeParameters) {
        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
      }
      if (rawRequiredAttributes) {
        for (var i2 = 0; i2 < rawRequiredAttributes.length; i2++) {
          requiredAttributes[i2] = rawRequiredAttributes[i2].substr(userAttributesPrefix.length);
        }
      }
      return callback.newPasswordRequired(userAttributes, requiredAttributes);
    }
    if (challengeName === "DEVICE_SRP_AUTH") {
      this.Session = dataAuthenticate.Session;
      this.getDeviceResponse(callback);
      return void 0;
    }
    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
    this.challengeName = challengeName;
    this.cacheTokens();
    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
    if (newDeviceMetadata == null) {
      return callback.onSuccess(this.signInUserSession);
    }
    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
      if (errGenHash) {
        return callback.onFailure(errGenHash);
      }
      var deviceSecretVerifierConfig = {
        Salt: import_buffer3.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
        PasswordVerifier: import_buffer3.Buffer.from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
      };
      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
      _this4.randomPassword = authenticationHelper.getRandomPassword();
      _this4.client.request("ConfirmDevice", {
        DeviceKey: newDeviceMetadata.DeviceKey,
        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
        DeviceName: userAgent
      }, function(errConfirm, dataConfirm) {
        if (errConfirm) {
          return callback.onFailure(errConfirm);
        }
        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
        _this4.cacheDeviceKeyAndPassword();
        if (dataConfirm.UserConfirmationNecessary === true) {
          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
        }
        return callback.onSuccess(_this4.signInUserSession);
      });
      return void 0;
    });
    return void 0;
  };
  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
    var _this5 = this;
    if (!newPassword) {
      return callback.onFailure(new Error("New password is required."));
    }
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
    var finalUserAttributes = {};
    if (requiredAttributeData) {
      Object.keys(requiredAttributeData).forEach(function(key) {
        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
      });
    }
    finalUserAttributes.NEW_PASSWORD = newPassword;
    finalUserAttributes.USERNAME = this.username;
    var jsonReq = {
      ChallengeName: "NEW_PASSWORD_REQUIRED",
      ClientId: this.pool.getClientId(),
      ChallengeResponses: finalUserAttributes,
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(errAuthenticate, dataAuthenticate) {
      if (errAuthenticate) {
        return callback.onFailure(errAuthenticate);
      }
      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
    });
    return void 0;
  };
  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
    var _this6 = this;
    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);
    var dateHelper = new DateHelper();
    var authParameters = {};
    authParameters.USERNAME = this.username;
    authParameters.DEVICE_KEY = this.deviceKey;
    authenticationHelper.getLargeAValue(function(errAValue, aValue) {
      if (errAValue) {
        callback.onFailure(errAValue);
      }
      authParameters.SRP_A = aValue.toString(16);
      var jsonReq = {
        ChallengeName: "DEVICE_SRP_AUTH",
        ClientId: _this6.pool.getClientId(),
        ChallengeResponses: authParameters,
        ClientMetadata: clientMetadata,
        Session: _this6.Session
      };
      if (_this6.getUserContextData()) {
        jsonReq.UserContextData = _this6.getUserContextData();
      }
      _this6.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        var challengeParameters = data.ChallengeParameters;
        var serverBValue = new BigInteger_default(challengeParameters.SRP_B, 16);
        var salt = new BigInteger_default(challengeParameters.SALT, 16);
        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function(errHkdf, hkdf) {
          if (errHkdf) {
            return callback.onFailure(errHkdf);
          }
          var dateNow = dateHelper.getNowString();
          var concatBuffer = import_buffer3.Buffer.concat([import_buffer3.Buffer.from(_this6.deviceGroupKey, "utf8"), import_buffer3.Buffer.from(_this6.deviceKey, "utf8"), import_buffer3.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"), import_buffer3.Buffer.from(dateNow, "utf8")]);
          var awsCryptoHash = new import_sha256_js3.Sha256(hkdf);
          awsCryptoHash.update(concatBuffer);
          var resultFromAWSCrypto = awsCryptoHash.digestSync();
          var signatureString = import_buffer3.Buffer.from(resultFromAWSCrypto).toString("base64");
          var challengeResponses = {};
          challengeResponses.USERNAME = _this6.username;
          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
          challengeResponses.TIMESTAMP = dateNow;
          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
          challengeResponses.DEVICE_KEY = _this6.deviceKey;
          var jsonReqResp = {
            ChallengeName: "DEVICE_PASSWORD_VERIFIER",
            ClientId: _this6.pool.getClientId(),
            ChallengeResponses: challengeResponses,
            Session: data.Session
          };
          if (_this6.getUserContextData()) {
            jsonReqResp.UserContextData = _this6.getUserContextData();
          }
          _this6.client.request("RespondToAuthChallenge", jsonReqResp, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) {
              return callback.onFailure(errAuthenticate);
            }
            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
            _this6.cacheTokens();
            return callback.onSuccess(_this6.signInUserSession);
          });
          return void 0;
        });
        return void 0;
      });
    });
  };
  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      ConfirmationCode: confirmationCode,
      Username: this.username,
      ForceAliasCreation: forceAliasCreation,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ConfirmSignUp", jsonReq, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
  };
  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
    var _this7 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.ANSWER = answerChallenge;
    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());
    this.getCachedDeviceKeyAndPassword();
    if (this.deviceKey != null) {
      challengeResponses.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ChallengeName: "CUSTOM_CHALLENGE",
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return _this7.authenticateUserInternal(data, authenticationHelper, callback);
    });
  };
  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
    var _this8 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.SMS_MFA_CODE = confirmationCode;
    var mfaTypeSelection = mfaType || "SMS_MFA";
    if (mfaTypeSelection === "SOFTWARE_TOKEN_MFA") {
      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
    }
    if (this.deviceKey != null) {
      challengeResponses.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ChallengeName: mfaTypeSelection,
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, dataAuthenticate) {
      if (err) {
        return callback.onFailure(err);
      }
      var challengeName = dataAuthenticate.ChallengeName;
      if (challengeName === "DEVICE_SRP_AUTH") {
        _this8.getDeviceResponse(callback);
        return void 0;
      }
      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
      _this8.cacheTokens();
      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {
        return callback.onSuccess(_this8.signInUserSession);
      }
      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolName());
      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
        if (errGenHash) {
          return callback.onFailure(errGenHash);
        }
        var deviceSecretVerifierConfig = {
          Salt: import_buffer3.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
          PasswordVerifier: import_buffer3.Buffer.from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
        };
        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
        _this8.randomPassword = authenticationHelper.getRandomPassword();
        _this8.client.request("ConfirmDevice", {
          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
          DeviceName: userAgent
        }, function(errConfirm, dataConfirm) {
          if (errConfirm) {
            return callback.onFailure(errConfirm);
          }
          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
          _this8.cacheDeviceKeyAndPassword();
          if (dataConfirm.UserConfirmationNecessary === true) {
            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
          }
          return callback.onSuccess(_this8.signInUserSession);
        });
        return void 0;
      });
      return void 0;
    });
  };
  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("ChangePassword", {
      PreviousPassword: oldUserPassword,
      ProposedPassword: newUserPassword,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.enableMFA = function enableMFA(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    var mfaOptions = [];
    var mfaEnabled = {
      DeliveryMedium: "SMS",
      AttributeName: "phone_number"
    };
    mfaOptions.push(mfaEnabled);
    this.client.request("SetUserSettings", {
      MFAOptions: mfaOptions,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("SetUserMFAPreference", {
      SMSMfaSettings: smsMfaSettings,
      SoftwareTokenMfaSettings: softwareTokenMfaSettings,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.disableMFA = function disableMFA(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    var mfaOptions = [];
    this.client.request("SetUserSettings", {
      MFAOptions: mfaOptions,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.deleteUser = function deleteUser(callback, clientMetadata) {
    var _this9 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("DeleteUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      _this9.clearCachedUser();
      return callback(null, "SUCCESS");
    });
    return void 0;
  };
  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
    var _this10 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("UpdateUserAttributes", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      UserAttributes: attributes,
      ClientMetadata: clientMetadata
    }, function(err, result) {
      if (err) {
        return callback(err, null);
      }
      return _this10.getUserData(function() {
        return callback(null, "SUCCESS", result);
      }, {
        bypassCache: true
      });
    });
    return void 0;
  };
  _proto.getUserAttributes = function getUserAttributes(callback) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err, userData) {
      if (err) {
        return callback(err, null);
      }
      var attributeList = [];
      for (var i2 = 0; i2 < userData.UserAttributes.length; i2++) {
        var attribute = {
          Name: userData.UserAttributes[i2].Name,
          Value: userData.UserAttributes[i2].Value
        };
        var userAttribute = new CognitoUserAttribute(attribute);
        attributeList.push(userAttribute);
      }
      return callback(null, attributeList);
    });
    return void 0;
  };
  _proto.getMFAOptions = function getMFAOptions(callback) {
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err, userData) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, userData.MFAOptions);
    });
    return void 0;
  };
  _proto.createGetUserRequest = function createGetUserRequest() {
    return this.client.promisifyRequest("GetUser", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    });
  };
  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
    var _this11 = this;
    if (options === void 0) {
      options = {};
    }
    return new Promise(function(resolve4) {
      var refresh = _this11.signInUserSession.getRefreshToken();
      if (refresh && refresh.getToken()) {
        _this11.refreshSession(refresh, resolve4, options.clientMetadata);
      } else {
        resolve4();
      }
    });
  };
  _proto.getUserData = function getUserData(callback, params) {
    var _this12 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.clearCachedUserData();
      return callback(new Error("User is not authenticated"), null);
    }
    var userData = this.getUserDataFromCache();
    if (!userData) {
      this.fetchUserData().then(function(data) {
        callback(null, data);
      })["catch"](callback);
      return;
    }
    if (this.isFetchUserDataAndTokenRequired(params)) {
      this.fetchUserData().then(function(data) {
        return _this12.refreshSessionIfPossible(params).then(function() {
          return data;
        });
      }).then(function(data) {
        return callback(null, data);
      })["catch"](callback);
      return;
    }
    try {
      callback(null, JSON.parse(userData));
      return;
    } catch (err) {
      this.clearCachedUserData();
      callback(err, null);
      return;
    }
  };
  _proto.getUserDataFromCache = function getUserDataFromCache() {
    var userData = this.storage.getItem(this.userDataKey);
    return userData;
  };
  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
    var _ref = params || {}, _ref$bypassCache = _ref.bypassCache, bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
    return bypassCache;
  };
  _proto.fetchUserData = function fetchUserData() {
    var _this13 = this;
    return this.createGetUserRequest().then(function(data) {
      _this13.cacheUserData(data);
      return data;
    });
  };
  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
    var _this14 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      return callback(new Error("User is not authenticated"), null);
    }
    this.client.request("DeleteUserAttributes", {
      UserAttributeNames: attributeList,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback(err, null);
      }
      return _this14.getUserData(function() {
        return callback(null, "SUCCESS");
      }, {
        bypassCache: true
      });
    });
    return void 0;
  };
  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ClientMetadata: clientMetadata
    };
    this.client.request("ResendConfirmationCode", jsonReq, function(err, result) {
      if (err) {
        return callback(err, null);
      }
      return callback(null, result);
    });
  };
  _proto.getSession = function getSession(callback, options) {
    if (options === void 0) {
      options = {};
    }
    if (this.username == null) {
      return callback(new Error("Username is null. Cannot retrieve a new session"), null);
    }
    if (this.signInUserSession != null && this.signInUserSession.isValid()) {
      return callback(null, this.signInUserSession);
    }
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var idTokenKey = keyPrefix + ".idToken";
    var accessTokenKey = keyPrefix + ".accessToken";
    var refreshTokenKey = keyPrefix + ".refreshToken";
    var clockDriftKey = keyPrefix + ".clockDrift";
    if (this.storage.getItem(idTokenKey)) {
      var idToken = new CognitoIdToken({
        IdToken: this.storage.getItem(idTokenKey)
      });
      var accessToken = new CognitoAccessToken({
        AccessToken: this.storage.getItem(accessTokenKey)
      });
      var refreshToken = new CognitoRefreshToken({
        RefreshToken: this.storage.getItem(refreshTokenKey)
      });
      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
      var sessionData = {
        IdToken: idToken,
        AccessToken: accessToken,
        RefreshToken: refreshToken,
        ClockDrift: clockDrift
      };
      var cachedSession = new CognitoUserSession(sessionData);
      if (cachedSession.isValid()) {
        this.signInUserSession = cachedSession;
        return callback(null, this.signInUserSession);
      }
      if (!refreshToken.getToken()) {
        return callback(new Error("Cannot retrieve a new session. Please authenticate."), null);
      }
      this.refreshSession(refreshToken, callback, options.clientMetadata);
    } else {
      callback(new Error("Local storage is missing an ID Token, Please authenticate"), null);
    }
    return void 0;
  };
  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
    var _this15 = this;
    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
    var authParameters = {};
    authParameters.REFRESH_TOKEN = refreshToken.getToken();
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var lastUserKey = keyPrefix + ".LastAuthUser";
    if (this.storage.getItem(lastUserKey)) {
      this.username = this.storage.getItem(lastUserKey);
      var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
      this.deviceKey = this.storage.getItem(deviceKeyKey);
      authParameters.DEVICE_KEY = this.deviceKey;
    }
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      AuthFlow: "REFRESH_TOKEN_AUTH",
      AuthParameters: authParameters,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
      if (err) {
        if (err.code === "NotAuthorizedException") {
          _this15.clearCachedUser();
        }
        return wrappedCallback(err, null);
      }
      if (authResult) {
        var authenticationResult = authResult.AuthenticationResult;
        if (!Object.prototype.hasOwnProperty.call(authenticationResult, "RefreshToken")) {
          authenticationResult.RefreshToken = refreshToken.getToken();
        }
        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
        _this15.cacheTokens();
        return wrappedCallback(null, _this15.signInUserSession);
      }
      return void 0;
    });
  };
  _proto.cacheTokens = function cacheTokens() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
    var lastUserKey = keyPrefix + ".LastAuthUser";
    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
    this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
    this.storage.setItem(lastUserKey, this.username);
  };
  _proto.cacheUserData = function cacheUserData(userData) {
    this.storage.setItem(this.userDataKey, JSON.stringify(userData));
  };
  _proto.clearCachedUserData = function clearCachedUserData() {
    this.storage.removeItem(this.userDataKey);
  };
  _proto.clearCachedUser = function clearCachedUser() {
    this.clearCachedTokens();
    this.clearCachedUserData();
  };
  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    this.storage.setItem(deviceKeyKey, this.deviceKey);
    this.storage.setItem(randomPasswordKey, this.randomPassword);
    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
  };
  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    if (this.storage.getItem(deviceKeyKey)) {
      this.deviceKey = this.storage.getItem(deviceKeyKey);
      this.randomPassword = this.storage.getItem(randomPasswordKey);
      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
    }
  };
  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
    var deviceKeyKey = keyPrefix + ".deviceKey";
    var randomPasswordKey = keyPrefix + ".randomPasswordKey";
    var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
    this.storage.removeItem(deviceKeyKey);
    this.storage.removeItem(randomPasswordKey);
    this.storage.removeItem(deviceGroupKeyKey);
  };
  _proto.clearCachedTokens = function clearCachedTokens() {
    var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
    var idTokenKey = keyPrefix + "." + this.username + ".idToken";
    var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
    var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
    var lastUserKey = keyPrefix + ".LastAuthUser";
    var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
    this.storage.removeItem(idTokenKey);
    this.storage.removeItem(accessTokenKey);
    this.storage.removeItem(refreshTokenKey);
    this.storage.removeItem(lastUserKey);
    this.storage.removeItem(clockDriftKey);
  };
  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
    var idToken = new CognitoIdToken(authResult);
    var accessToken = new CognitoAccessToken(authResult);
    var refreshToken = new CognitoRefreshToken(authResult);
    var sessionData = {
      IdToken: idToken,
      AccessToken: accessToken,
      RefreshToken: refreshToken
    };
    return new CognitoUserSession(sessionData);
  };
  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ForgotPassword", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      if (typeof callback.inputVerificationCode === "function") {
        return callback.inputVerificationCode(data);
      }
      return callback.onSuccess(data);
    });
  };
  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
    var jsonReq = {
      ClientId: this.pool.getClientId(),
      Username: this.username,
      ConfirmationCode: confirmationCode,
      Password: newPassword,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("ConfirmForgotPassword", jsonReq, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
  };
  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GetUserAttributeVerificationCode", {
      AttributeName: attributeName,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      ClientMetadata: clientMetadata
    }, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      if (typeof callback.inputVerificationCode === "function") {
        return callback.inputVerificationCode(data);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("VerifyUserAttribute", {
      AttributeName: attributeName,
      Code: confirmationCode,
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.getDevice = function getDevice(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GetDevice", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey
    }, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess(data);
    });
    return void 0;
  };
  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("ForgetDevice", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: deviceKey
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.forgetDevice = function forgetDevice(callback) {
    var _this16 = this;
    this.forgetSpecificDevice(this.deviceKey, {
      onFailure: callback.onFailure,
      onSuccess: function onSuccess(result) {
        _this16.deviceKey = null;
        _this16.deviceGroupKey = null;
        _this16.randomPassword = null;
        _this16.clearCachedDeviceKeyAndPassword();
        return callback.onSuccess(result);
      }
    });
  };
  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("UpdateDeviceStatus", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey,
      DeviceRememberedStatus: "remembered"
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("UpdateDeviceStatus", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      DeviceKey: this.deviceKey,
      DeviceRememberedStatus: "not_remembered"
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.listDevices = function listDevices(limit, paginationToken, callback) {
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    var requestParams = {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
      Limit: limit
    };
    if (paginationToken) {
      requestParams.PaginationToken = paginationToken;
    }
    this.client.request("ListDevices", requestParams, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      return callback.onSuccess(data);
    });
    return void 0;
  };
  _proto.globalSignOut = function globalSignOut(callback) {
    var _this17 = this;
    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
      return callback.onFailure(new Error("User is not authenticated"));
    }
    this.client.request("GlobalSignOut", {
      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
    }, function(err) {
      if (err) {
        return callback.onFailure(err);
      }
      _this17.clearCachedUser();
      return callback.onSuccess("SUCCESS");
    });
    return void 0;
  };
  _proto.signOut = function signOut(revokeTokenCallback) {
    var _this18 = this;
    if (!revokeTokenCallback || typeof revokeTokenCallback !== "function") {
      this.cleanClientData();
      return;
    }
    this.getSession(function(error, _session) {
      if (error) {
        return revokeTokenCallback(error);
      }
      _this18.revokeTokens(function(err) {
        _this18.cleanClientData();
        revokeTokenCallback(err);
      });
    });
  };
  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
    if (revokeTokenCallback === void 0) {
      revokeTokenCallback = function revokeTokenCallback2() {
      };
    }
    if (typeof revokeTokenCallback !== "function") {
      throw new Error("Invalid revokeTokenCallback. It should be a function.");
    }
    var tokensToBeRevoked = [];
    if (!this.signInUserSession) {
      var error = new Error("User is not authenticated");
      return revokeTokenCallback(error);
    }
    if (!this.signInUserSession.getAccessToken()) {
      var _error = new Error("No Access token available");
      return revokeTokenCallback(_error);
    }
    var refreshToken = this.signInUserSession.getRefreshToken().getToken();
    var accessToken = this.signInUserSession.getAccessToken();
    if (this.isSessionRevocable(accessToken)) {
      if (refreshToken) {
        return this.revokeToken({
          token: refreshToken,
          callback: revokeTokenCallback
        });
      }
    }
    revokeTokenCallback();
  };
  _proto.isSessionRevocable = function isSessionRevocable(token) {
    if (token && typeof token.decodePayload === "function") {
      try {
        var _token$decodePayload = token.decodePayload(), origin_jti = _token$decodePayload.origin_jti;
        return !!origin_jti;
      } catch (err) {
      }
    }
    return false;
  };
  _proto.cleanClientData = function cleanClientData() {
    this.signInUserSession = null;
    this.clearCachedUser();
  };
  _proto.revokeToken = function revokeToken(_ref2) {
    var token = _ref2.token, callback = _ref2.callback;
    this.client.requestWithRetry("RevokeToken", {
      Token: token,
      ClientId: this.pool.getClientId()
    }, function(err) {
      if (err) {
        return callback(err);
      }
      callback();
    });
  };
  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
    var _this19 = this;
    var challengeResponses = {};
    challengeResponses.USERNAME = this.username;
    challengeResponses.ANSWER = answerChallenge;
    var jsonReq = {
      ChallengeName: "SELECT_MFA_TYPE",
      ChallengeResponses: challengeResponses,
      ClientId: this.pool.getClientId(),
      Session: this.Session
    };
    if (this.getUserContextData()) {
      jsonReq.UserContextData = this.getUserContextData();
    }
    this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
      if (err) {
        return callback.onFailure(err);
      }
      _this19.Session = data.Session;
      if (answerChallenge === "SMS_MFA") {
        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
      }
      if (answerChallenge === "SOFTWARE_TOKEN_MFA") {
        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
      }
      return void 0;
    });
  };
  _proto.getUserContextData = function getUserContextData() {
    var pool = this.pool;
    return pool.getUserContextData(this.username);
  };
  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
    var _this20 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.client.request("AssociateSoftwareToken", {
        Session: this.Session
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        _this20.Session = data.Session;
        return callback.associateSecretCode(data.SecretCode);
      });
    } else {
      this.client.request("AssociateSoftwareToken", {
        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        return callback.associateSecretCode(data.SecretCode);
      });
    }
  };
  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
    var _this21 = this;
    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
      this.client.request("VerifySoftwareToken", {
        Session: this.Session,
        UserCode: totpCode,
        FriendlyDeviceName: friendlyDeviceName
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        _this21.Session = data.Session;
        var challengeResponses = {};
        challengeResponses.USERNAME = _this21.username;
        var jsonReq = {
          ChallengeName: "MFA_SETUP",
          ClientId: _this21.pool.getClientId(),
          ChallengeResponses: challengeResponses,
          Session: _this21.Session
        };
        if (_this21.getUserContextData()) {
          jsonReq.UserContextData = _this21.getUserContextData();
        }
        _this21.client.request("RespondToAuthChallenge", jsonReq, function(errRespond, dataRespond) {
          if (errRespond) {
            return callback.onFailure(errRespond);
          }
          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);
          _this21.cacheTokens();
          return callback.onSuccess(_this21.signInUserSession);
        });
        return void 0;
      });
    } else {
      this.client.request("VerifySoftwareToken", {
        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
        UserCode: totpCode,
        FriendlyDeviceName: friendlyDeviceName
      }, function(err, data) {
        if (err) {
          return callback.onFailure(err);
        }
        return callback.onSuccess(data);
      });
    }
  };
  return CognitoUser2;
}();

// node_modules/amazon-cognito-identity-js/es/Client.js
var import_isomorphic_unfetch = __toESM(require_browser());

// node_modules/amazon-cognito-identity-js/es/UserAgent.js
function UserAgent() {
}
UserAgent.prototype.userAgent = getUserAgent();
var UserAgent_default = UserAgent;

// node_modules/amazon-cognito-identity-js/es/Client.js
function _inheritsLoose3(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf3(subClass, superClass);
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper3(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf3(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct3(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance2 = new Constructor();
      if (Class2)
        _setPrototypeOf3(instance2, Class2.prototype);
      return instance2;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn2) {
  return Function.toString.call(fn2).indexOf("[native code]") !== -1;
}
function _setPrototypeOf3(o2, p2) {
  _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf5(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf3(o2, p2);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
var CognitoError = function(_Error) {
  _inheritsLoose3(CognitoError2, _Error);
  function CognitoError2(message, code, name, statusCode) {
    var _this;
    _this = _Error.call(this, message) || this;
    _this.code = code;
    _this.name = name;
    _this.statusCode = statusCode;
    return _this;
  }
  return CognitoError2;
}(_wrapNativeSuper(Error));
var Client2 = function() {
  function Client4(region, endpoint, fetchOptions) {
    this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
    var _ref = fetchOptions || {}, credentials = _ref.credentials;
    this.fetchOptions = credentials ? {
      credentials
    } : {};
  }
  var _proto = Client4.prototype;
  _proto.promisifyRequest = function promisifyRequest2(operation, params) {
    var _this2 = this;
    return new Promise(function(resolve4, reject) {
      _this2.request(operation, params, function(err, data) {
        if (err) {
          reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
        } else {
          resolve4(data);
        }
      });
    });
  };
  _proto.requestWithRetry = function requestWithRetry(operation, params, callback) {
    var _this3 = this;
    var MAX_DELAY_IN_MILLIS = 5 * 1e3;
    jitteredExponentialRetry2(function(p2) {
      return new Promise(function(res, rej) {
        _this3.request(operation, p2, function(error, result) {
          if (error) {
            rej(error);
          } else {
            res(result);
          }
        });
      });
    }, [params], MAX_DELAY_IN_MILLIS).then(function(result) {
      return callback(null, result);
    })["catch"](function(error) {
      return callback(error);
    });
  };
  _proto.request = function request(operation, params, callback) {
    var headers = {
      "Content-Type": "application/x-amz-json-1.1",
      "X-Amz-Target": "AWSCognitoIdentityProviderService." + operation,
      "X-Amz-User-Agent": UserAgent_default.prototype.userAgent,
      "Cache-Control": "no-store"
    };
    var options = Object.assign({}, this.fetchOptions, {
      headers,
      method: "POST",
      mode: "cors",
      body: JSON.stringify(params)
    });
    var response;
    var responseJsonData;
    fetch(this.endpoint, options).then(function(resp) {
      response = resp;
      return resp;
    }, function(err) {
      if (err instanceof TypeError) {
        throw new Error("Network error");
      }
      throw err;
    }).then(function(resp) {
      return resp.json()["catch"](function() {
        return {};
      });
    }).then(function(data) {
      if (response.ok)
        return callback(null, data);
      responseJsonData = data;
      var code = (data.__type || data.code).split("#").pop();
      var error = new Error(data.message || data.Message || null);
      error.name = code;
      error.code = code;
      return callback(error);
    })["catch"](function(err) {
      if (response && response.headers && response.headers.get("x-amzn-errortype")) {
        try {
          var code = response.headers.get("x-amzn-errortype").split(":")[0];
          var error = new Error(response.status ? response.status.toString() : null);
          error.code = code;
          error.name = code;
          error.statusCode = response.status;
          return callback(error);
        } catch (ex) {
          return callback(err);
        }
      } else if (err instanceof Error && err.message === "Network error") {
        err.code = "NetworkError";
      }
      return callback(err);
    });
  };
  return Client4;
}();
var logger13 = {
  debug: function debug() {
  }
};
var NonRetryableError2 = function(_Error2) {
  _inheritsLoose3(NonRetryableError3, _Error2);
  function NonRetryableError3(message) {
    var _this4;
    _this4 = _Error2.call(this, message) || this;
    _this4.nonRetryable = true;
    return _this4;
  }
  return NonRetryableError3;
}(_wrapNativeSuper(Error));
var isNonRetryableError2 = function isNonRetryableError3(obj) {
  var key = "nonRetryable";
  return obj && obj[key];
};
function retry2(functionToRetry, args, delayFn, attempt) {
  if (attempt === void 0) {
    attempt = 1;
  }
  if (typeof functionToRetry !== "function") {
    throw Error("functionToRetry must be a function");
  }
  logger13.debug(functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args));
  return functionToRetry.apply(void 0, args)["catch"](function(err) {
    logger13.debug("error on " + functionToRetry.name, err);
    if (isNonRetryableError2(err)) {
      logger13.debug(functionToRetry.name + " non retryable error", err);
      throw err;
    }
    var retryIn = delayFn(attempt, args, err);
    logger13.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
    if (retryIn !== false) {
      return new Promise(function(res) {
        return setTimeout(res, retryIn);
      }).then(function() {
        return retry2(functionToRetry, args, delayFn, attempt + 1);
      });
    } else {
      throw err;
    }
  });
}
function jitteredBackoff2(maxDelayMs) {
  var BASE_TIME_MS = 100;
  var JITTER_FACTOR = 100;
  return function(attempt) {
    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay > maxDelayMs ? false : delay;
  };
}
var MAX_DELAY_MS2 = 5 * 60 * 1e3;
function jitteredExponentialRetry2(functionToRetry, args, maxDelayMs) {
  if (maxDelayMs === void 0) {
    maxDelayMs = MAX_DELAY_MS2;
  }
  return retry2(functionToRetry, args, jitteredBackoff2(maxDelayMs));
}

// node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js
var USER_POOL_ID_MAX_LENGTH = 55;
var CognitoUserPool = function() {
  function CognitoUserPool2(data, wrapRefreshSessionCallback) {
    var _ref = data || {}, UserPoolId = _ref.UserPoolId, ClientId = _ref.ClientId, endpoint = _ref.endpoint, fetchOptions = _ref.fetchOptions, AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
    if (!UserPoolId || !ClientId) {
      throw new Error("Both UserPoolId and ClientId are required.");
    }
    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {
      throw new Error("Invalid UserPoolId format.");
    }
    var region = UserPoolId.split("_")[0];
    this.userPoolId = UserPoolId;
    this.clientId = ClientId;
    this.client = new Client2(region, endpoint, fetchOptions);
    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
    this.storage = data.Storage || new StorageHelper2().getStorage();
    if (wrapRefreshSessionCallback) {
      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
    }
  }
  var _proto = CognitoUserPool2.prototype;
  _proto.getUserPoolId = function getUserPoolId() {
    return this.userPoolId;
  };
  _proto.getUserPoolName = function getUserPoolName() {
    return this.getUserPoolId().split("_")[1];
  };
  _proto.getClientId = function getClientId() {
    return this.clientId;
  };
  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {
    var _this = this;
    var jsonReq = {
      ClientId: this.clientId,
      Username: username,
      Password: password,
      UserAttributes: userAttributes,
      ValidationData: validationData,
      ClientMetadata: clientMetadata
    };
    if (this.getUserContextData(username)) {
      jsonReq.UserContextData = this.getUserContextData(username);
    }
    this.client.request("SignUp", jsonReq, function(err, data) {
      if (err) {
        return callback(err, null);
      }
      var cognitoUser = {
        Username: username,
        Pool: _this,
        Storage: _this.storage
      };
      var returnData = {
        user: new CognitoUser(cognitoUser),
        userConfirmed: data.UserConfirmed,
        userSub: data.UserSub,
        codeDeliveryDetails: data.CodeDeliveryDetails
      };
      return callback(null, returnData);
    });
  };
  _proto.getCurrentUser = function getCurrentUser() {
    var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
    var lastAuthUser = this.storage.getItem(lastUserKey);
    if (lastAuthUser) {
      var cognitoUser = {
        Username: lastAuthUser,
        Pool: this,
        Storage: this.storage
      };
      return new CognitoUser(cognitoUser);
    }
    return null;
  };
  _proto.getUserContextData = function getUserContextData(username) {
    if (typeof AmazonCognitoAdvancedSecurityData === "undefined") {
      return void 0;
    }
    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
    if (this.advancedSecurityDataCollectionFlag) {
      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);
      if (advancedSecurityData) {
        var userContextData = {
          EncodedData: advancedSecurityData
        };
        return userContextData;
      }
    }
    return {};
  };
  return CognitoUserPool2;
}();

// node_modules/amazon-cognito-identity-js/es/CookieStorage.js
var Cookies2 = __toESM(require_js_cookie());
var CookieStorage = function() {
  function CookieStorage2(data) {
    if (data === void 0) {
      data = {};
    }
    if (data.domain) {
      this.domain = data.domain;
    }
    if (data.path) {
      this.path = data.path;
    } else {
      this.path = "/";
    }
    if (Object.prototype.hasOwnProperty.call(data, "expires")) {
      this.expires = data.expires;
    } else {
      this.expires = 365;
    }
    if (Object.prototype.hasOwnProperty.call(data, "secure")) {
      this.secure = data.secure;
    } else {
      this.secure = true;
    }
    if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
      if (!["strict", "lax", "none"].includes(data.sameSite)) {
        throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
      }
      if (data.sameSite === "none" && !this.secure) {
        throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");
      }
      this.sameSite = data.sameSite;
    } else {
      this.sameSite = null;
    }
  }
  var _proto = CookieStorage2.prototype;
  _proto.setItem = function setItem(key, value) {
    var options = {
      path: this.path,
      expires: this.expires,
      domain: this.domain,
      secure: this.secure
    };
    if (this.sameSite) {
      options.sameSite = this.sameSite;
    }
    Cookies2.set(key, value, options);
    return Cookies2.get(key);
  };
  _proto.getItem = function getItem(key) {
    return Cookies2.get(key);
  };
  _proto.removeItem = function removeItem(key) {
    var options = {
      path: this.path,
      expires: this.expires,
      domain: this.domain,
      secure: this.secure
    };
    if (this.sameSite) {
      options.sameSite = this.sameSite;
    }
    return Cookies2.remove(key, options);
  };
  _proto.clear = function clear() {
    var cookies = Cookies2.get();
    var numKeys = Object.keys(cookies).length;
    for (var index = 0; index < numKeys; ++index) {
      this.removeItem(Object.keys(cookies)[index]);
    }
    return {};
  };
  return CookieStorage2;
}();

// node_modules/@aws-amplify/auth/lib-esm/Auth.js
var import_url3 = __toESM(require_url());

// node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
var import_url2 = __toESM(require_url());

// node_modules/@aws-amplify/auth/lib-esm/OAuth/urlOpener.js
var SELF = "_self";
var launchUri = function(url2) {
  var windowProxy = window.open(url2, SELF);
  if (windowProxy) {
    return Promise.resolve(windowProxy);
  } else {
    return Promise.reject();
  }
};

// node_modules/@aws-amplify/auth/lib-esm/OAuth/oauthStorage.js
var setState = function(state) {
  window.sessionStorage.setItem("oauth_state", state);
};
var getState = function() {
  var oauth_state = window.sessionStorage.getItem("oauth_state");
  window.sessionStorage.removeItem("oauth_state");
  return oauth_state;
};
var setPKCE = function(private_key) {
  window.sessionStorage.setItem("ouath_pkce_key", private_key);
};
var getPKCE = function() {
  var ouath_pkce_key = window.sessionStorage.getItem("ouath_pkce_key");
  window.sessionStorage.removeItem("ouath_pkce_key");
  return ouath_pkce_key;
};

// node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
var import_buffer4 = __toESM(require_buffer());
var import_sha256_js4 = __toESM(require_build2());
var AMPLIFY_SYMBOL3 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent = function(event, data, message) {
  Hub.dispatch("auth", { event, data, message }, "Auth", AMPLIFY_SYMBOL3);
};
var logger14 = new ConsoleLogger("OAuth");
var OAuth = (
  /** @class */
  function() {
    function OAuth2(_a) {
      var config = _a.config, cognitoClientId = _a.cognitoClientId, _b = _a.scopes, scopes = _b === void 0 ? [] : _b;
      this._urlOpener = config.urlOpener || launchUri;
      this._config = config;
      this._cognitoClientId = cognitoClientId;
      if (!this.isValidScopes(scopes))
        throw Error("scopes must be a String Array");
      this._scopes = scopes;
    }
    OAuth2.prototype.isValidScopes = function(scopes) {
      return Array.isArray(scopes) && scopes.every(function(scope) {
        return typeof scope === "string";
      });
    };
    OAuth2.prototype.oauthSignIn = function(responseType, domain, redirectSignIn, clientId, provider, customState) {
      if (responseType === void 0) {
        responseType = "code";
      }
      if (provider === void 0) {
        provider = CognitoHostedUIIdentityProvider.Cognito;
      }
      var generatedState = this._generateState(32);
      var state = customState ? generatedState + "-" + urlSafeEncode(customState) : generatedState;
      setState(state);
      var pkce_key = this._generateRandom(128);
      setPKCE(pkce_key);
      var code_challenge = this._generateChallenge(pkce_key);
      var code_challenge_method = "S256";
      var scopesString = this._scopes.join(" ");
      var queryString = Object.entries(__assign3(__assign3({ redirect_uri: redirectSignIn, response_type: responseType, client_id: clientId, identity_provider: provider, scope: scopesString, state }, responseType === "code" ? { code_challenge } : {}), responseType === "code" ? { code_challenge_method } : {})).map(function(_a) {
        var _b = __read2(_a, 2), k2 = _b[0], v2 = _b[1];
        return encodeURIComponent(k2) + "=" + encodeURIComponent(v2);
      }).join("&");
      var URL2 = "https://" + domain + "/oauth2/authorize?" + queryString;
      logger14.debug("Redirecting to " + URL2);
      this._urlOpener(URL2, redirectSignIn);
    };
    OAuth2.prototype._handleCodeFlow = function(currentUrl) {
      return __awaiter3(this, void 0, void 0, function() {
        var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, _a, access_token, refresh_token, id_token, error;
        return __generator3(this, function(_b) {
          switch (_b.label) {
            case 0:
              code = ((0, import_url2.parse)(currentUrl).query || "").split("&").map(function(pairings) {
                return pairings.split("=");
              }).reduce(function(accum, _a2) {
                var _b2;
                var _c = __read2(_a2, 2), k2 = _c[0], v2 = _c[1];
                return __assign3(__assign3({}, accum), (_b2 = {}, _b2[k2] = v2, _b2));
              }, { code: void 0 }).code;
              currentUrlPathname = (0, import_url2.parse)(currentUrl).pathname || "/";
              redirectSignInPathname = (0, import_url2.parse)(this._config.redirectSignIn).pathname || "/";
              if (!code || currentUrlPathname !== redirectSignInPathname) {
                return [
                  2
                  /*return*/
                ];
              }
              oAuthTokenEndpoint = "https://" + this._config.domain + "/oauth2/token";
              dispatchAuthEvent("codeFlow", {}, "Retrieving tokens from " + oAuthTokenEndpoint);
              client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.clientID;
              redirect_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignIn : this._config.redirectUri;
              code_verifier = getPKCE();
              oAuthTokenBody = __assign3({
                grant_type: "authorization_code",
                code,
                client_id,
                redirect_uri
              }, code_verifier ? { code_verifier } : {});
              logger14.debug("Calling token endpoint: " + oAuthTokenEndpoint + " with", oAuthTokenBody);
              body = Object.entries(oAuthTokenBody).map(function(_a2) {
                var _b2 = __read2(_a2, 2), k2 = _b2[0], v2 = _b2[1];
                return encodeURIComponent(k2) + "=" + encodeURIComponent(v2);
              }).join("&");
              return [4, fetch(oAuthTokenEndpoint, {
                method: "POST",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded"
                },
                body
              })];
            case 1:
              return [4, _b.sent().json()];
            case 2:
              _a = _b.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;
              if (error) {
                throw new Error(error);
              }
              return [2, {
                accessToken: access_token,
                refreshToken: refresh_token,
                idToken: id_token
              }];
          }
        });
      });
    };
    OAuth2.prototype._handleImplicitFlow = function(currentUrl) {
      return __awaiter3(this, void 0, void 0, function() {
        var _a, id_token, access_token;
        return __generator3(this, function(_b) {
          _a = ((0, import_url2.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(pairings) {
            return pairings.split("=");
          }).reduce(function(accum, _a2) {
            var _b2;
            var _c = __read2(_a2, 2), k2 = _c[0], v2 = _c[1];
            return __assign3(__assign3({}, accum), (_b2 = {}, _b2[k2] = v2, _b2));
          }, {
            id_token: void 0,
            access_token: void 0
          }), id_token = _a.id_token, access_token = _a.access_token;
          dispatchAuthEvent("implicitFlow", {}, "Got tokens from " + currentUrl);
          logger14.debug("Retrieving implicit tokens from " + currentUrl + " with");
          return [2, {
            accessToken: access_token,
            idToken: id_token,
            refreshToken: null
          }];
        });
      });
    };
    OAuth2.prototype.handleAuthResponse = function(currentUrl) {
      return __awaiter3(this, void 0, void 0, function() {
        var urlParams, error, error_description, state, _a, _b, e_1;
        return __generator3(this, function(_c) {
          switch (_c.label) {
            case 0:
              _c.trys.push([0, 5, , 6]);
              urlParams = currentUrl ? __assign3(__assign3({}, ((0, import_url2.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                return entry.split("=");
              }).reduce(function(acc, _a2) {
                var _b2 = __read2(_a2, 2), k2 = _b2[0], v2 = _b2[1];
                return acc[k2] = v2, acc;
              }, {})), ((0, import_url2.parse)(currentUrl).query || "").split("&").map(function(entry) {
                return entry.split("=");
              }).reduce(function(acc, _a2) {
                var _b2 = __read2(_a2, 2), k2 = _b2[0], v2 = _b2[1];
                return acc[k2] = v2, acc;
              }, {})) : {};
              error = urlParams.error, error_description = urlParams.error_description;
              if (error) {
                throw new Error(error_description);
              }
              state = this._validateState(urlParams);
              logger14.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
              if (!(this._config.responseType === "code"))
                return [3, 2];
              _a = [{}];
              return [4, this._handleCodeFlow(currentUrl)];
            case 1:
              return [2, __assign3.apply(void 0, [__assign3.apply(void 0, _a.concat([_c.sent()])), { state }])];
            case 2:
              _b = [{}];
              return [4, this._handleImplicitFlow(currentUrl)];
            case 3:
              return [2, __assign3.apply(void 0, [__assign3.apply(void 0, _b.concat([_c.sent()])), { state }])];
            case 4:
              return [3, 6];
            case 5:
              e_1 = _c.sent();
              logger14.debug("Error handling auth response.", e_1);
              throw e_1;
            case 6:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    OAuth2.prototype._validateState = function(urlParams) {
      if (!urlParams) {
        return;
      }
      var savedState = getState();
      var returnedState = urlParams.state;
      if (savedState && savedState !== returnedState) {
        throw new Error("Invalid state in OAuth flow");
      }
      return returnedState;
    };
    OAuth2.prototype.signOut = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var oAuthLogoutEndpoint, client_id, signout_uri;
        return __generator3(this, function(_a) {
          oAuthLogoutEndpoint = "https://" + this._config.domain + "/logout?";
          client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.oauth.clientID;
          signout_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignOut : this._config.returnTo;
          oAuthLogoutEndpoint += Object.entries({
            client_id,
            logout_uri: encodeURIComponent(signout_uri)
          }).map(function(_a2) {
            var _b = __read2(_a2, 2), k2 = _b[0], v2 = _b[1];
            return k2 + "=" + v2;
          }).join("&");
          dispatchAuthEvent("oAuthSignOut", { oAuth: "signOut" }, "Signing out from " + oAuthLogoutEndpoint);
          logger14.debug("Signing out from " + oAuthLogoutEndpoint);
          return [2, this._urlOpener(oAuthLogoutEndpoint, signout_uri)];
        });
      });
    };
    OAuth2.prototype._generateState = function(length) {
      var result = "";
      var i2 = length;
      var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      for (; i2 > 0; --i2)
        result += chars[Math.round(Math.random() * (chars.length - 1))];
      return result;
    };
    OAuth2.prototype._generateChallenge = function(code) {
      var awsCryptoHash = new import_sha256_js4.Sha256();
      awsCryptoHash.update(code);
      var resultFromAWSCrypto = awsCryptoHash.digestSync();
      var b64 = import_buffer4.Buffer.from(resultFromAWSCrypto).toString("base64");
      var base64URLFromAWSCrypto = this._base64URL(b64);
      return base64URLFromAWSCrypto;
    };
    OAuth2.prototype._base64URL = function(string) {
      return string.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    };
    OAuth2.prototype._generateRandom = function(size) {
      var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
      var buffer = new Uint8Array(size);
      if (typeof window !== "undefined" && !!window.crypto) {
        window.crypto.getRandomValues(buffer);
      } else {
        for (var i2 = 0; i2 < size; i2 += 1) {
          buffer[i2] = Math.random() * CHARSET.length | 0;
        }
      }
      return this._bufferToString(buffer);
    };
    OAuth2.prototype._bufferToString = function(buffer) {
      var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      var state = [];
      for (var i2 = 0; i2 < buffer.byteLength; i2 += 1) {
        var index = buffer[i2] % CHARSET.length;
        state.push(CHARSET[index]);
      }
      return state.join("");
    };
    return OAuth2;
  }()
);
var OAuth_default = OAuth;

// node_modules/@aws-amplify/auth/lib-esm/urlListener.js
var urlListener_default = function(callback) {
  if (browserOrNode().isBrowser && window.location) {
    var url2 = window.location.href;
    callback({ url: url2 });
  } else if (browserOrNode().isNode) {
    (function() {
    });
  } else {
    throw new Error("Not supported");
  }
};

// node_modules/@aws-amplify/auth/lib-esm/common/AuthErrorStrings.js
var AuthErrorStrings;
(function(AuthErrorStrings2) {
  AuthErrorStrings2["DEFAULT_MSG"] = "Authentication Error";
  AuthErrorStrings2["EMPTY_EMAIL"] = "Email cannot be empty";
  AuthErrorStrings2["EMPTY_PHONE"] = "Phone number cannot be empty";
  AuthErrorStrings2["EMPTY_USERNAME"] = "Username cannot be empty";
  AuthErrorStrings2["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
  AuthErrorStrings2["EMPTY_PASSWORD"] = "Password cannot be empty";
  AuthErrorStrings2["EMPTY_CODE"] = "Confirmation code cannot be empty";
  AuthErrorStrings2["SIGN_UP_ERROR"] = "Error creating account";
  AuthErrorStrings2["NO_MFA"] = "No valid MFA method provided";
  AuthErrorStrings2["INVALID_MFA"] = "Invalid MFA type";
  AuthErrorStrings2["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
  AuthErrorStrings2["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
  AuthErrorStrings2["NETWORK_ERROR"] = "Network Error";
  AuthErrorStrings2["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
  AuthErrorStrings2["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
})(AuthErrorStrings || (AuthErrorStrings = {}));

// node_modules/@aws-amplify/auth/lib-esm/Errors.js
var logger15 = new ConsoleLogger("AuthError");
var AuthError = (
  /** @class */
  function(_super) {
    __extends2(AuthError2, _super);
    function AuthError2(type) {
      var _this = this;
      var _a = authErrorMessages[type], message = _a.message, log = _a.log;
      _this = _super.call(this, message) || this;
      _this.constructor = AuthError2;
      Object.setPrototypeOf(_this, AuthError2.prototype);
      _this.name = "AuthError";
      _this.log = log || message;
      logger15.error(_this.log);
      return _this;
    }
    return AuthError2;
  }(Error)
);
var NoUserPoolError = (
  /** @class */
  function(_super) {
    __extends2(NoUserPoolError2, _super);
    function NoUserPoolError2(type) {
      var _this = _super.call(this, type) || this;
      _this.constructor = NoUserPoolError2;
      Object.setPrototypeOf(_this, NoUserPoolError2.prototype);
      _this.name = "NoUserPoolError";
      return _this;
    }
    return NoUserPoolError2;
  }(AuthError)
);
var authErrorMessages = {
  noConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        "
  },
  missingAuthConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        "
  },
  emptyUsername: {
    message: AuthErrorStrings.EMPTY_USERNAME
  },
  // TODO: should include a list of valid sign-in types
  invalidUsername: {
    message: AuthErrorStrings.INVALID_USERNAME
  },
  emptyPassword: {
    message: AuthErrorStrings.EMPTY_PASSWORD
  },
  emptyCode: {
    message: AuthErrorStrings.EMPTY_CODE
  },
  signUpError: {
    message: AuthErrorStrings.SIGN_UP_ERROR,
    log: "The first parameter should either be non-null string or object"
  },
  noMFA: {
    message: AuthErrorStrings.NO_MFA
  },
  invalidMFA: {
    message: AuthErrorStrings.INVALID_MFA
  },
  emptyChallengeResponse: {
    message: AuthErrorStrings.EMPTY_CHALLENGE
  },
  noUserSession: {
    message: AuthErrorStrings.NO_USER_SESSION
  },
  deviceConfig: {
    message: AuthErrorStrings.DEVICE_CONFIG
  },
  networkError: {
    message: AuthErrorStrings.NETWORK_ERROR
  },
  autoSignInError: {
    message: AuthErrorStrings.AUTOSIGNIN_ERROR
  },
  default: {
    message: AuthErrorStrings.DEFAULT_MSG
  }
};

// node_modules/@aws-amplify/auth/lib-esm/Auth.js
var logger16 = new ConsoleLogger("AuthClass");
var USER_ADMIN_SCOPE = "aws.cognito.signin.user.admin";
var OAUTH_FLOW_MS_TIMEOUT = 10 * 1e3;
var AMPLIFY_SYMBOL4 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent2 = function(event, data, message) {
  Hub.dispatch("auth", { event, data, message }, "Auth", AMPLIFY_SYMBOL4);
};
var MAX_DEVICES = 60;
var MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1e3;
var AuthClass = (
  /** @class */
  function() {
    function AuthClass2(config) {
      var _this = this;
      this.userPool = null;
      this.user = null;
      this.oAuthFlowInProgress = false;
      this.autoSignInInitiated = false;
      this.inflightSessionPromise = null;
      this.inflightSessionPromiseCounter = 0;
      this.Credentials = Credentials;
      this.wrapRefreshSessionCallback = function(callback) {
        var wrapped = function(error, data) {
          if (data) {
            dispatchAuthEvent2("tokenRefresh", void 0, "New token retrieved");
          } else {
            dispatchAuthEvent2("tokenRefresh_failure", error, "Failed to retrieve new token");
          }
          return callback(error, data);
        };
        return wrapped;
      };
      this.configure(config);
      this.currentCredentials = this.currentCredentials.bind(this);
      this.currentUserCredentials = this.currentUserCredentials.bind(this);
      Hub.listen("auth", function(_a) {
        var payload = _a.payload;
        var event = payload.event;
        switch (event) {
          case "verify":
          case "signIn":
            _this._storage.setItem("amplify-signin-with-hostedUI", "false");
            break;
          case "signOut":
            _this._storage.removeItem("amplify-signin-with-hostedUI");
            break;
          case "cognitoHostedUI":
            _this._storage.setItem("amplify-signin-with-hostedUI", "true");
            break;
        }
      });
    }
    AuthClass2.prototype.getModuleName = function() {
      return "Auth";
    };
    AuthClass2.prototype.configure = function(config) {
      var _this = this;
      if (!config)
        return this._config || {};
      logger16.debug("configure Auth");
      var conf = Object.assign({}, this._config, parseAWSExports(config).Auth, config);
      this._config = conf;
      var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint, storage = _a.storage;
      if (!storage) {
        if (cookieStorage)
          this._storage = new CookieStorage(cookieStorage);
        else {
          this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();
        }
      } else {
        if (!this._isValidAuthStorage(storage)) {
          logger16.error("The storage in the Auth config is not valid!");
          throw new Error("Empty storage object");
        }
        this._storage = storage;
      }
      this._storageSync = Promise.resolve();
      if (typeof this._storage["sync"] === "function") {
        this._storageSync = this._storage["sync"]();
      }
      if (userPoolId) {
        var userPoolData = {
          UserPoolId: userPoolId,
          ClientId: userPoolWebClientId,
          endpoint
        };
        userPoolData.Storage = this._storage;
        this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);
      }
      this.Credentials.configure({
        mandatorySignIn,
        region,
        userPoolId,
        identityPoolId,
        refreshHandlers,
        storage: this._storage,
        identityPoolRegion
      });
      var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : void 0;
      if (cognitoHostedUIConfig) {
        var cognitoAuthParams = Object.assign({
          cognitoClientId: userPoolWebClientId,
          UserPoolId: userPoolId,
          domain: cognitoHostedUIConfig["domain"],
          scopes: cognitoHostedUIConfig["scope"],
          redirectSignIn: cognitoHostedUIConfig["redirectSignIn"],
          redirectSignOut: cognitoHostedUIConfig["redirectSignOut"],
          responseType: cognitoHostedUIConfig["responseType"],
          Storage: this._storage,
          urlOpener: cognitoHostedUIConfig["urlOpener"],
          clientMetadata
        }, cognitoHostedUIConfig["options"]);
        this._oAuthHandler = new OAuth_default({
          scopes: cognitoAuthParams.scopes,
          config: cognitoAuthParams,
          cognitoClientId: cognitoAuthParams.cognitoClientId
        });
        var usedResponseUrls_1 = {};
        urlListener_default(function(_a2) {
          var url2 = _a2.url;
          if (usedResponseUrls_1[url2]) {
            return;
          }
          usedResponseUrls_1[url2] = true;
          _this._handleAuthResponse(url2);
        });
      }
      dispatchAuthEvent2("configured", null, "The Auth category has been configured successfully");
      if (!this.autoSignInInitiated && typeof this._storage["getItem"] === "function") {
        var pollingInitiated = this.isTrueStorageValue("amplify-polling-started");
        if (pollingInitiated) {
          dispatchAuthEvent2("autoSignIn_failure", null, AuthErrorTypes.AutoSignInError);
          this._storage.removeItem("amplify-auto-sign-in");
        }
        this._storage.removeItem("amplify-polling-started");
      }
      return this._config;
    };
    AuthClass2.prototype.signUp = function(params) {
      var _this = this;
      var restOfAttrs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        restOfAttrs[_i - 1] = arguments[_i];
      }
      var _a, _b, _c;
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      var username = null;
      var password = null;
      var attributes = [];
      var validationData = null;
      var clientMetadata;
      var autoSignIn = { enabled: false };
      var autoSignInValidationData = {};
      var autoSignInClientMetaData = {};
      if (params && typeof params === "string") {
        username = params;
        password = restOfAttrs ? restOfAttrs[0] : null;
        var email = restOfAttrs ? restOfAttrs[1] : null;
        var phone_number = restOfAttrs ? restOfAttrs[2] : null;
        if (email)
          attributes.push(new CognitoUserAttribute({ Name: "email", Value: email }));
        if (phone_number)
          attributes.push(new CognitoUserAttribute({
            Name: "phone_number",
            Value: phone_number
          }));
      } else if (params && typeof params === "object") {
        username = params["username"];
        password = params["password"];
        if (params && params.clientMetadata) {
          clientMetadata = params.clientMetadata;
        } else if (this._config.clientMetadata) {
          clientMetadata = this._config.clientMetadata;
        }
        var attrs_1 = params["attributes"];
        if (attrs_1) {
          Object.keys(attrs_1).map(function(key) {
            attributes.push(new CognitoUserAttribute({ Name: key, Value: attrs_1[key] }));
          });
        }
        var validationDataObject_1 = params["validationData"];
        if (validationDataObject_1) {
          validationData = [];
          Object.keys(validationDataObject_1).map(function(key) {
            validationData.push(new CognitoUserAttribute({
              Name: key,
              Value: validationDataObject_1[key]
            }));
          });
        }
        autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : { enabled: false };
        if (autoSignIn.enabled) {
          this._storage.setItem("amplify-auto-sign-in", "true");
          autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};
          autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};
        }
      } else {
        return this.rejectAuthError(AuthErrorTypes.SignUpError);
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      if (!password) {
        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
      }
      logger16.debug("signUp attrs:", attributes);
      logger16.debug("signUp validation data:", validationData);
      return new Promise(function(resolve4, reject) {
        _this.userPool.signUp(username, password, attributes, validationData, function(err, data) {
          if (err) {
            dispatchAuthEvent2("signUp_failure", err, username + " failed to signup");
            reject(err);
          } else {
            dispatchAuthEvent2("signUp", data, username + " has signed up successfully");
            if (autoSignIn.enabled) {
              _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);
            }
            resolve4(data);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.handleAutoSignIn = function(username, password, validationData, clientMetadata, data) {
      this.autoSignInInitiated = true;
      var authDetails = new AuthenticationDetails({
        Username: username,
        Password: password,
        ValidationData: validationData,
        ClientMetadata: clientMetadata
      });
      if (data.userConfirmed) {
        this.signInAfterUserConfirmed(authDetails);
      } else if (this._config.signUpVerificationMethod === "link") {
        this.handleLinkAutoSignIn(authDetails);
      } else {
        this.handleCodeAutoSignIn(authDetails);
      }
    };
    AuthClass2.prototype.handleCodeAutoSignIn = function(authDetails) {
      var _this = this;
      var listenEvent = function(_a) {
        var payload = _a.payload;
        if (payload.event === "confirmSignUp") {
          _this.signInAfterUserConfirmed(authDetails, listenEvent);
        }
      };
      Hub.listen("auth", listenEvent);
    };
    AuthClass2.prototype.handleLinkAutoSignIn = function(authDetails) {
      var _this = this;
      this._storage.setItem("amplify-polling-started", "true");
      var start = Date.now();
      var autoSignInPollingIntervalId = setInterval(function() {
        if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {
          clearInterval(autoSignInPollingIntervalId);
          dispatchAuthEvent2("autoSignIn_failure", null, "Please confirm your account and use your credentials to sign in.");
          _this._storage.removeItem("amplify-auto-sign-in");
        } else {
          _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);
        }
      }, 5e3);
    };
    AuthClass2.prototype.signInAfterUserConfirmed = function(authDetails, listenEvent, autoSignInPollingIntervalId) {
      return __awaiter3(this, void 0, void 0, function() {
        var user, error_1;
        var _this = this;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              user = this.createCognitoUser(authDetails.getUsername());
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, user.authenticateUser(authDetails, this.authCallbacks(user, function(value) {
                dispatchAuthEvent2("autoSignIn", value, authDetails.getUsername() + " has signed in successfully");
                if (listenEvent) {
                  Hub.remove("auth", listenEvent);
                }
                if (autoSignInPollingIntervalId) {
                  clearInterval(autoSignInPollingIntervalId);
                  _this._storage.removeItem("amplify-polling-started");
                }
                _this._storage.removeItem("amplify-auto-sign-in");
              }, function(error) {
                logger16.error(error);
                _this._storage.removeItem("amplify-auto-sign-in");
              }))];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              error_1 = _a.sent();
              logger16.error(error_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.confirmSignUp = function(username, code, options) {
      var _this = this;
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      var user = this.createCognitoUser(username);
      var forceAliasCreation = options && typeof options.forceAliasCreation === "boolean" ? options.forceAliasCreation : true;
      var clientMetadata;
      if (options && options.clientMetadata) {
        clientMetadata = options.clientMetadata;
      } else if (this._config.clientMetadata) {
        clientMetadata = this._config.clientMetadata;
      }
      return new Promise(function(resolve4, reject) {
        user.confirmRegistration(code, forceAliasCreation, function(err, data) {
          if (err) {
            reject(err);
          } else {
            dispatchAuthEvent2("confirmSignUp", data, username + " has been confirmed successfully");
            var autoSignIn = _this.isTrueStorageValue("amplify-auto-sign-in");
            if (autoSignIn && !_this.autoSignInInitiated) {
              dispatchAuthEvent2("autoSignIn_failure", null, AuthErrorTypes.AutoSignInError);
              _this._storage.removeItem("amplify-auto-sign-in");
            }
            resolve4(data);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.isTrueStorageValue = function(value) {
      var item = this._storage.getItem(value);
      return item ? item === "true" : false;
    };
    AuthClass2.prototype.resendSignUp = function(username, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      var user = this.createCognitoUser(username);
      return new Promise(function(resolve4, reject) {
        user.resendConfirmationCode(function(err, data) {
          if (err) {
            reject(err);
          } else {
            resolve4(data);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.signIn = function(usernameOrSignInOpts, pw, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      var username = null;
      var password = null;
      var validationData = {};
      if (typeof usernameOrSignInOpts === "string") {
        username = usernameOrSignInOpts;
        password = pw;
      } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {
        if (typeof pw !== "undefined") {
          logger16.warn("The password should be defined under the first parameter object!");
        }
        username = usernameOrSignInOpts.username;
        password = usernameOrSignInOpts.password;
        validationData = usernameOrSignInOpts.validationData;
      } else {
        return this.rejectAuthError(AuthErrorTypes.InvalidUsername);
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      var authDetails = new AuthenticationDetails({
        Username: username,
        Password: password,
        ValidationData: validationData,
        ClientMetadata: clientMetadata
      });
      if (password) {
        return this.signInWithPassword(authDetails);
      } else {
        return this.signInWithoutPassword(authDetails);
      }
    };
    AuthClass2.prototype.authCallbacks = function(user, resolve4, reject) {
      var _this = this;
      var that = this;
      return {
        onSuccess: function(session) {
          return __awaiter3(_this, void 0, void 0, function() {
            var cred, e_1, currentUser, e_2;
            return __generator3(this, function(_a) {
              switch (_a.label) {
                case 0:
                  logger16.debug(session);
                  delete user["challengeName"];
                  delete user["challengeParam"];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 4, 5, 9]);
                  return [4, this.Credentials.clear()];
                case 2:
                  _a.sent();
                  return [4, this.Credentials.set(session, "session")];
                case 3:
                  cred = _a.sent();
                  logger16.debug("succeed to get cognito credentials", cred);
                  return [3, 9];
                case 4:
                  e_1 = _a.sent();
                  logger16.debug("cannot get cognito credentials", e_1);
                  return [3, 9];
                case 5:
                  _a.trys.push([5, 7, , 8]);
                  return [4, this.currentUserPoolUser()];
                case 6:
                  currentUser = _a.sent();
                  that.user = currentUser;
                  dispatchAuthEvent2("signIn", currentUser, "A user " + user.getUsername() + " has been signed in");
                  resolve4(currentUser);
                  return [3, 8];
                case 7:
                  e_2 = _a.sent();
                  logger16.error("Failed to get the signed in user", e_2);
                  reject(e_2);
                  return [3, 8];
                case 8:
                  return [
                    7
                    /*endfinally*/
                  ];
                case 9:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        },
        onFailure: function(err) {
          logger16.debug("signIn failure", err);
          dispatchAuthEvent2("signIn_failure", err, user.getUsername() + " failed to signin");
          reject(err);
        },
        customChallenge: function(challengeParam) {
          logger16.debug("signIn custom challenge answer required");
          user["challengeName"] = "CUSTOM_CHALLENGE";
          user["challengeParam"] = challengeParam;
          resolve4(user);
        },
        mfaRequired: function(challengeName, challengeParam) {
          logger16.debug("signIn MFA required");
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve4(user);
        },
        mfaSetup: function(challengeName, challengeParam) {
          logger16.debug("signIn mfa setup", challengeName);
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve4(user);
        },
        newPasswordRequired: function(userAttributes, requiredAttributes) {
          logger16.debug("signIn new password");
          user["challengeName"] = "NEW_PASSWORD_REQUIRED";
          user["challengeParam"] = {
            userAttributes,
            requiredAttributes
          };
          resolve4(user);
        },
        totpRequired: function(challengeName, challengeParam) {
          logger16.debug("signIn totpRequired");
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve4(user);
        },
        selectMFAType: function(challengeName, challengeParam) {
          logger16.debug("signIn selectMFAType", challengeName);
          user["challengeName"] = challengeName;
          user["challengeParam"] = challengeParam;
          resolve4(user);
        }
      };
    };
    AuthClass2.prototype.signInWithPassword = function(authDetails) {
      var _this = this;
      if (this.pendingSignIn) {
        throw new Error("Pending sign-in attempt already in progress");
      }
      var user = this.createCognitoUser(authDetails.getUsername());
      this.pendingSignIn = new Promise(function(resolve4, reject) {
        user.authenticateUser(authDetails, _this.authCallbacks(user, function(value) {
          _this.pendingSignIn = null;
          resolve4(value);
        }, function(error) {
          _this.pendingSignIn = null;
          reject(error);
        }));
      });
      return this.pendingSignIn;
    };
    AuthClass2.prototype.signInWithoutPassword = function(authDetails) {
      var _this = this;
      var user = this.createCognitoUser(authDetails.getUsername());
      user.setAuthenticationFlowType("CUSTOM_AUTH");
      return new Promise(function(resolve4, reject) {
        user.initiateAuth(authDetails, _this.authCallbacks(user, resolve4, reject));
      });
    };
    AuthClass2.prototype.getMFAOptions = function(user) {
      return new Promise(function(res, rej) {
        user.getMFAOptions(function(err, mfaOptions) {
          if (err) {
            logger16.debug("get MFA Options failed", err);
            rej(err);
            return;
          }
          logger16.debug("get MFA options success", mfaOptions);
          res(mfaOptions);
          return;
        });
      });
    };
    AuthClass2.prototype.getPreferredMFA = function(user, params) {
      var _this = this;
      var that = this;
      return new Promise(function(res, rej) {
        var clientMetadata = _this._config.clientMetadata;
        var bypassCache = params ? params.bypassCache : false;
        user.getUserData(function(err, data) {
          return __awaiter3(_this, void 0, void 0, function() {
            var cleanUpError_1, mfaType;
            return __generator3(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!err)
                    return [3, 5];
                  logger16.debug("getting preferred mfa failed", err);
                  if (!this.isSessionInvalid(err))
                    return [3, 4];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this.cleanUpInvalidSession(user)];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  cleanUpError_1 = _a.sent();
                  rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_1.message));
                  return [
                    2
                    /*return*/
                  ];
                case 4:
                  rej(err);
                  return [
                    2
                    /*return*/
                  ];
                case 5:
                  mfaType = that._getMfaTypeFromUserData(data);
                  if (!mfaType) {
                    rej("invalid MFA Type");
                    return [
                      2
                      /*return*/
                    ];
                  } else {
                    res(mfaType);
                    return [
                      2
                      /*return*/
                    ];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, { bypassCache, clientMetadata });
      });
    };
    AuthClass2.prototype._getMfaTypeFromUserData = function(data) {
      var ret = null;
      var preferredMFA = data.PreferredMfaSetting;
      if (preferredMFA) {
        ret = preferredMFA;
      } else {
        var mfaList = data.UserMFASettingList;
        if (!mfaList) {
          var MFAOptions = data.MFAOptions;
          if (MFAOptions) {
            ret = "SMS_MFA";
          } else {
            ret = "NOMFA";
          }
        } else if (mfaList.length === 0) {
          ret = "NOMFA";
        } else {
          logger16.debug("invalid case for getPreferredMFA", data);
        }
      }
      return ret;
    };
    AuthClass2.prototype._getUserData = function(user, params) {
      var _this = this;
      return new Promise(function(res, rej) {
        user.getUserData(function(err, data) {
          return __awaiter3(_this, void 0, void 0, function() {
            var cleanUpError_2;
            return __generator3(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!err)
                    return [3, 5];
                  logger16.debug("getting user data failed", err);
                  if (!this.isSessionInvalid(err))
                    return [3, 4];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this.cleanUpInvalidSession(user)];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  cleanUpError_2 = _a.sent();
                  rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_2.message));
                  return [
                    2
                    /*return*/
                  ];
                case 4:
                  rej(err);
                  return [
                    2
                    /*return*/
                  ];
                case 5:
                  res(data);
                  _a.label = 6;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, params);
      });
    };
    AuthClass2.prototype.setPreferredMFA = function(user, mfaMethod) {
      return __awaiter3(this, void 0, void 0, function() {
        var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;
        var _this = this;
        return __generator3(this, function(_b) {
          switch (_b.label) {
            case 0:
              clientMetadata = this._config.clientMetadata;
              return [4, this._getUserData(user, {
                bypassCache: true,
                clientMetadata
              })];
            case 1:
              userData = _b.sent();
              smsMfaSettings = null;
              totpMfaSettings = null;
              _a = mfaMethod;
              switch (_a) {
                case "TOTP":
                  return [3, 2];
                case "SOFTWARE_TOKEN_MFA":
                  return [3, 2];
                case "SMS":
                  return [3, 3];
                case "SMS_MFA":
                  return [3, 3];
                case "NOMFA":
                  return [3, 4];
              }
              return [3, 6];
            case 2:
              totpMfaSettings = {
                PreferredMfa: true,
                Enabled: true
              };
              return [3, 7];
            case 3:
              smsMfaSettings = {
                PreferredMfa: true,
                Enabled: true
              };
              return [3, 7];
            case 4:
              mfaList = userData["UserMFASettingList"];
              return [4, this._getMfaTypeFromUserData(userData)];
            case 5:
              currentMFAType = _b.sent();
              if (currentMFAType === "NOMFA") {
                return [2, Promise.resolve("No change for mfa type")];
              } else if (currentMFAType === "SMS_MFA") {
                smsMfaSettings = {
                  PreferredMfa: false,
                  Enabled: false
                };
              } else if (currentMFAType === "SOFTWARE_TOKEN_MFA") {
                totpMfaSettings = {
                  PreferredMfa: false,
                  Enabled: false
                };
              } else {
                return [2, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];
              }
              if (mfaList && mfaList.length !== 0) {
                mfaList.forEach(function(mfaType) {
                  if (mfaType === "SMS_MFA") {
                    smsMfaSettings = {
                      PreferredMfa: false,
                      Enabled: false
                    };
                  } else if (mfaType === "SOFTWARE_TOKEN_MFA") {
                    totpMfaSettings = {
                      PreferredMfa: false,
                      Enabled: false
                    };
                  }
                });
              }
              return [3, 7];
            case 6:
              logger16.debug("no validmfa method provided");
              return [2, this.rejectAuthError(AuthErrorTypes.NoMFA)];
            case 7:
              that = this;
              return [2, new Promise(function(res, rej) {
                user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function(err, result) {
                  if (err) {
                    logger16.debug("Set user mfa preference error", err);
                    return rej(err);
                  }
                  logger16.debug("Set user mfa success", result);
                  logger16.debug("Caching the latest user data into local");
                  user.getUserData(function(err2, data) {
                    return __awaiter3(_this, void 0, void 0, function() {
                      var cleanUpError_3;
                      return __generator3(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            if (!err2)
                              return [3, 5];
                            logger16.debug("getting user data failed", err2);
                            if (!this.isSessionInvalid(err2))
                              return [3, 4];
                            _a2.label = 1;
                          case 1:
                            _a2.trys.push([1, 3, , 4]);
                            return [4, this.cleanUpInvalidSession(user)];
                          case 2:
                            _a2.sent();
                            return [3, 4];
                          case 3:
                            cleanUpError_3 = _a2.sent();
                            rej(new Error("Session is invalid due to: " + err2.message + " and failed to clean up invalid session: " + cleanUpError_3.message));
                            return [
                              2
                              /*return*/
                            ];
                          case 4:
                            return [2, rej(err2)];
                          case 5:
                            return [2, res(result)];
                        }
                      });
                    });
                  }, {
                    bypassCache: true,
                    clientMetadata
                  });
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.disableSMS = function(user) {
      return new Promise(function(res, rej) {
        user.disableMFA(function(err, data) {
          if (err) {
            logger16.debug("disable mfa failed", err);
            rej(err);
            return;
          }
          logger16.debug("disable mfa succeed", data);
          res(data);
          return;
        });
      });
    };
    AuthClass2.prototype.enableSMS = function(user) {
      return new Promise(function(res, rej) {
        user.enableMFA(function(err, data) {
          if (err) {
            logger16.debug("enable mfa failed", err);
            rej(err);
            return;
          }
          logger16.debug("enable mfa succeed", data);
          res(data);
          return;
        });
      });
    };
    AuthClass2.prototype.setupTOTP = function(user) {
      return new Promise(function(res, rej) {
        user.associateSoftwareToken({
          onFailure: function(err) {
            logger16.debug("associateSoftwareToken failed", err);
            rej(err);
            return;
          },
          associateSecretCode: function(secretCode) {
            logger16.debug("associateSoftwareToken success", secretCode);
            res(secretCode);
            return;
          }
        });
      });
    };
    AuthClass2.prototype.verifyTotpToken = function(user, challengeAnswer) {
      logger16.debug("verification totp token", user, challengeAnswer);
      var signInUserSession;
      if (user && typeof user.getSignInUserSession === "function") {
        signInUserSession = user.getSignInUserSession();
      }
      var isLoggedIn = signInUserSession === null || signInUserSession === void 0 ? void 0 : signInUserSession.isValid();
      return new Promise(function(res, rej) {
        user.verifySoftwareToken(challengeAnswer, "My TOTP device", {
          onFailure: function(err) {
            logger16.debug("verifyTotpToken failed", err);
            rej(err);
            return;
          },
          onSuccess: function(data) {
            if (!isLoggedIn) {
              dispatchAuthEvent2("signIn", user, "A user " + user.getUsername() + " has been signed in");
            }
            dispatchAuthEvent2("verify", user, "A user " + user.getUsername() + " has been verified");
            logger16.debug("verifyTotpToken success", data);
            res(data);
            return;
          }
        });
      });
    };
    AuthClass2.prototype.confirmSignIn = function(user, code, mfaType, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      var that = this;
      return new Promise(function(resolve4, reject) {
        user.sendMFACode(code, {
          onSuccess: function(session) {
            return __awaiter3(_this, void 0, void 0, function() {
              var cred, e_3, currentUser, e_4;
              return __generator3(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    logger16.debug(session);
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 4, 5, 10]);
                    return [4, this.Credentials.clear()];
                  case 2:
                    _a.sent();
                    return [4, this.Credentials.set(session, "session")];
                  case 3:
                    cred = _a.sent();
                    logger16.debug("succeed to get cognito credentials", cred);
                    return [3, 10];
                  case 4:
                    e_3 = _a.sent();
                    logger16.debug("cannot get cognito credentials", e_3);
                    return [3, 10];
                  case 5:
                    that.user = user;
                    _a.label = 6;
                  case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4, this.currentUserPoolUser()];
                  case 7:
                    currentUser = _a.sent();
                    user.attributes = currentUser.attributes;
                    return [3, 9];
                  case 8:
                    e_4 = _a.sent();
                    logger16.debug("cannot get updated Cognito User", e_4);
                    return [3, 9];
                  case 9:
                    dispatchAuthEvent2("signIn", user, "A user " + user.getUsername() + " has been signed in");
                    resolve4(user);
                    return [
                      7
                      /*endfinally*/
                    ];
                  case 10:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          },
          onFailure: function(err) {
            logger16.debug("confirm signIn failure", err);
            reject(err);
          }
        }, mfaType, clientMetadata);
      });
    };
    AuthClass2.prototype.completeNewPassword = function(user, password, requiredAttributes, clientMetadata) {
      var _this = this;
      if (requiredAttributes === void 0) {
        requiredAttributes = {};
      }
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!password) {
        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
      }
      var that = this;
      return new Promise(function(resolve4, reject) {
        user.completeNewPasswordChallenge(password, requiredAttributes, {
          onSuccess: function(session) {
            return __awaiter3(_this, void 0, void 0, function() {
              var cred, e_5;
              return __generator3(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    logger16.debug(session);
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 4, 5, 6]);
                    return [4, this.Credentials.clear()];
                  case 2:
                    _a.sent();
                    return [4, this.Credentials.set(session, "session")];
                  case 3:
                    cred = _a.sent();
                    logger16.debug("succeed to get cognito credentials", cred);
                    return [3, 6];
                  case 4:
                    e_5 = _a.sent();
                    logger16.debug("cannot get cognito credentials", e_5);
                    return [3, 6];
                  case 5:
                    that.user = user;
                    dispatchAuthEvent2("signIn", user, "A user " + user.getUsername() + " has been signed in");
                    resolve4(user);
                    return [
                      7
                      /*endfinally*/
                    ];
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          },
          onFailure: function(err) {
            logger16.debug("completeNewPassword failure", err);
            dispatchAuthEvent2("completeNewPassword_failure", err, _this.user + " failed to complete the new password flow");
            reject(err);
          },
          mfaRequired: function(challengeName, challengeParam) {
            logger16.debug("signIn MFA required");
            user["challengeName"] = challengeName;
            user["challengeParam"] = challengeParam;
            resolve4(user);
          },
          mfaSetup: function(challengeName, challengeParam) {
            logger16.debug("signIn mfa setup", challengeName);
            user["challengeName"] = challengeName;
            user["challengeParam"] = challengeParam;
            resolve4(user);
          },
          totpRequired: function(challengeName, challengeParam) {
            logger16.debug("signIn mfa setup", challengeName);
            user["challengeName"] = challengeName;
            user["challengeParam"] = challengeParam;
            resolve4(user);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.sendCustomChallengeAnswer = function(user, challengeResponses, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!challengeResponses) {
        return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);
      }
      var that = this;
      return new Promise(function(resolve4, reject) {
        user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve4, reject), clientMetadata);
      });
    };
    AuthClass2.prototype.deleteUserAttributes = function(user, attributeNames) {
      var that = this;
      return new Promise(function(resolve4, reject) {
        that.userSession(user).then(function(session) {
          user.deleteAttributes(attributeNames, function(err, result) {
            if (err) {
              return reject(err);
            } else {
              return resolve4(result);
            }
          });
        });
      });
    };
    AuthClass2.prototype.deleteUser = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var e_6, isSignedInHostedUI;
        var _this = this;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this._storageSync];
            case 1:
              _a.sent();
              return [3, 3];
            case 2:
              e_6 = _a.sent();
              logger16.debug("Failed to sync cache info into memory", e_6);
              throw new Error(e_6);
            case 3:
              isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
              return [2, new Promise(function(res, rej) {
                return __awaiter3(_this, void 0, void 0, function() {
                  var user_1;
                  var _this2 = this;
                  return __generator3(this, function(_a2) {
                    if (this.userPool) {
                      user_1 = this.userPool.getCurrentUser();
                      if (!user_1) {
                        logger16.debug("Failed to get user from user pool");
                        return [2, rej(new Error("No current user."))];
                      } else {
                        user_1.getSession(function(err, session) {
                          return __awaiter3(_this2, void 0, void 0, function() {
                            var cleanUpError_4;
                            var _this3 = this;
                            return __generator3(this, function(_a3) {
                              switch (_a3.label) {
                                case 0:
                                  if (!err)
                                    return [3, 5];
                                  logger16.debug("Failed to get the user session", err);
                                  if (!this.isSessionInvalid(err))
                                    return [3, 4];
                                  _a3.label = 1;
                                case 1:
                                  _a3.trys.push([1, 3, , 4]);
                                  return [4, this.cleanUpInvalidSession(user_1)];
                                case 2:
                                  _a3.sent();
                                  return [3, 4];
                                case 3:
                                  cleanUpError_4 = _a3.sent();
                                  rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_4.message));
                                  return [
                                    2
                                    /*return*/
                                  ];
                                case 4:
                                  return [2, rej(err)];
                                case 5:
                                  user_1.deleteUser(function(err2, result) {
                                    if (err2) {
                                      rej(err2);
                                    } else {
                                      dispatchAuthEvent2("userDeleted", result, "The authenticated user has been deleted.");
                                      user_1.signOut();
                                      _this3.user = null;
                                      try {
                                        _this3.cleanCachedItems();
                                      } catch (e) {
                                        logger16.debug("failed to clear cached items");
                                      }
                                      if (isSignedInHostedUI) {
                                        _this3.oAuthSignOutRedirect(res, rej);
                                      } else {
                                        dispatchAuthEvent2("signOut", _this3.user, "A user has been signed out");
                                        res(result);
                                      }
                                    }
                                  });
                                  _a3.label = 6;
                                case 6:
                                  return [
                                    2
                                    /*return*/
                                  ];
                              }
                            });
                          });
                        });
                      }
                    } else {
                      logger16.debug("no Congito User pool");
                      rej(new Error("Cognito User pool does not exist"));
                    }
                    return [
                      2
                      /*return*/
                    ];
                  });
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.updateUserAttributes = function(user, attributes, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      var attributeList = [];
      var that = this;
      return new Promise(function(resolve4, reject) {
        that.userSession(user).then(function(session) {
          for (var key in attributes) {
            if (key !== "sub" && key.indexOf("_verified") < 0) {
              var attr = {
                Name: key,
                Value: attributes[key]
              };
              attributeList.push(attr);
            }
          }
          user.updateAttributes(attributeList, function(err, result, details) {
            if (err) {
              dispatchAuthEvent2("updateUserAttributes_failure", err, "Failed to update attributes");
              return reject(err);
            } else {
              var attrs = _this.createUpdateAttributesResultList(attributes, details === null || details === void 0 ? void 0 : details.CodeDeliveryDetailsList);
              dispatchAuthEvent2("updateUserAttributes", attrs, "Attributes successfully updated");
              return resolve4(result);
            }
          }, clientMetadata);
        });
      });
    };
    AuthClass2.prototype.createUpdateAttributesResultList = function(attributes, codeDeliveryDetailsList) {
      var attrs = {};
      Object.keys(attributes).forEach(function(key) {
        attrs[key] = {
          isUpdated: true
        };
        var codeDeliveryDetails = codeDeliveryDetailsList === null || codeDeliveryDetailsList === void 0 ? void 0 : codeDeliveryDetailsList.find(function(value) {
          return value.AttributeName === key;
        });
        if (codeDeliveryDetails) {
          attrs[key].isUpdated = false;
          attrs[key].codeDeliveryDetails = codeDeliveryDetails;
        }
      });
      return attrs;
    };
    AuthClass2.prototype.userAttributes = function(user) {
      var _this = this;
      return new Promise(function(resolve4, reject) {
        _this.userSession(user).then(function(session) {
          user.getUserAttributes(function(err, attributes) {
            if (err) {
              reject(err);
            } else {
              resolve4(attributes);
            }
          });
        });
      });
    };
    AuthClass2.prototype.verifiedContact = function(user) {
      var that = this;
      return this.userAttributes(user).then(function(attributes) {
        var attrs = that.attributesToObject(attributes);
        var unverified = {};
        var verified = {};
        if (attrs["email"]) {
          if (attrs["email_verified"]) {
            verified["email"] = attrs["email"];
          } else {
            unverified["email"] = attrs["email"];
          }
        }
        if (attrs["phone_number"]) {
          if (attrs["phone_number_verified"]) {
            verified["phone_number"] = attrs["phone_number"];
          } else {
            unverified["phone_number"] = attrs["phone_number"];
          }
        }
        return {
          verified,
          unverified
        };
      });
    };
    AuthClass2.prototype.isErrorWithMessage = function(err) {
      return typeof err === "object" && Object.prototype.hasOwnProperty.call(err, "message");
    };
    AuthClass2.prototype.isTokenRevokedError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "Access Token has been revoked";
    };
    AuthClass2.prototype.isRefreshTokenRevokedError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "Refresh Token has been revoked";
    };
    AuthClass2.prototype.isUserDisabledError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "User is disabled.";
    };
    AuthClass2.prototype.isUserDoesNotExistError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "User does not exist.";
    };
    AuthClass2.prototype.isRefreshTokenExpiredError = function(err) {
      return this.isErrorWithMessage(err) && err.message === "Refresh Token has expired";
    };
    AuthClass2.prototype.isSignedInHostedUI = function() {
      return this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
    };
    AuthClass2.prototype.isSessionInvalid = function(err) {
      return this.isUserDisabledError(err) || this.isUserDoesNotExistError(err) || this.isTokenRevokedError(err) || this.isRefreshTokenRevokedError(err) || this.isRefreshTokenExpiredError(err);
    };
    AuthClass2.prototype.cleanUpInvalidSession = function(user) {
      return __awaiter3(this, void 0, void 0, function() {
        var e_7;
        var _this = this;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              user.signOut();
              this.user = null;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.cleanCachedItems()];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_7 = _a.sent();
              logger16.debug("failed to clear cached items");
              return [3, 4];
            case 4:
              if (this.isSignedInHostedUI()) {
                return [2, new Promise(function(res, rej) {
                  _this.oAuthSignOutRedirect(res, rej);
                })];
              } else {
                dispatchAuthEvent2("signOut", this.user, "A user has been signed out");
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.currentUserPoolUser = function(params) {
      var _this = this;
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      return new Promise(function(res, rej) {
        _this._storageSync.then(function() {
          return __awaiter3(_this, void 0, void 0, function() {
            var user, session, bypassCache, clientMetadata, _a, scope, err_1;
            var _this2 = this;
            return __generator3(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!this.isOAuthInProgress())
                    return [3, 2];
                  logger16.debug("OAuth signIn in progress, waiting for resolution...");
                  return [4, new Promise(function(res2) {
                    var timeoutId = setTimeout(function() {
                      logger16.debug("OAuth signIn in progress timeout");
                      Hub.remove("auth", hostedUISignCallback);
                      res2();
                    }, OAUTH_FLOW_MS_TIMEOUT);
                    Hub.listen("auth", hostedUISignCallback);
                    function hostedUISignCallback(_a2) {
                      var payload = _a2.payload;
                      var event = payload.event;
                      if (event === "cognitoHostedUI" || event === "cognitoHostedUI_failure") {
                        logger16.debug("OAuth signIn resolved: " + event);
                        clearTimeout(timeoutId);
                        Hub.remove("auth", hostedUISignCallback);
                        res2();
                      }
                    }
                  })];
                case 1:
                  _b.sent();
                  _b.label = 2;
                case 2:
                  user = this.userPool.getCurrentUser();
                  if (!user) {
                    logger16.debug("Failed to get user from user pool");
                    rej("No current user");
                    return [
                      2
                      /*return*/
                    ];
                  }
                  _b.label = 3;
                case 3:
                  _b.trys.push([3, 7, , 8]);
                  return [4, this._userSession(user)];
                case 4:
                  session = _b.sent();
                  bypassCache = params ? params.bypassCache : false;
                  if (!bypassCache)
                    return [3, 6];
                  return [4, this.Credentials.clear()];
                case 5:
                  _b.sent();
                  _b.label = 6;
                case 6:
                  clientMetadata = this._config.clientMetadata;
                  _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? "" : _a;
                  if (scope.split(" ").includes(USER_ADMIN_SCOPE)) {
                    user.getUserData(function(err, data) {
                      return __awaiter3(_this2, void 0, void 0, function() {
                        var cleanUpError_5, preferredMFA, attributeList, i2, attribute, userAttribute, attributes;
                        return __generator3(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              if (!err)
                                return [3, 7];
                              logger16.debug("getting user data failed", err);
                              if (!this.isSessionInvalid(err))
                                return [3, 5];
                              _a2.label = 1;
                            case 1:
                              _a2.trys.push([1, 3, , 4]);
                              return [4, this.cleanUpInvalidSession(user)];
                            case 2:
                              _a2.sent();
                              return [3, 4];
                            case 3:
                              cleanUpError_5 = _a2.sent();
                              rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_5.message));
                              return [
                                2
                                /*return*/
                              ];
                            case 4:
                              rej(err);
                              return [3, 6];
                            case 5:
                              res(user);
                              _a2.label = 6;
                            case 6:
                              return [
                                2
                                /*return*/
                              ];
                            case 7:
                              preferredMFA = data.PreferredMfaSetting || "NOMFA";
                              attributeList = [];
                              for (i2 = 0; i2 < data.UserAttributes.length; i2++) {
                                attribute = {
                                  Name: data.UserAttributes[i2].Name,
                                  Value: data.UserAttributes[i2].Value
                                };
                                userAttribute = new CognitoUserAttribute(attribute);
                                attributeList.push(userAttribute);
                              }
                              attributes = this.attributesToObject(attributeList);
                              Object.assign(user, { attributes, preferredMFA });
                              return [2, res(user)];
                          }
                        });
                      });
                    }, { bypassCache, clientMetadata });
                  } else {
                    logger16.debug("Unable to get the user data because the " + USER_ADMIN_SCOPE + " is not in the scopes of the access token");
                    return [2, res(user)];
                  }
                  return [3, 8];
                case 7:
                  err_1 = _b.sent();
                  rej(err_1);
                  return [3, 8];
                case 8:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }).catch(function(e) {
          logger16.debug("Failed to sync cache info into memory", e);
          return rej(e);
        });
      });
    };
    AuthClass2.prototype.isOAuthInProgress = function() {
      return this.oAuthFlowInProgress;
    };
    AuthClass2.prototype.currentAuthenticatedUser = function(params) {
      return __awaiter3(this, void 0, void 0, function() {
        var federatedUser, e_8, federatedInfo, user, e_9;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger16.debug("getting current authenticated user");
              federatedUser = null;
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_8 = _a.sent();
              logger16.debug("Failed to sync cache info into memory", e_8);
              throw e_8;
            case 4:
              try {
                federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
                if (federatedInfo) {
                  federatedUser = __assign3(__assign3({}, federatedInfo.user), { token: federatedInfo.token });
                }
              } catch (e) {
                logger16.debug("cannot load federated user from auth storage");
              }
              if (!federatedUser)
                return [3, 5];
              this.user = federatedUser;
              logger16.debug("get current authenticated federated user", this.user);
              return [2, this.user];
            case 5:
              logger16.debug("get current authenticated userpool user");
              user = null;
              _a.label = 6;
            case 6:
              _a.trys.push([6, 8, , 9]);
              return [4, this.currentUserPoolUser(params)];
            case 7:
              user = _a.sent();
              return [3, 9];
            case 8:
              e_9 = _a.sent();
              if (e_9 === "No userPool") {
                logger16.error("Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID");
              }
              logger16.debug("The user is not authenticated by the error", e_9);
              return [2, Promise.reject("The user is not authenticated")];
            case 9:
              this.user = user;
              return [2, this.user];
          }
        });
      });
    };
    AuthClass2.prototype.currentSession = function() {
      var that = this;
      logger16.debug("Getting current session");
      if (!this.userPool) {
        return Promise.reject(new Error("No User Pool in the configuration."));
      }
      return new Promise(function(res, rej) {
        that.currentUserPoolUser().then(function(user) {
          that.userSession(user).then(function(session) {
            res(session);
            return;
          }).catch(function(e) {
            logger16.debug("Failed to get the current session", e);
            rej(e);
            return;
          });
        }).catch(function(e) {
          logger16.debug("Failed to get the current user", e);
          rej(e);
          return;
        });
      });
    };
    AuthClass2.prototype._userSession = function(user) {
      return __awaiter3(this, void 0, void 0, function() {
        var clientMetadata, userSession;
        var _this = this;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!user) {
                logger16.debug("the user is null");
                return [2, this.rejectAuthError(AuthErrorTypes.NoUserSession)];
              }
              clientMetadata = this._config.clientMetadata;
              if (this.inflightSessionPromiseCounter === 0) {
                this.inflightSessionPromise = new Promise(function(res, rej) {
                  user.getSession(function(err, session) {
                    return __awaiter3(_this, void 0, void 0, function() {
                      var cleanUpError_6;
                      return __generator3(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            if (!err)
                              return [3, 5];
                            logger16.debug("Failed to get the session from user", user);
                            if (!this.isSessionInvalid(err))
                              return [3, 4];
                            _a2.label = 1;
                          case 1:
                            _a2.trys.push([1, 3, , 4]);
                            return [4, this.cleanUpInvalidSession(user)];
                          case 2:
                            _a2.sent();
                            return [3, 4];
                          case 3:
                            cleanUpError_6 = _a2.sent();
                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_6.message));
                            return [
                              2
                              /*return*/
                            ];
                          case 4:
                            rej(err);
                            return [
                              2
                              /*return*/
                            ];
                          case 5:
                            logger16.debug("Succeed to get the user session", session);
                            res(session);
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }, { clientMetadata });
                });
              }
              this.inflightSessionPromiseCounter++;
              _a.label = 1;
            case 1:
              _a.trys.push([1, , 3, 4]);
              return [4, this.inflightSessionPromise];
            case 2:
              userSession = _a.sent();
              user.signInUserSession = userSession;
              return [2, userSession];
            case 3:
              this.inflightSessionPromiseCounter--;
              return [
                7
                /*endfinally*/
              ];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.userSession = function(user) {
      return this._userSession(user);
    };
    AuthClass2.prototype.currentUserCredentials = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var e_10, federatedInfo;
        var _this = this;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger16.debug("Getting current user credentials");
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this._storageSync];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_10 = _a.sent();
              logger16.debug("Failed to sync cache info into memory", e_10);
              throw e_10;
            case 4:
              federatedInfo = null;
              try {
                federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
              } catch (e) {
                logger16.debug("failed to get or parse item aws-amplify-federatedInfo", e);
              }
              if (federatedInfo) {
                return [2, this.Credentials.refreshFederatedToken(federatedInfo)];
              } else {
                return [2, this.currentSession().then(function(session) {
                  logger16.debug("getting session success", session);
                  return _this.Credentials.set(session, "session");
                }).catch(function() {
                  logger16.debug("getting guest credentials");
                  return _this.Credentials.set(null, "guest");
                })];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.currentCredentials = function() {
      logger16.debug("getting current credentials");
      return this.Credentials.get();
    };
    AuthClass2.prototype.verifyUserAttribute = function(user, attr, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      return new Promise(function(resolve4, reject) {
        user.getAttributeVerificationCode(attr, {
          onSuccess: function(success) {
            return resolve4(success);
          },
          onFailure: function(err) {
            return reject(err);
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.verifyUserAttributeSubmit = function(user, attr, code) {
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      return new Promise(function(resolve4, reject) {
        user.verifyAttribute(attr, code, {
          onSuccess: function(data) {
            resolve4(data);
            return;
          },
          onFailure: function(err) {
            reject(err);
            return;
          }
        });
      });
    };
    AuthClass2.prototype.verifyCurrentUserAttribute = function(attr) {
      var that = this;
      return that.currentUserPoolUser().then(function(user) {
        return that.verifyUserAttribute(user, attr);
      });
    };
    AuthClass2.prototype.verifyCurrentUserAttributeSubmit = function(attr, code) {
      var that = this;
      return that.currentUserPoolUser().then(function(user) {
        return that.verifyUserAttributeSubmit(user, attr, code);
      });
    };
    AuthClass2.prototype.cognitoIdentitySignOut = function(opts, user) {
      return __awaiter3(this, void 0, void 0, function() {
        var e_11, isSignedInHostedUI;
        var _this = this;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this._storageSync];
            case 1:
              _a.sent();
              return [3, 3];
            case 2:
              e_11 = _a.sent();
              logger16.debug("Failed to sync cache info into memory", e_11);
              throw e_11;
            case 3:
              isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
              return [2, new Promise(function(res, rej) {
                if (opts && opts.global) {
                  logger16.debug("user global sign out", user);
                  var clientMetadata = _this._config.clientMetadata;
                  user.getSession(function(err, result) {
                    return __awaiter3(_this, void 0, void 0, function() {
                      var cleanUpError_7;
                      var _this2 = this;
                      return __generator3(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            if (!err)
                              return [3, 5];
                            logger16.debug("failed to get the user session", err);
                            if (!this.isSessionInvalid(err))
                              return [3, 4];
                            _a2.label = 1;
                          case 1:
                            _a2.trys.push([1, 3, , 4]);
                            return [4, this.cleanUpInvalidSession(user)];
                          case 2:
                            _a2.sent();
                            return [3, 4];
                          case 3:
                            cleanUpError_7 = _a2.sent();
                            rej(new Error("Session is invalid due to: " + err.message + " and failed to clean up invalid session: " + cleanUpError_7.message));
                            return [
                              2
                              /*return*/
                            ];
                          case 4:
                            return [2, rej(err)];
                          case 5:
                            user.globalSignOut({
                              onSuccess: function(data) {
                                logger16.debug("global sign out success");
                                if (isSignedInHostedUI) {
                                  _this2.oAuthSignOutRedirect(res, rej);
                                } else {
                                  return res();
                                }
                              },
                              onFailure: function(err2) {
                                logger16.debug("global sign out failed", err2);
                                return rej(err2);
                              }
                            });
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }, { clientMetadata });
                } else {
                  logger16.debug("user sign out", user);
                  user.signOut(function() {
                    if (isSignedInHostedUI) {
                      _this.oAuthSignOutRedirect(res, rej);
                    } else {
                      return res();
                    }
                  });
                }
              })];
          }
        });
      });
    };
    AuthClass2.prototype.oAuthSignOutRedirect = function(resolve4, reject) {
      var isBrowser2 = browserOrNode().isBrowser;
      if (isBrowser2) {
        this.oAuthSignOutRedirectOrReject(reject);
      } else {
        this.oAuthSignOutAndResolve(resolve4);
      }
    };
    AuthClass2.prototype.oAuthSignOutAndResolve = function(resolve4) {
      this._oAuthHandler.signOut();
      resolve4();
    };
    AuthClass2.prototype.oAuthSignOutRedirectOrReject = function(reject) {
      this._oAuthHandler.signOut();
      setTimeout(function() {
        return reject(Error("Signout timeout fail"));
      }, 3e3);
    };
    AuthClass2.prototype.signOut = function(opts) {
      return __awaiter3(this, void 0, void 0, function() {
        var e_12, user;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.cleanCachedItems()];
            case 1:
              _a.sent();
              return [3, 3];
            case 2:
              e_12 = _a.sent();
              logger16.debug("failed to clear cached items");
              return [3, 3];
            case 3:
              if (!this.userPool)
                return [3, 7];
              user = this.userPool.getCurrentUser();
              if (!user)
                return [3, 5];
              return [4, this.cognitoIdentitySignOut(opts, user)];
            case 4:
              _a.sent();
              return [3, 6];
            case 5:
              logger16.debug("no current Cognito user");
              _a.label = 6;
            case 6:
              return [3, 8];
            case 7:
              logger16.debug("no Cognito User pool");
              _a.label = 8;
            case 8:
              dispatchAuthEvent2("signOut", this.user, "A user has been signed out");
              this.user = null;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.cleanCachedItems = function() {
      return __awaiter3(this, void 0, void 0, function() {
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.Credentials.clear()];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.changePassword = function(user, oldPassword, newPassword, clientMetadata) {
      var _this = this;
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      return new Promise(function(resolve4, reject) {
        _this.userSession(user).then(function(session) {
          user.changePassword(oldPassword, newPassword, function(err, data) {
            if (err) {
              logger16.debug("change password failure", err);
              return reject(err);
            } else {
              return resolve4(data);
            }
          }, clientMetadata);
        });
      });
    };
    AuthClass2.prototype.forgotPassword = function(username, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      var user = this.createCognitoUser(username);
      return new Promise(function(resolve4, reject) {
        user.forgotPassword({
          onSuccess: function() {
            resolve4();
            return;
          },
          onFailure: function(err) {
            logger16.debug("forgot password failure", err);
            dispatchAuthEvent2("forgotPassword_failure", err, username + " forgotPassword failed");
            reject(err);
            return;
          },
          inputVerificationCode: function(data) {
            dispatchAuthEvent2("forgotPassword", user, username + " has initiated forgot password flow");
            resolve4(data);
            return;
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.forgotPasswordSubmit = function(username, code, password, clientMetadata) {
      if (clientMetadata === void 0) {
        clientMetadata = this._config.clientMetadata;
      }
      if (!this.userPool) {
        return this.rejectNoUserPool();
      }
      if (!username) {
        return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
      }
      if (!code) {
        return this.rejectAuthError(AuthErrorTypes.EmptyCode);
      }
      if (!password) {
        return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
      }
      var user = this.createCognitoUser(username);
      return new Promise(function(resolve4, reject) {
        user.confirmPassword(code, password, {
          onSuccess: function(success) {
            dispatchAuthEvent2("forgotPasswordSubmit", user, username + " forgotPasswordSubmit successful");
            resolve4(success);
            return;
          },
          onFailure: function(err) {
            dispatchAuthEvent2("forgotPasswordSubmit_failure", err, username + " forgotPasswordSubmit failed");
            reject(err);
            return;
          }
        }, clientMetadata);
      });
    };
    AuthClass2.prototype.currentUserInfo = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var source, user, attributes, userAttrs, credentials, e_13, info, err_2, user;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              source = this.Credentials.getCredSource();
              if (!(!source || source === "aws" || source === "userPool"))
                return [3, 9];
              return [4, this.currentUserPoolUser().catch(function(err) {
                return logger16.error(err);
              })];
            case 1:
              user = _a.sent();
              if (!user) {
                return [2, null];
              }
              _a.label = 2;
            case 2:
              _a.trys.push([2, 8, , 9]);
              return [4, this.userAttributes(user)];
            case 3:
              attributes = _a.sent();
              userAttrs = this.attributesToObject(attributes);
              credentials = null;
              _a.label = 4;
            case 4:
              _a.trys.push([4, 6, , 7]);
              return [4, this.currentCredentials()];
            case 5:
              credentials = _a.sent();
              return [3, 7];
            case 6:
              e_13 = _a.sent();
              logger16.debug("Failed to retrieve credentials while getting current user info", e_13);
              return [3, 7];
            case 7:
              info = {
                id: credentials ? credentials.identityId : void 0,
                username: user.getUsername(),
                attributes: userAttrs
              };
              return [2, info];
            case 8:
              err_2 = _a.sent();
              logger16.error("currentUserInfo error", err_2);
              return [2, {}];
            case 9:
              if (source === "federated") {
                user = this.user;
                return [2, user ? user : {}];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.federatedSignIn = function(providerOrOptions, response, user) {
      return __awaiter3(this, void 0, void 0, function() {
        var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this._config.identityPoolId && !this._config.userPoolId) {
                throw new Error("Federation requires either a User Pool or Identity Pool in config");
              }
              if (typeof providerOrOptions === "undefined") {
                if (this._config.identityPoolId && !this._config.userPoolId) {
                  throw new Error("Federation with Identity Pools requires tokens passed as arguments");
                }
              }
              if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === "undefined"))
                return [3, 1];
              options = providerOrOptions || {
                provider: CognitoHostedUIIdentityProvider.Cognito
              };
              provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;
              customState = isFederatedSignInOptions(options) ? options.customState : options.customState;
              if (this._config.userPoolId) {
                client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;
                redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;
                this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);
              }
              return [3, 4];
            case 1:
              provider = providerOrOptions;
              try {
                loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")).user);
                if (loggedInUser) {
                  logger16.warn("There is already a signed in user: " + loggedInUser + " in your app.\n																	You should not call Auth.federatedSignIn method again as it may cause unexpected behavior.");
                }
              } catch (e) {
              }
              token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;
              return [4, this.Credentials.set({ provider, token, identity_id, user, expires_at }, "federation")];
            case 2:
              credentials = _a.sent();
              return [4, this.currentAuthenticatedUser()];
            case 3:
              currentUser = _a.sent();
              dispatchAuthEvent2("signIn", currentUser, "A user " + currentUser.username + " has been signed in");
              logger16.debug("federated sign in credentials", credentials);
              return [2, credentials];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype._handleAuthResponse = function(URL2) {
      return __awaiter3(this, void 0, void 0, function() {
        var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_3;
        return __generator3(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (this.oAuthFlowInProgress) {
                logger16.debug("Skipping URL " + URL2 + " current flow in progress");
                return [
                  2
                  /*return*/
                ];
              }
              _b.label = 1;
            case 1:
              _b.trys.push([1, , 8, 9]);
              this.oAuthFlowInProgress = true;
              if (!this._config.userPoolId) {
                throw new Error("OAuth responses require a User Pool defined in config");
              }
              dispatchAuthEvent2("parsingCallbackUrl", { url: URL2 }, "The callback url is being parsed");
              currentUrl = URL2 || (browserOrNode().isBrowser ? window.location.href : "");
              hasCodeOrError = !!((0, import_url3.parse)(currentUrl).query || "").split("&").map(function(entry) {
                return entry.split("=");
              }).find(function(_a2) {
                var _b2 = __read2(_a2, 1), k2 = _b2[0];
                return k2 === "code" || k2 === "error";
              });
              hasTokenOrError = !!((0, import_url3.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                return entry.split("=");
              }).find(function(_a2) {
                var _b2 = __read2(_a2, 1), k2 = _b2[0];
                return k2 === "access_token" || k2 === "error";
              });
              if (!(hasCodeOrError || hasTokenOrError))
                return [3, 7];
              this._storage.setItem("amplify-redirected-from-hosted-ui", "true");
              _b.label = 2;
            case 2:
              _b.trys.push([2, 6, , 7]);
              return [4, this._oAuthHandler.handleAuthResponse(currentUrl)];
            case 3:
              _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;
              session = new CognitoUserSession({
                IdToken: new CognitoIdToken({ IdToken: idToken }),
                RefreshToken: new CognitoRefreshToken({
                  RefreshToken: refreshToken
                }),
                AccessToken: new CognitoAccessToken({
                  AccessToken: accessToken
                })
              });
              credentials = void 0;
              if (!this._config.identityPoolId)
                return [3, 5];
              return [4, this.Credentials.set(session, "session")];
            case 4:
              credentials = _b.sent();
              logger16.debug("AWS credentials", credentials);
              _b.label = 5;
            case 5:
              isCustomStateIncluded = /-/.test(state);
              currentUser = this.createCognitoUser(session.getIdToken().decodePayload()["cognito:username"]);
              currentUser.setSignInUserSession(session);
              if (window && typeof window.history !== "undefined") {
                window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
              }
              dispatchAuthEvent2("signIn", currentUser, "A user " + currentUser.getUsername() + " has been signed in");
              dispatchAuthEvent2("cognitoHostedUI", currentUser, "A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI");
              if (isCustomStateIncluded) {
                customState = state.split("-").splice(1).join("-");
                dispatchAuthEvent2("customOAuthState", urlSafeDecode(customState), "State for user " + currentUser.getUsername());
              }
              return [2, credentials];
            case 6:
              err_3 = _b.sent();
              logger16.debug("Error in cognito hosted auth response", err_3);
              if (window && typeof window.history !== "undefined") {
                window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
              }
              dispatchAuthEvent2("signIn_failure", err_3, "The OAuth response flow failed");
              dispatchAuthEvent2("cognitoHostedUI_failure", err_3, "A failure occurred when returning to the Cognito Hosted UI");
              dispatchAuthEvent2("customState_failure", err_3, "A failure occurred when returning state");
              return [3, 7];
            case 7:
              return [3, 9];
            case 8:
              this.oAuthFlowInProgress = false;
              return [
                7
                /*endfinally*/
              ];
            case 9:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AuthClass2.prototype.essentialCredentials = function(credentials) {
      return {
        accessKeyId: credentials.accessKeyId,
        sessionToken: credentials.sessionToken,
        secretAccessKey: credentials.secretAccessKey,
        identityId: credentials.identityId,
        authenticated: credentials.authenticated
      };
    };
    AuthClass2.prototype.attributesToObject = function(attributes) {
      var _this = this;
      var obj = {};
      if (attributes) {
        attributes.map(function(attribute) {
          if (attribute.Name === "email_verified" || attribute.Name === "phone_number_verified") {
            obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;
          } else {
            obj[attribute.Name] = attribute.Value;
          }
        });
      }
      return obj;
    };
    AuthClass2.prototype.isTruthyString = function(value) {
      return typeof value.toLowerCase === "function" && value.toLowerCase() === "true";
    };
    AuthClass2.prototype.createCognitoUser = function(username) {
      var userData = {
        Username: username,
        Pool: this.userPool
      };
      userData.Storage = this._storage;
      var authenticationFlowType = this._config.authenticationFlowType;
      var user = new CognitoUser(userData);
      if (authenticationFlowType) {
        user.setAuthenticationFlowType(authenticationFlowType);
      }
      return user;
    };
    AuthClass2.prototype._isValidAuthStorage = function(obj) {
      return !!obj && typeof obj.getItem === "function" && typeof obj.setItem === "function" && typeof obj.removeItem === "function" && typeof obj.clear === "function";
    };
    AuthClass2.prototype.noUserPoolErrorHandler = function(config) {
      if (config) {
        if (!config.userPoolId || !config.identityPoolId) {
          return AuthErrorTypes.MissingAuthConfig;
        }
      }
      return AuthErrorTypes.NoConfig;
    };
    AuthClass2.prototype.rejectAuthError = function(type) {
      return Promise.reject(new AuthError(type));
    };
    AuthClass2.prototype.rejectNoUserPool = function() {
      var type = this.noUserPoolErrorHandler(this._config);
      return Promise.reject(new NoUserPoolError(type));
    };
    AuthClass2.prototype.rememberDevice = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var currUser, error_2;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.currentUserPoolUser()];
            case 1:
              currUser = _a.sent();
              return [3, 3];
            case 2:
              error_2 = _a.sent();
              logger16.debug("The user is not authenticated by the error", error_2);
              return [2, Promise.reject("The user is not authenticated")];
            case 3:
              currUser.getCachedDeviceKeyAndPassword();
              return [2, new Promise(function(res, rej) {
                currUser.setDeviceStatusRemembered({
                  onSuccess: function(data) {
                    res(data);
                  },
                  onFailure: function(err) {
                    if (err.code === "InvalidParameterException") {
                      rej(new AuthError(AuthErrorTypes.DeviceConfig));
                    } else if (err.code === "NetworkError") {
                      rej(new AuthError(AuthErrorTypes.NetworkError));
                    } else {
                      rej(err);
                    }
                  }
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.forgetDevice = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var currUser, error_3;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.currentUserPoolUser()];
            case 1:
              currUser = _a.sent();
              return [3, 3];
            case 2:
              error_3 = _a.sent();
              logger16.debug("The user is not authenticated by the error", error_3);
              return [2, Promise.reject("The user is not authenticated")];
            case 3:
              currUser.getCachedDeviceKeyAndPassword();
              return [2, new Promise(function(res, rej) {
                currUser.forgetDevice({
                  onSuccess: function(data) {
                    res(data);
                  },
                  onFailure: function(err) {
                    if (err.code === "InvalidParameterException") {
                      rej(new AuthError(AuthErrorTypes.DeviceConfig));
                    } else if (err.code === "NetworkError") {
                      rej(new AuthError(AuthErrorTypes.NetworkError));
                    } else {
                      rej(err);
                    }
                  }
                });
              })];
          }
        });
      });
    };
    AuthClass2.prototype.fetchDevices = function() {
      return __awaiter3(this, void 0, void 0, function() {
        var currUser, error_4;
        return __generator3(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.currentUserPoolUser()];
            case 1:
              currUser = _a.sent();
              return [3, 3];
            case 2:
              error_4 = _a.sent();
              logger16.debug("The user is not authenticated by the error", error_4);
              throw new Error("The user is not authenticated");
            case 3:
              currUser.getCachedDeviceKeyAndPassword();
              return [2, new Promise(function(res, rej) {
                var cb = {
                  onSuccess: function(data) {
                    var deviceList = data.Devices.map(function(device) {
                      var deviceName = device.DeviceAttributes.find(function(_a2) {
                        var Name2 = _a2.Name;
                        return Name2 === "device_name";
                      }) || {};
                      var deviceInfo = {
                        id: device.DeviceKey,
                        name: deviceName.Value
                      };
                      return deviceInfo;
                    });
                    res(deviceList);
                  },
                  onFailure: function(err) {
                    if (err.code === "InvalidParameterException") {
                      rej(new AuthError(AuthErrorTypes.DeviceConfig));
                    } else if (err.code === "NetworkError") {
                      rej(new AuthError(AuthErrorTypes.NetworkError));
                    } else {
                      rej(err);
                    }
                  }
                };
                currUser.listDevices(MAX_DEVICES, null, cb);
              })];
          }
        });
      });
    };
    return AuthClass2;
  }()
);
var Auth = new AuthClass(null);
Amplify.register(Auth);

// node_modules/@aws-amplify/cache/node_modules/tslib/tslib.es6.js
var extendStatics6 = function(d2, b2) {
  extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (b3.hasOwnProperty(p2))
        d3[p2] = b3[p2];
  };
  return extendStatics6(d2, b2);
};
function __extends6(d2, b2) {
  extendStatics6(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
function __values9(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return { value: o2 && o2[i2++], done: !o2 };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

// node_modules/@aws-amplify/cache/lib-esm/Utils/CacheUtils.js
var defaultConfig = {
  keyPrefix: "aws-amplify-cache",
  capacityInBytes: 1048576,
  itemMaxSize: 21e4,
  defaultTTL: 2592e5,
  defaultPriority: 5,
  warningThreshold: 0.8,
  // the storage helper will check if localStorage exists,
  // if not, will use a in-memory object instead
  storage: new StorageHelper().getStorage()
};
function getByteLength(str) {
  var ret = 0;
  ret = str.length;
  for (var i2 = str.length; i2 >= 0; i2 -= 1) {
    var charCode = str.charCodeAt(i2);
    if (charCode > 127 && charCode <= 2047) {
      ret += 1;
    } else if (charCode > 2047 && charCode <= 65535) {
      ret += 2;
    }
    if (charCode >= 56320 && charCode <= 57343) {
      i2 -= 1;
    }
  }
  return ret;
}
function getCurrTime() {
  var currTime = /* @__PURE__ */ new Date();
  return currTime.getTime();
}
function isInteger(value) {
  if (Number.isInteger) {
    return Number.isInteger(value);
  }
  return _isInteger(value);
}
function _isInteger(value) {
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
}
var store = {};
var CacheObject = (
  /** @class */
  function() {
    function CacheObject2() {
    }
    CacheObject2.clear = function() {
      store = {};
    };
    CacheObject2.getItem = function(key) {
      return store[key] || null;
    };
    CacheObject2.setItem = function(key, value) {
      store[key] = value;
    };
    CacheObject2.removeItem = function(key) {
      delete store[key];
    };
    return CacheObject2;
  }()
);

// node_modules/@aws-amplify/cache/lib-esm/Utils/CacheList.js
var DoubleLinkedNode = (
  /** @class */
  function() {
    function DoubleLinkedNode2(keyVal) {
      this.key = keyVal ? keyVal : "";
      this.prevNode = null;
      this.nextNode = null;
    }
    return DoubleLinkedNode2;
  }()
);
var CacheList = (
  /** @class */
  function() {
    function CacheList2() {
      this.head = new DoubleLinkedNode();
      this.tail = new DoubleLinkedNode();
      this.hashtable = {};
      this.length = 0;
      this.head.nextNode = this.tail;
      this.tail.prevNode = this.head;
    }
    CacheList2.prototype.insertNodeToHead = function(node) {
      var tmp = this.head.nextNode;
      this.head.nextNode = node;
      node.nextNode = tmp;
      node.prevNode = this.head;
      tmp.prevNode = node;
      this.length = this.length + 1;
    };
    CacheList2.prototype.removeNode = function(node) {
      node.prevNode.nextNode = node.nextNode;
      node.nextNode.prevNode = node.prevNode;
      node.prevNode = null;
      node.nextNode = null;
      this.length = this.length - 1;
    };
    CacheList2.prototype.isEmpty = function() {
      return this.length === 0;
    };
    CacheList2.prototype.refresh = function(key) {
      var node = this.hashtable[key];
      this.removeNode(node);
      this.insertNodeToHead(node);
    };
    CacheList2.prototype.insertItem = function(key) {
      var node = new DoubleLinkedNode(key);
      this.hashtable[key] = node;
      this.insertNodeToHead(node);
    };
    CacheList2.prototype.getLastItem = function() {
      return this.tail.prevNode.key;
    };
    CacheList2.prototype.removeItem = function(key) {
      var removedItem = this.hashtable[key];
      this.removeNode(removedItem);
      delete this.hashtable[key];
    };
    CacheList2.prototype.getSize = function() {
      return this.length;
    };
    CacheList2.prototype.containsKey = function(key) {
      return key in this.hashtable;
    };
    CacheList2.prototype.clearList = function() {
      var e_1, _a;
      try {
        for (var _b = __values9(Object.keys(this.hashtable)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          if (this.hashtable.hasOwnProperty(key)) {
            delete this.hashtable[key];
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      this.head.nextNode = this.tail;
      this.tail.prevNode = this.head;
      this.length = 0;
    };
    CacheList2.prototype.getKeys = function() {
      return Object.keys(this.hashtable);
    };
    CacheList2.prototype.isHeadNode = function(key) {
      var node = this.hashtable[key];
      return node.prevNode === this.head;
    };
    CacheList2.prototype.isTailNode = function(key) {
      var node = this.hashtable[key];
      return node.nextNode === this.tail;
    };
    return CacheList2;
  }()
);
var CacheList_default = CacheList;

// node_modules/@aws-amplify/cache/lib-esm/StorageCache.js
var logger17 = new ConsoleLogger("StorageCache");
var StorageCache = (
  /** @class */
  function() {
    function StorageCache2(config) {
      this.config = Object.assign({}, config);
      this.cacheCurSizeKey = this.config.keyPrefix + "CurSize";
      this.checkConfig();
    }
    StorageCache2.prototype.getModuleName = function() {
      return "Cache";
    };
    StorageCache2.prototype.checkConfig = function() {
      if (!isInteger(this.config.capacityInBytes)) {
        logger17.error("Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.");
        this.config.capacityInBytes = defaultConfig.capacityInBytes;
      }
      if (!isInteger(this.config.itemMaxSize)) {
        logger17.error("Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.");
        this.config.itemMaxSize = defaultConfig.itemMaxSize;
      }
      if (!isInteger(this.config.defaultTTL)) {
        logger17.error("Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.");
        this.config.defaultTTL = defaultConfig.defaultTTL;
      }
      if (!isInteger(this.config.defaultPriority)) {
        logger17.error("Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.");
        this.config.defaultPriority = defaultConfig.defaultPriority;
      }
      if (this.config.itemMaxSize > this.config.capacityInBytes) {
        logger17.error("Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.");
        this.config.itemMaxSize = defaultConfig.itemMaxSize;
      }
      if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {
        logger17.error("Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.");
        this.config.defaultPriority = defaultConfig.defaultPriority;
      }
      if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {
        logger17.error("Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.");
        this.config.warningThreshold = defaultConfig.warningThreshold;
      }
      var cacheLimit = 5 * 1024 * 1024;
      if (this.config.capacityInBytes > cacheLimit) {
        logger17.error("Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.");
        this.config.capacityInBytes = defaultConfig.capacityInBytes;
      }
    };
    StorageCache2.prototype.fillCacheItem = function(key, value, options) {
      var ret = {
        key,
        data: value,
        timestamp: getCurrTime(),
        visitedTime: getCurrTime(),
        priority: options.priority,
        expires: options.expires,
        type: typeof value,
        byteSize: 0
      };
      ret.byteSize = getByteLength(JSON.stringify(ret));
      ret.byteSize = getByteLength(JSON.stringify(ret));
      return ret;
    };
    StorageCache2.prototype.configure = function(config) {
      if (!config) {
        return this.config;
      }
      if (config.keyPrefix) {
        logger17.warn("Don't try to configure keyPrefix!");
      }
      this.config = Object.assign({}, this.config, config, config.Cache);
      this.checkConfig();
      return this.config;
    };
    return StorageCache2;
  }()
);

// node_modules/@aws-amplify/cache/lib-esm/BrowserStorageCache.js
var logger18 = new ConsoleLogger("Cache");
var BrowserStorageCacheClass = (
  /** @class */
  function(_super) {
    __extends6(BrowserStorageCacheClass2, _super);
    function BrowserStorageCacheClass2(config) {
      var _this = this;
      var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;
      _this = _super.call(this, cacheConfig) || this;
      _this.config.storage = cacheConfig.storage;
      _this.getItem = _this.getItem.bind(_this);
      _this.setItem = _this.setItem.bind(_this);
      _this.removeItem = _this.removeItem.bind(_this);
      return _this;
    }
    BrowserStorageCacheClass2.prototype._decreaseCurSizeInBytes = function(amount) {
      var curSize = this.getCacheCurSize();
      this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());
    };
    BrowserStorageCacheClass2.prototype._increaseCurSizeInBytes = function(amount) {
      var curSize = this.getCacheCurSize();
      this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());
    };
    BrowserStorageCacheClass2.prototype._refreshItem = function(item, prefixedKey) {
      item.visitedTime = getCurrTime();
      this.config.storage.setItem(prefixedKey, JSON.stringify(item));
      return item;
    };
    BrowserStorageCacheClass2.prototype._isExpired = function(key) {
      var text = this.config.storage.getItem(key);
      var item = JSON.parse(text);
      if (getCurrTime() >= item.expires) {
        return true;
      }
      return false;
    };
    BrowserStorageCacheClass2.prototype._removeItem = function(prefixedKey, size) {
      var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;
      this._decreaseCurSizeInBytes(itemSize);
      this.config.storage.removeItem(prefixedKey);
    };
    BrowserStorageCacheClass2.prototype._setItem = function(prefixedKey, item) {
      this._increaseCurSizeInBytes(item.byteSize);
      try {
        this.config.storage.setItem(prefixedKey, JSON.stringify(item));
      } catch (setItemErr) {
        this._decreaseCurSizeInBytes(item.byteSize);
        logger18.error("Failed to set item " + setItemErr);
      }
    };
    BrowserStorageCacheClass2.prototype._sizeToPop = function(itemSize) {
      var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;
      var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;
      return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;
    };
    BrowserStorageCacheClass2.prototype._isCacheFull = function(itemSize) {
      return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;
    };
    BrowserStorageCacheClass2.prototype._findValidKeys = function() {
      var keys = [];
      var keyInCache = [];
      for (var i2 = 0; i2 < this.config.storage.length; i2 += 1) {
        keyInCache.push(this.config.storage.key(i2));
      }
      for (var i2 = 0; i2 < keyInCache.length; i2 += 1) {
        var key = keyInCache[i2];
        if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {
          if (this._isExpired(key)) {
            this._removeItem(key);
          } else {
            keys.push(key);
          }
        }
      }
      return keys;
    };
    BrowserStorageCacheClass2.prototype._popOutItems = function(keys, sizeToPop) {
      var items = [];
      var remainedSize = sizeToPop;
      for (var i2 = 0; i2 < keys.length; i2 += 1) {
        var val = this.config.storage.getItem(keys[i2]);
        if (val != null) {
          var item = JSON.parse(val);
          items.push(item);
        }
      }
      items.sort(function(a2, b2) {
        if (a2.priority > b2.priority) {
          return -1;
        } else if (a2.priority < b2.priority) {
          return 1;
        } else {
          if (a2.visitedTime < b2.visitedTime) {
            return -1;
          } else
            return 1;
        }
      });
      for (var i2 = 0; i2 < items.length; i2 += 1) {
        this._removeItem(items[i2].key, items[i2].byteSize);
        remainedSize -= items[i2].byteSize;
        if (remainedSize <= 0) {
          return;
        }
      }
    };
    BrowserStorageCacheClass2.prototype.setItem = function(key, value, options) {
      logger18.log("Set item: key is " + key + ", value is " + value + " with options: " + options);
      var prefixedKey = this.config.keyPrefix + key;
      if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
        logger18.warn("Invalid key: should not be empty or 'CurSize'");
        return;
      }
      if (typeof value === "undefined") {
        logger18.warn("The value of item should not be undefined!");
        return;
      }
      var cacheItemOptions = {
        priority: options && options.priority !== void 0 ? options.priority : this.config.defaultPriority,
        expires: options && options.expires !== void 0 ? options.expires : this.config.defaultTTL + getCurrTime()
      };
      if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
        logger18.warn("Invalid parameter: priority due to out or range. It should be within 1 and 5.");
        return;
      }
      var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
      if (item.byteSize > this.config.itemMaxSize) {
        logger18.warn("Item with key: " + key + " you are trying to put into is too big!");
        return;
      }
      try {
        var val = this.config.storage.getItem(prefixedKey);
        if (val) {
          this._removeItem(prefixedKey, JSON.parse(val).byteSize);
        }
        if (this._isCacheFull(item.byteSize)) {
          var validKeys = this._findValidKeys();
          if (this._isCacheFull(item.byteSize)) {
            var sizeToPop = this._sizeToPop(item.byteSize);
            this._popOutItems(validKeys, sizeToPop);
          }
        }
        this._setItem(prefixedKey, item);
      } catch (e) {
        logger18.warn("setItem failed! " + e);
      }
    };
    BrowserStorageCacheClass2.prototype.getItem = function(key, options) {
      logger18.log("Get item: key is " + key + " with options " + options);
      var ret = null;
      var prefixedKey = this.config.keyPrefix + key;
      if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
        logger18.warn("Invalid key: should not be empty or 'CurSize'");
        return null;
      }
      try {
        ret = this.config.storage.getItem(prefixedKey);
        if (ret != null) {
          if (this._isExpired(prefixedKey)) {
            this._removeItem(prefixedKey, JSON.parse(ret).byteSize);
            ret = null;
          } else {
            var item = JSON.parse(ret);
            item = this._refreshItem(item, prefixedKey);
            return item.data;
          }
        }
        if (options && options.callback !== void 0) {
          var val = options.callback();
          if (val !== null) {
            this.setItem(key, val, options);
          }
          return val;
        }
        return null;
      } catch (e) {
        logger18.warn("getItem failed! " + e);
        return null;
      }
    };
    BrowserStorageCacheClass2.prototype.removeItem = function(key) {
      logger18.log("Remove item: key is " + key);
      var prefixedKey = this.config.keyPrefix + key;
      if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
        return;
      }
      try {
        var val = this.config.storage.getItem(prefixedKey);
        if (val) {
          this._removeItem(prefixedKey, JSON.parse(val).byteSize);
        }
      } catch (e) {
        logger18.warn("removeItem failed! " + e);
      }
    };
    BrowserStorageCacheClass2.prototype.clear = function() {
      logger18.log("Clear Cache");
      var keysToRemove = [];
      for (var i2 = 0; i2 < this.config.storage.length; i2 += 1) {
        var key = this.config.storage.key(i2);
        if (key.indexOf(this.config.keyPrefix) === 0) {
          keysToRemove.push(key);
        }
      }
      try {
        for (var i2 = 0; i2 < keysToRemove.length; i2 += 1) {
          this.config.storage.removeItem(keysToRemove[i2]);
        }
      } catch (e) {
        logger18.warn("clear failed! " + e);
      }
    };
    BrowserStorageCacheClass2.prototype.getAllKeys = function() {
      var keys = [];
      for (var i2 = 0; i2 < this.config.storage.length; i2 += 1) {
        var key = this.config.storage.key(i2);
        if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {
          keys.push(key.substring(this.config.keyPrefix.length));
        }
      }
      return keys;
    };
    BrowserStorageCacheClass2.prototype.getCacheCurSize = function() {
      var ret = this.config.storage.getItem(this.cacheCurSizeKey);
      if (!ret) {
        this.config.storage.setItem(this.cacheCurSizeKey, "0");
        ret = "0";
      }
      return Number(ret);
    };
    BrowserStorageCacheClass2.prototype.createInstance = function(config) {
      if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {
        logger18.error("invalid keyPrefix, setting keyPrefix with timeStamp");
        config.keyPrefix = getCurrTime.toString();
      }
      return new BrowserStorageCacheClass2(config);
    };
    return BrowserStorageCacheClass2;
  }(StorageCache)
);
var BrowserStorageCache = new BrowserStorageCacheClass();
Amplify.register(BrowserStorageCache);

// node_modules/@aws-amplify/cache/lib-esm/InMemoryCache.js
var logger19 = new ConsoleLogger("InMemoryCache");
var InMemoryCacheClass = (
  /** @class */
  function(_super) {
    __extends6(InMemoryCacheClass2, _super);
    function InMemoryCacheClass2(config) {
      var _this = this;
      var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;
      _this = _super.call(this, cacheConfig) || this;
      logger19.debug("now we start!");
      _this.cacheList = [];
      _this.curSizeInBytes = 0;
      _this.maxPriority = 5;
      _this.getItem = _this.getItem.bind(_this);
      _this.setItem = _this.setItem.bind(_this);
      _this.removeItem = _this.removeItem.bind(_this);
      for (var i2 = 0; i2 < _this.maxPriority; i2 += 1) {
        _this.cacheList[i2] = new CacheList_default();
      }
      return _this;
    }
    InMemoryCacheClass2.prototype._decreaseCurSizeInBytes = function(amount) {
      this.curSizeInBytes -= amount;
    };
    InMemoryCacheClass2.prototype._increaseCurSizeInBytes = function(amount) {
      this.curSizeInBytes += amount;
    };
    InMemoryCacheClass2.prototype._isExpired = function(key) {
      var text = CacheObject.getItem(key);
      var item = JSON.parse(text);
      if (getCurrTime() >= item.expires) {
        return true;
      }
      return false;
    };
    InMemoryCacheClass2.prototype._removeItem = function(prefixedKey, listIdx) {
      this.cacheList[listIdx].removeItem(prefixedKey);
      this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);
      CacheObject.removeItem(prefixedKey);
    };
    InMemoryCacheClass2.prototype._setItem = function(prefixedKey, item, listIdx) {
      this.cacheList[listIdx].insertItem(prefixedKey);
      this._increaseCurSizeInBytes(item.byteSize);
      CacheObject.setItem(prefixedKey, JSON.stringify(item));
    };
    InMemoryCacheClass2.prototype._isCacheFull = function(itemSize) {
      return this.curSizeInBytes + itemSize > this.config.capacityInBytes;
    };
    InMemoryCacheClass2.prototype.containsKey = function(key) {
      var prefixedKey = this.config.keyPrefix + key;
      for (var i2 = 0; i2 < this.maxPriority; i2 += 1) {
        if (this.cacheList[i2].containsKey(prefixedKey)) {
          return i2 + 1;
        }
      }
      return -1;
    };
    InMemoryCacheClass2.prototype.setItem = function(key, value, options) {
      var prefixedKey = this.config.keyPrefix + key;
      if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
        logger19.warn("Invalid key: should not be empty or 'CurSize'");
        return;
      }
      if (typeof value === "undefined") {
        logger19.warn("The value of item should not be undefined!");
        return;
      }
      var cacheItemOptions = {
        priority: options && options.priority !== void 0 ? options.priority : this.config.defaultPriority,
        expires: options && options.expires !== void 0 ? options.expires : this.config.defaultTTL + getCurrTime()
      };
      if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
        logger19.warn("Invalid parameter: priority due to out or range. It should be within 1 and 5.");
        return;
      }
      var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
      if (item.byteSize > this.config.itemMaxSize) {
        logger19.warn("Item with key: " + key + " you are trying to put into is too big!");
        return;
      }
      var presentKeyPrio = this.containsKey(key);
      if (presentKeyPrio !== -1) {
        this._removeItem(prefixedKey, presentKeyPrio - 1);
      }
      var cacheListIdx = this.maxPriority - 1;
      while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {
        if (!this.cacheList[cacheListIdx].isEmpty()) {
          var popedItemKey = this.cacheList[cacheListIdx].getLastItem();
          this._removeItem(popedItemKey, cacheListIdx);
        } else {
          cacheListIdx -= 1;
        }
      }
      this._setItem(prefixedKey, item, Number(item.priority) - 1);
    };
    InMemoryCacheClass2.prototype.getItem = function(key, options) {
      var ret = null;
      var prefixedKey = this.config.keyPrefix + key;
      if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
        logger19.warn("Invalid key: should not be empty or 'CurSize'");
        return null;
      }
      var presentKeyPrio = this.containsKey(key);
      if (presentKeyPrio !== -1) {
        if (this._isExpired(prefixedKey)) {
          this._removeItem(prefixedKey, presentKeyPrio - 1);
        } else {
          ret = CacheObject.getItem(prefixedKey);
          var item = JSON.parse(ret);
          this.cacheList[item.priority - 1].refresh(prefixedKey);
          return item.data;
        }
      }
      if (options && options.callback !== void 0) {
        var val = options.callback();
        if (val !== null) {
          this.setItem(key, val, options);
        }
        return val;
      }
      return null;
    };
    InMemoryCacheClass2.prototype.removeItem = function(key) {
      var prefixedKey = this.config.keyPrefix + key;
      var presentKeyPrio = this.containsKey(key);
      if (presentKeyPrio !== -1) {
        this._removeItem(prefixedKey, presentKeyPrio - 1);
      }
    };
    InMemoryCacheClass2.prototype.clear = function() {
      var e_1, _a;
      for (var i2 = 0; i2 < this.maxPriority; i2 += 1) {
        try {
          for (var _b = (e_1 = void 0, __values9(this.cacheList[i2].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            this._removeItem(key, i2);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    };
    InMemoryCacheClass2.prototype.getAllKeys = function() {
      var e_2, _a;
      var keys = [];
      for (var i2 = 0; i2 < this.maxPriority; i2 += 1) {
        try {
          for (var _b = (e_2 = void 0, __values9(this.cacheList[i2].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            keys.push(key.substring(this.config.keyPrefix.length));
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      return keys;
    };
    InMemoryCacheClass2.prototype.getCacheCurSize = function() {
      return this.curSizeInBytes;
    };
    InMemoryCacheClass2.prototype.createInstance = function(config) {
      return new InMemoryCacheClass2(config);
    };
    return InMemoryCacheClass2;
  }(StorageCache)
);
var InMemoryCache = new InMemoryCacheClass();

// node_modules/@aws-amplify/api-rest/node_modules/tslib/tslib.es6.js
var __assign15 = function() {
  __assign15 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign15.apply(this, arguments);
};
function __rest5(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter18(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator18(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}

// node_modules/@aws-amplify/api-rest/lib-esm/RestClient.js
var import_axios = __toESM(require_axios2());
var import_url4 = __toESM(require_url());
var logger20 = new ConsoleLogger("RestClient");
var RestClient = (
  /** @class */
  function() {
    function RestClient2(options) {
      this._region = "us-east-1";
      this._service = "execute-api";
      this._custom_header = void 0;
      this._cancelTokenMap = null;
      this.Credentials = Credentials;
      this._options = options;
      logger20.debug("API Options", this._options);
      if (this._cancelTokenMap == null) {
        this._cancelTokenMap = /* @__PURE__ */ new WeakMap();
      }
    }
    RestClient2.prototype.ajax = function(urlOrApiInfo, method, init) {
      return __awaiter18(this, void 0, void 0, function() {
        var parsed_url, url2, region, service, custom_header, params, libraryHeaders, userAgent2, initParams, isAllResponse, custom_header_obj, _a, _b, search, parsedUrl;
        var _this = this;
        return __generator18(this, function(_c) {
          switch (_c.label) {
            case 0:
              logger20.debug(method, urlOrApiInfo);
              region = "us-east-1";
              service = "execute-api";
              custom_header = void 0;
              if (typeof urlOrApiInfo === "string") {
                parsed_url = this._parseUrl(urlOrApiInfo);
                url2 = urlOrApiInfo;
              } else {
                url2 = urlOrApiInfo.endpoint, custom_header = urlOrApiInfo.custom_header, region = urlOrApiInfo.region, service = urlOrApiInfo.service;
                parsed_url = this._parseUrl(urlOrApiInfo.endpoint);
              }
              params = {
                method,
                url: url2,
                host: parsed_url.host,
                path: parsed_url.path,
                headers: {},
                data: null,
                responseType: "json",
                timeout: 0,
                cancelToken: null
              };
              libraryHeaders = {};
              if (Platform.isReactNative) {
                userAgent2 = Platform.userAgent || "aws-amplify/0.1.x";
                libraryHeaders = {
                  "User-Agent": userAgent2
                };
              }
              initParams = Object.assign({}, init);
              isAllResponse = initParams.response;
              if (initParams.body) {
                if (typeof FormData === "function" && initParams.body instanceof FormData) {
                  libraryHeaders["Content-Type"] = "multipart/form-data";
                  params.data = initParams.body;
                } else {
                  libraryHeaders["Content-Type"] = "application/json; charset=UTF-8";
                  params.data = JSON.stringify(initParams.body);
                }
              }
              if (initParams.responseType) {
                params.responseType = initParams.responseType;
              }
              if (initParams.withCredentials) {
                params["withCredentials"] = initParams.withCredentials;
              }
              if (initParams.timeout) {
                params.timeout = initParams.timeout;
              }
              if (initParams.cancellableToken) {
                params.cancelToken = initParams.cancellableToken.token;
              }
              params["signerServiceInfo"] = initParams.signerServiceInfo;
              if (!(typeof custom_header === "function"))
                return [3, 2];
              return [4, custom_header()];
            case 1:
              _a = _c.sent();
              return [3, 3];
            case 2:
              _a = void 0;
              _c.label = 3;
            case 3:
              custom_header_obj = _a;
              params.headers = __assign15(__assign15(__assign15({}, libraryHeaders), custom_header_obj), initParams.headers);
              _b = (0, import_url4.parse)(url2, true, true), search = _b.search, parsedUrl = __rest5(_b, ["search"]);
              params.url = (0, import_url4.format)(__assign15(__assign15({}, parsedUrl), { query: __assign15(__assign15({}, parsedUrl.query), initParams.queryStringParameters || {}) }));
              if (typeof params.headers["Authorization"] !== "undefined") {
                params.headers = Object.keys(params.headers).reduce(function(acc, k2) {
                  if (params.headers[k2]) {
                    acc[k2] = params.headers[k2];
                  }
                  return acc;
                }, {});
                return [2, this._request(params, isAllResponse)];
              }
              return [2, this.Credentials.get().then(function(credentials) {
                return _this._signed(__assign15({}, params), credentials, isAllResponse, {
                  region,
                  service
                }).catch(function(error) {
                  if (DateUtils.isClockSkewError(error)) {
                    var headers = error.response.headers;
                    var dateHeader = headers && (headers.date || headers.Date);
                    var responseDate = new Date(dateHeader);
                    var requestDate = DateUtils.getDateFromHeaderString(params.headers["x-amz-date"]);
                    if (DateUtils.isClockSkewed(responseDate)) {
                      DateUtils.setClockOffset(responseDate.getTime() - requestDate.getTime());
                      return _this.ajax(urlOrApiInfo, method, init);
                    }
                  }
                  throw error;
                });
              }, function(err) {
                logger20.debug("No credentials available, the request will be unsigned");
                return _this._request(params, isAllResponse);
              })];
          }
        });
      });
    };
    RestClient2.prototype.get = function(urlOrApiInfo, init) {
      return this.ajax(urlOrApiInfo, "GET", init);
    };
    RestClient2.prototype.put = function(urlOrApiInfo, init) {
      return this.ajax(urlOrApiInfo, "PUT", init);
    };
    RestClient2.prototype.patch = function(urlOrApiInfo, init) {
      return this.ajax(urlOrApiInfo, "PATCH", init);
    };
    RestClient2.prototype.post = function(urlOrApiInfo, init) {
      return this.ajax(urlOrApiInfo, "POST", init);
    };
    RestClient2.prototype.del = function(urlOrApiInfo, init) {
      return this.ajax(urlOrApiInfo, "DELETE", init);
    };
    RestClient2.prototype.head = function(urlOrApiInfo, init) {
      return this.ajax(urlOrApiInfo, "HEAD", init);
    };
    RestClient2.prototype.cancel = function(request, message) {
      var source = this._cancelTokenMap.get(request);
      if (source) {
        source.cancel(message);
        return true;
      }
      return false;
    };
    RestClient2.prototype.hasCancelToken = function(request) {
      return this._cancelTokenMap.has(request);
    };
    RestClient2.prototype.isCancel = function(error) {
      return import_axios.default.isCancel(error);
    };
    RestClient2.prototype.getCancellableToken = function() {
      return import_axios.default.CancelToken.source();
    };
    RestClient2.prototype.updateRequestToBeCancellable = function(promise, cancelTokenSource) {
      this._cancelTokenMap.set(promise, cancelTokenSource);
    };
    RestClient2.prototype.endpoint = function(apiName) {
      var _this = this;
      var cloud_logic_array = this._options.endpoints;
      var response = "";
      if (!Array.isArray(cloud_logic_array)) {
        return response;
      }
      cloud_logic_array.forEach(function(v2) {
        if (v2.name === apiName) {
          response = v2.endpoint;
          if (typeof v2.region === "string") {
            _this._region = v2.region;
          } else if (typeof _this._options.region === "string") {
            _this._region = _this._options.region;
          }
          if (typeof v2.service === "string") {
            _this._service = v2.service || "execute-api";
          } else {
            _this._service = "execute-api";
          }
          if (typeof v2.custom_header === "function") {
            _this._custom_header = v2.custom_header;
          } else {
            _this._custom_header = void 0;
          }
        }
      });
      return response;
    };
    RestClient2.prototype._signed = function(params, credentials, isAllResponse, _a) {
      var service = _a.service, region = _a.region;
      var signerServiceInfoParams = params.signerServiceInfo, otherParams = __rest5(params, ["signerServiceInfo"]);
      var endpoint_region = region || this._region || this._options.region;
      var endpoint_service = service || this._service || this._options.service;
      var creds = {
        secret_key: credentials.secretAccessKey,
        access_key: credentials.accessKeyId,
        session_token: credentials.sessionToken
      };
      var endpointInfo = {
        region: endpoint_region,
        service: endpoint_service
      };
      var signerServiceInfo = Object.assign(endpointInfo, signerServiceInfoParams);
      var signed_params = Signer.sign(otherParams, creds, signerServiceInfo);
      if (signed_params.data) {
        signed_params.body = signed_params.data;
      }
      logger20.debug("Signed Request: ", signed_params);
      delete signed_params.headers["host"];
      return (0, import_axios.default)(signed_params).then(function(response) {
        return isAllResponse ? response : response.data;
      }).catch(function(error) {
        logger20.debug(error);
        throw error;
      });
    };
    RestClient2.prototype._request = function(params, isAllResponse) {
      if (isAllResponse === void 0) {
        isAllResponse = false;
      }
      return (0, import_axios.default)(params).then(function(response) {
        return isAllResponse ? response : response.data;
      }).catch(function(error) {
        logger20.debug(error);
        throw error;
      });
    };
    RestClient2.prototype._parseUrl = function(url2) {
      var parts = url2.split("/");
      return {
        host: parts[2],
        path: "/" + parts.slice(3).join("/")
      };
    };
    return RestClient2;
  }()
);

// node_modules/@aws-amplify/api-rest/lib-esm/RestAPI.js
var logger21 = new ConsoleLogger("RestAPI");
var RestAPIClass = (
  /** @class */
  function() {
    function RestAPIClass2(options) {
      this._api = null;
      this.Credentials = Credentials;
      this._options = options;
      logger21.debug("API Options", this._options);
    }
    RestAPIClass2.prototype.getModuleName = function() {
      return "RestAPI";
    };
    RestAPIClass2.prototype.configure = function(options) {
      var _a = options || {}, _b = _a.API, API2 = _b === void 0 ? {} : _b, otherOptions = __rest5(_a, ["API"]);
      var opt = __assign15(__assign15({}, otherOptions), API2);
      logger21.debug("configure Rest API", { opt });
      if (opt["aws_project_region"]) {
        if (opt["aws_cloud_logic_custom"]) {
          var custom = opt["aws_cloud_logic_custom"];
          opt.endpoints = typeof custom === "string" ? JSON.parse(custom) : custom;
        }
        opt = Object.assign({}, opt, {
          region: opt["aws_project_region"],
          header: {}
        });
      }
      if (Array.isArray(opt.endpoints)) {
        opt.endpoints.forEach(function(endpoint) {
          if (typeof endpoint.custom_header !== "undefined" && typeof endpoint.custom_header !== "function") {
            logger21.warn("Rest API " + endpoint.name + ", custom_header should be a function");
            endpoint.custom_header = void 0;
          }
        });
      } else if (this._options && Array.isArray(this._options.endpoints)) {
        opt.endpoints = this._options.endpoints;
      } else {
        opt.endpoints = [];
      }
      this._options = Object.assign({}, this._options, opt);
      this.createInstance();
      return this._options;
    };
    RestAPIClass2.prototype.createInstance = function() {
      logger21.debug("create Rest API instance");
      this._api = new RestClient(this._options);
      this._api.Credentials = this.Credentials;
      return true;
    };
    RestAPIClass2.prototype.get = function(apiName, path, init) {
      try {
        var apiInfo = this.getEndpointInfo(apiName, path);
        var cancellableToken = this._api.getCancellableToken();
        var initParams = Object.assign({}, init);
        initParams.cancellableToken = cancellableToken;
        var responsePromise = this._api.get(apiInfo, initParams);
        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
        return responsePromise;
      } catch (err) {
        return Promise.reject(err.message);
      }
    };
    RestAPIClass2.prototype.post = function(apiName, path, init) {
      try {
        var apiInfo = this.getEndpointInfo(apiName, path);
        var cancellableToken = this._api.getCancellableToken();
        var initParams = Object.assign({}, init);
        initParams.cancellableToken = cancellableToken;
        var responsePromise = this._api.post(apiInfo, initParams);
        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
        return responsePromise;
      } catch (err) {
        return Promise.reject(err.message);
      }
    };
    RestAPIClass2.prototype.put = function(apiName, path, init) {
      try {
        var apiInfo = this.getEndpointInfo(apiName, path);
        var cancellableToken = this._api.getCancellableToken();
        var initParams = Object.assign({}, init);
        initParams.cancellableToken = cancellableToken;
        var responsePromise = this._api.put(apiInfo, initParams);
        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
        return responsePromise;
      } catch (err) {
        return Promise.reject(err.message);
      }
    };
    RestAPIClass2.prototype.patch = function(apiName, path, init) {
      try {
        var apiInfo = this.getEndpointInfo(apiName, path);
        var cancellableToken = this._api.getCancellableToken();
        var initParams = Object.assign({}, init);
        initParams.cancellableToken = cancellableToken;
        var responsePromise = this._api.patch(apiInfo, initParams);
        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
        return responsePromise;
      } catch (err) {
        return Promise.reject(err.message);
      }
    };
    RestAPIClass2.prototype.del = function(apiName, path, init) {
      try {
        var apiInfo = this.getEndpointInfo(apiName, path);
        var cancellableToken = this._api.getCancellableToken();
        var initParams = Object.assign({}, init);
        initParams.cancellableToken = cancellableToken;
        var responsePromise = this._api.del(apiInfo, initParams);
        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
        return responsePromise;
      } catch (err) {
        return Promise.reject(err.message);
      }
    };
    RestAPIClass2.prototype.head = function(apiName, path, init) {
      try {
        var apiInfo = this.getEndpointInfo(apiName, path);
        var cancellableToken = this._api.getCancellableToken();
        var initParams = Object.assign({}, init);
        initParams.cancellableToken = cancellableToken;
        var responsePromise = this._api.head(apiInfo, initParams);
        this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
        return responsePromise;
      } catch (err) {
        return Promise.reject(err.message);
      }
    };
    RestAPIClass2.prototype.isCancel = function(error) {
      return this._api.isCancel(error);
    };
    RestAPIClass2.prototype.cancel = function(request, message) {
      return this._api.cancel(request, message);
    };
    RestAPIClass2.prototype.hasCancelToken = function(request) {
      return this._api.hasCancelToken(request);
    };
    RestAPIClass2.prototype.endpoint = function(apiName) {
      return __awaiter18(this, void 0, void 0, function() {
        return __generator18(this, function(_a) {
          return [2, this._api.endpoint(apiName)];
        });
      });
    };
    RestAPIClass2.prototype.getEndpointInfo = function(apiName, path) {
      var cloud_logic_array = this._options.endpoints;
      if (!Array.isArray(cloud_logic_array)) {
        throw new Error("API category not configured");
      }
      var apiConfig = cloud_logic_array.find(function(api) {
        return api.name === apiName;
      });
      if (!apiConfig) {
        throw new Error("API " + apiName + " does not exist");
      }
      var response = {
        endpoint: apiConfig.endpoint + path
      };
      if (typeof apiConfig.region === "string") {
        response.region = apiConfig.region;
      } else if (typeof this._options.region === "string") {
        response.region = this._options.region;
      }
      if (typeof apiConfig.service === "string") {
        response.service = apiConfig.service || "execute-api";
      } else {
        response.service = "execute-api";
      }
      if (typeof apiConfig.custom_header === "function") {
        response.custom_header = apiConfig.custom_header;
      } else {
        response.custom_header = void 0;
      }
      return response;
    };
    return RestAPIClass2;
  }()
);
var RestAPI = new RestAPIClass(null);
Amplify.register(RestAPI);

// node_modules/@aws-amplify/api-graphql/node_modules/tslib/tslib.es6.js
var __assign16 = function() {
  __assign16 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign16.apply(this, arguments);
};
function __rest6(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter19(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator19(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read13(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/graphql/version.mjs
var versionInfo = Object.freeze({
  major: 15,
  minor: 8,
  patch: 0,
  preReleaseTag: null
});

// node_modules/graphql/jsutils/isObjectLike.mjs
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof6(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof6(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function isObjectLike(value) {
  return _typeof(value) == "object" && value !== null;
}

// node_modules/graphql/polyfills/symbols.mjs
var SYMBOL_ITERATOR = typeof Symbol === "function" && Symbol.iterator != null ? Symbol.iterator : "@@iterator";
var SYMBOL_ASYNC_ITERATOR = typeof Symbol === "function" && Symbol.asyncIterator != null ? Symbol.asyncIterator : "@@asyncIterator";
var SYMBOL_TO_STRING_TAG = typeof Symbol === "function" && Symbol.toStringTag != null ? Symbol.toStringTag : "@@toStringTag";

// node_modules/graphql/language/location.mjs
function getLocation(source, position) {
  var lineRegexp = /\r\n|[\n\r]/g;
  var line = 1;
  var column = position + 1;
  var match;
  while ((match = lineRegexp.exec(source.body)) && match.index < position) {
    line += 1;
    column = position + 1 - (match.index + match[0].length);
  }
  return {
    line,
    column
  };
}

// node_modules/graphql/language/printLocation.mjs
function printLocation(location) {
  return printSourceLocation(location.source, getLocation(location.source, location.start));
}
function printSourceLocation(source, sourceLocation) {
  var firstLineColumnOffset = source.locationOffset.column - 1;
  var body = whitespace(firstLineColumnOffset) + source.body;
  var lineIndex = sourceLocation.line - 1;
  var lineOffset = source.locationOffset.line - 1;
  var lineNum = sourceLocation.line + lineOffset;
  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  var columnNum = sourceLocation.column + columnOffset;
  var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
  var lines = body.split(/\r\n|[\n\r]/g);
  var locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    var subLineIndex = Math.floor(columnNum / 80);
    var subLineColumnNum = columnNum % 80;
    var subLines = [];
    for (var i2 = 0; i2 < locationLine.length; i2 += 80) {
      subLines.push(locationLine.slice(i2, i2 + 80));
    }
    return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function(subLine) {
      return ["", subLine];
    }), [[" ", whitespace(subLineColumnNum - 1) + "^"], ["", subLines[subLineIndex + 1]]]));
  }
  return locationStr + printPrefixedLines([
    // Lines specified like this: ["prefix", "string"],
    ["".concat(lineNum - 1), lines[lineIndex - 1]],
    ["".concat(lineNum), locationLine],
    ["", whitespace(columnNum - 1) + "^"],
    ["".concat(lineNum + 1), lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  var existingLines = lines.filter(function(_ref) {
    var _2 = _ref[0], line = _ref[1];
    return line !== void 0;
  });
  var padLen = Math.max.apply(Math, existingLines.map(function(_ref2) {
    var prefix = _ref2[0];
    return prefix.length;
  }));
  return existingLines.map(function(_ref3) {
    var prefix = _ref3[0], line = _ref3[1];
    return leftPad(padLen, prefix) + (line ? " | " + line : " |");
  }).join("\n");
}
function whitespace(len) {
  return Array(len + 1).join(" ");
}
function leftPad(len, str) {
  return whitespace(len - str.length) + str;
}

// node_modules/graphql/error/GraphQLError.mjs
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof6(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof6(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf4(subClass, superClass);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof2(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _wrapNativeSuper2(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper2 = function _wrapNativeSuper3(Class2) {
    if (Class2 === null || !_isNativeFunction2(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct2(Class2, arguments, _getPrototypeOf2(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf4(Wrapper, Class2);
  };
  return _wrapNativeSuper2(Class);
}
function _construct2(Parent, args, Class) {
  if (_isNativeReflectConstruct2()) {
    _construct2 = Reflect.construct;
  } else {
    _construct2 = function _construct3(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance2 = new Constructor();
      if (Class2)
        _setPrototypeOf4(instance2, Class2.prototype);
      return instance2;
    };
  }
  return _construct2.apply(null, arguments);
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction2(fn2) {
  return Function.toString.call(fn2).indexOf("[native code]") !== -1;
}
function _setPrototypeOf4(o2, p2) {
  _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf5(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf4(o2, p2);
}
function _getPrototypeOf2(o2) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf2(o2);
}
var GraphQLError = function(_Error) {
  _inherits(GraphQLError2, _Error);
  var _super = _createSuper(GraphQLError2);
  function GraphQLError2(message, nodes, source, positions, path, originalError, extensions) {
    var _nodeLocations, _nodeLocations2, _nodeLocations3;
    var _this;
    _classCallCheck(this, GraphQLError2);
    _this = _super.call(this, message);
    _this.name = "GraphQLError";
    _this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
    _this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0);
    var nodeLocations = [];
    for (var _i2 = 0, _ref3 = (_this$nodes = _this.nodes) !== null && _this$nodes !== void 0 ? _this$nodes : []; _i2 < _ref3.length; _i2++) {
      var _this$nodes;
      var _ref4 = _ref3[_i2];
      var loc = _ref4.loc;
      if (loc != null) {
        nodeLocations.push(loc);
      }
    }
    nodeLocations = undefinedIfEmpty(nodeLocations);
    _this.source = source !== null && source !== void 0 ? source : (_nodeLocations = nodeLocations) === null || _nodeLocations === void 0 ? void 0 : _nodeLocations[0].source;
    _this.positions = positions !== null && positions !== void 0 ? positions : (_nodeLocations2 = nodeLocations) === null || _nodeLocations2 === void 0 ? void 0 : _nodeLocations2.map(function(loc2) {
      return loc2.start;
    });
    _this.locations = positions && source ? positions.map(function(pos) {
      return getLocation(source, pos);
    }) : (_nodeLocations3 = nodeLocations) === null || _nodeLocations3 === void 0 ? void 0 : _nodeLocations3.map(function(loc2) {
      return getLocation(loc2.source, loc2.start);
    });
    _this.path = path !== null && path !== void 0 ? path : void 0;
    var originalExtensions = originalError === null || originalError === void 0 ? void 0 : originalError.extensions;
    if (extensions == null && isObjectLike(originalExtensions)) {
      _this.extensions = _objectSpread({}, originalExtensions);
    } else {
      _this.extensions = extensions !== null && extensions !== void 0 ? extensions : {};
    }
    Object.defineProperties(_assertThisInitialized(_this), {
      message: {
        enumerable: true
      },
      locations: {
        enumerable: _this.locations != null
      },
      path: {
        enumerable: _this.path != null
      },
      extensions: {
        enumerable: _this.extensions != null && Object.keys(_this.extensions).length > 0
      },
      name: {
        enumerable: false
      },
      nodes: {
        enumerable: false
      },
      source: {
        enumerable: false
      },
      positions: {
        enumerable: false
      },
      originalError: {
        enumerable: false
      }
    });
    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(_assertThisInitialized(_this), "stack", {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
      return _possibleConstructorReturn(_this);
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError2);
    } else {
      Object.defineProperty(_assertThisInitialized(_this), "stack", {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }
    return _this;
  }
  _createClass(GraphQLError2, [{
    key: "toString",
    value: function toString3() {
      return printError(this);
    }
    // FIXME: workaround to not break chai comparisons, should be remove in v16
    // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet
  }, {
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "Object";
    }
  }]);
  return GraphQLError2;
}(_wrapNativeSuper2(Error));
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}
function printError(error) {
  var output = error.message;
  if (error.nodes) {
    for (var _i4 = 0, _error$nodes2 = error.nodes; _i4 < _error$nodes2.length; _i4++) {
      var node = _error$nodes2[_i4];
      if (node.loc) {
        output += "\n\n" + printLocation(node.loc);
      }
    }
  } else if (error.source && error.locations) {
    for (var _i6 = 0, _error$locations2 = error.locations; _i6 < _error$locations2.length; _i6++) {
      var location = _error$locations2[_i6];
      output += "\n\n" + printSourceLocation(error.source, location);
    }
  }
  return output;
}

// node_modules/graphql/error/syntaxError.mjs
function syntaxError(source, position, description) {
  return new GraphQLError("Syntax Error: ".concat(description), void 0, source, [position]);
}

// node_modules/graphql/language/kinds.mjs
var Kind = Object.freeze({
  // Name
  NAME: "Name",
  // Document
  DOCUMENT: "Document",
  OPERATION_DEFINITION: "OperationDefinition",
  VARIABLE_DEFINITION: "VariableDefinition",
  SELECTION_SET: "SelectionSet",
  FIELD: "Field",
  ARGUMENT: "Argument",
  // Fragments
  FRAGMENT_SPREAD: "FragmentSpread",
  INLINE_FRAGMENT: "InlineFragment",
  FRAGMENT_DEFINITION: "FragmentDefinition",
  // Values
  VARIABLE: "Variable",
  INT: "IntValue",
  FLOAT: "FloatValue",
  STRING: "StringValue",
  BOOLEAN: "BooleanValue",
  NULL: "NullValue",
  ENUM: "EnumValue",
  LIST: "ListValue",
  OBJECT: "ObjectValue",
  OBJECT_FIELD: "ObjectField",
  // Directives
  DIRECTIVE: "Directive",
  // Types
  NAMED_TYPE: "NamedType",
  LIST_TYPE: "ListType",
  NON_NULL_TYPE: "NonNullType",
  // Type System Definitions
  SCHEMA_DEFINITION: "SchemaDefinition",
  OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
  // Type Definitions
  SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
  OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
  FIELD_DEFINITION: "FieldDefinition",
  INPUT_VALUE_DEFINITION: "InputValueDefinition",
  INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
  UNION_TYPE_DEFINITION: "UnionTypeDefinition",
  ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
  ENUM_VALUE_DEFINITION: "EnumValueDefinition",
  INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
  // Directive Definitions
  DIRECTIVE_DEFINITION: "DirectiveDefinition",
  // Type System Extensions
  SCHEMA_EXTENSION: "SchemaExtension",
  // Type Extensions
  SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
  OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
  INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
  UNION_TYPE_EXTENSION: "UnionTypeExtension",
  ENUM_TYPE_EXTENSION: "EnumTypeExtension",
  INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
});

// node_modules/graphql/jsutils/invariant.mjs
function invariant(condition, message) {
  var booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message != null ? message : "Unexpected invariant triggered.");
  }
}

// node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs
var nodejsCustomInspectSymbol = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : void 0;
var nodejsCustomInspectSymbol_default = nodejsCustomInspectSymbol;

// node_modules/graphql/jsutils/defineInspect.mjs
function defineInspect(classObject) {
  var fn2 = classObject.prototype.toJSON;
  typeof fn2 === "function" || invariant(0);
  classObject.prototype.inspect = fn2;
  if (nodejsCustomInspectSymbol_default) {
    classObject.prototype[nodejsCustomInspectSymbol_default] = fn2;
  }
}

// node_modules/graphql/language/ast.mjs
var Location = function() {
  function Location2(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }
  var _proto = Location2.prototype;
  _proto.toJSON = function toJSON3() {
    return {
      start: this.start,
      end: this.end
    };
  };
  return Location2;
}();
defineInspect(Location);
var Token = function() {
  function Token2(kind, start, end, line, column, prev, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column;
    this.value = value;
    this.prev = prev;
    this.next = null;
  }
  var _proto2 = Token2.prototype;
  _proto2.toJSON = function toJSON3() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column
    };
  };
  return Token2;
}();
defineInspect(Token);
function isNode(maybeNode) {
  return maybeNode != null && typeof maybeNode.kind === "string";
}

// node_modules/graphql/language/tokenKind.mjs
var TokenKind = Object.freeze({
  SOF: "<SOF>",
  EOF: "<EOF>",
  BANG: "!",
  DOLLAR: "$",
  AMP: "&",
  PAREN_L: "(",
  PAREN_R: ")",
  SPREAD: "...",
  COLON: ":",
  EQUALS: "=",
  AT: "@",
  BRACKET_L: "[",
  BRACKET_R: "]",
  BRACE_L: "{",
  PIPE: "|",
  BRACE_R: "}",
  NAME: "Name",
  INT: "Int",
  FLOAT: "Float",
  STRING: "String",
  BLOCK_STRING: "BlockString",
  COMMENT: "Comment"
});

// node_modules/graphql/jsutils/inspect.mjs
function _typeof3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof3 = function _typeof6(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof3 = function _typeof6(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof3(obj);
}
var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (_typeof3(value)) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? "[function ".concat(value.name, "]") : "[function]";
    case "object":
      if (value === null) {
        return "null";
      }
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (previouslySeenValues.indexOf(value) !== -1) {
    return "[Circular]";
  }
  var seenValues = [].concat(previouslySeenValues, [value]);
  var customInspectFn = getCustomFn(value);
  if (customInspectFn !== void 0) {
    var customValue = customInspectFn.call(value);
    if (customValue !== value) {
      return typeof customValue === "string" ? customValue : formatValue(customValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function formatObject(object, seenValues) {
  var keys = Object.keys(object);
  if (keys.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  var properties = keys.map(function(key) {
    var value = formatValue(object[key], seenValues);
    return key + ": " + value;
  });
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  var len = Math.min(MAX_ARRAY_LENGTH, array.length);
  var remaining = array.length - len;
  var items = [];
  for (var i2 = 0; i2 < len; ++i2) {
    items.push(formatValue(array[i2], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push("... ".concat(remaining, " more items"));
  }
  return "[" + items.join(", ") + "]";
}
function getCustomFn(object) {
  var customInspectFn = object[String(nodejsCustomInspectSymbol_default)];
  if (typeof customInspectFn === "function") {
    return customInspectFn;
  }
  if (typeof object.inspect === "function") {
    return object.inspect;
  }
}
function getObjectTag(object) {
  var tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    var name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}

// node_modules/graphql/jsutils/devAssert.mjs
function devAssert(condition, message) {
  var booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}

// node_modules/graphql/jsutils/instanceOf.mjs
function _typeof4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof4 = function _typeof6(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof4 = function _typeof6(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof4(obj);
}
var instanceOf_default = false ? (
  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
  // eslint-disable-next-line no-shadow
  function instanceOf(value, constructor) {
    return value instanceof constructor;
  }
) : (
  // eslint-disable-next-line no-shadow
  function instanceOf2(value, constructor) {
    if (value instanceof constructor) {
      return true;
    }
    if (_typeof4(value) === "object" && value !== null) {
      var _value$constructor;
      var className = constructor.prototype[Symbol.toStringTag];
      var valueClassName = (
        // We still need to support constructor's name to detect conflicts with older versions of this library.
        Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
      );
      if (className === valueClassName) {
        var stringifiedValue = inspect(value);
        throw new Error("Cannot use ".concat(className, ' "').concat(stringifiedValue, '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'));
      }
    }
    return false;
  }
);

// node_modules/graphql/language/source.mjs
function _defineProperties2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
var Source = function() {
  function Source2(body) {
    var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "GraphQL request";
    var locationOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      line: 1,
      column: 1
    };
    typeof body === "string" || devAssert(0, "Body must be a string. Received: ".concat(inspect(body), "."));
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 || devAssert(0, "line in locationOffset is 1-indexed and must be positive.");
    this.locationOffset.column > 0 || devAssert(0, "column in locationOffset is 1-indexed and must be positive.");
  }
  _createClass2(Source2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "Source";
    }
  }]);
  return Source2;
}();
function isSource(source) {
  return instanceOf_default(source, Source);
}

// node_modules/graphql/language/directiveLocation.mjs
var DirectiveLocation = Object.freeze({
  // Request Definitions
  QUERY: "QUERY",
  MUTATION: "MUTATION",
  SUBSCRIPTION: "SUBSCRIPTION",
  FIELD: "FIELD",
  FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
  FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
  INLINE_FRAGMENT: "INLINE_FRAGMENT",
  VARIABLE_DEFINITION: "VARIABLE_DEFINITION",
  // Type System Definitions
  SCHEMA: "SCHEMA",
  SCALAR: "SCALAR",
  OBJECT: "OBJECT",
  FIELD_DEFINITION: "FIELD_DEFINITION",
  ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
  INTERFACE: "INTERFACE",
  UNION: "UNION",
  ENUM: "ENUM",
  ENUM_VALUE: "ENUM_VALUE",
  INPUT_OBJECT: "INPUT_OBJECT",
  INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
});

// node_modules/graphql/language/blockString.mjs
function dedentBlockStringValue(rawString) {
  var lines = rawString.split(/\r\n|[\n\r]/g);
  var commonIndent = getBlockStringIndentation(rawString);
  if (commonIndent !== 0) {
    for (var i2 = 1; i2 < lines.length; i2++) {
      lines[i2] = lines[i2].slice(commonIndent);
    }
  }
  var startLine = 0;
  while (startLine < lines.length && isBlank(lines[startLine])) {
    ++startLine;
  }
  var endLine = lines.length;
  while (endLine > startLine && isBlank(lines[endLine - 1])) {
    --endLine;
  }
  return lines.slice(startLine, endLine).join("\n");
}
function isBlank(str) {
  for (var i2 = 0; i2 < str.length; ++i2) {
    if (str[i2] !== " " && str[i2] !== "	") {
      return false;
    }
  }
  return true;
}
function getBlockStringIndentation(value) {
  var _commonIndent;
  var isFirstLine = true;
  var isEmptyLine = true;
  var indent2 = 0;
  var commonIndent = null;
  for (var i2 = 0; i2 < value.length; ++i2) {
    switch (value.charCodeAt(i2)) {
      case 13:
        if (value.charCodeAt(i2 + 1) === 10) {
          ++i2;
        }
      case 10:
        isFirstLine = false;
        isEmptyLine = true;
        indent2 = 0;
        break;
      case 9:
      case 32:
        ++indent2;
        break;
      default:
        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent2 < commonIndent)) {
          commonIndent = indent2;
        }
        isEmptyLine = false;
    }
  }
  return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
}
function printBlockString(value) {
  var indentation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var preferMultipleLines = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var isSingleLine = value.indexOf("\n") === -1;
  var hasLeadingSpace = value[0] === " " || value[0] === "	";
  var hasTrailingQuote = value[value.length - 1] === '"';
  var hasTrailingSlash = value[value.length - 1] === "\\";
  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
  var result = "";
  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
    result += "\n" + indentation;
  }
  result += indentation ? value.replace(/\n/g, "\n" + indentation) : value;
  if (printAsMultipleLines) {
    result += "\n";
  }
  return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}

// node_modules/graphql/language/lexer.mjs
var Lexer = function() {
  function Lexer2(source) {
    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }
  var _proto = Lexer2.prototype;
  _proto.advance = function advance() {
    this.lastToken = this.token;
    var token = this.token = this.lookahead();
    return token;
  };
  _proto.lookahead = function lookahead() {
    var token = this.token;
    if (token.kind !== TokenKind.EOF) {
      do {
        var _token$next;
        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
      } while (token.kind === TokenKind.COMMENT);
    }
    return token;
  };
  return Lexer2;
}();
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function printCharCode(code) {
  return (
    // NaN/undefined represents access beyond the end of the file.
    isNaN(code) ? TokenKind.EOF : (
      // Trust JSON for ASCII.
      code < 127 ? JSON.stringify(String.fromCharCode(code)) : (
        // Otherwise print the escaped form.
        '"\\u'.concat(("00" + code.toString(16).toUpperCase()).slice(-4), '"')
      )
    )
  );
}
function readToken(lexer, prev) {
  var source = lexer.source;
  var body = source.body;
  var bodyLength = body.length;
  var pos = prev.end;
  while (pos < bodyLength) {
    var code = body.charCodeAt(pos);
    var _line = lexer.line;
    var _col = 1 + pos - lexer.lineStart;
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++pos;
        continue;
      case 10:
        ++pos;
        ++lexer.line;
        lexer.lineStart = pos;
        continue;
      case 13:
        if (body.charCodeAt(pos + 1) === 10) {
          pos += 2;
        } else {
          ++pos;
        }
        ++lexer.line;
        lexer.lineStart = pos;
        continue;
      case 33:
        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);
      case 35:
        return readComment(source, pos, _line, _col, prev);
      case 36:
        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);
      case 38:
        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);
      case 40:
        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);
      case 41:
        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);
      case 46:
        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
        }
        break;
      case 58:
        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);
      case 61:
        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);
      case 64:
        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);
      case 91:
        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);
      case 93:
        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);
      case 123:
        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);
      case 124:
        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);
      case 125:
        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);
      case 34:
        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
          return readBlockString(source, pos, _line, _col, prev, lexer);
        }
        return readString(source, pos, _line, _col, prev);
      case 45:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return readNumber(source, pos, code, _line, _col, prev);
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 95:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
        return readName(source, pos, _line, _col, prev);
    }
    throw syntaxError(source, pos, unexpectedCharacterMessage(code));
  }
  var line = lexer.line;
  var col = 1 + pos - lexer.lineStart;
  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
}
function unexpectedCharacterMessage(code) {
  if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
    return "Cannot contain the invalid character ".concat(printCharCode(code), ".");
  }
  if (code === 39) {
    return `Unexpected single quote character ('), did you mean to use a double quote (")?`;
  }
  return "Cannot parse the unexpected character ".concat(printCharCode(code), ".");
}
function readComment(source, start, line, col, prev) {
  var body = source.body;
  var code;
  var position = start;
  do {
    code = body.charCodeAt(++position);
  } while (!isNaN(code) && // SourceCharacter but not LineTerminator
  (code > 31 || code === 9));
  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));
}
function readNumber(source, start, firstCode, line, col, prev) {
  var body = source.body;
  var code = firstCode;
  var position = start;
  var isFloat = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (code >= 48 && code <= 57) {
      throw syntaxError(source, position, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code), "."));
    }
  } else {
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(source, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
  }
  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));
}
function readDigits(source, start, firstCode) {
  var body = source.body;
  var position = start;
  var code = firstCode;
  if (code >= 48 && code <= 57) {
    do {
      code = body.charCodeAt(++position);
    } while (code >= 48 && code <= 57);
    return position;
  }
  throw syntaxError(source, position, "Invalid number, expected digit but got: ".concat(printCharCode(code), "."));
}
function readString(source, start, line, col, prev) {
  var body = source.body;
  var position = start + 1;
  var chunkStart = position;
  var code = 0;
  var value = "";
  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator
  code !== 10 && code !== 13) {
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);
    }
    if (code < 32 && code !== 9) {
      throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }
    ++position;
    if (code === 92) {
      value += body.slice(chunkStart, position - 1);
      code = body.charCodeAt(position);
      switch (code) {
        case 34:
          value += '"';
          break;
        case 47:
          value += "/";
          break;
        case 92:
          value += "\\";
          break;
        case 98:
          value += "\b";
          break;
        case 102:
          value += "\f";
          break;
        case 110:
          value += "\n";
          break;
        case 114:
          value += "\r";
          break;
        case 116:
          value += "	";
          break;
        case 117: {
          var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));
          if (charCode < 0) {
            var invalidSequence = body.slice(position + 1, position + 5);
            throw syntaxError(source, position, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
          }
          value += String.fromCharCode(charCode);
          position += 4;
          break;
        }
        default:
          throw syntaxError(source, position, "Invalid character escape sequence: \\".concat(String.fromCharCode(code), "."));
      }
      ++position;
      chunkStart = position;
    }
  }
  throw syntaxError(source, position, "Unterminated string.");
}
function readBlockString(source, start, line, col, prev, lexer) {
  var body = source.body;
  var position = start + 3;
  var chunkStart = position;
  var code = 0;
  var rawValue = "";
  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      rawValue += body.slice(chunkStart, position);
      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));
    }
    if (code < 32 && code !== 9 && code !== 10 && code !== 13) {
      throw syntaxError(source, position, "Invalid character within String: ".concat(printCharCode(code), "."));
    }
    if (code === 10) {
      ++position;
      ++lexer.line;
      lexer.lineStart = position;
    } else if (code === 13) {
      if (body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      ++lexer.line;
      lexer.lineStart = position;
    } else if (
      // Escape Triple-Quote (\""")
      code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34
    ) {
      rawValue += body.slice(chunkStart, position) + '"""';
      position += 4;
      chunkStart = position;
    } else {
      ++position;
    }
  }
  throw syntaxError(source, position, "Unterminated string.");
}
function uniCharCode(a2, b2, c2, d2) {
  return char2hex(a2) << 12 | char2hex(b2) << 8 | char2hex(c2) << 4 | char2hex(d2);
}
function char2hex(a2) {
  return a2 >= 48 && a2 <= 57 ? a2 - 48 : a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : -1;
}
function readName(source, start, line, col, prev) {
  var body = source.body;
  var bodyLength = body.length;
  var position = start + 1;
  var code = 0;
  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _
  code >= 48 && code <= 57 || // 0-9
  code >= 65 && code <= 90 || // A-Z
  code >= 97 && code <= 122)) {
    ++position;
  }
  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));
}
function isNameStart(code) {
  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;
}

// node_modules/graphql/language/parser.mjs
function parse7(source, options) {
  var parser = new Parser2(source, options);
  return parser.parseDocument();
}
var Parser2 = function() {
  function Parser3(source, options) {
    var sourceObj = isSource(source) ? source : new Source(source);
    this._lexer = new Lexer(sourceObj);
    this._options = options;
  }
  var _proto = Parser3.prototype;
  _proto.parseName = function parseName() {
    var token = this.expectToken(TokenKind.NAME);
    return {
      kind: Kind.NAME,
      value: token.value,
      loc: this.loc(token)
    };
  };
  _proto.parseDocument = function parseDocument() {
    var start = this._lexer.token;
    return {
      kind: Kind.DOCUMENT,
      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),
      loc: this.loc(start)
    };
  };
  _proto.parseDefinition = function parseDefinition() {
    if (this.peek(TokenKind.NAME)) {
      switch (this._lexer.token.value) {
        case "query":
        case "mutation":
        case "subscription":
          return this.parseOperationDefinition();
        case "fragment":
          return this.parseFragmentDefinition();
        case "schema":
        case "scalar":
        case "type":
        case "interface":
        case "union":
        case "enum":
        case "input":
        case "directive":
          return this.parseTypeSystemDefinition();
        case "extend":
          return this.parseTypeSystemExtension();
      }
    } else if (this.peek(TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    } else if (this.peekDescription()) {
      return this.parseTypeSystemDefinition();
    }
    throw this.unexpected();
  };
  _proto.parseOperationDefinition = function parseOperationDefinition() {
    var start = this._lexer.token;
    if (this.peek(TokenKind.BRACE_L)) {
      return {
        kind: Kind.OPERATION_DEFINITION,
        operation: "query",
        name: void 0,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    var operation = this.parseOperationType();
    var name;
    if (this.peek(TokenKind.NAME)) {
      name = this.parseName();
    }
    return {
      kind: Kind.OPERATION_DEFINITION,
      operation,
      name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  };
  _proto.parseOperationType = function parseOperationType() {
    var operationToken = this.expectToken(TokenKind.NAME);
    switch (operationToken.value) {
      case "query":
        return "query";
      case "mutation":
        return "mutation";
      case "subscription":
        return "subscription";
    }
    throw this.unexpected(operationToken);
  };
  _proto.parseVariableDefinitions = function parseVariableDefinitions() {
    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);
  };
  _proto.parseVariableDefinition = function parseVariableDefinition() {
    var start = this._lexer.token;
    return {
      kind: Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : void 0,
      directives: this.parseDirectives(true),
      loc: this.loc(start)
    };
  };
  _proto.parseVariable = function parseVariable() {
    var start = this._lexer.token;
    this.expectToken(TokenKind.DOLLAR);
    return {
      kind: Kind.VARIABLE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  };
  _proto.parseSelectionSet = function parseSelectionSet() {
    var start = this._lexer.token;
    return {
      kind: Kind.SELECTION_SET,
      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  };
  _proto.parseSelection = function parseSelection() {
    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
  };
  _proto.parseField = function parseField() {
    var start = this._lexer.token;
    var nameOrAlias = this.parseName();
    var alias;
    var name;
    if (this.expectOptionalToken(TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }
    return {
      kind: Kind.FIELD,
      alias,
      name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0,
      loc: this.loc(start)
    };
  };
  _proto.parseArguments = function parseArguments(isConst) {
    var item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
  };
  _proto.parseArgument = function parseArgument() {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return {
      kind: Kind.ARGUMENT,
      name,
      value: this.parseValueLiteral(false),
      loc: this.loc(start)
    };
  };
  _proto.parseConstArgument = function parseConstArgument() {
    var start = this._lexer.token;
    return {
      kind: Kind.ARGUMENT,
      name: this.parseName(),
      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),
      loc: this.loc(start)
    };
  };
  _proto.parseFragment = function parseFragment() {
    var start = this._lexer.token;
    this.expectToken(TokenKind.SPREAD);
    var hasTypeCondition = this.expectOptionalKeyword("on");
    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
      return {
        kind: Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false),
        loc: this.loc(start)
      };
    }
    return {
      kind: Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  };
  _proto.parseFragmentDefinition = function parseFragmentDefinition() {
    var _this$_options;
    var start = this._lexer.token;
    this.expectKeyword("fragment");
    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
      return {
        kind: Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
        loc: this.loc(start)
      };
    }
    return {
      kind: Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
      loc: this.loc(start)
    };
  };
  _proto.parseFragmentName = function parseFragmentName() {
    if (this._lexer.token.value === "on") {
      throw this.unexpected();
    }
    return this.parseName();
  };
  _proto.parseValueLiteral = function parseValueLiteral(isConst) {
    var token = this._lexer.token;
    switch (token.kind) {
      case TokenKind.BRACKET_L:
        return this.parseList(isConst);
      case TokenKind.BRACE_L:
        return this.parseObject(isConst);
      case TokenKind.INT:
        this._lexer.advance();
        return {
          kind: Kind.INT,
          value: token.value,
          loc: this.loc(token)
        };
      case TokenKind.FLOAT:
        this._lexer.advance();
        return {
          kind: Kind.FLOAT,
          value: token.value,
          loc: this.loc(token)
        };
      case TokenKind.STRING:
      case TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();
      case TokenKind.NAME:
        this._lexer.advance();
        switch (token.value) {
          case "true":
            return {
              kind: Kind.BOOLEAN,
              value: true,
              loc: this.loc(token)
            };
          case "false":
            return {
              kind: Kind.BOOLEAN,
              value: false,
              loc: this.loc(token)
            };
          case "null":
            return {
              kind: Kind.NULL,
              loc: this.loc(token)
            };
          default:
            return {
              kind: Kind.ENUM,
              value: token.value,
              loc: this.loc(token)
            };
        }
      case TokenKind.DOLLAR:
        if (!isConst) {
          return this.parseVariable();
        }
        break;
    }
    throw this.unexpected();
  };
  _proto.parseStringLiteral = function parseStringLiteral() {
    var token = this._lexer.token;
    this._lexer.advance();
    return {
      kind: Kind.STRING,
      value: token.value,
      block: token.kind === TokenKind.BLOCK_STRING,
      loc: this.loc(token)
    };
  };
  _proto.parseList = function parseList(isConst) {
    var _this = this;
    var start = this._lexer.token;
    var item = function item2() {
      return _this.parseValueLiteral(isConst);
    };
    return {
      kind: Kind.LIST,
      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
      loc: this.loc(start)
    };
  };
  _proto.parseObject = function parseObject(isConst) {
    var _this2 = this;
    var start = this._lexer.token;
    var item = function item2() {
      return _this2.parseObjectField(isConst);
    };
    return {
      kind: Kind.OBJECT,
      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),
      loc: this.loc(start)
    };
  };
  _proto.parseObjectField = function parseObjectField(isConst) {
    var start = this._lexer.token;
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    return {
      kind: Kind.OBJECT_FIELD,
      name,
      value: this.parseValueLiteral(isConst),
      loc: this.loc(start)
    };
  };
  _proto.parseDirectives = function parseDirectives(isConst) {
    var directives = [];
    while (this.peek(TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }
    return directives;
  };
  _proto.parseDirective = function parseDirective(isConst) {
    var start = this._lexer.token;
    this.expectToken(TokenKind.AT);
    return {
      kind: Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst),
      loc: this.loc(start)
    };
  };
  _proto.parseTypeReference = function parseTypeReference() {
    var start = this._lexer.token;
    var type;
    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
      type = this.parseTypeReference();
      this.expectToken(TokenKind.BRACKET_R);
      type = {
        kind: Kind.LIST_TYPE,
        type,
        loc: this.loc(start)
      };
    } else {
      type = this.parseNamedType();
    }
    if (this.expectOptionalToken(TokenKind.BANG)) {
      return {
        kind: Kind.NON_NULL_TYPE,
        type,
        loc: this.loc(start)
      };
    }
    return type;
  };
  _proto.parseNamedType = function parseNamedType() {
    var start = this._lexer.token;
    return {
      kind: Kind.NAMED_TYPE,
      name: this.parseName(),
      loc: this.loc(start)
    };
  };
  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaDefinition();
        case "scalar":
          return this.parseScalarTypeDefinition();
        case "type":
          return this.parseObjectTypeDefinition();
        case "interface":
          return this.parseInterfaceTypeDefinition();
        case "union":
          return this.parseUnionTypeDefinition();
        case "enum":
          return this.parseEnumTypeDefinition();
        case "input":
          return this.parseInputObjectTypeDefinition();
        case "directive":
          return this.parseDirectiveDefinition();
      }
    }
    throw this.unexpected(keywordToken);
  };
  _proto.peekDescription = function peekDescription() {
    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
  };
  _proto.parseDescription = function parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  };
  _proto.parseSchemaDefinition = function parseSchemaDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("schema");
    var directives = this.parseDirectives(true);
    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
    return {
      kind: Kind.SCHEMA_DEFINITION,
      description,
      directives,
      operationTypes,
      loc: this.loc(start)
    };
  };
  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
    var start = this._lexer.token;
    var operation = this.parseOperationType();
    this.expectToken(TokenKind.COLON);
    var type = this.parseNamedType();
    return {
      kind: Kind.OPERATION_TYPE_DEFINITION,
      operation,
      type,
      loc: this.loc(start)
    };
  };
  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("scalar");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.SCALAR_TYPE_DEFINITION,
      description,
      name,
      directives,
      loc: this.loc(start)
    };
  };
  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("type");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields7 = this.parseFieldsDefinition();
    return {
      kind: Kind.OBJECT_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields: fields7,
      loc: this.loc(start)
    };
  };
  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
    var _this$_options2;
    if (!this.expectOptionalKeyword("implements")) {
      return [];
    }
    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
      var types = [];
      this.expectOptionalToken(TokenKind.AMP);
      do {
        types.push(this.parseNamedType());
      } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));
      return types;
    }
    return this.delimitedMany(TokenKind.AMP, this.parseNamedType);
  };
  _proto.parseFieldsDefinition = function parseFieldsDefinition() {
    var _this$_options3;
    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {
      this._lexer.advance();
      this._lexer.advance();
      return [];
    }
    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);
  };
  _proto.parseFieldDefinition = function parseFieldDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    this.expectToken(TokenKind.COLON);
    var type = this.parseTypeReference();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.FIELD_DEFINITION,
      description,
      name,
      arguments: args,
      type,
      directives,
      loc: this.loc(start)
    };
  };
  _proto.parseArgumentDefs = function parseArgumentDefs() {
    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);
  };
  _proto.parseInputValueDef = function parseInputValueDef() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    this.expectToken(TokenKind.COLON);
    var type = this.parseTypeReference();
    var defaultValue;
    if (this.expectOptionalToken(TokenKind.EQUALS)) {
      defaultValue = this.parseValueLiteral(true);
    }
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.INPUT_VALUE_DEFINITION,
      description,
      name,
      type,
      defaultValue,
      directives,
      loc: this.loc(start)
    };
  };
  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("interface");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields7 = this.parseFieldsDefinition();
    return {
      kind: Kind.INTERFACE_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields: fields7,
      loc: this.loc(start)
    };
  };
  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("union");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();
    return {
      kind: Kind.UNION_TYPE_DEFINITION,
      description,
      name,
      directives,
      types,
      loc: this.loc(start)
    };
  };
  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
  };
  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("enum");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();
    return {
      kind: Kind.ENUM_TYPE_DEFINITION,
      description,
      name,
      directives,
      values,
      loc: this.loc(start)
    };
  };
  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);
  };
  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    return {
      kind: Kind.ENUM_VALUE_DEFINITION,
      description,
      name,
      directives,
      loc: this.loc(start)
    };
  };
  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("input");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields7 = this.parseInputFieldsDefinition();
    return {
      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description,
      name,
      directives,
      fields: fields7,
      loc: this.loc(start)
    };
  };
  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);
  };
  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
    var keywordToken = this._lexer.lookahead();
    if (keywordToken.kind === TokenKind.NAME) {
      switch (keywordToken.value) {
        case "schema":
          return this.parseSchemaExtension();
        case "scalar":
          return this.parseScalarTypeExtension();
        case "type":
          return this.parseObjectTypeExtension();
        case "interface":
          return this.parseInterfaceTypeExtension();
        case "union":
          return this.parseUnionTypeExtension();
        case "enum":
          return this.parseEnumTypeExtension();
        case "input":
          return this.parseInputObjectTypeExtension();
      }
    }
    throw this.unexpected(keywordToken);
  };
  _proto.parseSchemaExtension = function parseSchemaExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("schema");
    var directives = this.parseDirectives(true);
    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.SCHEMA_EXTENSION,
      directives,
      operationTypes,
      loc: this.loc(start)
    };
  };
  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("scalar");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    if (directives.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.SCALAR_TYPE_EXTENSION,
      name,
      directives,
      loc: this.loc(start)
    };
  };
  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("type");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields7 = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields7.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.OBJECT_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields: fields7,
      loc: this.loc(start)
    };
  };
  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("interface");
    var name = this.parseName();
    var interfaces = this.parseImplementsInterfaces();
    var directives = this.parseDirectives(true);
    var fields7 = this.parseFieldsDefinition();
    if (interfaces.length === 0 && directives.length === 0 && fields7.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.INTERFACE_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields: fields7,
      loc: this.loc(start)
    };
  };
  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("union");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var types = this.parseUnionMemberTypes();
    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.UNION_TYPE_EXTENSION,
      name,
      directives,
      types,
      loc: this.loc(start)
    };
  };
  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("enum");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var values = this.parseEnumValuesDefinition();
    if (directives.length === 0 && values.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.ENUM_TYPE_EXTENSION,
      name,
      directives,
      values,
      loc: this.loc(start)
    };
  };
  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
    var start = this._lexer.token;
    this.expectKeyword("extend");
    this.expectKeyword("input");
    var name = this.parseName();
    var directives = this.parseDirectives(true);
    var fields7 = this.parseInputFieldsDefinition();
    if (directives.length === 0 && fields7.length === 0) {
      throw this.unexpected();
    }
    return {
      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name,
      directives,
      fields: fields7,
      loc: this.loc(start)
    };
  };
  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
    var start = this._lexer.token;
    var description = this.parseDescription();
    this.expectKeyword("directive");
    this.expectToken(TokenKind.AT);
    var name = this.parseName();
    var args = this.parseArgumentDefs();
    var repeatable = this.expectOptionalKeyword("repeatable");
    this.expectKeyword("on");
    var locations = this.parseDirectiveLocations();
    return {
      kind: Kind.DIRECTIVE_DEFINITION,
      description,
      name,
      arguments: args,
      repeatable,
      locations,
      loc: this.loc(start)
    };
  };
  _proto.parseDirectiveLocations = function parseDirectiveLocations() {
    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
  };
  _proto.parseDirectiveLocation = function parseDirectiveLocation() {
    var start = this._lexer.token;
    var name = this.parseName();
    if (DirectiveLocation[name.value] !== void 0) {
      return name;
    }
    throw this.unexpected(start);
  };
  _proto.loc = function loc(startToken) {
    var _this$_options4;
    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
      return new Location(startToken, this._lexer.lastToken, this._lexer.source);
    }
  };
  _proto.peek = function peek(kind) {
    return this._lexer.token.kind === kind;
  };
  _proto.expectToken = function expectToken(kind) {
    var token = this._lexer.token;
    if (token.kind === kind) {
      this._lexer.advance();
      return token;
    }
    throw syntaxError(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
  };
  _proto.expectOptionalToken = function expectOptionalToken(kind) {
    var token = this._lexer.token;
    if (token.kind === kind) {
      this._lexer.advance();
      return token;
    }
    return void 0;
  };
  _proto.expectKeyword = function expectKeyword(value) {
    var token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
    } else {
      throw syntaxError(this._lexer.source, token.start, 'Expected "'.concat(value, '", found ').concat(getTokenDesc(token), "."));
    }
  };
  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
    var token = this._lexer.token;
    if (token.kind === TokenKind.NAME && token.value === value) {
      this._lexer.advance();
      return true;
    }
    return false;
  };
  _proto.unexpected = function unexpected(atToken) {
    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return syntaxError(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
  };
  _proto.any = function any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];
    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }
    return nodes;
  };
  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      var nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));
      return nodes;
    }
    return [];
  };
  _proto.many = function many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    var nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));
    return nodes;
  };
  _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    var nodes = [];
    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));
    return nodes;
  };
  return Parser3;
}();
function getTokenDesc(token) {
  var value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ' "'.concat(value, '"') : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? '"'.concat(kind, '"') : kind;
}

// node_modules/graphql/language/visitor.mjs
var QueryDocumentKeys = {
  Name: [],
  Document: ["definitions"],
  OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
  VariableDefinition: ["variable", "type", "defaultValue", "directives"],
  Variable: ["name"],
  SelectionSet: ["selections"],
  Field: ["alias", "name", "arguments", "directives", "selectionSet"],
  Argument: ["name", "value"],
  FragmentSpread: ["name", "directives"],
  InlineFragment: ["typeCondition", "directives", "selectionSet"],
  FragmentDefinition: [
    "name",
    // Note: fragment variable definitions are experimental and may be changed
    // or removed in the future.
    "variableDefinitions",
    "typeCondition",
    "directives",
    "selectionSet"
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ["values"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["name", "arguments"],
  NamedType: ["name"],
  ListType: ["type"],
  NonNullType: ["type"],
  SchemaDefinition: ["description", "directives", "operationTypes"],
  OperationTypeDefinition: ["type"],
  ScalarTypeDefinition: ["description", "name", "directives"],
  ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
  FieldDefinition: ["description", "name", "arguments", "type", "directives"],
  InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
  InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
  UnionTypeDefinition: ["description", "name", "directives", "types"],
  EnumTypeDefinition: ["description", "name", "directives", "values"],
  EnumValueDefinition: ["description", "name", "directives"],
  InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
  DirectiveDefinition: ["description", "name", "arguments", "locations"],
  SchemaExtension: ["directives", "operationTypes"],
  ScalarTypeExtension: ["name", "directives"],
  ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
  InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
  UnionTypeExtension: ["name", "directives", "types"],
  EnumTypeExtension: ["name", "directives", "values"],
  InputObjectTypeExtension: ["name", "directives", "fields"]
};
var BREAK = Object.freeze({});
function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
  var stack = void 0;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = void 0;
  var key = void 0;
  var parent = void 0;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};
          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
            var k2 = _Object$keys2[_i2];
            clone[k2] = node[k2];
          }
          node = clone;
        }
        var editOffset = 0;
        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];
          if (inArray) {
            editKey -= editOffset;
          }
          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : void 0;
      node = parent ? parent[key] : newRoot;
      if (node === null || node === void 0) {
        continue;
      }
      if (parent) {
        path.push(key);
      }
    }
    var result = void 0;
    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
      }
      var visitFn = getVisitFn(visitor, node.kind, isLeaving);
      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);
        if (result === BREAK) {
          break;
        }
        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== void 0) {
          edits.push([key, result]);
          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _visitorKeys$node$kin;
      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }
  return newRoot;
}
function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];
  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === "function") {
      return kindVisitor;
    }
    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
    if (typeof kindSpecificVisitor === "function") {
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
    if (specificVisitor) {
      if (typeof specificVisitor === "function") {
        return specificVisitor;
      }
      var specificKindVisitor = specificVisitor[kind];
      if (typeof specificKindVisitor === "function") {
        return specificKindVisitor;
      }
    }
  }
}

// node_modules/graphql/polyfills/find.mjs
var find = Array.prototype.find ? function(list, predicate) {
  return Array.prototype.find.call(list, predicate);
} : function(list, predicate) {
  for (var _i2 = 0; _i2 < list.length; _i2++) {
    var value = list[_i2];
    if (predicate(value)) {
      return value;
    }
  }
};
var find_default = find;

// node_modules/graphql/polyfills/objectValues.mjs
var objectValues = Object.values || function(obj) {
  return Object.keys(obj).map(function(key) {
    return obj[key];
  });
};
var objectValues_default = objectValues;

// node_modules/graphql/polyfills/objectEntries.mjs
var objectEntries = Object.entries || function(obj) {
  return Object.keys(obj).map(function(key) {
    return [key, obj[key]];
  });
};
var objectEntries_default = objectEntries;

// node_modules/graphql/jsutils/keyMap.mjs
function keyMap(list, keyFn) {
  return list.reduce(function(map, item) {
    map[keyFn(item)] = item;
    return map;
  }, /* @__PURE__ */ Object.create(null));
}

// node_modules/graphql/jsutils/mapValue.mjs
function mapValue(map, fn2) {
  var result = /* @__PURE__ */ Object.create(null);
  for (var _i2 = 0, _objectEntries2 = objectEntries_default(map); _i2 < _objectEntries2.length; _i2++) {
    var _ref2 = _objectEntries2[_i2];
    var _key = _ref2[0];
    var _value = _ref2[1];
    result[_key] = fn2(_value, _key);
  }
  return result;
}

// node_modules/graphql/jsutils/toObjMap.mjs
function toObjMap(obj) {
  if (Object.getPrototypeOf(obj) === null) {
    return obj;
  }
  var map = /* @__PURE__ */ Object.create(null);
  for (var _i2 = 0, _objectEntries2 = objectEntries_default(obj); _i2 < _objectEntries2.length; _i2++) {
    var _ref2 = _objectEntries2[_i2];
    var key = _ref2[0];
    var value = _ref2[1];
    map[key] = value;
  }
  return map;
}

// node_modules/graphql/jsutils/keyValMap.mjs
function keyValMap(list, keyFn, valFn) {
  return list.reduce(function(map, item) {
    map[keyFn(item)] = valFn(item);
    return map;
  }, /* @__PURE__ */ Object.create(null));
}

// node_modules/graphql/jsutils/didYouMean.mjs
var MAX_SUGGESTIONS = 5;
function didYouMean(firstArg, secondArg) {
  var _ref = typeof firstArg === "string" ? [firstArg, secondArg] : [void 0, firstArg], subMessage = _ref[0], suggestionsArg = _ref[1];
  var message = " Did you mean ";
  if (subMessage) {
    message += subMessage + " ";
  }
  var suggestions = suggestionsArg.map(function(x2) {
    return '"'.concat(x2, '"');
  });
  switch (suggestions.length) {
    case 0:
      return "";
    case 1:
      return message + suggestions[0] + "?";
    case 2:
      return message + suggestions[0] + " or " + suggestions[1] + "?";
  }
  var selected = suggestions.slice(0, MAX_SUGGESTIONS);
  var lastItem = selected.pop();
  return message + selected.join(", ") + ", or " + lastItem + "?";
}

// node_modules/graphql/jsutils/identityFunc.mjs
function identityFunc(x2) {
  return x2;
}

// node_modules/graphql/jsutils/naturalCompare.mjs
function naturalCompare(aStr, bStr) {
  var aIdx = 0;
  var bIdx = 0;
  while (aIdx < aStr.length && bIdx < bStr.length) {
    var aChar = aStr.charCodeAt(aIdx);
    var bChar = bStr.charCodeAt(bIdx);
    if (isDigit(aChar) && isDigit(bChar)) {
      var aNum = 0;
      do {
        ++aIdx;
        aNum = aNum * 10 + aChar - DIGIT_0;
        aChar = aStr.charCodeAt(aIdx);
      } while (isDigit(aChar) && aNum > 0);
      var bNum = 0;
      do {
        ++bIdx;
        bNum = bNum * 10 + bChar - DIGIT_0;
        bChar = bStr.charCodeAt(bIdx);
      } while (isDigit(bChar) && bNum > 0);
      if (aNum < bNum) {
        return -1;
      }
      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }
      if (aChar > bChar) {
        return 1;
      }
      ++aIdx;
      ++bIdx;
    }
  }
  return aStr.length - bStr.length;
}
var DIGIT_0 = 48;
var DIGIT_9 = 57;
function isDigit(code) {
  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}

// node_modules/graphql/jsutils/suggestionList.mjs
function suggestionList(input, options) {
  var optionsByDistance = /* @__PURE__ */ Object.create(null);
  var lexicalDistance = new LexicalDistance(input);
  var threshold = Math.floor(input.length * 0.4) + 1;
  for (var _i2 = 0; _i2 < options.length; _i2++) {
    var option = options[_i2];
    var distance = lexicalDistance.measure(option, threshold);
    if (distance !== void 0) {
      optionsByDistance[option] = distance;
    }
  }
  return Object.keys(optionsByDistance).sort(function(a2, b2) {
    var distanceDiff = optionsByDistance[a2] - optionsByDistance[b2];
    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a2, b2);
  });
}
var LexicalDistance = function() {
  function LexicalDistance2(input) {
    this._input = input;
    this._inputLowerCase = input.toLowerCase();
    this._inputArray = stringToArray(this._inputLowerCase);
    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
  }
  var _proto = LexicalDistance2.prototype;
  _proto.measure = function measure(option, threshold) {
    if (this._input === option) {
      return 0;
    }
    var optionLowerCase = option.toLowerCase();
    if (this._inputLowerCase === optionLowerCase) {
      return 1;
    }
    var a2 = stringToArray(optionLowerCase);
    var b2 = this._inputArray;
    if (a2.length < b2.length) {
      var tmp = a2;
      a2 = b2;
      b2 = tmp;
    }
    var aLength = a2.length;
    var bLength = b2.length;
    if (aLength - bLength > threshold) {
      return void 0;
    }
    var rows = this._rows;
    for (var j2 = 0; j2 <= bLength; j2++) {
      rows[0][j2] = j2;
    }
    for (var i2 = 1; i2 <= aLength; i2++) {
      var upRow = rows[(i2 - 1) % 3];
      var currentRow = rows[i2 % 3];
      var smallestCell = currentRow[0] = i2;
      for (var _j = 1; _j <= bLength; _j++) {
        var cost = a2[i2 - 1] === b2[_j - 1] ? 0 : 1;
        var currentCell = Math.min(
          upRow[_j] + 1,
          // delete
          currentRow[_j - 1] + 1,
          // insert
          upRow[_j - 1] + cost
          // substitute
        );
        if (i2 > 1 && _j > 1 && a2[i2 - 1] === b2[_j - 2] && a2[i2 - 2] === b2[_j - 1]) {
          var doubleDiagonalCell = rows[(i2 - 2) % 3][_j - 2];
          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
        }
        if (currentCell < smallestCell) {
          smallestCell = currentCell;
        }
        currentRow[_j] = currentCell;
      }
      if (smallestCell > threshold) {
        return void 0;
      }
    }
    var distance = rows[aLength % 3][bLength];
    return distance <= threshold ? distance : void 0;
  };
  return LexicalDistance2;
}();
function stringToArray(str) {
  var strLength = str.length;
  var array = new Array(strLength);
  for (var i2 = 0; i2 < strLength; ++i2) {
    array[i2] = str.charCodeAt(i2);
  }
  return array;
}

// node_modules/graphql/language/printer.mjs
function print(ast) {
  return visit(ast, {
    leave: printDocASTReducer
  });
}
var MAX_LINE_LENGTH = 80;
var printDocASTReducer = {
  Name: function Name(node) {
    return node.value;
  },
  Variable: function Variable(node) {
    return "$" + node.name;
  },
  // Document
  Document: function Document(node) {
    return join(node.definitions, "\n\n") + "\n";
  },
  OperationDefinition: function OperationDefinition(node) {
    var op = node.operation;
    var name = node.name;
    var varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
    var directives = join(node.directives, " ");
    var selectionSet = node.selectionSet;
    return !name && !directives && !varDefs && op === "query" ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], " ");
  },
  VariableDefinition: function VariableDefinition(_ref) {
    var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue, directives = _ref.directives;
    return variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "));
  },
  SelectionSet: function SelectionSet(_ref2) {
    var selections = _ref2.selections;
    return block(selections);
  },
  Field: function Field(_ref3) {
    var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives = _ref3.directives, selectionSet = _ref3.selectionSet;
    var prefix = wrap("", alias, ": ") + name;
    var argsLine = prefix + wrap("(", join(args, ", "), ")");
    if (argsLine.length > MAX_LINE_LENGTH) {
      argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
    }
    return join([argsLine, join(directives, " "), selectionSet], " ");
  },
  Argument: function Argument(_ref4) {
    var name = _ref4.name, value = _ref4.value;
    return name + ": " + value;
  },
  // Fragments
  FragmentSpread: function FragmentSpread(_ref5) {
    var name = _ref5.name, directives = _ref5.directives;
    return "..." + name + wrap(" ", join(directives, " "));
  },
  InlineFragment: function InlineFragment(_ref6) {
    var typeCondition = _ref6.typeCondition, directives = _ref6.directives, selectionSet = _ref6.selectionSet;
    return join(["...", wrap("on ", typeCondition), join(directives, " "), selectionSet], " ");
  },
  FragmentDefinition: function FragmentDefinition(_ref7) {
    var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives = _ref7.directives, selectionSet = _ref7.selectionSet;
    return (
      // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      "fragment ".concat(name).concat(wrap("(", join(variableDefinitions, ", "), ")"), " ") + "on ".concat(typeCondition, " ").concat(wrap("", join(directives, " "), " ")) + selectionSet
    );
  },
  // Value
  IntValue: function IntValue(_ref8) {
    var value = _ref8.value;
    return value;
  },
  FloatValue: function FloatValue(_ref9) {
    var value = _ref9.value;
    return value;
  },
  StringValue: function StringValue(_ref10, key) {
    var value = _ref10.value, isBlockString = _ref10.block;
    return isBlockString ? printBlockString(value, key === "description" ? "" : "  ") : JSON.stringify(value);
  },
  BooleanValue: function BooleanValue(_ref11) {
    var value = _ref11.value;
    return value ? "true" : "false";
  },
  NullValue: function NullValue() {
    return "null";
  },
  EnumValue: function EnumValue(_ref12) {
    var value = _ref12.value;
    return value;
  },
  ListValue: function ListValue(_ref13) {
    var values = _ref13.values;
    return "[" + join(values, ", ") + "]";
  },
  ObjectValue: function ObjectValue(_ref14) {
    var fields7 = _ref14.fields;
    return "{" + join(fields7, ", ") + "}";
  },
  ObjectField: function ObjectField(_ref15) {
    var name = _ref15.name, value = _ref15.value;
    return name + ": " + value;
  },
  // Directive
  Directive: function Directive(_ref16) {
    var name = _ref16.name, args = _ref16.arguments;
    return "@" + name + wrap("(", join(args, ", "), ")");
  },
  // Type
  NamedType: function NamedType(_ref17) {
    var name = _ref17.name;
    return name;
  },
  ListType: function ListType(_ref18) {
    var type = _ref18.type;
    return "[" + type + "]";
  },
  NonNullType: function NonNullType(_ref19) {
    var type = _ref19.type;
    return type + "!";
  },
  // Type System Definitions
  SchemaDefinition: addDescription(function(_ref20) {
    var directives = _ref20.directives, operationTypes = _ref20.operationTypes;
    return join(["schema", join(directives, " "), block(operationTypes)], " ");
  }),
  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
    var operation = _ref21.operation, type = _ref21.type;
    return operation + ": " + type;
  },
  ScalarTypeDefinition: addDescription(function(_ref22) {
    var name = _ref22.name, directives = _ref22.directives;
    return join(["scalar", name, join(directives, " ")], " ");
  }),
  ObjectTypeDefinition: addDescription(function(_ref23) {
    var name = _ref23.name, interfaces = _ref23.interfaces, directives = _ref23.directives, fields7 = _ref23.fields;
    return join(["type", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields7)], " ");
  }),
  FieldDefinition: addDescription(function(_ref24) {
    var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives = _ref24.directives;
    return name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "));
  }),
  InputValueDefinition: addDescription(function(_ref25) {
    var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives = _ref25.directives;
    return join([name + ": " + type, wrap("= ", defaultValue), join(directives, " ")], " ");
  }),
  InterfaceTypeDefinition: addDescription(function(_ref26) {
    var name = _ref26.name, interfaces = _ref26.interfaces, directives = _ref26.directives, fields7 = _ref26.fields;
    return join(["interface", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields7)], " ");
  }),
  UnionTypeDefinition: addDescription(function(_ref27) {
    var name = _ref27.name, directives = _ref27.directives, types = _ref27.types;
    return join(["union", name, join(directives, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
  }),
  EnumTypeDefinition: addDescription(function(_ref28) {
    var name = _ref28.name, directives = _ref28.directives, values = _ref28.values;
    return join(["enum", name, join(directives, " "), block(values)], " ");
  }),
  EnumValueDefinition: addDescription(function(_ref29) {
    var name = _ref29.name, directives = _ref29.directives;
    return join([name, join(directives, " ")], " ");
  }),
  InputObjectTypeDefinition: addDescription(function(_ref30) {
    var name = _ref30.name, directives = _ref30.directives, fields7 = _ref30.fields;
    return join(["input", name, join(directives, " "), block(fields7)], " ");
  }),
  DirectiveDefinition: addDescription(function(_ref31) {
    var name = _ref31.name, args = _ref31.arguments, repeatable = _ref31.repeatable, locations = _ref31.locations;
    return "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ");
  }),
  SchemaExtension: function SchemaExtension(_ref32) {
    var directives = _ref32.directives, operationTypes = _ref32.operationTypes;
    return join(["extend schema", join(directives, " "), block(operationTypes)], " ");
  },
  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
    var name = _ref33.name, directives = _ref33.directives;
    return join(["extend scalar", name, join(directives, " ")], " ");
  },
  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
    var name = _ref34.name, interfaces = _ref34.interfaces, directives = _ref34.directives, fields7 = _ref34.fields;
    return join(["extend type", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields7)], " ");
  },
  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
    var name = _ref35.name, interfaces = _ref35.interfaces, directives = _ref35.directives, fields7 = _ref35.fields;
    return join(["extend interface", name, wrap("implements ", join(interfaces, " & ")), join(directives, " "), block(fields7)], " ");
  },
  UnionTypeExtension: function UnionTypeExtension(_ref36) {
    var name = _ref36.name, directives = _ref36.directives, types = _ref36.types;
    return join(["extend union", name, join(directives, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
  },
  EnumTypeExtension: function EnumTypeExtension(_ref37) {
    var name = _ref37.name, directives = _ref37.directives, values = _ref37.values;
    return join(["extend enum", name, join(directives, " "), block(values)], " ");
  },
  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
    var name = _ref38.name, directives = _ref38.directives, fields7 = _ref38.fields;
    return join(["extend input", name, join(directives, " "), block(fields7)], " ");
  }
};
function addDescription(cb) {
  return function(node) {
    return join([node.description, cb(node)], "\n");
  };
}
function join(maybeArray) {
  var _maybeArray$filter$jo;
  var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function(x2) {
    return x2;
  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join(array, "\n")), "\n}");
}
function wrap(start, maybeString) {
  var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str) {
  return wrap("  ", str.replace(/\n/g, "\n  "));
}
function isMultiline(str) {
  return str.indexOf("\n") !== -1;
}
function hasMultilineItems(maybeArray) {
  return maybeArray != null && maybeArray.some(isMultiline);
}

// node_modules/graphql/utilities/valueFromASTUntyped.mjs
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case Kind.NULL:
      return null;
    case Kind.INT:
      return parseInt(valueNode.value, 10);
    case Kind.FLOAT:
      return parseFloat(valueNode.value);
    case Kind.STRING:
    case Kind.ENUM:
    case Kind.BOOLEAN:
      return valueNode.value;
    case Kind.LIST:
      return valueNode.values.map(function(node) {
        return valueFromASTUntyped(node, variables);
      });
    case Kind.OBJECT:
      return keyValMap(valueNode.fields, function(field) {
        return field.name.value;
      }, function(field) {
        return valueFromASTUntyped(field.value, variables);
      });
    case Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  }
  invariant(0, "Unexpected value node: " + inspect(valueNode));
}

// node_modules/graphql/type/definition.mjs
function _defineProperties3(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  return Constructor;
}
function isType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
}
function assertType(type) {
  if (!isType(type)) {
    throw new Error("Expected ".concat(inspect(type), " to be a GraphQL type."));
  }
  return type;
}
function isScalarType(type) {
  return instanceOf_default(type, GraphQLScalarType);
}
function isObjectType(type) {
  return instanceOf_default(type, GraphQLObjectType);
}
function isInterfaceType(type) {
  return instanceOf_default(type, GraphQLInterfaceType);
}
function isUnionType(type) {
  return instanceOf_default(type, GraphQLUnionType);
}
function isEnumType(type) {
  return instanceOf_default(type, GraphQLEnumType);
}
function isInputObjectType(type) {
  return instanceOf_default(type, GraphQLInputObjectType);
}
function isListType(type) {
  return instanceOf_default(type, GraphQLList);
}
function isNonNullType(type) {
  return instanceOf_default(type, GraphQLNonNull);
}
function isInputType(type) {
  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
}
function isOutputType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
}
function isLeafType(type) {
  return isScalarType(type) || isEnumType(type);
}
function isCompositeType(type) {
  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
}
function isAbstractType(type) {
  return isInterfaceType(type) || isUnionType(type);
}
function GraphQLList(ofType) {
  if (this instanceof GraphQLList) {
    this.ofType = assertType(ofType);
  } else {
    return new GraphQLList(ofType);
  }
}
GraphQLList.prototype.toString = function toString() {
  return "[" + String(this.ofType) + "]";
};
GraphQLList.prototype.toJSON = function toJSON() {
  return this.toString();
};
Object.defineProperty(GraphQLList.prototype, SYMBOL_TO_STRING_TAG, {
  get: function get2() {
    return "GraphQLList";
  }
});
defineInspect(GraphQLList);
function GraphQLNonNull(ofType) {
  if (this instanceof GraphQLNonNull) {
    this.ofType = assertNullableType(ofType);
  } else {
    return new GraphQLNonNull(ofType);
  }
}
GraphQLNonNull.prototype.toString = function toString2() {
  return String(this.ofType) + "!";
};
GraphQLNonNull.prototype.toJSON = function toJSON2() {
  return this.toString();
};
Object.defineProperty(GraphQLNonNull.prototype, SYMBOL_TO_STRING_TAG, {
  get: function get3() {
    return "GraphQLNonNull";
  }
});
defineInspect(GraphQLNonNull);
function isWrappingType(type) {
  return isListType(type) || isNonNullType(type);
}
function isNullableType(type) {
  return isType(type) && !isNonNullType(type);
}
function assertNullableType(type) {
  if (!isNullableType(type)) {
    throw new Error("Expected ".concat(inspect(type), " to be a GraphQL nullable type."));
  }
  return type;
}
function getNullableType(type) {
  if (type) {
    return isNonNullType(type) ? type.ofType : type;
  }
}
function getNamedType(type) {
  if (type) {
    var unwrappedType = type;
    while (isWrappingType(unwrappedType)) {
      unwrappedType = unwrappedType.ofType;
    }
    return unwrappedType;
  }
}
function resolveThunk(thunk) {
  return typeof thunk === "function" ? thunk() : thunk;
}
function undefineIfEmpty(arr) {
  return arr && arr.length > 0 ? arr : void 0;
}
var GraphQLScalarType = function() {
  function GraphQLScalarType3(config) {
    var _config$parseValue, _config$serialize, _config$parseLiteral;
    var parseValue2 = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;
    this.name = config.name;
    this.description = config.description;
    this.specifiedByUrl = config.specifiedByUrl;
    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;
    this.parseValue = parseValue2;
    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function(node, variables) {
      return parseValue2(valueFromASTUntyped(node, variables));
    };
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    typeof config.name === "string" || devAssert(0, "Must provide name.");
    config.specifiedByUrl == null || typeof config.specifiedByUrl === "string" || devAssert(0, "".concat(this.name, ' must provide "specifiedByUrl" as a string, ') + "but got: ".concat(inspect(config.specifiedByUrl), "."));
    config.serialize == null || typeof config.serialize === "function" || devAssert(0, "".concat(this.name, ' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.'));
    if (config.parseLiteral) {
      typeof config.parseValue === "function" && typeof config.parseLiteral === "function" || devAssert(0, "".concat(this.name, ' must provide both "parseValue" and "parseLiteral" functions.'));
    }
  }
  var _proto = GraphQLScalarType3.prototype;
  _proto.toConfig = function toConfig() {
    var _this$extensionASTNod;
    return {
      name: this.name,
      description: this.description,
      specifiedByUrl: this.specifiedByUrl,
      serialize: this.serialize,
      parseValue: this.parseValue,
      parseLiteral: this.parseLiteral,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []
    };
  };
  _proto.toString = function toString3() {
    return this.name;
  };
  _proto.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass3(GraphQLScalarType3, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLScalarType";
    }
  }]);
  return GraphQLScalarType3;
}();
defineInspect(GraphQLScalarType);
var GraphQLObjectType = function() {
  function GraphQLObjectType2(config) {
    this.name = config.name;
    this.description = config.description;
    this.isTypeOf = config.isTypeOf;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineFieldMap.bind(void 0, config);
    this._interfaces = defineInterfaces.bind(void 0, config);
    typeof config.name === "string" || devAssert(0, "Must provide name.");
    config.isTypeOf == null || typeof config.isTypeOf === "function" || devAssert(0, "".concat(this.name, ' must provide "isTypeOf" as a function, ') + "but got: ".concat(inspect(config.isTypeOf), "."));
  }
  var _proto2 = GraphQLObjectType2.prototype;
  _proto2.getFields = function getFields() {
    if (typeof this._fields === "function") {
      this._fields = this._fields();
    }
    return this._fields;
  };
  _proto2.getInterfaces = function getInterfaces() {
    if (typeof this._interfaces === "function") {
      this._interfaces = this._interfaces();
    }
    return this._interfaces;
  };
  _proto2.toConfig = function toConfig() {
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      isTypeOf: this.isTypeOf,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: this.extensionASTNodes || []
    };
  };
  _proto2.toString = function toString3() {
    return this.name;
  };
  _proto2.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass3(GraphQLObjectType2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLObjectType";
    }
  }]);
  return GraphQLObjectType2;
}();
defineInspect(GraphQLObjectType);
function defineInterfaces(config) {
  var _resolveThunk;
  var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];
  Array.isArray(interfaces) || devAssert(0, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
  return interfaces;
}
function defineFieldMap(config) {
  var fieldMap = resolveThunk(config.fields);
  isPlainObj(fieldMap) || devAssert(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return mapValue(fieldMap, function(fieldConfig, fieldName) {
    var _fieldConfig$args;
    isPlainObj(fieldConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
    !("isDeprecated" in fieldConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, ' should provide "deprecationReason" instead of "isDeprecated".'));
    fieldConfig.resolve == null || typeof fieldConfig.resolve === "function" || devAssert(0, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat(inspect(fieldConfig.resolve), "."));
    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
    isPlainObj(argsConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
    var args = objectEntries_default(argsConfig).map(function(_ref) {
      var argName = _ref[0], argConfig = _ref[1];
      return {
        name: argName,
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: argConfig.extensions && toObjMap(argConfig.extensions),
        astNode: argConfig.astNode
      };
    });
    return {
      name: fieldName,
      description: fieldConfig.description,
      type: fieldConfig.type,
      args,
      resolve: fieldConfig.resolve,
      subscribe: fieldConfig.subscribe,
      isDeprecated: fieldConfig.deprecationReason != null,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function isPlainObj(obj) {
  return isObjectLike(obj) && !Array.isArray(obj);
}
function fieldsToFieldsConfig(fields7) {
  return mapValue(fields7, function(field) {
    return {
      description: field.description,
      type: field.type,
      args: argsToArgsConfig(field.args),
      resolve: field.resolve,
      subscribe: field.subscribe,
      deprecationReason: field.deprecationReason,
      extensions: field.extensions,
      astNode: field.astNode
    };
  });
}
function argsToArgsConfig(args) {
  return keyValMap(args, function(arg) {
    return arg.name;
  }, function(arg) {
    return {
      description: arg.description,
      type: arg.type,
      defaultValue: arg.defaultValue,
      deprecationReason: arg.deprecationReason,
      extensions: arg.extensions,
      astNode: arg.astNode
    };
  });
}
function isRequiredArgument(arg) {
  return isNonNullType(arg.type) && arg.defaultValue === void 0;
}
var GraphQLInterfaceType = function() {
  function GraphQLInterfaceType2(config) {
    this.name = config.name;
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineFieldMap.bind(void 0, config);
    this._interfaces = defineInterfaces.bind(void 0, config);
    typeof config.name === "string" || devAssert(0, "Must provide name.");
    config.resolveType == null || typeof config.resolveType === "function" || devAssert(0, "".concat(this.name, ' must provide "resolveType" as a function, ') + "but got: ".concat(inspect(config.resolveType), "."));
  }
  var _proto3 = GraphQLInterfaceType2.prototype;
  _proto3.getFields = function getFields() {
    if (typeof this._fields === "function") {
      this._fields = this._fields();
    }
    return this._fields;
  };
  _proto3.getInterfaces = function getInterfaces() {
    if (typeof this._interfaces === "function") {
      this._interfaces = this._interfaces();
    }
    return this._interfaces;
  };
  _proto3.toConfig = function toConfig() {
    var _this$extensionASTNod2;
    return {
      name: this.name,
      description: this.description,
      interfaces: this.getInterfaces(),
      fields: fieldsToFieldsConfig(this.getFields()),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []
    };
  };
  _proto3.toString = function toString3() {
    return this.name;
  };
  _proto3.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass3(GraphQLInterfaceType2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLInterfaceType";
    }
  }]);
  return GraphQLInterfaceType2;
}();
defineInspect(GraphQLInterfaceType);
var GraphQLUnionType = function() {
  function GraphQLUnionType2(config) {
    this.name = config.name;
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._types = defineTypes.bind(void 0, config);
    typeof config.name === "string" || devAssert(0, "Must provide name.");
    config.resolveType == null || typeof config.resolveType === "function" || devAssert(0, "".concat(this.name, ' must provide "resolveType" as a function, ') + "but got: ".concat(inspect(config.resolveType), "."));
  }
  var _proto4 = GraphQLUnionType2.prototype;
  _proto4.getTypes = function getTypes() {
    if (typeof this._types === "function") {
      this._types = this._types();
    }
    return this._types;
  };
  _proto4.toConfig = function toConfig() {
    var _this$extensionASTNod3;
    return {
      name: this.name,
      description: this.description,
      types: this.getTypes(),
      resolveType: this.resolveType,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []
    };
  };
  _proto4.toString = function toString3() {
    return this.name;
  };
  _proto4.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass3(GraphQLUnionType2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLUnionType";
    }
  }]);
  return GraphQLUnionType2;
}();
defineInspect(GraphQLUnionType);
function defineTypes(config) {
  var types = resolveThunk(config.types);
  Array.isArray(types) || devAssert(0, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
  return types;
}
var GraphQLEnumType = function() {
  function GraphQLEnumType2(config) {
    this.name = config.name;
    this.description = config.description;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._values = defineEnumValues(this.name, config.values);
    this._valueLookup = new Map(this._values.map(function(enumValue) {
      return [enumValue.value, enumValue];
    }));
    this._nameLookup = keyMap(this._values, function(value) {
      return value.name;
    });
    typeof config.name === "string" || devAssert(0, "Must provide name.");
  }
  var _proto5 = GraphQLEnumType2.prototype;
  _proto5.getValues = function getValues() {
    return this._values;
  };
  _proto5.getValue = function getValue(name) {
    return this._nameLookup[name];
  };
  _proto5.serialize = function serialize2(outputValue) {
    var enumValue = this._valueLookup.get(outputValue);
    if (enumValue === void 0) {
      throw new GraphQLError('Enum "'.concat(this.name, '" cannot represent value: ').concat(inspect(outputValue)));
    }
    return enumValue.name;
  };
  _proto5.parseValue = function parseValue2(inputValue) {
    if (typeof inputValue !== "string") {
      var valueStr = inspect(inputValue);
      throw new GraphQLError('Enum "'.concat(this.name, '" cannot represent non-string value: ').concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
    }
    var enumValue = this.getValue(inputValue);
    if (enumValue == null) {
      throw new GraphQLError('Value "'.concat(inputValue, '" does not exist in "').concat(this.name, '" enum.') + didYouMeanEnumValue(this, inputValue));
    }
    return enumValue.value;
  };
  _proto5.parseLiteral = function parseLiteral6(valueNode, _variables) {
    if (valueNode.kind !== Kind.ENUM) {
      var valueStr = print(valueNode);
      throw new GraphQLError('Enum "'.concat(this.name, '" cannot represent non-enum value: ').concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), valueNode);
    }
    var enumValue = this.getValue(valueNode.value);
    if (enumValue == null) {
      var _valueStr = print(valueNode);
      throw new GraphQLError('Value "'.concat(_valueStr, '" does not exist in "').concat(this.name, '" enum.') + didYouMeanEnumValue(this, _valueStr), valueNode);
    }
    return enumValue.value;
  };
  _proto5.toConfig = function toConfig() {
    var _this$extensionASTNod4;
    var values = keyValMap(this.getValues(), function(value) {
      return value.name;
    }, function(value) {
      return {
        description: value.description,
        value: value.value,
        deprecationReason: value.deprecationReason,
        extensions: value.extensions,
        astNode: value.astNode
      };
    });
    return {
      name: this.name,
      description: this.description,
      values,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []
    };
  };
  _proto5.toString = function toString3() {
    return this.name;
  };
  _proto5.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass3(GraphQLEnumType2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLEnumType";
    }
  }]);
  return GraphQLEnumType2;
}();
defineInspect(GraphQLEnumType);
function didYouMeanEnumValue(enumType, unknownValueStr) {
  var allNames = enumType.getValues().map(function(value) {
    return value.name;
  });
  var suggestedValues = suggestionList(unknownValueStr, allNames);
  return didYouMean("the enum value", suggestedValues);
}
function defineEnumValues(typeName, valueMap) {
  isPlainObj(valueMap) || devAssert(0, "".concat(typeName, " values must be an object with value names as keys."));
  return objectEntries_default(valueMap).map(function(_ref2) {
    var valueName = _ref2[0], valueConfig = _ref2[1];
    isPlainObj(valueConfig) || devAssert(0, "".concat(typeName, ".").concat(valueName, ' must refer to an object with a "value" key ') + "representing an internal value but got: ".concat(inspect(valueConfig), "."));
    !("isDeprecated" in valueConfig) || devAssert(0, "".concat(typeName, ".").concat(valueName, ' should provide "deprecationReason" instead of "isDeprecated".'));
    return {
      name: valueName,
      description: valueConfig.description,
      value: valueConfig.value !== void 0 ? valueConfig.value : valueName,
      isDeprecated: valueConfig.deprecationReason != null,
      deprecationReason: valueConfig.deprecationReason,
      extensions: valueConfig.extensions && toObjMap(valueConfig.extensions),
      astNode: valueConfig.astNode
    };
  });
}
var GraphQLInputObjectType = function() {
  function GraphQLInputObjectType2(config) {
    this.name = config.name;
    this.description = config.description;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);
    this._fields = defineInputFieldMap.bind(void 0, config);
    typeof config.name === "string" || devAssert(0, "Must provide name.");
  }
  var _proto6 = GraphQLInputObjectType2.prototype;
  _proto6.getFields = function getFields() {
    if (typeof this._fields === "function") {
      this._fields = this._fields();
    }
    return this._fields;
  };
  _proto6.toConfig = function toConfig() {
    var _this$extensionASTNod5;
    var fields7 = mapValue(this.getFields(), function(field) {
      return {
        description: field.description,
        type: field.type,
        defaultValue: field.defaultValue,
        deprecationReason: field.deprecationReason,
        extensions: field.extensions,
        astNode: field.astNode
      };
    });
    return {
      name: this.name,
      description: this.description,
      fields: fields7,
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []
    };
  };
  _proto6.toString = function toString3() {
    return this.name;
  };
  _proto6.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass3(GraphQLInputObjectType2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLInputObjectType";
    }
  }]);
  return GraphQLInputObjectType2;
}();
defineInspect(GraphQLInputObjectType);
function defineInputFieldMap(config) {
  var fieldMap = resolveThunk(config.fields);
  isPlainObj(fieldMap) || devAssert(0, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return mapValue(fieldMap, function(fieldConfig, fieldName) {
    !("resolve" in fieldConfig) || devAssert(0, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
    return {
      name: fieldName,
      description: fieldConfig.description,
      type: fieldConfig.type,
      defaultValue: fieldConfig.defaultValue,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function isRequiredInputField(field) {
  return isNonNullType(field.type) && field.defaultValue === void 0;
}

// node_modules/graphql/utilities/typeComparators.mjs
function isTypeSubTypeOf(schema2, maybeSubType, superType) {
  if (maybeSubType === superType) {
    return true;
  }
  if (isNonNullType(superType)) {
    if (isNonNullType(maybeSubType)) {
      return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if (isNonNullType(maybeSubType)) {
    return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType);
  }
  if (isListType(superType)) {
    if (isListType(maybeSubType)) {
      return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if (isListType(maybeSubType)) {
    return false;
  }
  return isAbstractType(superType) && (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) && schema2.isSubType(superType, maybeSubType);
}
function doTypesOverlap(schema2, typeA, typeB) {
  if (typeA === typeB) {
    return true;
  }
  if (isAbstractType(typeA)) {
    if (isAbstractType(typeB)) {
      return schema2.getPossibleTypes(typeA).some(function(type) {
        return schema2.isSubType(typeB, type);
      });
    }
    return schema2.isSubType(typeA, typeB);
  }
  if (isAbstractType(typeB)) {
    return schema2.isSubType(typeB, typeA);
  }
  return false;
}

// node_modules/graphql/polyfills/arrayFrom.mjs
var arrayFrom = Array.from || function(obj, mapFn, thisArg) {
  if (obj == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }
  var iteratorMethod = obj[SYMBOL_ITERATOR];
  if (typeof iteratorMethod === "function") {
    var iterator = iteratorMethod.call(obj);
    var result = [];
    var step;
    for (var i2 = 0; !(step = iterator.next()).done; ++i2) {
      result.push(mapFn.call(thisArg, step.value, i2));
      if (i2 > 9999999) {
        throw new TypeError("Near-infinite iteration.");
      }
    }
    return result;
  }
  var length = obj.length;
  if (typeof length === "number" && length >= 0 && length % 1 === 0) {
    var _result = [];
    for (var _i = 0; _i < length; ++_i) {
      if (Object.prototype.hasOwnProperty.call(obj, _i)) {
        _result.push(mapFn.call(thisArg, obj[_i], _i));
      }
    }
    return _result;
  }
  return [];
};
var arrayFrom_default = arrayFrom;

// node_modules/graphql/polyfills/isFinite.mjs
var isFinitePolyfill = Number.isFinite || function(value) {
  return typeof value === "number" && isFinite(value);
};
var isFinite_default = isFinitePolyfill;

// node_modules/graphql/jsutils/safeArrayFrom.mjs
function _typeof5(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof5 = function _typeof6(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof5 = function _typeof6(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof5(obj);
}
function safeArrayFrom(collection) {
  var mapFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function(item) {
    return item;
  };
  if (collection == null || _typeof5(collection) !== "object") {
    return null;
  }
  if (Array.isArray(collection)) {
    return collection.map(mapFn);
  }
  var iteratorMethod = collection[SYMBOL_ITERATOR];
  if (typeof iteratorMethod === "function") {
    var iterator = iteratorMethod.call(collection);
    var result = [];
    var step;
    for (var i2 = 0; !(step = iterator.next()).done; ++i2) {
      result.push(mapFn(step.value, i2));
    }
    return result;
  }
  var length = collection.length;
  if (typeof length === "number" && length >= 0 && length % 1 === 0) {
    var _result = [];
    for (var _i = 0; _i < length; ++_i) {
      if (!Object.prototype.hasOwnProperty.call(collection, _i)) {
        return null;
      }
      _result.push(mapFn(collection[String(_i)], _i));
    }
    return _result;
  }
  return null;
}

// node_modules/graphql/polyfills/isInteger.mjs
var isInteger2 = Number.isInteger || function(value) {
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
var isInteger_default = isInteger2;

// node_modules/graphql/type/scalars.mjs
var MAX_INT = 2147483647;
var MIN_INT = -2147483648;
function serializeInt(outputValue) {
  var coercedValue = serializeObject(outputValue);
  if (typeof coercedValue === "boolean") {
    return coercedValue ? 1 : 0;
  }
  var num = coercedValue;
  if (typeof coercedValue === "string" && coercedValue !== "") {
    num = Number(coercedValue);
  }
  if (!isInteger_default(num)) {
    throw new GraphQLError("Int cannot represent non-integer value: ".concat(inspect(coercedValue)));
  }
  if (num > MAX_INT || num < MIN_INT) {
    throw new GraphQLError("Int cannot represent non 32-bit signed integer value: " + inspect(coercedValue));
  }
  return num;
}
function coerceInt(inputValue) {
  if (!isInteger_default(inputValue)) {
    throw new GraphQLError("Int cannot represent non-integer value: ".concat(inspect(inputValue)));
  }
  if (inputValue > MAX_INT || inputValue < MIN_INT) {
    throw new GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
  }
  return inputValue;
}
var GraphQLInt = new GraphQLScalarType({
  name: "Int",
  description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
  serialize: serializeInt,
  parseValue: coerceInt,
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== Kind.INT) {
      throw new GraphQLError("Int cannot represent non-integer value: ".concat(print(valueNode)), valueNode);
    }
    var num = parseInt(valueNode.value, 10);
    if (num > MAX_INT || num < MIN_INT) {
      throw new GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), valueNode);
    }
    return num;
  }
});
function serializeFloat(outputValue) {
  var coercedValue = serializeObject(outputValue);
  if (typeof coercedValue === "boolean") {
    return coercedValue ? 1 : 0;
  }
  var num = coercedValue;
  if (typeof coercedValue === "string" && coercedValue !== "") {
    num = Number(coercedValue);
  }
  if (!isFinite_default(num)) {
    throw new GraphQLError("Float cannot represent non numeric value: ".concat(inspect(coercedValue)));
  }
  return num;
}
function coerceFloat(inputValue) {
  if (!isFinite_default(inputValue)) {
    throw new GraphQLError("Float cannot represent non numeric value: ".concat(inspect(inputValue)));
  }
  return inputValue;
}
var GraphQLFloat = new GraphQLScalarType({
  name: "Float",
  description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
  serialize: serializeFloat,
  parseValue: coerceFloat,
  parseLiteral: function parseLiteral2(valueNode) {
    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {
      throw new GraphQLError("Float cannot represent non numeric value: ".concat(print(valueNode)), valueNode);
    }
    return parseFloat(valueNode.value);
  }
});
function serializeObject(outputValue) {
  if (isObjectLike(outputValue)) {
    if (typeof outputValue.valueOf === "function") {
      var valueOfResult = outputValue.valueOf();
      if (!isObjectLike(valueOfResult)) {
        return valueOfResult;
      }
    }
    if (typeof outputValue.toJSON === "function") {
      return outputValue.toJSON();
    }
  }
  return outputValue;
}
function serializeString(outputValue) {
  var coercedValue = serializeObject(outputValue);
  if (typeof coercedValue === "string") {
    return coercedValue;
  }
  if (typeof coercedValue === "boolean") {
    return coercedValue ? "true" : "false";
  }
  if (isFinite_default(coercedValue)) {
    return coercedValue.toString();
  }
  throw new GraphQLError("String cannot represent value: ".concat(inspect(outputValue)));
}
function coerceString(inputValue) {
  if (typeof inputValue !== "string") {
    throw new GraphQLError("String cannot represent a non string value: ".concat(inspect(inputValue)));
  }
  return inputValue;
}
var GraphQLString = new GraphQLScalarType({
  name: "String",
  description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
  serialize: serializeString,
  parseValue: coerceString,
  parseLiteral: function parseLiteral3(valueNode) {
    if (valueNode.kind !== Kind.STRING) {
      throw new GraphQLError("String cannot represent a non string value: ".concat(print(valueNode)), valueNode);
    }
    return valueNode.value;
  }
});
function serializeBoolean(outputValue) {
  var coercedValue = serializeObject(outputValue);
  if (typeof coercedValue === "boolean") {
    return coercedValue;
  }
  if (isFinite_default(coercedValue)) {
    return coercedValue !== 0;
  }
  throw new GraphQLError("Boolean cannot represent a non boolean value: ".concat(inspect(coercedValue)));
}
function coerceBoolean(inputValue) {
  if (typeof inputValue !== "boolean") {
    throw new GraphQLError("Boolean cannot represent a non boolean value: ".concat(inspect(inputValue)));
  }
  return inputValue;
}
var GraphQLBoolean = new GraphQLScalarType({
  name: "Boolean",
  description: "The `Boolean` scalar type represents `true` or `false`.",
  serialize: serializeBoolean,
  parseValue: coerceBoolean,
  parseLiteral: function parseLiteral4(valueNode) {
    if (valueNode.kind !== Kind.BOOLEAN) {
      throw new GraphQLError("Boolean cannot represent a non boolean value: ".concat(print(valueNode)), valueNode);
    }
    return valueNode.value;
  }
});
function serializeID(outputValue) {
  var coercedValue = serializeObject(outputValue);
  if (typeof coercedValue === "string") {
    return coercedValue;
  }
  if (isInteger_default(coercedValue)) {
    return String(coercedValue);
  }
  throw new GraphQLError("ID cannot represent value: ".concat(inspect(outputValue)));
}
function coerceID(inputValue) {
  if (typeof inputValue === "string") {
    return inputValue;
  }
  if (isInteger_default(inputValue)) {
    return inputValue.toString();
  }
  throw new GraphQLError("ID cannot represent value: ".concat(inspect(inputValue)));
}
var GraphQLID = new GraphQLScalarType({
  name: "ID",
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize: serializeID,
  parseValue: coerceID,
  parseLiteral: function parseLiteral5(valueNode) {
    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {
      throw new GraphQLError("ID cannot represent a non-string and non-integer value: " + print(valueNode), valueNode);
    }
    return valueNode.value;
  }
});
var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);

// node_modules/graphql/utilities/astFromValue.mjs
function astFromValue(value, type) {
  if (isNonNullType(type)) {
    var astValue = astFromValue(value, type.ofType);
    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {
      return null;
    }
    return astValue;
  }
  if (value === null) {
    return {
      kind: Kind.NULL
    };
  }
  if (value === void 0) {
    return null;
  }
  if (isListType(type)) {
    var itemType = type.ofType;
    var items = safeArrayFrom(value);
    if (items != null) {
      var valuesNodes = [];
      for (var _i2 = 0; _i2 < items.length; _i2++) {
        var item = items[_i2];
        var itemNode = astFromValue(item, itemType);
        if (itemNode != null) {
          valuesNodes.push(itemNode);
        }
      }
      return {
        kind: Kind.LIST,
        values: valuesNodes
      };
    }
    return astFromValue(value, itemType);
  }
  if (isInputObjectType(type)) {
    if (!isObjectLike(value)) {
      return null;
    }
    var fieldNodes = [];
    for (var _i4 = 0, _objectValues2 = objectValues_default(type.getFields()); _i4 < _objectValues2.length; _i4++) {
      var field = _objectValues2[_i4];
      var fieldValue = astFromValue(value[field.name], field.type);
      if (fieldValue) {
        fieldNodes.push({
          kind: Kind.OBJECT_FIELD,
          name: {
            kind: Kind.NAME,
            value: field.name
          },
          value: fieldValue
        });
      }
    }
    return {
      kind: Kind.OBJECT,
      fields: fieldNodes
    };
  }
  if (isLeafType(type)) {
    var serialized = type.serialize(value);
    if (serialized == null) {
      return null;
    }
    if (typeof serialized === "boolean") {
      return {
        kind: Kind.BOOLEAN,
        value: serialized
      };
    }
    if (typeof serialized === "number" && isFinite_default(serialized)) {
      var stringNum = String(serialized);
      return integerStringRegExp.test(stringNum) ? {
        kind: Kind.INT,
        value: stringNum
      } : {
        kind: Kind.FLOAT,
        value: stringNum
      };
    }
    if (typeof serialized === "string") {
      if (isEnumType(type)) {
        return {
          kind: Kind.ENUM,
          value: serialized
        };
      }
      if (type === GraphQLID && integerStringRegExp.test(serialized)) {
        return {
          kind: Kind.INT,
          value: serialized
        };
      }
      return {
        kind: Kind.STRING,
        value: serialized
      };
    }
    throw new TypeError("Cannot convert value to AST: ".concat(inspect(serialized), "."));
  }
  invariant(0, "Unexpected input type: " + inspect(type));
}
var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;

// node_modules/graphql/type/introspection.mjs
var __Schema = new GraphQLObjectType({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: function fields() {
    return {
      description: {
        type: GraphQLString,
        resolve: function resolve4(schema2) {
          return schema2.description;
        }
      },
      types: {
        description: "A list of all types supported by this server.",
        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),
        resolve: function resolve4(schema2) {
          return objectValues_default(schema2.getTypeMap());
        }
      },
      queryType: {
        description: "The type that query operations will be rooted at.",
        type: new GraphQLNonNull(__Type),
        resolve: function resolve4(schema2) {
          return schema2.getQueryType();
        }
      },
      mutationType: {
        description: "If this server supports mutation, the type that mutation operations will be rooted at.",
        type: __Type,
        resolve: function resolve4(schema2) {
          return schema2.getMutationType();
        }
      },
      subscriptionType: {
        description: "If this server support subscription, the type that subscription operations will be rooted at.",
        type: __Type,
        resolve: function resolve4(schema2) {
          return schema2.getSubscriptionType();
        }
      },
      directives: {
        description: "A list of all directives supported by this server.",
        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))),
        resolve: function resolve4(schema2) {
          return schema2.getDirectives();
        }
      }
    };
  }
});
var __Directive = new GraphQLObjectType({
  name: "__Directive",
  description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
  fields: function fields2() {
    return {
      name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve: function resolve4(directive) {
          return directive.name;
        }
      },
      description: {
        type: GraphQLString,
        resolve: function resolve4(directive) {
          return directive.description;
        }
      },
      isRepeatable: {
        type: new GraphQLNonNull(GraphQLBoolean),
        resolve: function resolve4(directive) {
          return directive.isRepeatable;
        }
      },
      locations: {
        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__DirectiveLocation))),
        resolve: function resolve4(directive) {
          return directive.locations;
        }
      },
      args: {
        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),
        args: {
          includeDeprecated: {
            type: GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve4(field, _ref) {
          var includeDeprecated = _ref.includeDeprecated;
          return includeDeprecated ? field.args : field.args.filter(function(arg) {
            return arg.deprecationReason == null;
          });
        }
      }
    };
  }
});
var __DirectiveLocation = new GraphQLEnumType({
  name: "__DirectiveLocation",
  description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
  values: {
    QUERY: {
      value: DirectiveLocation.QUERY,
      description: "Location adjacent to a query operation."
    },
    MUTATION: {
      value: DirectiveLocation.MUTATION,
      description: "Location adjacent to a mutation operation."
    },
    SUBSCRIPTION: {
      value: DirectiveLocation.SUBSCRIPTION,
      description: "Location adjacent to a subscription operation."
    },
    FIELD: {
      value: DirectiveLocation.FIELD,
      description: "Location adjacent to a field."
    },
    FRAGMENT_DEFINITION: {
      value: DirectiveLocation.FRAGMENT_DEFINITION,
      description: "Location adjacent to a fragment definition."
    },
    FRAGMENT_SPREAD: {
      value: DirectiveLocation.FRAGMENT_SPREAD,
      description: "Location adjacent to a fragment spread."
    },
    INLINE_FRAGMENT: {
      value: DirectiveLocation.INLINE_FRAGMENT,
      description: "Location adjacent to an inline fragment."
    },
    VARIABLE_DEFINITION: {
      value: DirectiveLocation.VARIABLE_DEFINITION,
      description: "Location adjacent to a variable definition."
    },
    SCHEMA: {
      value: DirectiveLocation.SCHEMA,
      description: "Location adjacent to a schema definition."
    },
    SCALAR: {
      value: DirectiveLocation.SCALAR,
      description: "Location adjacent to a scalar definition."
    },
    OBJECT: {
      value: DirectiveLocation.OBJECT,
      description: "Location adjacent to an object type definition."
    },
    FIELD_DEFINITION: {
      value: DirectiveLocation.FIELD_DEFINITION,
      description: "Location adjacent to a field definition."
    },
    ARGUMENT_DEFINITION: {
      value: DirectiveLocation.ARGUMENT_DEFINITION,
      description: "Location adjacent to an argument definition."
    },
    INTERFACE: {
      value: DirectiveLocation.INTERFACE,
      description: "Location adjacent to an interface definition."
    },
    UNION: {
      value: DirectiveLocation.UNION,
      description: "Location adjacent to a union definition."
    },
    ENUM: {
      value: DirectiveLocation.ENUM,
      description: "Location adjacent to an enum definition."
    },
    ENUM_VALUE: {
      value: DirectiveLocation.ENUM_VALUE,
      description: "Location adjacent to an enum value definition."
    },
    INPUT_OBJECT: {
      value: DirectiveLocation.INPUT_OBJECT,
      description: "Location adjacent to an input object type definition."
    },
    INPUT_FIELD_DEFINITION: {
      value: DirectiveLocation.INPUT_FIELD_DEFINITION,
      description: "Location adjacent to an input object field definition."
    }
  }
});
var __Type = new GraphQLObjectType({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: function fields3() {
    return {
      kind: {
        type: new GraphQLNonNull(__TypeKind),
        resolve: function resolve4(type) {
          if (isScalarType(type)) {
            return TypeKind.SCALAR;
          }
          if (isObjectType(type)) {
            return TypeKind.OBJECT;
          }
          if (isInterfaceType(type)) {
            return TypeKind.INTERFACE;
          }
          if (isUnionType(type)) {
            return TypeKind.UNION;
          }
          if (isEnumType(type)) {
            return TypeKind.ENUM;
          }
          if (isInputObjectType(type)) {
            return TypeKind.INPUT_OBJECT;
          }
          if (isListType(type)) {
            return TypeKind.LIST;
          }
          if (isNonNullType(type)) {
            return TypeKind.NON_NULL;
          }
          invariant(0, 'Unexpected type: "'.concat(inspect(type), '".'));
        }
      },
      name: {
        type: GraphQLString,
        resolve: function resolve4(type) {
          return type.name !== void 0 ? type.name : void 0;
        }
      },
      description: {
        type: GraphQLString,
        resolve: function resolve4(type) {
          return type.description !== void 0 ? type.description : void 0;
        }
      },
      specifiedByUrl: {
        type: GraphQLString,
        resolve: function resolve4(obj) {
          return obj.specifiedByUrl !== void 0 ? obj.specifiedByUrl : void 0;
        }
      },
      fields: {
        type: new GraphQLList(new GraphQLNonNull(__Field)),
        args: {
          includeDeprecated: {
            type: GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve4(type, _ref2) {
          var includeDeprecated = _ref2.includeDeprecated;
          if (isObjectType(type) || isInterfaceType(type)) {
            var fields7 = objectValues_default(type.getFields());
            return includeDeprecated ? fields7 : fields7.filter(function(field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      interfaces: {
        type: new GraphQLList(new GraphQLNonNull(__Type)),
        resolve: function resolve4(type) {
          if (isObjectType(type) || isInterfaceType(type)) {
            return type.getInterfaces();
          }
        }
      },
      possibleTypes: {
        type: new GraphQLList(new GraphQLNonNull(__Type)),
        resolve: function resolve4(type, _args, _context, _ref3) {
          var schema2 = _ref3.schema;
          if (isAbstractType(type)) {
            return schema2.getPossibleTypes(type);
          }
        }
      },
      enumValues: {
        type: new GraphQLList(new GraphQLNonNull(__EnumValue)),
        args: {
          includeDeprecated: {
            type: GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve4(type, _ref4) {
          var includeDeprecated = _ref4.includeDeprecated;
          if (isEnumType(type)) {
            var values = type.getValues();
            return includeDeprecated ? values : values.filter(function(field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      inputFields: {
        type: new GraphQLList(new GraphQLNonNull(__InputValue)),
        args: {
          includeDeprecated: {
            type: GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve4(type, _ref5) {
          var includeDeprecated = _ref5.includeDeprecated;
          if (isInputObjectType(type)) {
            var values = objectValues_default(type.getFields());
            return includeDeprecated ? values : values.filter(function(field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      ofType: {
        type: __Type,
        resolve: function resolve4(type) {
          return type.ofType !== void 0 ? type.ofType : void 0;
        }
      }
    };
  }
});
var __Field = new GraphQLObjectType({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: function fields4() {
    return {
      name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve: function resolve4(field) {
          return field.name;
        }
      },
      description: {
        type: GraphQLString,
        resolve: function resolve4(field) {
          return field.description;
        }
      },
      args: {
        type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),
        args: {
          includeDeprecated: {
            type: GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve4(field, _ref6) {
          var includeDeprecated = _ref6.includeDeprecated;
          return includeDeprecated ? field.args : field.args.filter(function(arg) {
            return arg.deprecationReason == null;
          });
        }
      },
      type: {
        type: new GraphQLNonNull(__Type),
        resolve: function resolve4(field) {
          return field.type;
        }
      },
      isDeprecated: {
        type: new GraphQLNonNull(GraphQLBoolean),
        resolve: function resolve4(field) {
          return field.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: GraphQLString,
        resolve: function resolve4(field) {
          return field.deprecationReason;
        }
      }
    };
  }
});
var __InputValue = new GraphQLObjectType({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: function fields5() {
    return {
      name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve: function resolve4(inputValue) {
          return inputValue.name;
        }
      },
      description: {
        type: GraphQLString,
        resolve: function resolve4(inputValue) {
          return inputValue.description;
        }
      },
      type: {
        type: new GraphQLNonNull(__Type),
        resolve: function resolve4(inputValue) {
          return inputValue.type;
        }
      },
      defaultValue: {
        type: GraphQLString,
        description: "A GraphQL-formatted string representing the default value for this input value.",
        resolve: function resolve4(inputValue) {
          var type = inputValue.type, defaultValue = inputValue.defaultValue;
          var valueAST = astFromValue(defaultValue, type);
          return valueAST ? print(valueAST) : null;
        }
      },
      isDeprecated: {
        type: new GraphQLNonNull(GraphQLBoolean),
        resolve: function resolve4(field) {
          return field.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: GraphQLString,
        resolve: function resolve4(obj) {
          return obj.deprecationReason;
        }
      }
    };
  }
});
var __EnumValue = new GraphQLObjectType({
  name: "__EnumValue",
  description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
  fields: function fields6() {
    return {
      name: {
        type: new GraphQLNonNull(GraphQLString),
        resolve: function resolve4(enumValue) {
          return enumValue.name;
        }
      },
      description: {
        type: GraphQLString,
        resolve: function resolve4(enumValue) {
          return enumValue.description;
        }
      },
      isDeprecated: {
        type: new GraphQLNonNull(GraphQLBoolean),
        resolve: function resolve4(enumValue) {
          return enumValue.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: GraphQLString,
        resolve: function resolve4(enumValue) {
          return enumValue.deprecationReason;
        }
      }
    };
  }
});
var TypeKind = Object.freeze({
  SCALAR: "SCALAR",
  OBJECT: "OBJECT",
  INTERFACE: "INTERFACE",
  UNION: "UNION",
  ENUM: "ENUM",
  INPUT_OBJECT: "INPUT_OBJECT",
  LIST: "LIST",
  NON_NULL: "NON_NULL"
});
var __TypeKind = new GraphQLEnumType({
  name: "__TypeKind",
  description: "An enum describing what kind of type a given `__Type` is.",
  values: {
    SCALAR: {
      value: TypeKind.SCALAR,
      description: "Indicates this type is a scalar."
    },
    OBJECT: {
      value: TypeKind.OBJECT,
      description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
    },
    INTERFACE: {
      value: TypeKind.INTERFACE,
      description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
    },
    UNION: {
      value: TypeKind.UNION,
      description: "Indicates this type is a union. `possibleTypes` is a valid field."
    },
    ENUM: {
      value: TypeKind.ENUM,
      description: "Indicates this type is an enum. `enumValues` is a valid field."
    },
    INPUT_OBJECT: {
      value: TypeKind.INPUT_OBJECT,
      description: "Indicates this type is an input object. `inputFields` is a valid field."
    },
    LIST: {
      value: TypeKind.LIST,
      description: "Indicates this type is a list. `ofType` is a valid field."
    },
    NON_NULL: {
      value: TypeKind.NON_NULL,
      description: "Indicates this type is a non-null. `ofType` is a valid field."
    }
  }
});
var SchemaMetaFieldDef = {
  name: "__schema",
  type: new GraphQLNonNull(__Schema),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: function resolve(_source, _args, _context, _ref7) {
    var schema2 = _ref7.schema;
    return schema2;
  },
  isDeprecated: false,
  deprecationReason: void 0,
  extensions: void 0,
  astNode: void 0
};
var TypeMetaFieldDef = {
  name: "__type",
  type: __Type,
  description: "Request the type information of a single type.",
  args: [{
    name: "name",
    description: void 0,
    type: new GraphQLNonNull(GraphQLString),
    defaultValue: void 0,
    deprecationReason: void 0,
    extensions: void 0,
    astNode: void 0
  }],
  resolve: function resolve2(_source, _ref8, _context, _ref9) {
    var name = _ref8.name;
    var schema2 = _ref9.schema;
    return schema2.getType(name);
  },
  isDeprecated: false,
  deprecationReason: void 0,
  extensions: void 0,
  astNode: void 0
};
var TypeNameMetaFieldDef = {
  name: "__typename",
  type: new GraphQLNonNull(GraphQLString),
  description: "The name of the current Object type at runtime.",
  args: [],
  resolve: function resolve3(_source, _args, _context, _ref10) {
    var parentType = _ref10.parentType;
    return parentType.name;
  },
  isDeprecated: false,
  deprecationReason: void 0,
  extensions: void 0,
  astNode: void 0
};
var introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);

// node_modules/graphql/type/directives.mjs
function _defineProperties4(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  return Constructor;
}
function isDirective(directive) {
  return instanceOf_default(directive, GraphQLDirective);
}
var GraphQLDirective = function() {
  function GraphQLDirective2(config) {
    var _config$isRepeatable, _config$args;
    this.name = config.name;
    this.description = config.description;
    this.locations = config.locations;
    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    config.name || devAssert(0, "Directive must be named.");
    Array.isArray(config.locations) || devAssert(0, "@".concat(config.name, " locations must be an Array."));
    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
    isObjectLike(args) && !Array.isArray(args) || devAssert(0, "@".concat(config.name, " args must be an object with argument names as keys."));
    this.args = objectEntries_default(args).map(function(_ref) {
      var argName = _ref[0], argConfig = _ref[1];
      return {
        name: argName,
        description: argConfig.description,
        type: argConfig.type,
        defaultValue: argConfig.defaultValue,
        deprecationReason: argConfig.deprecationReason,
        extensions: argConfig.extensions && toObjMap(argConfig.extensions),
        astNode: argConfig.astNode
      };
    });
  }
  var _proto = GraphQLDirective2.prototype;
  _proto.toConfig = function toConfig() {
    return {
      name: this.name,
      description: this.description,
      locations: this.locations,
      args: argsToArgsConfig(this.args),
      isRepeatable: this.isRepeatable,
      extensions: this.extensions,
      astNode: this.astNode
    };
  };
  _proto.toString = function toString3() {
    return "@" + this.name;
  };
  _proto.toJSON = function toJSON3() {
    return this.toString();
  };
  _createClass4(GraphQLDirective2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLDirective";
    }
  }]);
  return GraphQLDirective2;
}();
defineInspect(GraphQLDirective);
var GraphQLIncludeDirective = new GraphQLDirective({
  name: "include",
  description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: new GraphQLNonNull(GraphQLBoolean),
      description: "Included when true."
    }
  }
});
var GraphQLSkipDirective = new GraphQLDirective({
  name: "skip",
  description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: new GraphQLNonNull(GraphQLBoolean),
      description: "Skipped when true."
    }
  }
});
var DEFAULT_DEPRECATION_REASON = "No longer supported";
var GraphQLDeprecatedDirective = new GraphQLDirective({
  name: "deprecated",
  description: "Marks an element of a GraphQL schema as no longer supported.",
  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],
  args: {
    reason: {
      type: GraphQLString,
      description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
      defaultValue: DEFAULT_DEPRECATION_REASON
    }
  }
});
var GraphQLSpecifiedByDirective = new GraphQLDirective({
  name: "specifiedBy",
  description: "Exposes a URL that specifies the behaviour of this scalar.",
  locations: [DirectiveLocation.SCALAR],
  args: {
    url: {
      type: new GraphQLNonNull(GraphQLString),
      description: "The URL that specifies the behaviour of this scalar."
    }
  }
});
var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);

// node_modules/graphql/type/schema.mjs
function _defineProperties5(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties5(Constructor, staticProps);
  return Constructor;
}
var GraphQLSchema = function() {
  function GraphQLSchema2(config) {
    var _config$directives;
    this.__validationErrors = config.assumeValid === true ? [] : void 0;
    isObjectLike(config) || devAssert(0, "Must provide configuration object.");
    !config.types || Array.isArray(config.types) || devAssert(0, '"types" must be Array if provided but got: '.concat(inspect(config.types), "."));
    !config.directives || Array.isArray(config.directives) || devAssert(0, '"directives" must be Array if provided but got: ' + "".concat(inspect(config.directives), "."));
    this.description = config.description;
    this.extensions = config.extensions && toObjMap(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = config.extensionASTNodes;
    this._queryType = config.query;
    this._mutationType = config.mutation;
    this._subscriptionType = config.subscription;
    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives;
    var allReferencedTypes = new Set(config.types);
    if (config.types != null) {
      for (var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++) {
        var type = _config$types2[_i2];
        allReferencedTypes.delete(type);
        collectReferencedTypes(type, allReferencedTypes);
      }
    }
    if (this._queryType != null) {
      collectReferencedTypes(this._queryType, allReferencedTypes);
    }
    if (this._mutationType != null) {
      collectReferencedTypes(this._mutationType, allReferencedTypes);
    }
    if (this._subscriptionType != null) {
      collectReferencedTypes(this._subscriptionType, allReferencedTypes);
    }
    for (var _i4 = 0, _this$_directives2 = this._directives; _i4 < _this$_directives2.length; _i4++) {
      var directive = _this$_directives2[_i4];
      if (isDirective(directive)) {
        for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {
          var arg = _directive$args2[_i6];
          collectReferencedTypes(arg.type, allReferencedTypes);
        }
      }
    }
    collectReferencedTypes(__Schema, allReferencedTypes);
    this._typeMap = /* @__PURE__ */ Object.create(null);
    this._subTypeMap = /* @__PURE__ */ Object.create(null);
    this._implementationsMap = /* @__PURE__ */ Object.create(null);
    for (var _i8 = 0, _arrayFrom2 = arrayFrom_default(allReferencedTypes); _i8 < _arrayFrom2.length; _i8++) {
      var namedType = _arrayFrom2[_i8];
      if (namedType == null) {
        continue;
      }
      var typeName = namedType.name;
      typeName || devAssert(0, "One of the provided types for building the Schema is missing a name.");
      if (this._typeMap[typeName] !== void 0) {
        throw new Error('Schema must contain uniquely named types but contains multiple types named "'.concat(typeName, '".'));
      }
      this._typeMap[typeName] = namedType;
      if (isInterfaceType(namedType)) {
        for (var _i10 = 0, _namedType$getInterfa2 = namedType.getInterfaces(); _i10 < _namedType$getInterfa2.length; _i10++) {
          var iface = _namedType$getInterfa2[_i10];
          if (isInterfaceType(iface)) {
            var implementations = this._implementationsMap[iface.name];
            if (implementations === void 0) {
              implementations = this._implementationsMap[iface.name] = {
                objects: [],
                interfaces: []
              };
            }
            implementations.interfaces.push(namedType);
          }
        }
      } else if (isObjectType(namedType)) {
        for (var _i12 = 0, _namedType$getInterfa4 = namedType.getInterfaces(); _i12 < _namedType$getInterfa4.length; _i12++) {
          var _iface = _namedType$getInterfa4[_i12];
          if (isInterfaceType(_iface)) {
            var _implementations = this._implementationsMap[_iface.name];
            if (_implementations === void 0) {
              _implementations = this._implementationsMap[_iface.name] = {
                objects: [],
                interfaces: []
              };
            }
            _implementations.objects.push(namedType);
          }
        }
      }
    }
  }
  var _proto = GraphQLSchema2.prototype;
  _proto.getQueryType = function getQueryType() {
    return this._queryType;
  };
  _proto.getMutationType = function getMutationType() {
    return this._mutationType;
  };
  _proto.getSubscriptionType = function getSubscriptionType() {
    return this._subscriptionType;
  };
  _proto.getTypeMap = function getTypeMap() {
    return this._typeMap;
  };
  _proto.getType = function getType(name) {
    return this.getTypeMap()[name];
  };
  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {
    return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
  };
  _proto.getImplementations = function getImplementations(interfaceType) {
    var implementations = this._implementationsMap[interfaceType.name];
    return implementations !== null && implementations !== void 0 ? implementations : {
      objects: [],
      interfaces: []
    };
  };
  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {
    return this.isSubType(abstractType, possibleType);
  };
  _proto.isSubType = function isSubType(abstractType, maybeSubType) {
    var map = this._subTypeMap[abstractType.name];
    if (map === void 0) {
      map = /* @__PURE__ */ Object.create(null);
      if (isUnionType(abstractType)) {
        for (var _i14 = 0, _abstractType$getType2 = abstractType.getTypes(); _i14 < _abstractType$getType2.length; _i14++) {
          var type = _abstractType$getType2[_i14];
          map[type.name] = true;
        }
      } else {
        var implementations = this.getImplementations(abstractType);
        for (var _i16 = 0, _implementations$obje2 = implementations.objects; _i16 < _implementations$obje2.length; _i16++) {
          var _type = _implementations$obje2[_i16];
          map[_type.name] = true;
        }
        for (var _i18 = 0, _implementations$inte2 = implementations.interfaces; _i18 < _implementations$inte2.length; _i18++) {
          var _type2 = _implementations$inte2[_i18];
          map[_type2.name] = true;
        }
      }
      this._subTypeMap[abstractType.name] = map;
    }
    return map[maybeSubType.name] !== void 0;
  };
  _proto.getDirectives = function getDirectives() {
    return this._directives;
  };
  _proto.getDirective = function getDirective(name) {
    return find_default(this.getDirectives(), function(directive) {
      return directive.name === name;
    });
  };
  _proto.toConfig = function toConfig() {
    var _this$extensionASTNod;
    return {
      description: this.description,
      query: this.getQueryType(),
      mutation: this.getMutationType(),
      subscription: this.getSubscriptionType(),
      types: objectValues_default(this.getTypeMap()),
      directives: this.getDirectives().slice(),
      extensions: this.extensions,
      astNode: this.astNode,
      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : [],
      assumeValid: this.__validationErrors !== void 0
    };
  };
  _createClass5(GraphQLSchema2, [{
    key: SYMBOL_TO_STRING_TAG,
    get: function get4() {
      return "GraphQLSchema";
    }
  }]);
  return GraphQLSchema2;
}();
function collectReferencedTypes(type, typeSet) {
  var namedType = getNamedType(type);
  if (!typeSet.has(namedType)) {
    typeSet.add(namedType);
    if (isUnionType(namedType)) {
      for (var _i20 = 0, _namedType$getTypes2 = namedType.getTypes(); _i20 < _namedType$getTypes2.length; _i20++) {
        var memberType = _namedType$getTypes2[_i20];
        collectReferencedTypes(memberType, typeSet);
      }
    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {
      for (var _i22 = 0, _namedType$getInterfa6 = namedType.getInterfaces(); _i22 < _namedType$getInterfa6.length; _i22++) {
        var interfaceType = _namedType$getInterfa6[_i22];
        collectReferencedTypes(interfaceType, typeSet);
      }
      for (var _i24 = 0, _objectValues2 = objectValues_default(namedType.getFields()); _i24 < _objectValues2.length; _i24++) {
        var field = _objectValues2[_i24];
        collectReferencedTypes(field.type, typeSet);
        for (var _i26 = 0, _field$args2 = field.args; _i26 < _field$args2.length; _i26++) {
          var arg = _field$args2[_i26];
          collectReferencedTypes(arg.type, typeSet);
        }
      }
    } else if (isInputObjectType(namedType)) {
      for (var _i28 = 0, _objectValues4 = objectValues_default(namedType.getFields()); _i28 < _objectValues4.length; _i28++) {
        var _field = _objectValues4[_i28];
        collectReferencedTypes(_field.type, typeSet);
      }
    }
  }
  return typeSet;
}

// node_modules/graphql/type/validate.mjs
var SchemaValidationContext = function() {
  function SchemaValidationContext2(schema2) {
    this._errors = [];
    this.schema = schema2;
  }
  var _proto = SchemaValidationContext2.prototype;
  _proto.reportError = function reportError(message, nodes) {
    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
    this.addError(new GraphQLError(message, _nodes));
  };
  _proto.addError = function addError(error) {
    this._errors.push(error);
  };
  _proto.getErrors = function getErrors() {
    return this._errors;
  };
  return SchemaValidationContext2;
}();

// node_modules/graphql/utilities/typeFromAST.mjs
function typeFromAST(schema2, typeNode) {
  var innerType;
  if (typeNode.kind === Kind.LIST_TYPE) {
    innerType = typeFromAST(schema2, typeNode.type);
    return innerType && new GraphQLList(innerType);
  }
  if (typeNode.kind === Kind.NON_NULL_TYPE) {
    innerType = typeFromAST(schema2, typeNode.type);
    return innerType && new GraphQLNonNull(innerType);
  }
  if (typeNode.kind === Kind.NAMED_TYPE) {
    return schema2.getType(typeNode.name.value);
  }
  invariant(0, "Unexpected type node: " + inspect(typeNode));
}

// node_modules/graphql/utilities/TypeInfo.mjs
var TypeInfo = function() {
  function TypeInfo2(schema2, getFieldDefFn, initialType) {
    this._schema = schema2;
    this._typeStack = [];
    this._parentTypeStack = [];
    this._inputTypeStack = [];
    this._fieldDefStack = [];
    this._defaultValueStack = [];
    this._directive = null;
    this._argument = null;
    this._enumValue = null;
    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
    if (initialType) {
      if (isInputType(initialType)) {
        this._inputTypeStack.push(initialType);
      }
      if (isCompositeType(initialType)) {
        this._parentTypeStack.push(initialType);
      }
      if (isOutputType(initialType)) {
        this._typeStack.push(initialType);
      }
    }
  }
  var _proto = TypeInfo2.prototype;
  _proto.getType = function getType() {
    if (this._typeStack.length > 0) {
      return this._typeStack[this._typeStack.length - 1];
    }
  };
  _proto.getParentType = function getParentType() {
    if (this._parentTypeStack.length > 0) {
      return this._parentTypeStack[this._parentTypeStack.length - 1];
    }
  };
  _proto.getInputType = function getInputType() {
    if (this._inputTypeStack.length > 0) {
      return this._inputTypeStack[this._inputTypeStack.length - 1];
    }
  };
  _proto.getParentInputType = function getParentInputType() {
    if (this._inputTypeStack.length > 1) {
      return this._inputTypeStack[this._inputTypeStack.length - 2];
    }
  };
  _proto.getFieldDef = function getFieldDef3() {
    if (this._fieldDefStack.length > 0) {
      return this._fieldDefStack[this._fieldDefStack.length - 1];
    }
  };
  _proto.getDefaultValue = function getDefaultValue() {
    if (this._defaultValueStack.length > 0) {
      return this._defaultValueStack[this._defaultValueStack.length - 1];
    }
  };
  _proto.getDirective = function getDirective() {
    return this._directive;
  };
  _proto.getArgument = function getArgument() {
    return this._argument;
  };
  _proto.getEnumValue = function getEnumValue() {
    return this._enumValue;
  };
  _proto.enter = function enter(node) {
    var schema2 = this._schema;
    switch (node.kind) {
      case Kind.SELECTION_SET: {
        var namedType = getNamedType(this.getType());
        this._parentTypeStack.push(isCompositeType(namedType) ? namedType : void 0);
        break;
      }
      case Kind.FIELD: {
        var parentType = this.getParentType();
        var fieldDef;
        var fieldType;
        if (parentType) {
          fieldDef = this._getFieldDef(schema2, parentType, node);
          if (fieldDef) {
            fieldType = fieldDef.type;
          }
        }
        this._fieldDefStack.push(fieldDef);
        this._typeStack.push(isOutputType(fieldType) ? fieldType : void 0);
        break;
      }
      case Kind.DIRECTIVE:
        this._directive = schema2.getDirective(node.name.value);
        break;
      case Kind.OPERATION_DEFINITION: {
        var type;
        switch (node.operation) {
          case "query":
            type = schema2.getQueryType();
            break;
          case "mutation":
            type = schema2.getMutationType();
            break;
          case "subscription":
            type = schema2.getSubscriptionType();
            break;
        }
        this._typeStack.push(isObjectType(type) ? type : void 0);
        break;
      }
      case Kind.INLINE_FRAGMENT:
      case Kind.FRAGMENT_DEFINITION: {
        var typeConditionAST = node.typeCondition;
        var outputType = typeConditionAST ? typeFromAST(schema2, typeConditionAST) : getNamedType(this.getType());
        this._typeStack.push(isOutputType(outputType) ? outputType : void 0);
        break;
      }
      case Kind.VARIABLE_DEFINITION: {
        var inputType = typeFromAST(schema2, node.type);
        this._inputTypeStack.push(isInputType(inputType) ? inputType : void 0);
        break;
      }
      case Kind.ARGUMENT: {
        var _this$getDirective;
        var argDef;
        var argType;
        var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
        if (fieldOrDirective) {
          argDef = find_default(fieldOrDirective.args, function(arg) {
            return arg.name === node.name.value;
          });
          if (argDef) {
            argType = argDef.type;
          }
        }
        this._argument = argDef;
        this._defaultValueStack.push(argDef ? argDef.defaultValue : void 0);
        this._inputTypeStack.push(isInputType(argType) ? argType : void 0);
        break;
      }
      case Kind.LIST: {
        var listType = getNullableType(this.getInputType());
        var itemType = isListType(listType) ? listType.ofType : listType;
        this._defaultValueStack.push(void 0);
        this._inputTypeStack.push(isInputType(itemType) ? itemType : void 0);
        break;
      }
      case Kind.OBJECT_FIELD: {
        var objectType = getNamedType(this.getInputType());
        var inputFieldType;
        var inputField;
        if (isInputObjectType(objectType)) {
          inputField = objectType.getFields()[node.name.value];
          if (inputField) {
            inputFieldType = inputField.type;
          }
        }
        this._defaultValueStack.push(inputField ? inputField.defaultValue : void 0);
        this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : void 0);
        break;
      }
      case Kind.ENUM: {
        var enumType = getNamedType(this.getInputType());
        var enumValue;
        if (isEnumType(enumType)) {
          enumValue = enumType.getValue(node.value);
        }
        this._enumValue = enumValue;
        break;
      }
    }
  };
  _proto.leave = function leave(node) {
    switch (node.kind) {
      case Kind.SELECTION_SET:
        this._parentTypeStack.pop();
        break;
      case Kind.FIELD:
        this._fieldDefStack.pop();
        this._typeStack.pop();
        break;
      case Kind.DIRECTIVE:
        this._directive = null;
        break;
      case Kind.OPERATION_DEFINITION:
      case Kind.INLINE_FRAGMENT:
      case Kind.FRAGMENT_DEFINITION:
        this._typeStack.pop();
        break;
      case Kind.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();
        break;
      case Kind.ARGUMENT:
        this._argument = null;
        this._defaultValueStack.pop();
        this._inputTypeStack.pop();
        break;
      case Kind.LIST:
      case Kind.OBJECT_FIELD:
        this._defaultValueStack.pop();
        this._inputTypeStack.pop();
        break;
      case Kind.ENUM:
        this._enumValue = null;
        break;
    }
  };
  return TypeInfo2;
}();
function getFieldDef(schema2, parentType, fieldNode) {
  var name = fieldNode.name.value;
  if (name === SchemaMetaFieldDef.name && schema2.getQueryType() === parentType) {
    return SchemaMetaFieldDef;
  }
  if (name === TypeMetaFieldDef.name && schema2.getQueryType() === parentType) {
    return TypeMetaFieldDef;
  }
  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {
    return TypeNameMetaFieldDef;
  }
  if (isObjectType(parentType) || isInterfaceType(parentType)) {
    return parentType.getFields()[name];
  }
}
function visitWithTypeInfo(typeInfo, visitor) {
  return {
    enter: function enter(node) {
      typeInfo.enter(node);
      var fn2 = getVisitFn(
        visitor,
        node.kind,
        /* isLeaving */
        false
      );
      if (fn2) {
        var result = fn2.apply(visitor, arguments);
        if (result !== void 0) {
          typeInfo.leave(node);
          if (isNode(result)) {
            typeInfo.enter(result);
          }
        }
        return result;
      }
    },
    leave: function leave(node) {
      var fn2 = getVisitFn(
        visitor,
        node.kind,
        /* isLeaving */
        true
      );
      var result;
      if (fn2) {
        result = fn2.apply(visitor, arguments);
      }
      typeInfo.leave(node);
      return result;
    }
  };
}

// node_modules/graphql/language/predicates.mjs
function isExecutableDefinitionNode(node) {
  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;
}
function isTypeSystemDefinitionNode(node) {
  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;
}
function isTypeDefinitionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;
}
function isTypeSystemExtensionNode(node) {
  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}
function isTypeExtensionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;
}

// node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs
function ExecutableDefinitionsRule(context) {
  return {
    Document: function Document2(node) {
      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {
        var definition = _node$definitions2[_i2];
        if (!isExecutableDefinitionNode(definition)) {
          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? "schema" : '"' + definition.name.value + '"';
          context.reportError(new GraphQLError("The ".concat(defName, " definition is not executable."), definition));
        }
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs
function UniqueOperationNamesRule(context) {
  var knownOperationNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: function OperationDefinition2(node) {
      var operationName = node.name;
      if (operationName) {
        if (knownOperationNames[operationName.value]) {
          context.reportError(new GraphQLError('There can be only one operation named "'.concat(operationName.value, '".'), [knownOperationNames[operationName.value], operationName]));
        } else {
          knownOperationNames[operationName.value] = operationName;
        }
      }
      return false;
    },
    FragmentDefinition: function FragmentDefinition2() {
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs
function LoneAnonymousOperationRule(context) {
  var operationCount = 0;
  return {
    Document: function Document2(node) {
      operationCount = node.definitions.filter(function(definition) {
        return definition.kind === Kind.OPERATION_DEFINITION;
      }).length;
    },
    OperationDefinition: function OperationDefinition2(node) {
      if (!node.name && operationCount > 1) {
        context.reportError(new GraphQLError("This anonymous operation must be the only defined operation.", node));
      }
    }
  };
}

// node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs
function SingleFieldSubscriptionsRule(context) {
  return {
    OperationDefinition: function OperationDefinition2(node) {
      if (node.operation === "subscription") {
        if (node.selectionSet.selections.length !== 1) {
          context.reportError(new GraphQLError(node.name ? 'Subscription "'.concat(node.name.value, '" must select only one top level field.') : "Anonymous Subscription must select only one top level field.", node.selectionSet.selections.slice(1)));
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs
function KnownTypeNamesRule(context) {
  var schema2 = context.getSchema();
  var existingTypesMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
  var definedTypes = /* @__PURE__ */ Object.create(null);
  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
    var def = _context$getDocument$2[_i2];
    if (isTypeDefinitionNode(def)) {
      definedTypes[def.name.value] = true;
    }
  }
  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));
  return {
    NamedType: function NamedType2(node, _1, parent, _2, ancestors) {
      var typeName = node.name.value;
      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
        var _ancestors$;
        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
        var isSDL = definitionNode != null && isSDLNode(definitionNode);
        if (isSDL && isStandardTypeName(typeName)) {
          return;
        }
        var suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
        context.reportError(new GraphQLError('Unknown type "'.concat(typeName, '".') + didYouMean(suggestedTypes), node));
      }
    }
  };
}
var standardTypeNames = [].concat(specifiedScalarTypes, introspectionTypes).map(function(type) {
  return type.name;
});
function isStandardTypeName(typeName) {
  return standardTypeNames.indexOf(typeName) !== -1;
}
function isSDLNode(value) {
  return !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));
}

// node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs
function FragmentsOnCompositeTypesRule(context) {
  return {
    InlineFragment: function InlineFragment2(node) {
      var typeCondition = node.typeCondition;
      if (typeCondition) {
        var type = typeFromAST(context.getSchema(), typeCondition);
        if (type && !isCompositeType(type)) {
          var typeStr = print(typeCondition);
          context.reportError(new GraphQLError('Fragment cannot condition on non composite type "'.concat(typeStr, '".'), typeCondition));
        }
      }
    },
    FragmentDefinition: function FragmentDefinition2(node) {
      var type = typeFromAST(context.getSchema(), node.typeCondition);
      if (type && !isCompositeType(type)) {
        var typeStr = print(node.typeCondition);
        context.reportError(new GraphQLError('Fragment "'.concat(node.name.value, '" cannot condition on non composite type "').concat(typeStr, '".'), node.typeCondition));
      }
    }
  };
}

// node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs
function VariablesAreInputTypesRule(context) {
  return {
    VariableDefinition: function VariableDefinition2(node) {
      var type = typeFromAST(context.getSchema(), node.type);
      if (type && !isInputType(type)) {
        var variableName = node.variable.name.value;
        var typeName = print(node.type);
        context.reportError(new GraphQLError('Variable "$'.concat(variableName, '" cannot be non-input type "').concat(typeName, '".'), node.type));
      }
    }
  };
}

// node_modules/graphql/validation/rules/ScalarLeafsRule.mjs
function ScalarLeafsRule(context) {
  return {
    Field: function Field2(node) {
      var type = context.getType();
      var selectionSet = node.selectionSet;
      if (type) {
        if (isLeafType(getNamedType(type))) {
          if (selectionSet) {
            var fieldName = node.name.value;
            var typeStr = inspect(type);
            context.reportError(new GraphQLError('Field "'.concat(fieldName, '" must not have a selection since type "').concat(typeStr, '" has no subfields.'), selectionSet));
          }
        } else if (!selectionSet) {
          var _fieldName = node.name.value;
          var _typeStr = inspect(type);
          context.reportError(new GraphQLError('Field "'.concat(_fieldName, '" of type "').concat(_typeStr, '" must have a selection of subfields. Did you mean "').concat(_fieldName, ' { ... }"?'), node));
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs
function FieldsOnCorrectTypeRule(context) {
  return {
    Field: function Field2(node) {
      var type = context.getParentType();
      if (type) {
        var fieldDef = context.getFieldDef();
        if (!fieldDef) {
          var schema2 = context.getSchema();
          var fieldName = node.name.value;
          var suggestion = didYouMean("to use an inline fragment on", getSuggestedTypeNames(schema2, type, fieldName));
          if (suggestion === "") {
            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));
          }
          context.reportError(new GraphQLError('Cannot query field "'.concat(fieldName, '" on type "').concat(type.name, '".') + suggestion, node));
        }
      }
    }
  };
}
function getSuggestedTypeNames(schema2, type, fieldName) {
  if (!isAbstractType(type)) {
    return [];
  }
  var suggestedTypes = /* @__PURE__ */ new Set();
  var usageCount = /* @__PURE__ */ Object.create(null);
  for (var _i2 = 0, _schema$getPossibleTy2 = schema2.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {
    var possibleType = _schema$getPossibleTy2[_i2];
    if (!possibleType.getFields()[fieldName]) {
      continue;
    }
    suggestedTypes.add(possibleType);
    usageCount[possibleType.name] = 1;
    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {
      var _usageCount$possibleI;
      var possibleInterface = _possibleType$getInte2[_i4];
      if (!possibleInterface.getFields()[fieldName]) {
        continue;
      }
      suggestedTypes.add(possibleInterface);
      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
    }
  }
  return arrayFrom_default(suggestedTypes).sort(function(typeA, typeB) {
    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
    if (usageCountDiff !== 0) {
      return usageCountDiff;
    }
    if (isInterfaceType(typeA) && schema2.isSubType(typeA, typeB)) {
      return -1;
    }
    if (isInterfaceType(typeB) && schema2.isSubType(typeB, typeA)) {
      return 1;
    }
    return naturalCompare(typeA.name, typeB.name);
  }).map(function(x2) {
    return x2.name;
  });
}
function getSuggestedFieldNames(type, fieldName) {
  if (isObjectType(type) || isInterfaceType(type)) {
    var possibleFieldNames = Object.keys(type.getFields());
    return suggestionList(fieldName, possibleFieldNames);
  }
  return [];
}

// node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs
function UniqueFragmentNamesRule(context) {
  var knownFragmentNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: function OperationDefinition2() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition2(node) {
      var fragmentName = node.name.value;
      if (knownFragmentNames[fragmentName]) {
        context.reportError(new GraphQLError('There can be only one fragment named "'.concat(fragmentName, '".'), [knownFragmentNames[fragmentName], node.name]));
      } else {
        knownFragmentNames[fragmentName] = node.name;
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs
function KnownFragmentNamesRule(context) {
  return {
    FragmentSpread: function FragmentSpread2(node) {
      var fragmentName = node.name.value;
      var fragment = context.getFragment(fragmentName);
      if (!fragment) {
        context.reportError(new GraphQLError('Unknown fragment "'.concat(fragmentName, '".'), node.name));
      }
    }
  };
}

// node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs
function NoUnusedFragmentsRule(context) {
  var operationDefs = [];
  var fragmentDefs = [];
  return {
    OperationDefinition: function OperationDefinition2(node) {
      operationDefs.push(node);
      return false;
    },
    FragmentDefinition: function FragmentDefinition2(node) {
      fragmentDefs.push(node);
      return false;
    },
    Document: {
      leave: function leave() {
        var fragmentNameUsed = /* @__PURE__ */ Object.create(null);
        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {
          var operation = operationDefs[_i2];
          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {
            var fragment = _context$getRecursive2[_i4];
            fragmentNameUsed[fragment.name.value] = true;
          }
        }
        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {
          var fragmentDef = fragmentDefs[_i6];
          var fragName = fragmentDef.name.value;
          if (fragmentNameUsed[fragName] !== true) {
            context.reportError(new GraphQLError('Fragment "'.concat(fragName, '" is never used.'), fragmentDef));
          }
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs
function PossibleFragmentSpreadsRule(context) {
  return {
    InlineFragment: function InlineFragment2(node) {
      var fragType = context.getType();
      var parentType = context.getParentType();
      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
        var parentTypeStr = inspect(parentType);
        var fragTypeStr = inspect(fragType);
        context.reportError(new GraphQLError('Fragment cannot be spread here as objects of type "'.concat(parentTypeStr, '" can never be of type "').concat(fragTypeStr, '".'), node));
      }
    },
    FragmentSpread: function FragmentSpread2(node) {
      var fragName = node.name.value;
      var fragType = getFragmentType(context, fragName);
      var parentType = context.getParentType();
      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
        var parentTypeStr = inspect(parentType);
        var fragTypeStr = inspect(fragType);
        context.reportError(new GraphQLError('Fragment "'.concat(fragName, '" cannot be spread here as objects of type "').concat(parentTypeStr, '" can never be of type "').concat(fragTypeStr, '".'), node));
      }
    }
  };
}
function getFragmentType(context, name) {
  var frag = context.getFragment(name);
  if (frag) {
    var type = typeFromAST(context.getSchema(), frag.typeCondition);
    if (isCompositeType(type)) {
      return type;
    }
  }
}

// node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs
function NoFragmentCyclesRule(context) {
  var visitedFrags = /* @__PURE__ */ Object.create(null);
  var spreadPath = [];
  var spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: function OperationDefinition2() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition2(node) {
      detectCycleRecursive(node);
      return false;
    }
  };
  function detectCycleRecursive(fragment) {
    if (visitedFrags[fragment.name.value]) {
      return;
    }
    var fragmentName = fragment.name.value;
    visitedFrags[fragmentName] = true;
    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
    if (spreadNodes.length === 0) {
      return;
    }
    spreadPathIndexByName[fragmentName] = spreadPath.length;
    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {
      var spreadNode = spreadNodes[_i2];
      var spreadName = spreadNode.name.value;
      var cycleIndex = spreadPathIndexByName[spreadName];
      spreadPath.push(spreadNode);
      if (cycleIndex === void 0) {
        var spreadFragment = context.getFragment(spreadName);
        if (spreadFragment) {
          detectCycleRecursive(spreadFragment);
        }
      } else {
        var cyclePath = spreadPath.slice(cycleIndex);
        var viaPath = cyclePath.slice(0, -1).map(function(s2) {
          return '"' + s2.name.value + '"';
        }).join(", ");
        context.reportError(new GraphQLError('Cannot spread fragment "'.concat(spreadName, '" within itself') + (viaPath !== "" ? " via ".concat(viaPath, ".") : "."), cyclePath));
      }
      spreadPath.pop();
    }
    spreadPathIndexByName[fragmentName] = void 0;
  }
}

// node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs
function UniqueVariableNamesRule(context) {
  var knownVariableNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: function OperationDefinition2() {
      knownVariableNames = /* @__PURE__ */ Object.create(null);
    },
    VariableDefinition: function VariableDefinition2(node) {
      var variableName = node.variable.name.value;
      if (knownVariableNames[variableName]) {
        context.reportError(new GraphQLError('There can be only one variable named "$'.concat(variableName, '".'), [knownVariableNames[variableName], node.variable.name]));
      } else {
        knownVariableNames[variableName] = node.variable.name;
      }
    }
  };
}

// node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs
function NoUndefinedVariablesRule(context) {
  var variableNameDefined = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter: function enter() {
        variableNameDefined = /* @__PURE__ */ Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);
        for (var _i2 = 0; _i2 < usages.length; _i2++) {
          var _ref2 = usages[_i2];
          var node = _ref2.node;
          var varName = node.name.value;
          if (variableNameDefined[varName] !== true) {
            context.reportError(new GraphQLError(operation.name ? 'Variable "$'.concat(varName, '" is not defined by operation "').concat(operation.name.value, '".') : 'Variable "$'.concat(varName, '" is not defined.'), [node, operation]));
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition2(node) {
      variableNameDefined[node.variable.name.value] = true;
    }
  };
}

// node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs
function NoUnusedVariablesRule(context) {
  var variableDefs = [];
  return {
    OperationDefinition: {
      enter: function enter() {
        variableDefs = [];
      },
      leave: function leave(operation) {
        var variableNameUsed = /* @__PURE__ */ Object.create(null);
        var usages = context.getRecursiveVariableUsages(operation);
        for (var _i2 = 0; _i2 < usages.length; _i2++) {
          var _ref2 = usages[_i2];
          var node = _ref2.node;
          variableNameUsed[node.name.value] = true;
        }
        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {
          var variableDef = _variableDefs2[_i4];
          var variableName = variableDef.variable.name.value;
          if (variableNameUsed[variableName] !== true) {
            context.reportError(new GraphQLError(operation.name ? 'Variable "$'.concat(variableName, '" is never used in operation "').concat(operation.name.value, '".') : 'Variable "$'.concat(variableName, '" is never used.'), variableDef));
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition2(def) {
      variableDefs.push(def);
    }
  };
}

// node_modules/graphql/validation/rules/KnownDirectivesRule.mjs
function KnownDirectivesRule(context) {
  var locationsMap = /* @__PURE__ */ Object.create(null);
  var schema2 = context.getSchema();
  var definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
    var directive = definedDirectives[_i2];
    locationsMap[directive.name] = directive.locations;
  }
  var astDefinitions = context.getDocument().definitions;
  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
    var def = astDefinitions[_i4];
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      locationsMap[def.name.value] = def.locations.map(function(name) {
        return name.value;
      });
    }
  }
  return {
    Directive: function Directive2(node, _key, _parent, _path, ancestors) {
      var name = node.name.value;
      var locations = locationsMap[name];
      if (!locations) {
        context.reportError(new GraphQLError('Unknown directive "@'.concat(name, '".'), node));
        return;
      }
      var candidateLocation = getDirectiveLocationForASTPath(ancestors);
      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {
        context.reportError(new GraphQLError('Directive "@'.concat(name, '" may not be used on ').concat(candidateLocation, "."), node));
      }
    }
  };
}
function getDirectiveLocationForASTPath(ancestors) {
  var appliedTo = ancestors[ancestors.length - 1];
  !Array.isArray(appliedTo) || invariant(0);
  switch (appliedTo.kind) {
    case Kind.OPERATION_DEFINITION:
      return getDirectiveLocationForOperation(appliedTo.operation);
    case Kind.FIELD:
      return DirectiveLocation.FIELD;
    case Kind.FRAGMENT_SPREAD:
      return DirectiveLocation.FRAGMENT_SPREAD;
    case Kind.INLINE_FRAGMENT:
      return DirectiveLocation.INLINE_FRAGMENT;
    case Kind.FRAGMENT_DEFINITION:
      return DirectiveLocation.FRAGMENT_DEFINITION;
    case Kind.VARIABLE_DEFINITION:
      return DirectiveLocation.VARIABLE_DEFINITION;
    case Kind.SCHEMA_DEFINITION:
    case Kind.SCHEMA_EXTENSION:
      return DirectiveLocation.SCHEMA;
    case Kind.SCALAR_TYPE_DEFINITION:
    case Kind.SCALAR_TYPE_EXTENSION:
      return DirectiveLocation.SCALAR;
    case Kind.OBJECT_TYPE_DEFINITION:
    case Kind.OBJECT_TYPE_EXTENSION:
      return DirectiveLocation.OBJECT;
    case Kind.FIELD_DEFINITION:
      return DirectiveLocation.FIELD_DEFINITION;
    case Kind.INTERFACE_TYPE_DEFINITION:
    case Kind.INTERFACE_TYPE_EXTENSION:
      return DirectiveLocation.INTERFACE;
    case Kind.UNION_TYPE_DEFINITION:
    case Kind.UNION_TYPE_EXTENSION:
      return DirectiveLocation.UNION;
    case Kind.ENUM_TYPE_DEFINITION:
    case Kind.ENUM_TYPE_EXTENSION:
      return DirectiveLocation.ENUM;
    case Kind.ENUM_VALUE_DEFINITION:
      return DirectiveLocation.ENUM_VALUE;
    case Kind.INPUT_OBJECT_TYPE_DEFINITION:
    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return DirectiveLocation.INPUT_OBJECT;
    case Kind.INPUT_VALUE_DEFINITION: {
      var parentNode = ancestors[ancestors.length - 3];
      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;
    }
  }
}
function getDirectiveLocationForOperation(operation) {
  switch (operation) {
    case "query":
      return DirectiveLocation.QUERY;
    case "mutation":
      return DirectiveLocation.MUTATION;
    case "subscription":
      return DirectiveLocation.SUBSCRIPTION;
  }
  invariant(0, "Unexpected operation: " + inspect(operation));
}

// node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs
function UniqueDirectivesPerLocationRule(context) {
  var uniqueDirectiveMap = /* @__PURE__ */ Object.create(null);
  var schema2 = context.getSchema();
  var definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
    var directive = definedDirectives[_i2];
    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
  }
  var astDefinitions = context.getDocument().definitions;
  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
    var def = astDefinitions[_i4];
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      uniqueDirectiveMap[def.name.value] = !def.repeatable;
    }
  }
  var schemaDirectives = /* @__PURE__ */ Object.create(null);
  var typeDirectivesMap = /* @__PURE__ */ Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter: function enter(node) {
      if (node.directives == null) {
        return;
      }
      var seenDirectives;
      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {
        seenDirectives = schemaDirectives;
      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {
        var typeName = node.name.value;
        seenDirectives = typeDirectivesMap[typeName];
        if (seenDirectives === void 0) {
          typeDirectivesMap[typeName] = seenDirectives = /* @__PURE__ */ Object.create(null);
        }
      } else {
        seenDirectives = /* @__PURE__ */ Object.create(null);
      }
      for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {
        var _directive = _node$directives2[_i6];
        var directiveName = _directive.name.value;
        if (uniqueDirectiveMap[directiveName]) {
          if (seenDirectives[directiveName]) {
            context.reportError(new GraphQLError('The directive "@'.concat(directiveName, '" can only be used once at this location.'), [seenDirectives[directiveName], _directive]));
          } else {
            seenDirectives[directiveName] = _directive;
          }
        }
      }
    }
  };
}

// node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function KnownArgumentNamesRule(context) {
  return _objectSpread2(_objectSpread2({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {
    Argument: function Argument2(argNode) {
      var argDef = context.getArgument();
      var fieldDef = context.getFieldDef();
      var parentType = context.getParentType();
      if (!argDef && fieldDef && parentType) {
        var argName = argNode.name.value;
        var knownArgsNames = fieldDef.args.map(function(arg) {
          return arg.name;
        });
        var suggestions = suggestionList(argName, knownArgsNames);
        context.reportError(new GraphQLError('Unknown argument "'.concat(argName, '" on field "').concat(parentType.name, ".").concat(fieldDef.name, '".') + didYouMean(suggestions), argNode));
      }
    }
  });
}
function KnownArgumentNamesOnDirectivesRule(context) {
  var directiveArgs = /* @__PURE__ */ Object.create(null);
  var schema2 = context.getSchema();
  var definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {
    var directive = definedDirectives[_i2];
    directiveArgs[directive.name] = directive.args.map(function(arg) {
      return arg.name;
    });
  }
  var astDefinitions = context.getDocument().definitions;
  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {
    var def = astDefinitions[_i4];
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;
      var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      directiveArgs[def.name.value] = argsNodes.map(function(arg) {
        return arg.name.value;
      });
    }
  }
  return {
    Directive: function Directive2(directiveNode) {
      var directiveName = directiveNode.name.value;
      var knownArgs = directiveArgs[directiveName];
      if (directiveNode.arguments && knownArgs) {
        for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {
          var argNode = _directiveNode$argume2[_i6];
          var argName = argNode.name.value;
          if (knownArgs.indexOf(argName) === -1) {
            var suggestions = suggestionList(argName, knownArgs);
            context.reportError(new GraphQLError('Unknown argument "'.concat(argName, '" on directive "@').concat(directiveName, '".') + didYouMean(suggestions), argNode));
          }
        }
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs
function UniqueArgumentNamesRule(context) {
  var knownArgNames = /* @__PURE__ */ Object.create(null);
  return {
    Field: function Field2() {
      knownArgNames = /* @__PURE__ */ Object.create(null);
    },
    Directive: function Directive2() {
      knownArgNames = /* @__PURE__ */ Object.create(null);
    },
    Argument: function Argument2(node) {
      var argName = node.name.value;
      if (knownArgNames[argName]) {
        context.reportError(new GraphQLError('There can be only one argument named "'.concat(argName, '".'), [knownArgNames[argName], node.name]));
      } else {
        knownArgNames[argName] = node.name;
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs
function ValuesOfCorrectTypeRule(context) {
  return {
    ListValue: function ListValue2(node) {
      var type = getNullableType(context.getParentInputType());
      if (!isListType(type)) {
        isValidValueNode(context, node);
        return false;
      }
    },
    ObjectValue: function ObjectValue2(node) {
      var type = getNamedType(context.getInputType());
      if (!isInputObjectType(type)) {
        isValidValueNode(context, node);
        return false;
      }
      var fieldNodeMap = keyMap(node.fields, function(field) {
        return field.name.value;
      });
      for (var _i2 = 0, _objectValues2 = objectValues_default(type.getFields()); _i2 < _objectValues2.length; _i2++) {
        var fieldDef = _objectValues2[_i2];
        var fieldNode = fieldNodeMap[fieldDef.name];
        if (!fieldNode && isRequiredInputField(fieldDef)) {
          var typeStr = inspect(fieldDef.type);
          context.reportError(new GraphQLError('Field "'.concat(type.name, ".").concat(fieldDef.name, '" of required type "').concat(typeStr, '" was not provided.'), node));
        }
      }
    },
    ObjectField: function ObjectField2(node) {
      var parentType = getNamedType(context.getParentInputType());
      var fieldType = context.getInputType();
      if (!fieldType && isInputObjectType(parentType)) {
        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));
        context.reportError(new GraphQLError('Field "'.concat(node.name.value, '" is not defined by type "').concat(parentType.name, '".') + didYouMean(suggestions), node));
      }
    },
    NullValue: function NullValue2(node) {
      var type = context.getInputType();
      if (isNonNullType(type)) {
        context.reportError(new GraphQLError('Expected value of type "'.concat(inspect(type), '", found ').concat(print(node), "."), node));
      }
    },
    EnumValue: function EnumValue2(node) {
      return isValidValueNode(context, node);
    },
    IntValue: function IntValue2(node) {
      return isValidValueNode(context, node);
    },
    FloatValue: function FloatValue2(node) {
      return isValidValueNode(context, node);
    },
    StringValue: function StringValue2(node) {
      return isValidValueNode(context, node);
    },
    BooleanValue: function BooleanValue2(node) {
      return isValidValueNode(context, node);
    }
  };
}
function isValidValueNode(context, node) {
  var locationType = context.getInputType();
  if (!locationType) {
    return;
  }
  var type = getNamedType(locationType);
  if (!isLeafType(type)) {
    var typeStr = inspect(locationType);
    context.reportError(new GraphQLError('Expected value of type "'.concat(typeStr, '", found ').concat(print(node), "."), node));
    return;
  }
  try {
    var parseResult = type.parseLiteral(
      node,
      void 0
      /* variables */
    );
    if (parseResult === void 0) {
      var _typeStr = inspect(locationType);
      context.reportError(new GraphQLError('Expected value of type "'.concat(_typeStr, '", found ').concat(print(node), "."), node));
    }
  } catch (error) {
    var _typeStr2 = inspect(locationType);
    if (error instanceof GraphQLError) {
      context.reportError(error);
    } else {
      context.reportError(new GraphQLError('Expected value of type "'.concat(_typeStr2, '", found ').concat(print(node), "; ") + error.message, node, void 0, void 0, void 0, error));
    }
  }
}

// node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ProvidedRequiredArgumentsRule(context) {
  return _objectSpread3(_objectSpread3({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(fieldNode) {
        var _fieldNode$arguments;
        var fieldDef = context.getFieldDef();
        if (!fieldDef) {
          return false;
        }
        var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
        var argNodeMap = keyMap(argNodes, function(arg) {
          return arg.name.value;
        });
        for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {
          var argDef = _fieldDef$args2[_i2];
          var argNode = argNodeMap[argDef.name];
          if (!argNode && isRequiredArgument(argDef)) {
            var argTypeStr = inspect(argDef.type);
            context.reportError(new GraphQLError('Field "'.concat(fieldDef.name, '" argument "').concat(argDef.name, '" of type "').concat(argTypeStr, '" is required, but it was not provided.'), fieldNode));
          }
        }
      }
    }
  });
}
function ProvidedRequiredArgumentsOnDirectivesRule(context) {
  var requiredArgsMap = /* @__PURE__ */ Object.create(null);
  var schema2 = context.getSchema();
  var definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {
    var directive = definedDirectives[_i4];
    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function(arg) {
      return arg.name;
    });
  }
  var astDefinitions = context.getDocument().definitions;
  for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {
    var def = astDefinitions[_i6];
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;
      var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), function(arg) {
        return arg.name.value;
      });
    }
  }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(directiveNode) {
        var directiveName = directiveNode.name.value;
        var requiredArgs = requiredArgsMap[directiveName];
        if (requiredArgs) {
          var _directiveNode$argume;
          var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
          var argNodeMap = keyMap(_argNodes, function(arg) {
            return arg.name.value;
          });
          for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {
            var argName = _Object$keys2[_i8];
            if (!argNodeMap[argName]) {
              var argType = requiredArgs[argName].type;
              var argTypeStr = isType(argType) ? inspect(argType) : print(argType);
              context.reportError(new GraphQLError('Directive "@'.concat(directiveName, '" argument "').concat(argName, '" of type "').concat(argTypeStr, '" is required, but it was not provided.'), directiveNode));
            }
          }
        }
      }
    }
  };
}
function isRequiredArgumentNode(arg) {
  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;
}

// node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs
function VariablesInAllowedPositionRule(context) {
  var varDefMap = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter: function enter() {
        varDefMap = /* @__PURE__ */ Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);
        for (var _i2 = 0; _i2 < usages.length; _i2++) {
          var _ref2 = usages[_i2];
          var node = _ref2.node;
          var type = _ref2.type;
          var defaultValue = _ref2.defaultValue;
          var varName = node.name.value;
          var varDef = varDefMap[varName];
          if (varDef && type) {
            var schema2 = context.getSchema();
            var varType = typeFromAST(schema2, varDef.type);
            if (varType && !allowedVariableUsage(schema2, varType, varDef.defaultValue, type, defaultValue)) {
              var varTypeStr = inspect(varType);
              var typeStr = inspect(type);
              context.reportError(new GraphQLError('Variable "$'.concat(varName, '" of type "').concat(varTypeStr, '" used in position expecting type "').concat(typeStr, '".'), [varDef, node]));
            }
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition2(node) {
      varDefMap[node.variable.name.value] = node;
    }
  };
}
function allowedVariableUsage(schema2, varType, varDefaultValue, locationType, locationDefaultValue) {
  if (isNonNullType(locationType) && !isNonNullType(varType)) {
    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;
    var hasLocationDefaultValue = locationDefaultValue !== void 0;
    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
      return false;
    }
    var nullableLocationType = locationType.ofType;
    return isTypeSubTypeOf(schema2, varType, nullableLocationType);
  }
  return isTypeSubTypeOf(schema2, varType, locationType);
}

// node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs
function reasonMessage(reason) {
  if (Array.isArray(reason)) {
    return reason.map(function(_ref) {
      var responseName = _ref[0], subReason = _ref[1];
      return 'subfields "'.concat(responseName, '" conflict because ') + reasonMessage(subReason);
    }).join(" and ");
  }
  return reason;
}
function OverlappingFieldsCanBeMergedRule(context) {
  var comparedFragmentPairs = new PairSet();
  var cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
  return {
    SelectionSet: function SelectionSet2(selectionSet) {
      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {
        var _ref3 = conflicts[_i2];
        var _ref2$ = _ref3[0];
        var responseName = _ref2$[0];
        var reason = _ref2$[1];
        var fields1 = _ref3[1];
        var fields22 = _ref3[2];
        var reasonMsg = reasonMessage(reason);
        context.reportError(new GraphQLError('Fields "'.concat(responseName, '" conflict because ').concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), fields1.concat(fields22)));
      }
    }
  };
}
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
  var conflicts = [];
  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet), fieldMap = _getFieldsAndFragment[0], fragmentNames = _getFieldsAndFragment[1];
  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
  if (fragmentNames.length !== 0) {
    for (var i2 = 0; i2 < fragmentNames.length; i2++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i2]);
      for (var j2 = i2 + 1; j2 < fragmentNames.length; j2++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i2], fragmentNames[j2]);
      }
    }
  }
  return conflicts;
}
function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
  var fragment = context.getFragment(fragmentName);
  if (!fragment) {
    return;
  }
  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment), fieldMap2 = _getReferencedFieldsA[0], fragmentNames2 = _getReferencedFieldsA[1];
  if (fieldMap === fieldMap2) {
    return;
  }
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);
  for (var i2 = 0; i2 < fragmentNames2.length; i2++) {
    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i2]);
  }
}
function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
  if (fragmentName1 === fragmentName2) {
    return;
  }
  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
    return;
  }
  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
  var fragment1 = context.getFragment(fragmentName1);
  var fragment2 = context.getFragment(fragmentName2);
  if (!fragment1 || !fragment2) {
    return;
  }
  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1), fieldMap1 = _getReferencedFieldsA2[0], fragmentNames1 = _getReferencedFieldsA2[1];
  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2), fieldMap2 = _getReferencedFieldsA3[0], fragmentNames2 = _getReferencedFieldsA3[1];
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
  for (var j2 = 0; j2 < fragmentNames2.length; j2++) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j2]);
  }
  for (var i2 = 0; i2 < fragmentNames1.length; i2++) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i2], fragmentName2);
  }
}
function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  var conflicts = [];
  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1), fieldMap1 = _getFieldsAndFragment2[0], fragmentNames1 = _getFieldsAndFragment2[1];
  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2), fieldMap2 = _getFieldsAndFragment3[0], fragmentNames2 = _getFieldsAndFragment3[1];
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
  if (fragmentNames2.length !== 0) {
    for (var j2 = 0; j2 < fragmentNames2.length; j2++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j2]);
    }
  }
  if (fragmentNames1.length !== 0) {
    for (var i2 = 0; i2 < fragmentNames1.length; i2++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i2]);
    }
  }
  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {
    for (var _j = 0; _j < fragmentNames2.length; _j++) {
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);
    }
  }
  return conflicts;
}
function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
  for (var _i5 = 0, _objectEntries2 = objectEntries_default(fieldMap); _i5 < _objectEntries2.length; _i5++) {
    var _ref5 = _objectEntries2[_i5];
    var responseName = _ref5[0];
    var fields7 = _ref5[1];
    if (fields7.length > 1) {
      for (var i2 = 0; i2 < fields7.length; i2++) {
        for (var j2 = i2 + 1; j2 < fields7.length; j2++) {
          var conflict = findConflict(
            context,
            cachedFieldsAndFragmentNames,
            comparedFragmentPairs,
            false,
            // within one collection is never mutually exclusive
            responseName,
            fields7[i2],
            fields7[j2]
          );
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
}
function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {
    var responseName = _Object$keys2[_i7];
    var fields22 = fieldMap2[responseName];
    if (fields22) {
      var fields1 = fieldMap1[responseName];
      for (var i2 = 0; i2 < fields1.length; i2++) {
        for (var j2 = 0; j2 < fields22.length; j2++) {
          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i2], fields22[j2]);
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
}
function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
  var parentType1 = field1[0], node1 = field1[1], def1 = field1[2];
  var parentType2 = field2[0], node2 = field2[1], def2 = field2[2];
  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);
  if (!areMutuallyExclusive) {
    var _node1$arguments, _node2$arguments;
    var name1 = node1.name.value;
    var name2 = node2.name.value;
    if (name1 !== name2) {
      return [[responseName, '"'.concat(name1, '" and "').concat(name2, '" are different fields')], [node1], [node2]];
    }
    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : [];
    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : [];
    if (!sameArguments(args1, args2)) {
      return [[responseName, "they have differing arguments"], [node1], [node2]];
    }
  }
  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
  if (type1 && type2 && doTypesConflict(type1, type2)) {
    return [[responseName, 'they return conflicting types "'.concat(inspect(type1), '" and "').concat(inspect(type2), '"')], [node1], [node2]];
  }
  var selectionSet1 = node1.selectionSet;
  var selectionSet2 = node2.selectionSet;
  if (selectionSet1 && selectionSet2) {
    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);
    return subfieldConflicts(conflicts, responseName, node1, node2);
  }
}
function sameArguments(arguments1, arguments2) {
  if (arguments1.length !== arguments2.length) {
    return false;
  }
  return arguments1.every(function(argument1) {
    var argument2 = find_default(arguments2, function(argument) {
      return argument.name.value === argument1.name.value;
    });
    if (!argument2) {
      return false;
    }
    return sameValue(argument1.value, argument2.value);
  });
}
function sameValue(value1, value2) {
  return print(value1) === print(value2);
}
function doTypesConflict(type1, type2) {
  if (isListType(type1)) {
    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if (isListType(type2)) {
    return true;
  }
  if (isNonNullType(type1)) {
    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if (isNonNullType(type2)) {
    return true;
  }
  if (isLeafType(type1) || isLeafType(type2)) {
    return type1 !== type2;
  }
  return false;
}
function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
  var cached = cachedFieldsAndFragmentNames.get(selectionSet);
  if (!cached) {
    var nodeAndDefs = /* @__PURE__ */ Object.create(null);
    var fragmentNames = /* @__PURE__ */ Object.create(null);
    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
    cached = [nodeAndDefs, Object.keys(fragmentNames)];
    cachedFieldsAndFragmentNames.set(selectionSet, cached);
  }
  return cached;
}
function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
  if (cached) {
    return cached;
  }
  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);
  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
}
function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {
    var selection = _selectionSet$selecti2[_i9];
    switch (selection.kind) {
      case Kind.FIELD: {
        var fieldName = selection.name.value;
        var fieldDef = void 0;
        if (isObjectType(parentType) || isInterfaceType(parentType)) {
          fieldDef = parentType.getFields()[fieldName];
        }
        var responseName = selection.alias ? selection.alias.value : fieldName;
        if (!nodeAndDefs[responseName]) {
          nodeAndDefs[responseName] = [];
        }
        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
        break;
      }
      case Kind.FRAGMENT_SPREAD:
        fragmentNames[selection.name.value] = true;
        break;
      case Kind.INLINE_FRAGMENT: {
        var typeCondition = selection.typeCondition;
        var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;
        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
        break;
      }
    }
  }
}
function subfieldConflicts(conflicts, responseName, node1, node2) {
  if (conflicts.length > 0) {
    return [[responseName, conflicts.map(function(_ref6) {
      var reason = _ref6[0];
      return reason;
    })], conflicts.reduce(function(allFields, _ref7) {
      var fields1 = _ref7[1];
      return allFields.concat(fields1);
    }, [node1]), conflicts.reduce(function(allFields, _ref8) {
      var fields22 = _ref8[2];
      return allFields.concat(fields22);
    }, [node2])];
  }
}
var PairSet = function() {
  function PairSet2() {
    this._data = /* @__PURE__ */ Object.create(null);
  }
  var _proto = PairSet2.prototype;
  _proto.has = function has(a2, b2, areMutuallyExclusive) {
    var first = this._data[a2];
    var result = first && first[b2];
    if (result === void 0) {
      return false;
    }
    if (areMutuallyExclusive === false) {
      return result === false;
    }
    return true;
  };
  _proto.add = function add(a2, b2, areMutuallyExclusive) {
    this._pairSetAdd(a2, b2, areMutuallyExclusive);
    this._pairSetAdd(b2, a2, areMutuallyExclusive);
  };
  _proto._pairSetAdd = function _pairSetAdd(a2, b2, areMutuallyExclusive) {
    var map = this._data[a2];
    if (!map) {
      map = /* @__PURE__ */ Object.create(null);
      this._data[a2] = map;
    }
    map[b2] = areMutuallyExclusive;
  };
  return PairSet2;
}();

// node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs
function UniqueInputFieldNamesRule(context) {
  var knownNameStack = [];
  var knownNames = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter: function enter() {
        knownNameStack.push(knownNames);
        knownNames = /* @__PURE__ */ Object.create(null);
      },
      leave: function leave() {
        knownNames = knownNameStack.pop();
      }
    },
    ObjectField: function ObjectField2(node) {
      var fieldName = node.name.value;
      if (knownNames[fieldName]) {
        context.reportError(new GraphQLError('There can be only one input field named "'.concat(fieldName, '".'), [knownNames[fieldName], node.name]));
      } else {
        knownNames[fieldName] = node.name;
      }
    }
  };
}

// node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs
function LoneSchemaDefinitionRule(context) {
  var _ref, _ref2, _oldSchema$astNode;
  var oldSchema = context.getSchema();
  var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
  var schemaDefinitionsCount = 0;
  return {
    SchemaDefinition: function SchemaDefinition(node) {
      if (alreadyDefined) {
        context.reportError(new GraphQLError("Cannot define a new schema within a schema extension.", node));
        return;
      }
      if (schemaDefinitionsCount > 0) {
        context.reportError(new GraphQLError("Must provide only one schema definition.", node));
      }
      ++schemaDefinitionsCount;
    }
  };
}

// node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs
function UniqueOperationTypesRule(context) {
  var schema2 = context.getSchema();
  var definedOperationTypes = /* @__PURE__ */ Object.create(null);
  var existingOperationTypes = schema2 ? {
    query: schema2.getQueryType(),
    mutation: schema2.getMutationType(),
    subscription: schema2.getSubscriptionType()
  } : {};
  return {
    SchemaDefinition: checkOperationTypes,
    SchemaExtension: checkOperationTypes
  };
  function checkOperationTypes(node) {
    var _node$operationTypes;
    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {
      var operationType = operationTypesNodes[_i2];
      var operation = operationType.operation;
      var alreadyDefinedOperationType = definedOperationTypes[operation];
      if (existingOperationTypes[operation]) {
        context.reportError(new GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), operationType));
      } else if (alreadyDefinedOperationType) {
        context.reportError(new GraphQLError("There can be only one ".concat(operation, " type in schema."), [alreadyDefinedOperationType, operationType]));
      } else {
        definedOperationTypes[operation] = operationType;
      }
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs
function UniqueTypeNamesRule(context) {
  var knownTypeNames = /* @__PURE__ */ Object.create(null);
  var schema2 = context.getSchema();
  return {
    ScalarTypeDefinition: checkTypeName,
    ObjectTypeDefinition: checkTypeName,
    InterfaceTypeDefinition: checkTypeName,
    UnionTypeDefinition: checkTypeName,
    EnumTypeDefinition: checkTypeName,
    InputObjectTypeDefinition: checkTypeName
  };
  function checkTypeName(node) {
    var typeName = node.name.value;
    if (schema2 !== null && schema2 !== void 0 && schema2.getType(typeName)) {
      context.reportError(new GraphQLError('Type "'.concat(typeName, '" already exists in the schema. It cannot also be defined in this type definition.'), node.name));
      return;
    }
    if (knownTypeNames[typeName]) {
      context.reportError(new GraphQLError('There can be only one type named "'.concat(typeName, '".'), [knownTypeNames[typeName], node.name]));
    } else {
      knownTypeNames[typeName] = node.name;
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs
function UniqueEnumValueNamesRule(context) {
  var schema2 = context.getSchema();
  var existingTypeMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
  var knownValueNames = /* @__PURE__ */ Object.create(null);
  return {
    EnumTypeDefinition: checkValueUniqueness,
    EnumTypeExtension: checkValueUniqueness
  };
  function checkValueUniqueness(node) {
    var _node$values;
    var typeName = node.name.value;
    if (!knownValueNames[typeName]) {
      knownValueNames[typeName] = /* @__PURE__ */ Object.create(null);
    }
    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
    var valueNames = knownValueNames[typeName];
    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {
      var valueDef = valueNodes[_i2];
      var valueName = valueDef.name.value;
      var existingType = existingTypeMap[typeName];
      if (isEnumType(existingType) && existingType.getValue(valueName)) {
        context.reportError(new GraphQLError('Enum value "'.concat(typeName, ".").concat(valueName, '" already exists in the schema. It cannot also be defined in this type extension.'), valueDef.name));
      } else if (valueNames[valueName]) {
        context.reportError(new GraphQLError('Enum value "'.concat(typeName, ".").concat(valueName, '" can only be defined once.'), [valueNames[valueName], valueDef.name]));
      } else {
        valueNames[valueName] = valueDef.name;
      }
    }
    return false;
  }
}

// node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs
function UniqueFieldDefinitionNamesRule(context) {
  var schema2 = context.getSchema();
  var existingTypeMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
  var knownFieldNames = /* @__PURE__ */ Object.create(null);
  return {
    InputObjectTypeDefinition: checkFieldUniqueness,
    InputObjectTypeExtension: checkFieldUniqueness,
    InterfaceTypeDefinition: checkFieldUniqueness,
    InterfaceTypeExtension: checkFieldUniqueness,
    ObjectTypeDefinition: checkFieldUniqueness,
    ObjectTypeExtension: checkFieldUniqueness
  };
  function checkFieldUniqueness(node) {
    var _node$fields;
    var typeName = node.name.value;
    if (!knownFieldNames[typeName]) {
      knownFieldNames[typeName] = /* @__PURE__ */ Object.create(null);
    }
    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
    var fieldNames = knownFieldNames[typeName];
    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {
      var fieldDef = fieldNodes[_i2];
      var fieldName = fieldDef.name.value;
      if (hasField(existingTypeMap[typeName], fieldName)) {
        context.reportError(new GraphQLError('Field "'.concat(typeName, ".").concat(fieldName, '" already exists in the schema. It cannot also be defined in this type extension.'), fieldDef.name));
      } else if (fieldNames[fieldName]) {
        context.reportError(new GraphQLError('Field "'.concat(typeName, ".").concat(fieldName, '" can only be defined once.'), [fieldNames[fieldName], fieldDef.name]));
      } else {
        fieldNames[fieldName] = fieldDef.name;
      }
    }
    return false;
  }
}
function hasField(type, fieldName) {
  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {
    return type.getFields()[fieldName] != null;
  }
  return false;
}

// node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs
function UniqueDirectiveNamesRule(context) {
  var knownDirectiveNames = /* @__PURE__ */ Object.create(null);
  var schema2 = context.getSchema();
  return {
    DirectiveDefinition: function DirectiveDefinition(node) {
      var directiveName = node.name.value;
      if (schema2 !== null && schema2 !== void 0 && schema2.getDirective(directiveName)) {
        context.reportError(new GraphQLError('Directive "@'.concat(directiveName, '" already exists in the schema. It cannot be redefined.'), node.name));
        return;
      }
      if (knownDirectiveNames[directiveName]) {
        context.reportError(new GraphQLError('There can be only one directive named "@'.concat(directiveName, '".'), [knownDirectiveNames[directiveName], node.name]));
      } else {
        knownDirectiveNames[directiveName] = node.name;
      }
      return false;
    }
  };
}

// node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs
var _defKindToExtKind;
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function PossibleTypeExtensionsRule(context) {
  var schema2 = context.getSchema();
  var definedTypes = /* @__PURE__ */ Object.create(null);
  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {
    var def = _context$getDocument$2[_i2];
    if (isTypeDefinitionNode(def)) {
      definedTypes[def.name.value] = def;
    }
  }
  return {
    ScalarTypeExtension: checkExtension,
    ObjectTypeExtension: checkExtension,
    InterfaceTypeExtension: checkExtension,
    UnionTypeExtension: checkExtension,
    EnumTypeExtension: checkExtension,
    InputObjectTypeExtension: checkExtension
  };
  function checkExtension(node) {
    var typeName = node.name.value;
    var defNode = definedTypes[typeName];
    var existingType = schema2 === null || schema2 === void 0 ? void 0 : schema2.getType(typeName);
    var expectedKind;
    if (defNode) {
      expectedKind = defKindToExtKind[defNode.kind];
    } else if (existingType) {
      expectedKind = typeToExtKind(existingType);
    }
    if (expectedKind) {
      if (expectedKind !== node.kind) {
        var kindStr = extensionKindToTypeName(node.kind);
        context.reportError(new GraphQLError("Cannot extend non-".concat(kindStr, ' type "').concat(typeName, '".'), defNode ? [defNode, node] : node));
      }
    } else {
      var allTypeNames = Object.keys(definedTypes);
      if (schema2) {
        allTypeNames = allTypeNames.concat(Object.keys(schema2.getTypeMap()));
      }
      var suggestedTypes = suggestionList(typeName, allTypeNames);
      context.reportError(new GraphQLError('Cannot extend type "'.concat(typeName, '" because it is not defined.') + didYouMean(suggestedTypes), node.name));
    }
  }
}
var defKindToExtKind = (_defKindToExtKind = {}, _defineProperty4(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty4(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty4(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty4(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty4(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty4(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);
function typeToExtKind(type) {
  if (isScalarType(type)) {
    return Kind.SCALAR_TYPE_EXTENSION;
  }
  if (isObjectType(type)) {
    return Kind.OBJECT_TYPE_EXTENSION;
  }
  if (isInterfaceType(type)) {
    return Kind.INTERFACE_TYPE_EXTENSION;
  }
  if (isUnionType(type)) {
    return Kind.UNION_TYPE_EXTENSION;
  }
  if (isEnumType(type)) {
    return Kind.ENUM_TYPE_EXTENSION;
  }
  if (isInputObjectType(type)) {
    return Kind.INPUT_OBJECT_TYPE_EXTENSION;
  }
  invariant(0, "Unexpected type: " + inspect(type));
}
function extensionKindToTypeName(kind) {
  switch (kind) {
    case Kind.SCALAR_TYPE_EXTENSION:
      return "scalar";
    case Kind.OBJECT_TYPE_EXTENSION:
      return "object";
    case Kind.INTERFACE_TYPE_EXTENSION:
      return "interface";
    case Kind.UNION_TYPE_EXTENSION:
      return "union";
    case Kind.ENUM_TYPE_EXTENSION:
      return "enum";
    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return "input object";
  }
  invariant(0, "Unexpected kind: " + inspect(kind));
}

// node_modules/graphql/validation/specifiedRules.mjs
var specifiedRules = Object.freeze([ExecutableDefinitionsRule, UniqueOperationNamesRule, LoneAnonymousOperationRule, SingleFieldSubscriptionsRule, KnownTypeNamesRule, FragmentsOnCompositeTypesRule, VariablesAreInputTypesRule, ScalarLeafsRule, FieldsOnCorrectTypeRule, UniqueFragmentNamesRule, KnownFragmentNamesRule, NoUnusedFragmentsRule, PossibleFragmentSpreadsRule, NoFragmentCyclesRule, UniqueVariableNamesRule, NoUndefinedVariablesRule, NoUnusedVariablesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, KnownArgumentNamesRule, UniqueArgumentNamesRule, ValuesOfCorrectTypeRule, ProvidedRequiredArgumentsRule, VariablesInAllowedPositionRule, OverlappingFieldsCanBeMergedRule, UniqueInputFieldNamesRule]);
var specifiedSDLRules = Object.freeze([LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, KnownArgumentNamesOnDirectivesRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, ProvidedRequiredArgumentsOnDirectivesRule]);

// node_modules/graphql/validation/ValidationContext.mjs
function _inheritsLoose4(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var ASTValidationContext = function() {
  function ASTValidationContext2(ast, onError) {
    this._ast = ast;
    this._fragments = void 0;
    this._fragmentSpreads = /* @__PURE__ */ new Map();
    this._recursivelyReferencedFragments = /* @__PURE__ */ new Map();
    this._onError = onError;
  }
  var _proto = ASTValidationContext2.prototype;
  _proto.reportError = function reportError(error) {
    this._onError(error);
  };
  _proto.getDocument = function getDocument() {
    return this._ast;
  };
  _proto.getFragment = function getFragment(name) {
    var fragments = this._fragments;
    if (!fragments) {
      this._fragments = fragments = this.getDocument().definitions.reduce(function(frags, statement) {
        if (statement.kind === Kind.FRAGMENT_DEFINITION) {
          frags[statement.name.value] = statement;
        }
        return frags;
      }, /* @__PURE__ */ Object.create(null));
    }
    return fragments[name];
  };
  _proto.getFragmentSpreads = function getFragmentSpreads(node) {
    var spreads = this._fragmentSpreads.get(node);
    if (!spreads) {
      spreads = [];
      var setsToVisit = [node];
      while (setsToVisit.length !== 0) {
        var set2 = setsToVisit.pop();
        for (var _i2 = 0, _set$selections2 = set2.selections; _i2 < _set$selections2.length; _i2++) {
          var selection = _set$selections2[_i2];
          if (selection.kind === Kind.FRAGMENT_SPREAD) {
            spreads.push(selection);
          } else if (selection.selectionSet) {
            setsToVisit.push(selection.selectionSet);
          }
        }
      }
      this._fragmentSpreads.set(node, spreads);
    }
    return spreads;
  };
  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
    var fragments = this._recursivelyReferencedFragments.get(operation);
    if (!fragments) {
      fragments = [];
      var collectedNames = /* @__PURE__ */ Object.create(null);
      var nodesToVisit = [operation.selectionSet];
      while (nodesToVisit.length !== 0) {
        var node = nodesToVisit.pop();
        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {
          var spread = _this$getFragmentSpre2[_i4];
          var fragName = spread.name.value;
          if (collectedNames[fragName] !== true) {
            collectedNames[fragName] = true;
            var fragment = this.getFragment(fragName);
            if (fragment) {
              fragments.push(fragment);
              nodesToVisit.push(fragment.selectionSet);
            }
          }
        }
      }
      this._recursivelyReferencedFragments.set(operation, fragments);
    }
    return fragments;
  };
  return ASTValidationContext2;
}();
var SDLValidationContext = function(_ASTValidationContext) {
  _inheritsLoose4(SDLValidationContext2, _ASTValidationContext);
  function SDLValidationContext2(ast, schema2, onError) {
    var _this;
    _this = _ASTValidationContext.call(this, ast, onError) || this;
    _this._schema = schema2;
    return _this;
  }
  var _proto2 = SDLValidationContext2.prototype;
  _proto2.getSchema = function getSchema() {
    return this._schema;
  };
  return SDLValidationContext2;
}(ASTValidationContext);
var ValidationContext = function(_ASTValidationContext2) {
  _inheritsLoose4(ValidationContext2, _ASTValidationContext2);
  function ValidationContext2(schema2, ast, typeInfo, onError) {
    var _this2;
    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;
    _this2._schema = schema2;
    _this2._typeInfo = typeInfo;
    _this2._variableUsages = /* @__PURE__ */ new Map();
    _this2._recursiveVariableUsages = /* @__PURE__ */ new Map();
    return _this2;
  }
  var _proto3 = ValidationContext2.prototype;
  _proto3.getSchema = function getSchema() {
    return this._schema;
  };
  _proto3.getVariableUsages = function getVariableUsages(node) {
    var usages = this._variableUsages.get(node);
    if (!usages) {
      var newUsages = [];
      var typeInfo = new TypeInfo(this._schema);
      visit(node, visitWithTypeInfo(typeInfo, {
        VariableDefinition: function VariableDefinition2() {
          return false;
        },
        Variable: function Variable2(variable) {
          newUsages.push({
            node: variable,
            type: typeInfo.getInputType(),
            defaultValue: typeInfo.getDefaultValue()
          });
        }
      }));
      usages = newUsages;
      this._variableUsages.set(node, usages);
    }
    return usages;
  };
  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
    var usages = this._recursiveVariableUsages.get(operation);
    if (!usages) {
      usages = this.getVariableUsages(operation);
      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {
        var frag = _this$getRecursivelyR2[_i6];
        usages = usages.concat(this.getVariableUsages(frag));
      }
      this._recursiveVariableUsages.set(operation, usages);
    }
    return usages;
  };
  _proto3.getType = function getType() {
    return this._typeInfo.getType();
  };
  _proto3.getParentType = function getParentType() {
    return this._typeInfo.getParentType();
  };
  _proto3.getInputType = function getInputType() {
    return this._typeInfo.getInputType();
  };
  _proto3.getParentInputType = function getParentInputType() {
    return this._typeInfo.getParentInputType();
  };
  _proto3.getFieldDef = function getFieldDef3() {
    return this._typeInfo.getFieldDef();
  };
  _proto3.getDirective = function getDirective() {
    return this._typeInfo.getDirective();
  };
  _proto3.getArgument = function getArgument() {
    return this._typeInfo.getArgument();
  };
  _proto3.getEnumValue = function getEnumValue() {
    return this._typeInfo.getEnumValue();
  };
  return ValidationContext2;
}(ASTValidationContext);

// node_modules/graphql/jsutils/memoize3.mjs
function memoize3(fn2) {
  var cache0;
  return function memoized(a1, a2, a3) {
    if (!cache0) {
      cache0 = /* @__PURE__ */ new WeakMap();
    }
    var cache1 = cache0.get(a1);
    var cache2;
    if (cache1) {
      cache2 = cache1.get(a2);
      if (cache2) {
        var cachedValue = cache2.get(a3);
        if (cachedValue !== void 0) {
          return cachedValue;
        }
      }
    } else {
      cache1 = /* @__PURE__ */ new WeakMap();
      cache0.set(a1, cache1);
    }
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      cache1.set(a2, cache2);
    }
    var newValue = fn2(a1, a2, a3);
    cache2.set(a3, newValue);
    return newValue;
  };
}

// node_modules/graphql/utilities/valueFromAST.mjs
function valueFromAST(valueNode, type, variables) {
  if (!valueNode) {
    return;
  }
  if (valueNode.kind === Kind.VARIABLE) {
    var variableName = valueNode.name.value;
    if (variables == null || variables[variableName] === void 0) {
      return;
    }
    var variableValue = variables[variableName];
    if (variableValue === null && isNonNullType(type)) {
      return;
    }
    return variableValue;
  }
  if (isNonNullType(type)) {
    if (valueNode.kind === Kind.NULL) {
      return;
    }
    return valueFromAST(valueNode, type.ofType, variables);
  }
  if (valueNode.kind === Kind.NULL) {
    return null;
  }
  if (isListType(type)) {
    var itemType = type.ofType;
    if (valueNode.kind === Kind.LIST) {
      var coercedValues = [];
      for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {
        var itemNode = _valueNode$values2[_i2];
        if (isMissingVariable(itemNode, variables)) {
          if (isNonNullType(itemType)) {
            return;
          }
          coercedValues.push(null);
        } else {
          var itemValue = valueFromAST(itemNode, itemType, variables);
          if (itemValue === void 0) {
            return;
          }
          coercedValues.push(itemValue);
        }
      }
      return coercedValues;
    }
    var coercedValue = valueFromAST(valueNode, itemType, variables);
    if (coercedValue === void 0) {
      return;
    }
    return [coercedValue];
  }
  if (isInputObjectType(type)) {
    if (valueNode.kind !== Kind.OBJECT) {
      return;
    }
    var coercedObj = /* @__PURE__ */ Object.create(null);
    var fieldNodes = keyMap(valueNode.fields, function(field2) {
      return field2.name.value;
    });
    for (var _i4 = 0, _objectValues2 = objectValues_default(type.getFields()); _i4 < _objectValues2.length; _i4++) {
      var field = _objectValues2[_i4];
      var fieldNode = fieldNodes[field.name];
      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
        if (field.defaultValue !== void 0) {
          coercedObj[field.name] = field.defaultValue;
        } else if (isNonNullType(field.type)) {
          return;
        }
        continue;
      }
      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
      if (fieldValue === void 0) {
        return;
      }
      coercedObj[field.name] = fieldValue;
    }
    return coercedObj;
  }
  if (isLeafType(type)) {
    var result;
    try {
      result = type.parseLiteral(valueNode, variables);
    } catch (_error) {
      return;
    }
    if (result === void 0) {
      return;
    }
    return result;
  }
  invariant(0, "Unexpected input type: " + inspect(type));
}
function isMissingVariable(valueNode, variables) {
  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
}

// node_modules/graphql/execution/values.mjs
function getArgumentValues(def, node, variableValues) {
  var _node$arguments;
  var coercedValues = {};
  var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
  var argNodeMap = keyMap(argumentNodes, function(arg) {
    return arg.name.value;
  });
  for (var _i4 = 0, _def$args2 = def.args; _i4 < _def$args2.length; _i4++) {
    var argDef = _def$args2[_i4];
    var name = argDef.name;
    var argType = argDef.type;
    var argumentNode = argNodeMap[name];
    if (!argumentNode) {
      if (argDef.defaultValue !== void 0) {
        coercedValues[name] = argDef.defaultValue;
      } else if (isNonNullType(argType)) {
        throw new GraphQLError('Argument "'.concat(name, '" of required type "').concat(inspect(argType), '" ') + "was not provided.", node);
      }
      continue;
    }
    var valueNode = argumentNode.value;
    var isNull = valueNode.kind === Kind.NULL;
    if (valueNode.kind === Kind.VARIABLE) {
      var variableName = valueNode.name.value;
      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
        if (argDef.defaultValue !== void 0) {
          coercedValues[name] = argDef.defaultValue;
        } else if (isNonNullType(argType)) {
          throw new GraphQLError('Argument "'.concat(name, '" of required type "').concat(inspect(argType), '" ') + 'was provided the variable "$'.concat(variableName, '" which was not provided a runtime value.'), valueNode);
        }
        continue;
      }
      isNull = variableValues[variableName] == null;
    }
    if (isNull && isNonNullType(argType)) {
      throw new GraphQLError('Argument "'.concat(name, '" of non-null type "').concat(inspect(argType), '" ') + "must not be null.", valueNode);
    }
    var coercedValue = valueFromAST(valueNode, argType, variableValues);
    if (coercedValue === void 0) {
      throw new GraphQLError('Argument "'.concat(name, '" has invalid value ').concat(print(valueNode), "."), valueNode);
    }
    coercedValues[name] = coercedValue;
  }
  return coercedValues;
}
function getDirectiveValues(directiveDef, node, variableValues) {
  var directiveNode = node.directives && find_default(node.directives, function(directive) {
    return directive.name.value === directiveDef.name;
  });
  if (directiveNode) {
    return getArgumentValues(directiveDef, directiveNode, variableValues);
  }
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// node_modules/graphql/execution/execute.mjs
function collectFields(exeContext, runtimeType, selectionSet, fields7, visitedFragmentNames) {
  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {
    var selection = _selectionSet$selecti2[_i6];
    switch (selection.kind) {
      case Kind.FIELD: {
        if (!shouldIncludeNode(exeContext, selection)) {
          continue;
        }
        var name = getFieldEntryKey(selection);
        if (!fields7[name]) {
          fields7[name] = [];
        }
        fields7[name].push(selection);
        break;
      }
      case Kind.INLINE_FRAGMENT: {
        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
          continue;
        }
        collectFields(exeContext, runtimeType, selection.selectionSet, fields7, visitedFragmentNames);
        break;
      }
      case Kind.FRAGMENT_SPREAD: {
        var fragName = selection.name.value;
        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
          continue;
        }
        visitedFragmentNames[fragName] = true;
        var fragment = exeContext.fragments[fragName];
        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
          continue;
        }
        collectFields(exeContext, runtimeType, fragment.selectionSet, fields7, visitedFragmentNames);
        break;
      }
    }
  }
  return fields7;
}
function shouldIncludeNode(exeContext, node) {
  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);
  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
    return false;
  }
  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);
  if ((include === null || include === void 0 ? void 0 : include.if) === false) {
    return false;
  }
  return true;
}
function doesFragmentConditionMatch(exeContext, fragment, type) {
  var typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);
  if (conditionalType === type) {
    return true;
  }
  if (isAbstractType(conditionalType)) {
    return exeContext.schema.isSubType(conditionalType, type);
  }
  return false;
}
function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}
var collectSubfields = memoize3(_collectSubfields);
function _collectSubfields(exeContext, returnType, fieldNodes) {
  var subFieldNodes = /* @__PURE__ */ Object.create(null);
  var visitedFragmentNames = /* @__PURE__ */ Object.create(null);
  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {
    var node = fieldNodes[_i8];
    if (node.selectionSet) {
      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }
  return subFieldNodes;
}

// node_modules/graphql/utilities/extendSchema.mjs
var stdTypeMap = keyMap(specifiedScalarTypes.concat(introspectionTypes), function(type) {
  return type.name;
});

// node_modules/graphql/utilities/findBreakingChanges.mjs
var BreakingChangeType = Object.freeze({
  TYPE_REMOVED: "TYPE_REMOVED",
  TYPE_CHANGED_KIND: "TYPE_CHANGED_KIND",
  TYPE_REMOVED_FROM_UNION: "TYPE_REMOVED_FROM_UNION",
  VALUE_REMOVED_FROM_ENUM: "VALUE_REMOVED_FROM_ENUM",
  REQUIRED_INPUT_FIELD_ADDED: "REQUIRED_INPUT_FIELD_ADDED",
  IMPLEMENTED_INTERFACE_REMOVED: "IMPLEMENTED_INTERFACE_REMOVED",
  FIELD_REMOVED: "FIELD_REMOVED",
  FIELD_CHANGED_KIND: "FIELD_CHANGED_KIND",
  REQUIRED_ARG_ADDED: "REQUIRED_ARG_ADDED",
  ARG_REMOVED: "ARG_REMOVED",
  ARG_CHANGED_KIND: "ARG_CHANGED_KIND",
  DIRECTIVE_REMOVED: "DIRECTIVE_REMOVED",
  DIRECTIVE_ARG_REMOVED: "DIRECTIVE_ARG_REMOVED",
  REQUIRED_DIRECTIVE_ARG_ADDED: "REQUIRED_DIRECTIVE_ARG_ADDED",
  DIRECTIVE_REPEATABLE_REMOVED: "DIRECTIVE_REPEATABLE_REMOVED",
  DIRECTIVE_LOCATION_REMOVED: "DIRECTIVE_LOCATION_REMOVED"
});
var DangerousChangeType = Object.freeze({
  VALUE_ADDED_TO_ENUM: "VALUE_ADDED_TO_ENUM",
  TYPE_ADDED_TO_UNION: "TYPE_ADDED_TO_UNION",
  OPTIONAL_INPUT_FIELD_ADDED: "OPTIONAL_INPUT_FIELD_ADDED",
  OPTIONAL_ARG_ADDED: "OPTIONAL_ARG_ADDED",
  IMPLEMENTED_INTERFACE_ADDED: "IMPLEMENTED_INTERFACE_ADDED",
  ARG_DEFAULT_VALUE_CHANGE: "ARG_DEFAULT_VALUE_CHANGE"
});

// node_modules/@aws-amplify/pubsub/node_modules/tslib/tslib.es6.js
var extendStatics7 = function(d2, b2) {
  extendStatics7 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (b3.hasOwnProperty(p2))
        d3[p2] = b3[p2];
  };
  return extendStatics7(d2, b2);
};
function __extends7(d2, b2) {
  extendStatics7(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign17 = function() {
  __assign17 = Object.assign || function __assign18(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign17.apply(this, arguments);
};
function __rest7(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
}
function __awaiter20(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve4) {
      resolve4(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve4, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve4(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator20(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read14(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}

// node_modules/@aws-amplify/pubsub/lib-esm/Providers/PubSubProvider.js
var logger22 = new ConsoleLogger("AbstractPubSubProvider");
var AbstractPubSubProvider = (
  /** @class */
  function() {
    function AbstractPubSubProvider2(options) {
      this._config = options;
    }
    AbstractPubSubProvider2.prototype.configure = function(config) {
      this._config = __assign17(__assign17({}, config), this._config);
      logger22.debug("configure " + this.getProviderName(), this._config);
      return this.options;
    };
    AbstractPubSubProvider2.prototype.getCategory = function() {
      return "PubSub";
    };
    Object.defineProperty(AbstractPubSubProvider2.prototype, "options", {
      get: function() {
        return __assign17({}, this._config);
      },
      enumerable: true,
      configurable: true
    });
    return AbstractPubSubProvider2;
  }()
);

// node_modules/@aws-amplify/pubsub/lib-esm/Providers/AWSAppSyncRealTimeProvider/index.js
var url = __toESM(require_url());
var import_uuid2 = __toESM(require_uuid());
var import_buffer5 = __toESM(require_buffer());

// node_modules/@aws-amplify/pubsub/lib-esm/types/PubSub.js
var CONTROL_MSG;
(function(CONTROL_MSG3) {
  CONTROL_MSG3["CONNECTION_CLOSED"] = "Connection closed";
  CONTROL_MSG3["CONNECTION_FAILED"] = "Connection failed";
  CONTROL_MSG3["REALTIME_SUBSCRIPTION_INIT_ERROR"] = "AppSync Realtime subscription init error";
  CONTROL_MSG3["SUBSCRIPTION_ACK"] = "Subscription ack";
  CONTROL_MSG3["TIMEOUT_DISCONNECT"] = "Timeout disconnect";
})(CONTROL_MSG || (CONTROL_MSG = {}));
var ConnectionState;
(function(ConnectionState2) {
  ConnectionState2["Connected"] = "Connected";
  ConnectionState2["ConnectedPendingNetwork"] = "ConnectedPendingNetwork";
  ConnectionState2["ConnectionDisrupted"] = "ConnectionDisrupted";
  ConnectionState2["ConnectionDisruptedPendingNetwork"] = "ConnectionDisruptedPendingNetwork";
  ConnectionState2["Connecting"] = "Connecting";
  ConnectionState2["ConnectedPendingDisconnect"] = "ConnectedPendingDisconnect";
  ConnectionState2["Disconnected"] = "Disconnected";
  ConnectionState2["ConnectedPendingKeepAlive"] = "ConnectedPendingKeepAlive";
})(ConnectionState || (ConnectionState = {}));

// node_modules/@aws-amplify/pubsub/lib-esm/Providers/constants.js
var MAX_DELAY_MS3 = 5e3;
var NON_RETRYABLE_CODES = [400, 401, 403];
var CONNECTION_STATE_CHANGE = "ConnectionStateChange";
var MESSAGE_TYPES;
(function(MESSAGE_TYPES2) {
  MESSAGE_TYPES2["GQL_CONNECTION_INIT"] = "connection_init";
  MESSAGE_TYPES2["GQL_CONNECTION_ERROR"] = "connection_error";
  MESSAGE_TYPES2["GQL_CONNECTION_ACK"] = "connection_ack";
  MESSAGE_TYPES2["GQL_START"] = "start";
  MESSAGE_TYPES2["GQL_START_ACK"] = "start_ack";
  MESSAGE_TYPES2["GQL_DATA"] = "data";
  MESSAGE_TYPES2["GQL_CONNECTION_KEEP_ALIVE"] = "ka";
  MESSAGE_TYPES2["GQL_STOP"] = "stop";
  MESSAGE_TYPES2["GQL_COMPLETE"] = "complete";
  MESSAGE_TYPES2["GQL_ERROR"] = "error";
})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));
var SUBSCRIPTION_STATUS;
(function(SUBSCRIPTION_STATUS2) {
  SUBSCRIPTION_STATUS2[SUBSCRIPTION_STATUS2["PENDING"] = 0] = "PENDING";
  SUBSCRIPTION_STATUS2[SUBSCRIPTION_STATUS2["CONNECTED"] = 1] = "CONNECTED";
  SUBSCRIPTION_STATUS2[SUBSCRIPTION_STATUS2["FAILED"] = 2] = "FAILED";
})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));
var SOCKET_STATUS;
(function(SOCKET_STATUS2) {
  SOCKET_STATUS2[SOCKET_STATUS2["CLOSED"] = 0] = "CLOSED";
  SOCKET_STATUS2[SOCKET_STATUS2["READY"] = 1] = "READY";
  SOCKET_STATUS2[SOCKET_STATUS2["CONNECTING"] = 2] = "CONNECTING";
})(SOCKET_STATUS || (SOCKET_STATUS = {}));
var AMPLIFY_SYMBOL5 = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var AWS_APPSYNC_REALTIME_HEADERS = {
  accept: "application/json, text/javascript",
  "content-encoding": "amz-1.0",
  "content-type": "application/json; charset=UTF-8"
};
var CONNECTION_INIT_TIMEOUT = 15e3;
var START_ACK_TIMEOUT = 15e3;
var DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1e3;
var DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT = 65 * 1e3;
var RECONNECT_DELAY = 5 * 1e3;
var RECONNECT_INTERVAL = 60 * 1e3;

// node_modules/@aws-amplify/pubsub/lib-esm/utils/ReachabilityMonitor/index.js
var ReachabilityMonitor = function() {
  return new Reachability_default().networkMonitor();
};

// node_modules/@aws-amplify/pubsub/lib-esm/utils/ConnectionStateMonitor.js
var CONNECTION_CHANGE = {
  KEEP_ALIVE_MISSED: { keepAliveState: "unhealthy" },
  KEEP_ALIVE: { keepAliveState: "healthy" },
  CONNECTION_ESTABLISHED: { connectionState: "connected" },
  CONNECTION_FAILED: {
    intendedConnectionState: "disconnected",
    connectionState: "disconnected"
  },
  CLOSING_CONNECTION: { intendedConnectionState: "disconnected" },
  OPENING_CONNECTION: {
    intendedConnectionState: "connected",
    connectionState: "connecting"
  },
  CLOSED: { connectionState: "disconnected" },
  ONLINE: { networkState: "connected" },
  OFFLINE: { networkState: "disconnected" }
};
var ConnectionStateMonitor = (
  /** @class */
  function() {
    function ConnectionStateMonitor2() {
      var _this = this;
      this._networkMonitoringSubscription = void 0;
      this._linkedConnectionState = {
        networkState: "connected",
        connectionState: "disconnected",
        intendedConnectionState: "disconnected",
        keepAliveState: "healthy"
      };
      this._initialNetworkStateSubscription = ReachabilityMonitor().subscribe(function(_a) {
        var online = _a.online;
        var _b;
        _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);
        (_b = _this._initialNetworkStateSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
      });
      this._linkedConnectionStateObservable = new bundle_esm_default(function(connectionStateObserver) {
        connectionStateObserver.next(_this._linkedConnectionState);
        _this._linkedConnectionStateObserver = connectionStateObserver;
      });
    }
    ConnectionStateMonitor2.prototype.enableNetworkMonitoring = function() {
      var _this = this;
      var _a;
      (_a = this._initialNetworkStateSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
      if (this._networkMonitoringSubscription === void 0) {
        this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function(_a2) {
          var online = _a2.online;
          _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);
        });
      }
    };
    ConnectionStateMonitor2.prototype.disableNetworkMonitoring = function() {
      var _a;
      (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
      this._networkMonitoringSubscription = void 0;
    };
    Object.defineProperty(ConnectionStateMonitor2.prototype, "connectionStateObservable", {
      /**
       * Get the observable that allows us to monitor the connection state
       *
       * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates
       */
      get: function() {
        var _this = this;
        var previous;
        return this._linkedConnectionStateObservable.map(function(value) {
          return _this.connectionStatesTranslator(value);
        }).filter(function(current) {
          var toInclude = current !== previous;
          previous = current;
          return toInclude;
        });
      },
      enumerable: true,
      configurable: true
    });
    ConnectionStateMonitor2.prototype.record = function(statusUpdates) {
      if (statusUpdates.intendedConnectionState === "connected") {
        this.enableNetworkMonitoring();
      } else if (statusUpdates.intendedConnectionState === "disconnected") {
        this.disableNetworkMonitoring();
      }
      var newSocketStatus = __assign17(__assign17({}, this._linkedConnectionState), statusUpdates);
      this._linkedConnectionState = __assign17({}, newSocketStatus);
      this._linkedConnectionStateObserver.next(this._linkedConnectionState);
    };
    ConnectionStateMonitor2.prototype.connectionStatesTranslator = function(_a) {
      var connectionState = _a.connectionState, networkState = _a.networkState, intendedConnectionState = _a.intendedConnectionState, keepAliveState = _a.keepAliveState;
      if (connectionState === "connected" && networkState === "disconnected")
        return ConnectionState.ConnectedPendingNetwork;
      if (connectionState === "connected" && intendedConnectionState === "disconnected")
        return ConnectionState.ConnectedPendingDisconnect;
      if (connectionState === "disconnected" && intendedConnectionState === "connected" && networkState === "disconnected")
        return ConnectionState.ConnectionDisruptedPendingNetwork;
      if (connectionState === "disconnected" && intendedConnectionState === "connected")
        return ConnectionState.ConnectionDisrupted;
      if (connectionState === "connected" && keepAliveState === "unhealthy")
        return ConnectionState.ConnectedPendingKeepAlive;
      if (connectionState === "connecting")
        return ConnectionState.Connecting;
      if (connectionState === "disconnected")
        return ConnectionState.Disconnected;
      return ConnectionState.Connected;
    };
    return ConnectionStateMonitor2;
  }()
);

// node_modules/@aws-amplify/pubsub/lib-esm/utils/ReconnectionMonitor.js
var ReconnectEvent;
(function(ReconnectEvent2) {
  ReconnectEvent2["START_RECONNECT"] = "START_RECONNECT";
  ReconnectEvent2["HALT_RECONNECT"] = "HALT_RECONNECT";
})(ReconnectEvent || (ReconnectEvent = {}));
var ReconnectionMonitor = (
  /** @class */
  function() {
    function ReconnectionMonitor2() {
      this.reconnectObservers = [];
    }
    ReconnectionMonitor2.prototype.addObserver = function(reconnectObserver) {
      this.reconnectObservers.push(reconnectObserver);
    };
    ReconnectionMonitor2.prototype.record = function(event) {
      var _this = this;
      if (event === ReconnectEvent.START_RECONNECT) {
        if (this.reconnectSetTimeoutId === void 0 && this.reconnectIntervalId === void 0) {
          this.reconnectSetTimeoutId = setTimeout(function() {
            _this._triggerReconnect();
            _this.reconnectIntervalId = setInterval(function() {
              _this._triggerReconnect();
            }, RECONNECT_INTERVAL);
          }, RECONNECT_DELAY);
        }
      }
      if (event === ReconnectEvent.HALT_RECONNECT) {
        if (this.reconnectIntervalId) {
          clearInterval(this.reconnectIntervalId);
          this.reconnectIntervalId = void 0;
        }
        if (this.reconnectSetTimeoutId) {
          clearTimeout(this.reconnectSetTimeoutId);
          this.reconnectSetTimeoutId = void 0;
        }
      }
    };
    ReconnectionMonitor2.prototype.close = function() {
      this.reconnectObservers.forEach(function(reconnectObserver) {
        var _a;
        (_a = reconnectObserver.complete) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);
      });
    };
    ReconnectionMonitor2.prototype._triggerReconnect = function() {
      this.reconnectObservers.forEach(function(reconnectObserver) {
        var _a;
        (_a = reconnectObserver.next) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);
      });
    };
    return ReconnectionMonitor2;
  }()
);

// node_modules/@aws-amplify/pubsub/lib-esm/Providers/AWSAppSyncRealTimeProvider/index.js
var logger23 = new ConsoleLogger("AWSAppSyncRealTimeProvider");
var dispatchApiEvent = function(event, data, message) {
  Hub.dispatch("api", { event, data, message }, "PubSub", AMPLIFY_SYMBOL5);
};
var standardDomainPattern = /^https:\/\/\w{26}\.appsync\-api\.\w{2}(?:(?:\-\w{2,})+)\-\d\.amazonaws.com(?:\.cn)?\/graphql$/i;
var customDomainPath = "/realtime";
var AWSAppSyncRealTimeProvider = (
  /** @class */
  function(_super) {
    __extends7(AWSAppSyncRealTimeProvider2, _super);
    function AWSAppSyncRealTimeProvider2(options) {
      if (options === void 0) {
        options = {};
      }
      var _this = _super.call(this, options) || this;
      _this.socketStatus = SOCKET_STATUS.CLOSED;
      _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;
      _this.subscriptionObserverMap = /* @__PURE__ */ new Map();
      _this.promiseArray = [];
      _this.connectionStateMonitor = new ConnectionStateMonitor();
      _this.reconnectionMonitor = new ReconnectionMonitor();
      _this.connectionStateMonitorSubscription = _this.connectionStateMonitor.connectionStateObservable.subscribe(function(connectionState) {
        dispatchApiEvent(CONNECTION_STATE_CHANGE, {
          provider: _this,
          connectionState
        }, "Connection state is " + connectionState);
        _this.connectionState = connectionState;
        if (connectionState === ConnectionState.ConnectionDisrupted) {
          _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);
        }
        if ([
          ConnectionState.Connected,
          ConnectionState.ConnectedPendingDisconnect,
          ConnectionState.ConnectedPendingKeepAlive,
          ConnectionState.ConnectedPendingNetwork,
          ConnectionState.ConnectedPendingNetwork,
          ConnectionState.ConnectionDisruptedPendingNetwork,
          ConnectionState.Disconnected
        ].includes(connectionState)) {
          _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);
        }
      });
      return _this;
    }
    AWSAppSyncRealTimeProvider2.prototype.close = function() {
      this.socketStatus = SOCKET_STATUS.CLOSED;
      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);
      this.connectionStateMonitorSubscription.unsubscribe();
      this.reconnectionMonitor.close();
    };
    AWSAppSyncRealTimeProvider2.prototype.getNewWebSocket = function(url2, protocol) {
      return new WebSocket(url2, protocol);
    };
    AWSAppSyncRealTimeProvider2.prototype.getProviderName = function() {
      return "AWSAppSyncRealTimeProvider";
    };
    AWSAppSyncRealTimeProvider2.prototype.newClient = function() {
      throw new Error("Not used here");
    };
    AWSAppSyncRealTimeProvider2.prototype.publish = function(_topics, _msg, _options) {
      return __awaiter20(this, void 0, void 0, function() {
        return __generator20(this, function(_a) {
          throw new Error("Operation not supported");
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype.isCustomDomain = function(url2) {
      return url2.match(standardDomainPattern) === null;
    };
    AWSAppSyncRealTimeProvider2.prototype.subscribe = function(_topics, options) {
      var _this = this;
      var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;
      return new bundle_esm_default(function(observer) {
        if (!options || !appSyncGraphqlEndpoint) {
          observer.error({
            errors: [
              __assign17({}, new GraphQLError("Subscribe only available for AWS AppSync endpoint"))
            ]
          });
          observer.complete();
        } else {
          var subscriptionStartActive_1 = false;
          var subscriptionId_1 = (0, import_uuid2.v4)();
          var startSubscription_1 = function() {
            if (!subscriptionStartActive_1) {
              subscriptionStartActive_1 = true;
              var startSubscriptionPromise = _this._startSubscriptionWithAWSAppSyncRealTime({
                options,
                observer,
                subscriptionId: subscriptionId_1
              }).catch(function(err) {
                logger23.debug(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + ": " + err);
                _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
              });
              startSubscriptionPromise.finally(function() {
                subscriptionStartActive_1 = false;
              });
            }
          };
          var reconnectSubscription_1;
          reconnectSubscription_1 = new bundle_esm_default(function(observer2) {
            _this.reconnectionMonitor.addObserver(observer2);
          }).subscribe(function() {
            startSubscription_1();
          });
          startSubscription_1();
          return function() {
            return __awaiter20(_this, void 0, void 0, function() {
              var subscriptionState, err_1;
              return __generator20(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    reconnectSubscription_1 === null || reconnectSubscription_1 === void 0 ? void 0 : reconnectSubscription_1.unsubscribe();
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, 4, 5]);
                    return [4, this._waitForSubscriptionToBeConnected(subscriptionId_1)];
                  case 2:
                    _a.sent();
                    subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;
                    if (!subscriptionState) {
                      return [
                        2
                        /*return*/
                      ];
                    }
                    if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {
                      this._sendUnsubscriptionMessage(subscriptionId_1);
                    } else {
                      throw new Error("Subscription never connected");
                    }
                    return [3, 5];
                  case 3:
                    err_1 = _a.sent();
                    logger23.debug("Error while unsubscribing " + err_1);
                    return [3, 5];
                  case 4:
                    this._removeSubscriptionObserver(subscriptionId_1);
                    return [
                      7
                      /*endfinally*/
                    ];
                  case 5:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
        }
      });
    };
    Object.defineProperty(AWSAppSyncRealTimeProvider2.prototype, "isSSLEnabled", {
      get: function() {
        return !this.options["aws_appsync_dangerously_connect_to_http_endpoint_for_testing"];
      },
      enumerable: true,
      configurable: true
    });
    AWSAppSyncRealTimeProvider2.prototype._startSubscriptionWithAWSAppSyncRealTime = function(_a) {
      var options = _a.options, observer = _a.observer, subscriptionId = _a.subscriptionId;
      var _b;
      return __awaiter20(this, void 0, void 0, function() {
        var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _c, graphql_headers, _d, additionalHeaders, subscriptionState, data, dataString, headerObj, _e, _f, subscriptionMessage, stringToAWSRealTime, err_2, _g, subscriptionFailedCallback, subscriptionReadyCallback;
        var _h;
        var _this = this;
        return __generator20(this, function(_j) {
          switch (_j.label) {
            case 0:
              appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _c = options.graphql_headers, graphql_headers = _c === void 0 ? function() {
                return {};
              } : _c, _d = options.additionalHeaders, additionalHeaders = _d === void 0 ? {} : _d;
              subscriptionState = SUBSCRIPTION_STATUS.PENDING;
              data = {
                query,
                variables
              };
              this.subscriptionObserverMap.set(subscriptionId, {
                observer,
                query: query !== null && query !== void 0 ? query : "",
                variables: variables !== null && variables !== void 0 ? variables : {},
                subscriptionState,
                startAckTimeoutId: void 0
              });
              dataString = JSON.stringify(data);
              _e = [{}];
              return [4, this._awsRealTimeHeaderBasedAuth({
                apiKey,
                appSyncGraphqlEndpoint,
                authenticationType,
                payload: dataString,
                canonicalUri: "",
                region,
                additionalHeaders
              })];
            case 1:
              _f = [__assign17.apply(void 0, _e.concat([_j.sent()]))];
              return [4, graphql_headers()];
            case 2:
              headerObj = __assign17.apply(void 0, [__assign17.apply(void 0, [__assign17.apply(void 0, _f.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = Constants.userAgent, _h)]);
              subscriptionMessage = {
                id: subscriptionId,
                payload: {
                  data: dataString,
                  extensions: {
                    authorization: __assign17({}, headerObj)
                  }
                },
                type: MESSAGE_TYPES.GQL_START
              };
              stringToAWSRealTime = JSON.stringify(subscriptionMessage);
              _j.label = 3;
            case 3:
              _j.trys.push([3, 5, , 6]);
              this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);
              return [4, this._initializeWebSocketConnection({
                apiKey,
                appSyncGraphqlEndpoint,
                authenticationType,
                region,
                additionalHeaders
              })];
            case 4:
              _j.sent();
              return [3, 6];
            case 5:
              err_2 = _j.sent();
              this._logStartSubscriptionError(subscriptionId, observer, err_2);
              return [
                2
                /*return*/
              ];
            case 6:
              _g = (_b = this.subscriptionObserverMap.get(subscriptionId)) !== null && _b !== void 0 ? _b : {}, subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;
              this.subscriptionObserverMap.set(subscriptionId, {
                observer,
                subscriptionState,
                query: query !== null && query !== void 0 ? query : "",
                variables: variables !== null && variables !== void 0 ? variables : {},
                subscriptionReadyCallback,
                subscriptionFailedCallback,
                startAckTimeoutId: setTimeout(function() {
                  _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);
                }, START_ACK_TIMEOUT)
              });
              if (this.awsRealTimeSocket) {
                this.awsRealTimeSocket.send(stringToAWSRealTime);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._logStartSubscriptionError = function(subscriptionId, observer, err) {
      var _a;
      logger23.debug({ err });
      var message = String((_a = err.message) !== null && _a !== void 0 ? _a : "");
      Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED));
      if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {
        if (isNonRetryableError(err)) {
          observer.error({
            errors: [
              __assign17({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + ": " + message))
            ]
          });
        } else {
          logger23.debug(CONTROL_MSG.CONNECTION_FAILED + ": " + message);
        }
        var subscriptionFailedCallback = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;
        if (typeof subscriptionFailedCallback === "function") {
          subscriptionFailedCallback();
        }
      }
    };
    AWSAppSyncRealTimeProvider2.prototype._waitForSubscriptionToBeConnected = function(subscriptionId) {
      return __awaiter20(this, void 0, void 0, function() {
        var subscriptionObserver, subscriptionState;
        var _this = this;
        return __generator20(this, function(_a) {
          subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);
          if (subscriptionObserver) {
            subscriptionState = subscriptionObserver.subscriptionState;
            if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {
              return [2, new Promise(function(res, rej) {
                var observer = subscriptionObserver.observer, subscriptionState2 = subscriptionObserver.subscriptionState, variables = subscriptionObserver.variables, query = subscriptionObserver.query;
                _this.subscriptionObserverMap.set(subscriptionId, {
                  observer,
                  subscriptionState: subscriptionState2,
                  variables,
                  query,
                  subscriptionReadyCallback: res,
                  subscriptionFailedCallback: rej
                });
              })];
            }
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._sendUnsubscriptionMessage = function(subscriptionId) {
      try {
        if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {
          var unsubscribeMessage = {
            id: subscriptionId,
            type: MESSAGE_TYPES.GQL_STOP
          };
          var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);
          this.awsRealTimeSocket.send(stringToAWSRealTime);
        }
      } catch (err) {
        logger23.debug({ err });
      }
    };
    AWSAppSyncRealTimeProvider2.prototype._removeSubscriptionObserver = function(subscriptionId) {
      this.subscriptionObserverMap.delete(subscriptionId);
      setTimeout(this._closeSocketIfRequired.bind(this), 1e3);
    };
    AWSAppSyncRealTimeProvider2.prototype._closeSocketIfRequired = function() {
      if (this.subscriptionObserverMap.size > 0) {
        return;
      }
      if (!this.awsRealTimeSocket) {
        this.socketStatus = SOCKET_STATUS.CLOSED;
        return;
      }
      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);
      if (this.awsRealTimeSocket.bufferedAmount > 0) {
        setTimeout(this._closeSocketIfRequired.bind(this), 1e3);
      } else {
        logger23.debug("closing WebSocket...");
        if (this.keepAliveTimeoutId) {
          clearTimeout(this.keepAliveTimeoutId);
        }
        if (this.keepAliveAlertTimeoutId) {
          clearTimeout(this.keepAliveAlertTimeoutId);
        }
        var tempSocket = this.awsRealTimeSocket;
        tempSocket.onclose = null;
        tempSocket.onerror = null;
        tempSocket.close(1e3);
        this.awsRealTimeSocket = void 0;
        this.socketStatus = SOCKET_STATUS.CLOSED;
        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
      }
    };
    AWSAppSyncRealTimeProvider2.prototype._handleIncomingSubscriptionMessage = function(message) {
      var _this = this;
      if (typeof message.data !== "string") {
        return;
      }
      logger23.debug("subscription message from AWS AppSync RealTime: " + message.data);
      var _a = JSON.parse(String(message.data)), _b = _a.id, id = _b === void 0 ? "" : _b, payload = _a.payload, type = _a.type;
      var _c = this.subscriptionObserverMap.get(id) || {}, _d = _c.observer, observer = _d === void 0 ? null : _d, _e = _c.query, query = _e === void 0 ? "" : _e, _f = _c.variables, variables = _f === void 0 ? {} : _f, startAckTimeoutId = _c.startAckTimeoutId, subscriptionReadyCallback = _c.subscriptionReadyCallback, subscriptionFailedCallback = _c.subscriptionFailedCallback;
      logger23.debug({ id, observer, query, variables });
      if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {
        if (observer) {
          observer.next(payload);
        } else {
          logger23.debug("observer not found for id: " + id);
        }
        return;
      }
      if (type === MESSAGE_TYPES.GQL_START_ACK) {
        logger23.debug("subscription ready for " + JSON.stringify({ query, variables }));
        if (typeof subscriptionReadyCallback === "function") {
          subscriptionReadyCallback();
        }
        if (startAckTimeoutId)
          clearTimeout(startAckTimeoutId);
        dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, { query, variables }, "Connection established for subscription");
        var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;
        if (observer) {
          this.subscriptionObserverMap.set(id, {
            observer,
            query,
            variables,
            startAckTimeoutId: void 0,
            subscriptionState,
            subscriptionReadyCallback,
            subscriptionFailedCallback
          });
        }
        this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);
        return;
      }
      if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {
        if (this.keepAliveTimeoutId)
          clearTimeout(this.keepAliveTimeoutId);
        if (this.keepAliveAlertTimeoutId)
          clearTimeout(this.keepAliveAlertTimeoutId);
        this.keepAliveTimeoutId = setTimeout(function() {
          return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);
        }, this.keepAliveTimeout);
        this.keepAliveAlertTimeoutId = setTimeout(function() {
          _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);
        }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);
        this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);
        return;
      }
      if (type === MESSAGE_TYPES.GQL_ERROR) {
        var subscriptionState = SUBSCRIPTION_STATUS.FAILED;
        if (observer) {
          this.subscriptionObserverMap.set(id, {
            observer,
            query,
            variables,
            startAckTimeoutId,
            subscriptionReadyCallback,
            subscriptionFailedCallback,
            subscriptionState
          });
          logger23.debug(CONTROL_MSG.CONNECTION_FAILED + ": " + JSON.stringify(payload));
          observer.error({
            errors: [
              __assign17({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + ": " + JSON.stringify(payload)))
            ]
          });
          if (startAckTimeoutId)
            clearTimeout(startAckTimeoutId);
          if (typeof subscriptionFailedCallback === "function") {
            subscriptionFailedCallback();
          }
        }
      }
    };
    AWSAppSyncRealTimeProvider2.prototype._errorDisconnect = function(msg) {
      logger23.debug("Disconnect error: " + msg);
      if (this.awsRealTimeSocket) {
        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
        this.awsRealTimeSocket.close();
      }
      this.socketStatus = SOCKET_STATUS.CLOSED;
    };
    AWSAppSyncRealTimeProvider2.prototype._timeoutStartSubscriptionAck = function(subscriptionId) {
      var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);
      if (subscriptionObserver) {
        var observer = subscriptionObserver.observer, query = subscriptionObserver.query, variables = subscriptionObserver.variables;
        if (!observer) {
          return;
        }
        this.subscriptionObserverMap.set(subscriptionId, {
          observer,
          query,
          variables,
          subscriptionState: SUBSCRIPTION_STATUS.FAILED
        });
        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
        logger23.debug("timeoutStartSubscription", JSON.stringify({ query, variables }));
      }
    };
    AWSAppSyncRealTimeProvider2.prototype._initializeWebSocketConnection = function(_a) {
      var _this = this;
      var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, authenticationType = _a.authenticationType, apiKey = _a.apiKey, region = _a.region, additionalHeaders = _a.additionalHeaders;
      if (this.socketStatus === SOCKET_STATUS.READY) {
        return;
      }
      return new Promise(function(res, rej) {
        return __awaiter20(_this, void 0, void 0, function() {
          var payloadString, authHeader, headerString, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;
          return __generator20(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                this.promiseArray.push({ res, rej });
                if (!(this.socketStatus === SOCKET_STATUS.CLOSED))
                  return [3, 5];
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 4, , 5]);
                this.socketStatus = SOCKET_STATUS.CONNECTING;
                payloadString = "{}";
                return [4, this._awsRealTimeHeaderBasedAuth({
                  authenticationType,
                  payload: payloadString,
                  canonicalUri: "/connect",
                  apiKey,
                  appSyncGraphqlEndpoint,
                  region,
                  additionalHeaders
                })];
              case 2:
                authHeader = _a2.sent();
                headerString = authHeader ? JSON.stringify(authHeader) : "";
                headerQs = import_buffer5.Buffer.from(headerString).toString("base64");
                payloadQs = import_buffer5.Buffer.from(payloadString).toString("base64");
                discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : "";
                if (this.isCustomDomain(discoverableEndpoint)) {
                  discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);
                } else {
                  discoverableEndpoint = discoverableEndpoint.replace("appsync-api", "appsync-realtime-api").replace("gogi-beta", "grt-beta");
                }
                protocol = this.isSSLEnabled ? "wss://" : "ws://";
                discoverableEndpoint = discoverableEndpoint.replace("https://", protocol).replace("http://", protocol);
                awsRealTimeUrl = discoverableEndpoint + "?header=" + headerQs + "&payload=" + payloadQs;
                return [4, this._initializeRetryableHandshake(awsRealTimeUrl)];
              case 3:
                _a2.sent();
                this.promiseArray.forEach(function(_a3) {
                  var res2 = _a3.res;
                  logger23.debug("Notifying connection successful");
                  res2();
                });
                this.socketStatus = SOCKET_STATUS.READY;
                this.promiseArray = [];
                return [3, 5];
              case 4:
                err_3 = _a2.sent();
                logger23.debug("Connection exited with", err_3);
                this.promiseArray.forEach(function(_a3) {
                  var rej2 = _a3.rej;
                  return rej2(err_3);
                });
                this.promiseArray = [];
                if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {
                  this.awsRealTimeSocket.close(3001);
                }
                this.awsRealTimeSocket = void 0;
                this.socketStatus = SOCKET_STATUS.CLOSED;
                return [3, 5];
              case 5:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._initializeRetryableHandshake = function(awsRealTimeUrl) {
      return __awaiter20(this, void 0, void 0, function() {
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger23.debug("Initializaling retryable Handshake");
              return [4, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS3)];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._initializeHandshake = function(awsRealTimeUrl) {
      return __awaiter20(this, void 0, void 0, function() {
        var err_4, _a, errorType, errorCode;
        var _this = this;
        return __generator20(this, function(_b) {
          switch (_b.label) {
            case 0:
              logger23.debug("Initializing handshake " + awsRealTimeUrl);
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4, , 5]);
              return [4, function() {
                return new Promise(function(res, rej) {
                  var newSocket = _this.getNewWebSocket(awsRealTimeUrl, "graphql-ws");
                  newSocket.onerror = function() {
                    logger23.debug("WebSocket connection error");
                  };
                  newSocket.onclose = function() {
                    rej(new Error("Connection handshake error"));
                  };
                  newSocket.onopen = function() {
                    _this.awsRealTimeSocket = newSocket;
                    return res();
                  };
                });
              }()];
            case 2:
              _b.sent();
              return [4, function() {
                return new Promise(function(res, rej) {
                  if (_this.awsRealTimeSocket) {
                    var ackOk_1 = false;
                    _this.awsRealTimeSocket.onerror = function(error) {
                      logger23.debug("WebSocket error " + JSON.stringify(error));
                    };
                    _this.awsRealTimeSocket.onclose = function(event) {
                      logger23.debug("WebSocket closed " + event.reason);
                      rej(new Error(JSON.stringify(event)));
                    };
                    _this.awsRealTimeSocket.onmessage = function(message) {
                      if (typeof message.data !== "string") {
                        return;
                      }
                      logger23.debug("subscription message from AWS AppSyncRealTime: " + message.data + " ");
                      var data = JSON.parse(message.data);
                      var type = data.type, _a2 = data.payload, _b2 = (_a2 === void 0 ? {} : _a2).connectionTimeoutMs, connectionTimeoutMs = _b2 === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b2;
                      if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {
                        ackOk_1 = true;
                        if (_this.awsRealTimeSocket) {
                          _this.keepAliveTimeout = connectionTimeoutMs;
                          _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);
                          _this.awsRealTimeSocket.onerror = function(err) {
                            logger23.debug(err);
                            _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);
                          };
                          _this.awsRealTimeSocket.onclose = function(event) {
                            logger23.debug("WebSocket closed " + event.reason);
                            _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);
                          };
                        }
                        res("Cool, connected to AWS AppSyncRealTime");
                        return;
                      }
                      if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {
                        var _c = data.payload, _d = (_c === void 0 ? {} : _c).errors, _e = __read14(_d === void 0 ? [] : _d, 1), _f = _e[0], _g = _f === void 0 ? {} : _f, _h = _g.errorType, errorType2 = _h === void 0 ? "" : _h, _j = _g.errorCode, errorCode2 = _j === void 0 ? 0 : _j;
                        rej({ errorType: errorType2, errorCode: errorCode2 });
                      }
                    };
                    var gqlInit = {
                      type: MESSAGE_TYPES.GQL_CONNECTION_INIT
                    };
                    _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));
                    var checkAckOk_1 = function(ackOk) {
                      if (!ackOk) {
                        _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);
                        rej(new Error("Connection timeout: ack from AWSAppSyncRealTime was not received after " + CONNECTION_INIT_TIMEOUT + " ms"));
                      }
                    };
                    setTimeout(function() {
                      return checkAckOk_1(ackOk_1);
                    }, CONNECTION_INIT_TIMEOUT);
                  }
                });
              }()];
            case 3:
              _b.sent();
              return [3, 5];
            case 4:
              err_4 = _b.sent();
              _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;
              if (NON_RETRYABLE_CODES.includes(errorCode)) {
                throw new NonRetryableError(errorType);
              } else if (errorType) {
                throw new Error(errorType);
              } else {
                throw err_4;
              }
              return [3, 5];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._awsRealTimeHeaderBasedAuth = function(_a) {
      var authenticationType = _a.authenticationType, payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, apiKey = _a.apiKey, region = _a.region, additionalHeaders = _a.additionalHeaders;
      return __awaiter20(this, void 0, void 0, function() {
        var headerHandler, handler, host, result;
        return __generator20(this, function(_b) {
          switch (_b.label) {
            case 0:
              headerHandler = {
                API_KEY: this._awsRealTimeApiKeyHeader.bind(this),
                AWS_IAM: this._awsRealTimeIAMHeader.bind(this),
                OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),
                AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),
                AWS_LAMBDA: this._customAuthHeader
              };
              if (!(!authenticationType || !headerHandler[authenticationType]))
                return [3, 1];
              logger23.debug("Authentication type " + authenticationType + " not supported");
              return [2, void 0];
            case 1:
              handler = headerHandler[authenticationType];
              host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : "").host;
              logger23.debug("Authenticating with " + authenticationType);
              return [4, handler({
                payload,
                canonicalUri,
                appSyncGraphqlEndpoint,
                apiKey,
                region,
                host,
                additionalHeaders
              })];
            case 2:
              result = _b.sent();
              return [2, result];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._awsRealTimeCUPHeader = function(_a) {
      var host = _a.host;
      return __awaiter20(this, void 0, void 0, function() {
        var session;
        return __generator20(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, Auth.currentSession()];
            case 1:
              session = _b.sent();
              return [2, {
                Authorization: session.getAccessToken().getJwtToken(),
                host
              }];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._awsRealTimeOPENIDHeader = function(_a) {
      var host = _a.host;
      return __awaiter20(this, void 0, void 0, function() {
        var token, federatedInfo, currentUser;
        return __generator20(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, BrowserStorageCache.getItem("federatedInfo")];
            case 1:
              federatedInfo = _b.sent();
              if (!federatedInfo)
                return [3, 2];
              token = federatedInfo.token;
              return [3, 4];
            case 2:
              return [4, Auth.currentAuthenticatedUser()];
            case 3:
              currentUser = _b.sent();
              if (currentUser) {
                token = currentUser.token;
              }
              _b.label = 4;
            case 4:
              if (!token) {
                throw new Error("No federated jwt");
              }
              return [2, {
                Authorization: token,
                host
              }];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._awsRealTimeApiKeyHeader = function(_a) {
      var apiKey = _a.apiKey, host = _a.host;
      return __awaiter20(this, void 0, void 0, function() {
        var dt, dtStr;
        return __generator20(this, function(_b) {
          dt = /* @__PURE__ */ new Date();
          dtStr = dt.toISOString().replace(/[:\-]|\.\d{3}/g, "");
          return [2, {
            host,
            "x-amz-date": dtStr,
            "x-api-key": apiKey
          }];
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._awsRealTimeIAMHeader = function(_a) {
      var payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, region = _a.region;
      return __awaiter20(this, void 0, void 0, function() {
        var endpointInfo, credentialsOK, creds, request, signed_params;
        return __generator20(this, function(_b) {
          switch (_b.label) {
            case 0:
              endpointInfo = {
                region,
                service: "appsync"
              };
              return [4, this._ensureCredentials()];
            case 1:
              credentialsOK = _b.sent();
              if (!credentialsOK) {
                throw new Error("No credentials");
              }
              return [4, Credentials.get().then(function(credentials) {
                var _a2 = credentials, secretAccessKey = _a2.secretAccessKey, accessKeyId = _a2.accessKeyId, sessionToken = _a2.sessionToken;
                return {
                  secret_key: secretAccessKey,
                  access_key: accessKeyId,
                  session_token: sessionToken
                };
              })];
            case 2:
              creds = _b.sent();
              request = {
                url: "" + appSyncGraphqlEndpoint + canonicalUri,
                data: payload,
                method: "POST",
                headers: __assign17({}, AWS_APPSYNC_REALTIME_HEADERS)
              };
              signed_params = Signer.sign(request, creds, endpointInfo);
              return [2, signed_params.headers];
          }
        });
      });
    };
    AWSAppSyncRealTimeProvider2.prototype._customAuthHeader = function(_a) {
      var host = _a.host, additionalHeaders = _a.additionalHeaders;
      if (!additionalHeaders || !additionalHeaders["Authorization"]) {
        throw new Error("No auth token specified");
      }
      return {
        Authorization: additionalHeaders.Authorization,
        host
      };
    };
    AWSAppSyncRealTimeProvider2.prototype._ensureCredentials = function() {
      return Credentials.get().then(function(credentials) {
        if (!credentials)
          return false;
        var cred = Credentials.shear(credentials);
        logger23.debug("set credentials for AWSAppSyncRealTimeProvider", cred);
        return true;
      }).catch(function(err) {
        logger23.warn("ensure credentials error", err);
        return false;
      });
    };
    return AWSAppSyncRealTimeProvider2;
  }(AbstractPubSubProvider)
);

// node_modules/@aws-amplify/pubsub/lib-esm/Providers/MqttOverWSProvider.js
var Paho = __toESM(require_paho_mqtt());
var import_uuid3 = __toESM(require_uuid());
var logger24 = new ConsoleLogger("MqttOverWSProvider");
function mqttTopicMatch(filter, topic) {
  var filterArray = filter.split("/");
  var length = filterArray.length;
  var topicArray = topic.split("/");
  for (var i2 = 0; i2 < length; ++i2) {
    var left = filterArray[i2];
    var right = topicArray[i2];
    if (left === "#")
      return topicArray.length >= length;
    if (left !== "+" && left !== right)
      return false;
  }
  return length === topicArray.length;
}
var ClientsQueue = (
  /** @class */
  function() {
    function ClientsQueue2() {
      this.promises = /* @__PURE__ */ new Map();
    }
    ClientsQueue2.prototype.get = function(clientId, clientFactory) {
      return __awaiter20(this, void 0, void 0, function() {
        var cachedPromise, newPromise;
        var _this = this;
        return __generator20(this, function(_a) {
          cachedPromise = this.promises.get(clientId);
          if (cachedPromise)
            return [2, cachedPromise];
          if (clientFactory) {
            newPromise = clientFactory(clientId);
            this.promises.set(clientId, newPromise);
            newPromise.catch(function() {
              return _this.promises.delete(clientId);
            });
            return [2, newPromise];
          }
          return [2, void 0];
        });
      });
    };
    Object.defineProperty(ClientsQueue2.prototype, "allClients", {
      get: function() {
        return Array.from(this.promises.keys());
      },
      enumerable: true,
      configurable: true
    });
    ClientsQueue2.prototype.remove = function(clientId) {
      this.promises.delete(clientId);
    };
    return ClientsQueue2;
  }()
);
var dispatchPubSubEvent = function(event, data, message) {
  Hub.dispatch("pubsub", { event, data, message }, "PubSub", AMPLIFY_SYMBOL5);
};
var topicSymbol = typeof Symbol !== "undefined" ? Symbol("topic") : "@@topic";
var MqttOverWSProvider = (
  /** @class */
  function(_super) {
    __extends7(MqttOverWSProvider2, _super);
    function MqttOverWSProvider2(options) {
      if (options === void 0) {
        options = {};
      }
      var _this = _super.call(this, __assign17(__assign17({}, options), { clientId: options.clientId || (0, import_uuid3.v4)() })) || this;
      _this._clientsQueue = new ClientsQueue();
      _this.connectionStateMonitor = new ConnectionStateMonitor();
      _this.reconnectionMonitor = new ReconnectionMonitor();
      _this._topicObservers = /* @__PURE__ */ new Map();
      _this._clientIdObservers = /* @__PURE__ */ new Map();
      _this.connectionStateMonitor.connectionStateObservable.subscribe(function(connectionStateChange) {
        dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {
          provider: _this,
          connectionState: connectionStateChange
        }, "Connection state is " + connectionStateChange);
        _this.connectionState = connectionStateChange;
        if (connectionStateChange === ConnectionState.ConnectionDisrupted) {
          _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);
        } else if (connectionStateChange !== ConnectionState.Connecting) {
          _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);
        }
      });
      return _this;
    }
    Object.defineProperty(MqttOverWSProvider2.prototype, "clientId", {
      get: function() {
        return this.options.clientId;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MqttOverWSProvider2.prototype, "endpoint", {
      get: function() {
        return Promise.resolve(this.options.aws_pubsub_endpoint);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MqttOverWSProvider2.prototype, "clientsQueue", {
      get: function() {
        return this._clientsQueue;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MqttOverWSProvider2.prototype, "isSSLEnabled", {
      get: function() {
        return !this.options["aws_appsync_dangerously_connect_to_http_endpoint_for_testing"];
      },
      enumerable: true,
      configurable: true
    });
    MqttOverWSProvider2.prototype.getProviderName = function() {
      return "MqttOverWSProvider";
    };
    MqttOverWSProvider2.prototype.onDisconnect = function(_a) {
      var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest7(_a, ["clientId", "errorCode"]);
      if (errorCode !== 0) {
        logger24.warn(clientId, JSON.stringify(__assign17({ errorCode }, args), null, 2));
        if (!clientId) {
          return;
        }
        var clientIdObservers = this._clientIdObservers.get(clientId);
        if (!clientIdObservers) {
          return;
        }
        this.disconnect(clientId);
      }
    };
    MqttOverWSProvider2.prototype.newClient = function(_a) {
      var url2 = _a.url, clientId = _a.clientId;
      return __awaiter20(this, void 0, void 0, function() {
        var client, connected;
        var _this = this;
        return __generator20(this, function(_b) {
          switch (_b.label) {
            case 0:
              logger24.debug("Creating new MQTT client", clientId);
              this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);
              client = new Paho.Client(url2, clientId);
              client.onMessageArrived = function(_a2) {
                var topic = _a2.destinationName, msg = _a2.payloadString;
                _this._onMessage(topic, msg);
              };
              client.onConnectionLost = function(_a2) {
                var errorCode = _a2.errorCode, args = __rest7(_a2, ["errorCode"]);
                _this.onDisconnect(__assign17({ clientId, errorCode }, args));
                _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
              };
              return [4, new Promise(function(resolve4, reject) {
                client.connect({
                  useSSL: _this.isSSLEnabled,
                  mqttVersion: 3,
                  onSuccess: function() {
                    return resolve4(true);
                  },
                  onFailure: function() {
                    if (clientId)
                      _this._clientsQueue.remove(clientId);
                    _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
                    resolve4(false);
                  }
                });
              })];
            case 1:
              connected = _b.sent();
              if (connected) {
                this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);
              }
              return [2, client];
          }
        });
      });
    };
    MqttOverWSProvider2.prototype.connect = function(clientId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter20(this, void 0, void 0, function() {
        var _this = this;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.clientsQueue.get(clientId, function(clientId2) {
                return __awaiter20(_this, void 0, void 0, function() {
                  var client;
                  return __generator20(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        return [4, this.newClient(__assign17(__assign17({}, options), { clientId: clientId2 }))];
                      case 1:
                        client = _a2.sent();
                        if (client) {
                          this._topicObservers.forEach(function(_value, key) {
                            client.subscribe(key);
                          });
                        }
                        return [2, client];
                    }
                  });
                });
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    MqttOverWSProvider2.prototype.disconnect = function(clientId) {
      return __awaiter20(this, void 0, void 0, function() {
        var client;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.clientsQueue.get(clientId)];
            case 1:
              client = _a.sent();
              if (client && client.isConnected()) {
                client.disconnect();
              }
              this.clientsQueue.remove(clientId);
              this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MqttOverWSProvider2.prototype.publish = function(topics, msg) {
      return __awaiter20(this, void 0, void 0, function() {
        var targetTopics, message, client;
        return __generator20(this, function(_a) {
          switch (_a.label) {
            case 0:
              targetTopics = [].concat(topics);
              message = JSON.stringify(msg);
              return [4, this.clientsQueue.get(this.clientId)];
            case 1:
              client = _a.sent();
              if (client) {
                logger24.debug("Publishing to topic(s)", targetTopics.join(","), message);
                targetTopics.forEach(function(topic) {
                  return client.send(topic, message);
                });
              } else {
                logger24.debug("Publishing to topic(s) failed", targetTopics.join(","), message);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MqttOverWSProvider2.prototype._onMessage = function(topic, msg) {
      try {
        var matchedTopicObservers_1 = [];
        this._topicObservers.forEach(function(observerForTopic, observerTopic) {
          if (mqttTopicMatch(observerTopic, topic)) {
            matchedTopicObservers_1.push(observerForTopic);
          }
        });
        var parsedMessage_1 = JSON.parse(msg);
        if (typeof parsedMessage_1 === "object") {
          parsedMessage_1[topicSymbol] = topic;
        }
        matchedTopicObservers_1.forEach(function(observersForTopic) {
          observersForTopic.forEach(function(observer) {
            return observer.next(parsedMessage_1);
          });
        });
      } catch (error) {
        logger24.warn("Error handling message", error, msg);
      }
    };
    MqttOverWSProvider2.prototype.subscribe = function(topics, options) {
      var _this = this;
      if (options === void 0) {
        options = {};
      }
      var targetTopics = [].concat(topics);
      logger24.debug("Subscribing to topic(s)", targetTopics.join(","));
      var reconnectSubscription;
      return new bundle_esm_default(function(observer) {
        targetTopics.forEach(function(topic) {
          var observersForTopic = _this._topicObservers.get(topic);
          if (!observersForTopic) {
            observersForTopic = /* @__PURE__ */ new Set();
            _this._topicObservers.set(topic, observersForTopic);
          }
          observersForTopic.add(observer);
        });
        var _a = options.clientId, clientId = _a === void 0 ? _this.clientId : _a;
        var observersForClientId = _this._clientIdObservers.get(clientId);
        if (!observersForClientId) {
          observersForClientId = /* @__PURE__ */ new Set();
        }
        if (observersForClientId) {
          observersForClientId.add(observer);
          _this._clientIdObservers.set(clientId, observersForClientId);
        }
        (function() {
          return __awaiter20(_this, void 0, void 0, function() {
            var getClient;
            var _this2 = this;
            return __generator20(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  getClient = function() {
                    return __awaiter20(_this2, void 0, void 0, function() {
                      var _a3, url2, _b, client_1, e_1;
                      return __generator20(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            _c.trys.push([0, 5, , 6]);
                            _a3 = options.url;
                            if (!(_a3 === void 0))
                              return [3, 2];
                            return [4, this.endpoint];
                          case 1:
                            _b = _c.sent();
                            return [3, 3];
                          case 2:
                            _b = _a3;
                            _c.label = 3;
                          case 3:
                            url2 = _b;
                            return [4, this.connect(clientId, { url: url2 })];
                          case 4:
                            client_1 = _c.sent();
                            if (client_1 !== void 0) {
                              targetTopics.forEach(function(topic) {
                                client_1.subscribe(topic);
                              });
                            }
                            return [3, 6];
                          case 5:
                            e_1 = _c.sent();
                            logger24.debug("Error forming connection", e_1);
                            return [3, 6];
                          case 6:
                            return [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  };
                  return [4, getClient()];
                case 1:
                  _a2.sent();
                  reconnectSubscription = new bundle_esm_default(function(observer2) {
                    _this2.reconnectionMonitor.addObserver(observer2);
                  }).subscribe(function() {
                    getClient();
                  });
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        })();
        return function() {
          return __awaiter20(_this, void 0, void 0, function() {
            var client;
            var _this2 = this;
            var _a2, _b;
            return __generator20(this, function(_c) {
              switch (_c.label) {
                case 0:
                  return [4, this.clientsQueue.get(clientId)];
                case 1:
                  client = _c.sent();
                  reconnectSubscription === null || reconnectSubscription === void 0 ? void 0 : reconnectSubscription.unsubscribe();
                  if (client) {
                    (_a2 = this._clientIdObservers.get(clientId)) === null || _a2 === void 0 ? void 0 : _a2.delete(observer);
                    if (((_b = this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {
                      this.disconnect(clientId);
                      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);
                      this._clientIdObservers.delete(clientId);
                    }
                    targetTopics.forEach(function(topic) {
                      var observersForTopic = _this2._topicObservers.get(topic) || /* @__PURE__ */ new Set();
                      observersForTopic.delete(observer);
                      if (observersForTopic.size === 0) {
                        _this2._topicObservers.delete(topic);
                        if (client.isConnected()) {
                          client.unsubscribe(topic);
                        }
                      }
                    });
                  }
                  return [2, null];
              }
            });
          });
        };
      });
    };
    return MqttOverWSProvider2;
  }(AbstractPubSubProvider)
);

// node_modules/@aws-amplify/pubsub/lib-esm/Providers/AWSIotProvider.js
var SERVICE_NAME = "iotdevicegateway";
var AWSIoTProvider = (
  /** @class */
  function(_super) {
    __extends7(AWSIoTProvider2, _super);
    function AWSIoTProvider2(options) {
      if (options === void 0) {
        options = {};
      }
      return _super.call(this, options) || this;
    }
    Object.defineProperty(AWSIoTProvider2.prototype, "region", {
      get: function() {
        return this.options["aws_pubsub_region"];
      },
      enumerable: true,
      configurable: true
    });
    AWSIoTProvider2.prototype.getProviderName = function() {
      return "AWSIoTProvider";
    };
    Object.defineProperty(AWSIoTProvider2.prototype, "endpoint", {
      get: function() {
        var _this = this;
        return function() {
          return __awaiter20(_this, void 0, void 0, function() {
            var endpoint, serviceInfo, _a, access_key, secret_key, session_token, result;
            return __generator20(this, function(_b) {
              switch (_b.label) {
                case 0:
                  endpoint = this.options.aws_pubsub_endpoint;
                  serviceInfo = {
                    service: SERVICE_NAME,
                    region: this.region
                  };
                  return [4, Credentials.get()];
                case 1:
                  _a = _b.sent(), access_key = _a.accessKeyId, secret_key = _a.secretAccessKey, session_token = _a.sessionToken;
                  result = Signer.signUrl(endpoint, { access_key, secret_key, session_token }, serviceInfo);
                  return [2, result];
              }
            });
          });
        }();
      },
      enumerable: true,
      configurable: true
    });
    return AWSIoTProvider2;
  }(MqttOverWSProvider)
);

// node_modules/@aws-amplify/pubsub/lib-esm/PubSub.js
var isNode2 = browserOrNode().isNode;
var logger25 = new ConsoleLogger("PubSub");
var PubSubClass = (
  /** @class */
  function() {
    function PubSubClass2(options) {
      this._options = options !== null && options !== void 0 ? options : {};
      logger25.debug("PubSub Options", this._options);
      this._pluggables = [];
      this.subscribe = this.subscribe.bind(this);
    }
    Object.defineProperty(PubSubClass2.prototype, "awsAppSyncRealTimeProvider", {
      /**
       * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category
       */
      get: function() {
        if (!this._awsAppSyncRealTimeProvider) {
          this._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(this._options);
        }
        return this._awsAppSyncRealTimeProvider;
      },
      enumerable: true,
      configurable: true
    });
    PubSubClass2.prototype.getModuleName = function() {
      return "PubSub";
    };
    PubSubClass2.prototype.configure = function(options) {
      var _this = this;
      var opt = options ? options.PubSub || options : {};
      logger25.debug("configure PubSub", { opt });
      this._options = Object.assign({}, this._options, opt);
      this._pluggables.map(function(pluggable) {
        return pluggable.configure(_this._options);
      });
      return this._options;
    };
    PubSubClass2.prototype.addPluggable = function(pluggable) {
      return __awaiter20(this, void 0, void 0, function() {
        var config;
        return __generator20(this, function(_a) {
          if (pluggable && pluggable.getCategory() === "PubSub") {
            this._pluggables.push(pluggable);
            config = pluggable.configure(this._options);
            return [2, config];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    PubSubClass2.prototype.removePluggable = function(providerName) {
      this._pluggables = this._pluggables.filter(function(pluggable) {
        return pluggable.getProviderName() !== providerName;
      });
    };
    PubSubClass2.prototype.getProviderByName = function(providerName) {
      if (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {
        return this.awsAppSyncRealTimeProvider;
      }
      return this._pluggables.find(function(pluggable) {
        return pluggable.getProviderName() === providerName;
      });
    };
    PubSubClass2.prototype.getProviders = function(options) {
      if (options === void 0) {
        options = {};
      }
      var providerName = options.provider;
      if (!providerName) {
        return this._pluggables;
      }
      var provider = this.getProviderByName(providerName);
      if (!provider) {
        throw new Error("Could not find provider named " + String(providerName));
      }
      return [provider];
    };
    PubSubClass2.prototype.publish = function(topics, msg, options) {
      return __awaiter20(this, void 0, void 0, function() {
        return __generator20(this, function(_a) {
          return [2, Promise.all(this.getProviders(options).map(function(provider) {
            return provider.publish(topics, msg, options);
          }))];
        });
      });
    };
    PubSubClass2.prototype.subscribe = function(topics, options) {
      if (isNode2 && this._options && this._options.ssr) {
        throw new Error("Subscriptions are not supported for Server-Side Rendering (SSR)");
      }
      logger25.debug("subscribe options", options);
      var providers = this.getProviders(options);
      return new bundle_esm_default(function(observer) {
        var observables = providers.map(function(provider) {
          return {
            provider,
            observable: provider.subscribe(topics, options)
          };
        });
        var subscriptions = observables.map(function(_a) {
          var provider = _a.provider, observable = _a.observable;
          return observable.subscribe({
            start: console.error,
            next: function(value) {
              return observer.next({ provider, value });
            },
            error: function(error) {
              return observer.error({ provider, error });
            }
          });
        });
        return function() {
          return subscriptions.forEach(function(subscription) {
            return subscription.unsubscribe();
          });
        };
      });
    };
    return PubSubClass2;
  }()
);
var PubSub = new PubSubClass();
Amplify.register(PubSub);

// node_modules/@aws-amplify/api-graphql/lib-esm/types/index.js
var GraphQLAuthError;
(function(GraphQLAuthError2) {
  GraphQLAuthError2["NO_API_KEY"] = "No api-key configured";
  GraphQLAuthError2["NO_CURRENT_USER"] = "No current user";
  GraphQLAuthError2["NO_CREDENTIALS"] = "No credentials";
  GraphQLAuthError2["NO_FEDERATED_JWT"] = "No federated jwt";
  GraphQLAuthError2["NO_AUTH_TOKEN"] = "No auth token specified";
})(GraphQLAuthError || (GraphQLAuthError = {}));

// node_modules/@aws-amplify/api-graphql/lib-esm/GraphQLAPI.js
var USER_AGENT_HEADER2 = "x-amz-user-agent";
var logger26 = new ConsoleLogger("GraphQLAPI");
var graphqlOperation = function(query, variables, authToken, userAgentSuffix) {
  if (variables === void 0) {
    variables = {};
  }
  return {
    query,
    variables,
    authToken,
    userAgentSuffix
  };
};
var GraphQLAPIClass = (
  /** @class */
  function() {
    function GraphQLAPIClass2(options) {
      this._api = null;
      this.Auth = Auth;
      this.Cache = BrowserStorageCache;
      this.Credentials = Credentials;
      this._options = options;
      logger26.debug("API Options", this._options);
    }
    GraphQLAPIClass2.prototype.getModuleName = function() {
      return "GraphQLAPI";
    };
    GraphQLAPIClass2.prototype.configure = function(options) {
      var _a = options || {}, _b = _a.API, API2 = _b === void 0 ? {} : _b, otherOptions = __rest6(_a, ["API"]);
      var opt = __assign16(__assign16({}, otherOptions), API2);
      logger26.debug("configure GraphQL API", { opt });
      if (opt["aws_project_region"]) {
        opt = Object.assign({}, opt, {
          region: opt["aws_project_region"],
          header: {}
        });
      }
      if (typeof opt.graphql_headers !== "undefined" && typeof opt.graphql_headers !== "function") {
        logger26.warn("graphql_headers should be a function");
        opt.graphql_headers = void 0;
      }
      this._options = Object.assign({}, this._options, opt);
      this.createInstance();
      return this._options;
    };
    GraphQLAPIClass2.prototype.createInstance = function() {
      logger26.debug("create Rest instance");
      if (this._options) {
        this._api = new RestClient(this._options);
        this._api.Credentials = this.Credentials;
        return true;
      } else {
        return Promise.reject("API not configured");
      }
    };
    GraphQLAPIClass2.prototype._headerBasedAuth = function(defaultAuthenticationType, additionalHeaders) {
      if (additionalHeaders === void 0) {
        additionalHeaders = {};
      }
      return __awaiter19(this, void 0, void 0, function() {
        var _a, aws_appsync_authenticationType, apiKey, authenticationType, headers, _b, credentialsOK, token, federatedInfo, currentUser, e_1, session, e_2;
        return __generator19(this, function(_c) {
          switch (_c.label) {
            case 0:
              _a = this._options, aws_appsync_authenticationType = _a.aws_appsync_authenticationType, apiKey = _a.aws_appsync_apiKey;
              authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || "AWS_IAM";
              headers = {};
              _b = authenticationType;
              switch (_b) {
                case "API_KEY":
                  return [3, 1];
                case "AWS_IAM":
                  return [3, 2];
                case "OPENID_CONNECT":
                  return [3, 4];
                case "AMAZON_COGNITO_USER_POOLS":
                  return [3, 11];
                case "AWS_LAMBDA":
                  return [3, 15];
              }
              return [3, 16];
            case 1:
              if (!apiKey) {
                throw new Error(GraphQLAuthError.NO_API_KEY);
              }
              headers = {
                Authorization: null,
                "X-Api-Key": apiKey
              };
              return [3, 17];
            case 2:
              return [4, this._ensureCredentials()];
            case 3:
              credentialsOK = _c.sent();
              if (!credentialsOK) {
                throw new Error(GraphQLAuthError.NO_CREDENTIALS);
              }
              return [3, 17];
            case 4:
              _c.trys.push([4, 9, , 10]);
              token = void 0;
              return [4, BrowserStorageCache.getItem("federatedInfo")];
            case 5:
              federatedInfo = _c.sent();
              if (!federatedInfo)
                return [3, 6];
              token = federatedInfo.token;
              return [3, 8];
            case 6:
              return [4, Auth.currentAuthenticatedUser()];
            case 7:
              currentUser = _c.sent();
              if (currentUser) {
                token = currentUser.token;
              }
              _c.label = 8;
            case 8:
              if (!token) {
                throw new Error(GraphQLAuthError.NO_FEDERATED_JWT);
              }
              headers = {
                Authorization: token
              };
              return [3, 10];
            case 9:
              e_1 = _c.sent();
              throw new Error(GraphQLAuthError.NO_CURRENT_USER);
            case 10:
              return [3, 17];
            case 11:
              _c.trys.push([11, 13, , 14]);
              return [4, this.Auth.currentSession()];
            case 12:
              session = _c.sent();
              headers = {
                Authorization: session.getAccessToken().getJwtToken()
              };
              return [3, 14];
            case 13:
              e_2 = _c.sent();
              throw new Error(GraphQLAuthError.NO_CURRENT_USER);
            case 14:
              return [3, 17];
            case 15:
              if (!additionalHeaders.Authorization) {
                throw new Error(GraphQLAuthError.NO_AUTH_TOKEN);
              }
              headers = {
                Authorization: additionalHeaders.Authorization
              };
              return [3, 17];
            case 16:
              headers = {
                Authorization: null
              };
              return [3, 17];
            case 17:
              return [2, headers];
          }
        });
      });
    };
    GraphQLAPIClass2.prototype.getGraphqlOperationType = function(operation) {
      var doc = parse7(operation);
      var definitions = doc.definitions;
      var _a = __read13(definitions, 1), operationType = _a[0].operation;
      return operationType;
    };
    GraphQLAPIClass2.prototype.graphql = function(_a, additionalHeaders) {
      var paramQuery = _a.query, _b = _a.variables, variables = _b === void 0 ? {} : _b, authMode = _a.authMode, authToken = _a.authToken, userAgentSuffix = _a.userAgentSuffix;
      var query = typeof paramQuery === "string" ? parse7(paramQuery) : parse7(print(paramQuery));
      var _c = __read13(query.definitions.filter(function(def) {
        return def.kind === "OperationDefinition";
      }), 1), _d = _c[0], operationDef = _d === void 0 ? {} : _d;
      var operationType = operationDef.operation;
      var headers = additionalHeaders || {};
      if (authToken) {
        headers.Authorization = authToken;
      }
      switch (operationType) {
        case "query":
        case "mutation":
          this.createInstanceIfNotCreated();
          var cancellableToken = this._api.getCancellableToken();
          var initParams = {
            cancellableToken,
            withCredentials: this._options.withCredentials
          };
          var responsePromise = this._graphql({ query, variables, authMode, userAgentSuffix }, headers, initParams);
          this._api.updateRequestToBeCancellable(responsePromise, cancellableToken);
          return responsePromise;
        case "subscription":
          return this._graphqlSubscribe({ query, variables, authMode }, headers);
        default:
          throw new Error("invalid operation type: " + operationType);
      }
    };
    GraphQLAPIClass2.prototype._graphql = function(_a, additionalHeaders, initParams) {
      var query = _a.query, variables = _a.variables, authMode = _a.authMode, userAgentSuffix = _a.userAgentSuffix;
      if (additionalHeaders === void 0) {
        additionalHeaders = {};
      }
      if (initParams === void 0) {
        initParams = {};
      }
      return __awaiter19(this, void 0, void 0, function() {
        var _b, region, appSyncGraphqlEndpoint, _c, graphql_headers, customGraphqlEndpoint, customEndpointRegion, headers, _d, _e, _f, _g, _h, _j, body, init, endpoint, error, response, err_1, errors;
        var _k;
        return __generator19(this, function(_l) {
          switch (_l.label) {
            case 0:
              this.createInstanceIfNotCreated();
              _b = this._options, region = _b.aws_appsync_region, appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint, _c = _b.graphql_headers, graphql_headers = _c === void 0 ? function() {
                return {};
              } : _c, customGraphqlEndpoint = _b.graphql_endpoint, customEndpointRegion = _b.graphql_endpoint_iam_region;
              _d = [{}];
              _e = !customGraphqlEndpoint;
              if (!_e)
                return [3, 2];
              return [4, this._headerBasedAuth(authMode, additionalHeaders)];
            case 1:
              _e = _l.sent();
              _l.label = 2;
            case 2:
              _f = [__assign16.apply(void 0, _d.concat([_e]))];
              _g = customGraphqlEndpoint;
              if (!_g)
                return [3, 6];
              if (!customEndpointRegion)
                return [3, 4];
              return [4, this._headerBasedAuth(authMode, additionalHeaders)];
            case 3:
              _h = _l.sent();
              return [3, 5];
            case 4:
              _h = { Authorization: null };
              _l.label = 5;
            case 5:
              _g = _h;
              _l.label = 6;
            case 6:
              _j = [__assign16.apply(void 0, _f.concat([_g]))];
              return [4, graphql_headers({ query, variables })];
            case 7:
              headers = __assign16.apply(void 0, [__assign16.apply(void 0, [__assign16.apply(void 0, _j.concat([_l.sent()])), additionalHeaders]), !customGraphqlEndpoint && (_k = {}, _k[USER_AGENT_HEADER2] = getAmplifyUserAgent(userAgentSuffix), _k)]);
              body = {
                query: print(query),
                variables
              };
              init = Object.assign({
                headers,
                body,
                signerServiceInfo: {
                  service: !customGraphqlEndpoint ? "appsync" : "execute-api",
                  region: !customGraphqlEndpoint ? region : customEndpointRegion
                }
              }, initParams);
              endpoint = customGraphqlEndpoint || appSyncGraphqlEndpoint;
              if (!endpoint) {
                error = new GraphQLError("No graphql endpoint provided.");
                throw {
                  data: {},
                  errors: [error]
                };
              }
              _l.label = 8;
            case 8:
              _l.trys.push([8, 10, , 11]);
              return [4, this._api.post(endpoint, init)];
            case 9:
              response = _l.sent();
              return [3, 11];
            case 10:
              err_1 = _l.sent();
              if (this._api.isCancel(err_1)) {
                throw err_1;
              }
              response = {
                data: {},
                errors: [new GraphQLError(err_1.message, null, null, null, null, err_1)]
              };
              return [3, 11];
            case 11:
              errors = response.errors;
              if (errors && errors.length) {
                throw response;
              }
              return [2, response];
          }
        });
      });
    };
    GraphQLAPIClass2.prototype.createInstanceIfNotCreated = function() {
      return __awaiter19(this, void 0, void 0, function() {
        return __generator19(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this._api)
                return [3, 2];
              return [4, this.createInstance()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    GraphQLAPIClass2.prototype.isCancel = function(error) {
      return this._api.isCancel(error);
    };
    GraphQLAPIClass2.prototype.cancel = function(request, message) {
      return this._api.cancel(request, message);
    };
    GraphQLAPIClass2.prototype.hasCancelToken = function(request) {
      return this._api.hasCancelToken(request);
    };
    GraphQLAPIClass2.prototype._graphqlSubscribe = function(_a, additionalHeaders) {
      var query = _a.query, variables = _a.variables, defaultAuthenticationType = _a.authMode, authToken = _a.authToken;
      if (additionalHeaders === void 0) {
        additionalHeaders = {};
      }
      var _b = this._options, region = _b.aws_appsync_region, appSyncGraphqlEndpoint = _b.aws_appsync_graphqlEndpoint, aws_appsync_authenticationType = _b.aws_appsync_authenticationType, apiKey = _b.aws_appsync_apiKey, _c = _b.graphql_headers, graphql_headers = _c === void 0 ? function() {
        return {};
      } : _c;
      var authenticationType = defaultAuthenticationType || aws_appsync_authenticationType || "AWS_IAM";
      if (PubSub && typeof PubSub.subscribe === "function") {
        return PubSub.subscribe("", {
          provider: INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,
          appSyncGraphqlEndpoint,
          authenticationType,
          apiKey,
          query: print(query),
          region,
          variables,
          graphql_headers,
          additionalHeaders,
          authToken
        });
      } else {
        logger26.debug("No pubsub module applied for subscription");
        throw new Error("No pubsub module applied for subscription");
      }
    };
    GraphQLAPIClass2.prototype._ensureCredentials = function() {
      var _this = this;
      return this.Credentials.get().then(function(credentials) {
        if (!credentials)
          return false;
        var cred = _this.Credentials.shear(credentials);
        logger26.debug("set credentials for api", cred);
        return true;
      }).catch(function(err) {
        logger26.warn("ensure credentials error", err);
        return false;
      });
    };
    return GraphQLAPIClass2;
  }()
);
var GraphQLAPI = new GraphQLAPIClass(null);
Amplify.register(GraphQLAPI);

// node_modules/@aws-amplify/api/lib-esm/API.js
var logger27 = new ConsoleLogger("API");
var APIClass = (
  /** @class */
  function() {
    function APIClass2(options) {
      this.Auth = Auth;
      this.Cache = BrowserStorageCache;
      this.Credentials = Credentials;
      this._options = options;
      this._restApi = new RestAPIClass(options);
      this._graphqlApi = new GraphQLAPIClass(options);
      logger27.debug("API Options", this._options);
    }
    APIClass2.prototype.getModuleName = function() {
      return "API";
    };
    APIClass2.prototype.configure = function(options) {
      this._options = Object.assign({}, this._options, options);
      this._restApi.Credentials = this.Credentials;
      this._graphqlApi.Auth = this.Auth;
      this._graphqlApi.Cache = this.Cache;
      this._graphqlApi.Credentials = this.Credentials;
      var restAPIConfig = this._restApi.configure(this._options);
      var graphQLAPIConfig = this._graphqlApi.configure(this._options);
      return __assign2(__assign2({}, restAPIConfig), graphQLAPIConfig);
    };
    APIClass2.prototype.get = function(apiName, path, init) {
      return this._restApi.get(apiName, path, init);
    };
    APIClass2.prototype.post = function(apiName, path, init) {
      return this._restApi.post(apiName, path, init);
    };
    APIClass2.prototype.put = function(apiName, path, init) {
      return this._restApi.put(apiName, path, init);
    };
    APIClass2.prototype.patch = function(apiName, path, init) {
      return this._restApi.patch(apiName, path, init);
    };
    APIClass2.prototype.del = function(apiName, path, init) {
      return this._restApi.del(apiName, path, init);
    };
    APIClass2.prototype.head = function(apiName, path, init) {
      return this._restApi.head(apiName, path, init);
    };
    APIClass2.prototype.isCancel = function(error) {
      return this._restApi.isCancel(error);
    };
    APIClass2.prototype.cancel = function(request, message) {
      if (this._restApi.hasCancelToken(request)) {
        return this._restApi.cancel(request, message);
      } else if (this._graphqlApi.hasCancelToken(request)) {
        return this._graphqlApi.cancel(request, message);
      }
      return false;
    };
    APIClass2.prototype.endpoint = function(apiName) {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          return [2, this._restApi.endpoint(apiName)];
        });
      });
    };
    APIClass2.prototype.getGraphqlOperationType = function(operation) {
      return this._graphqlApi.getGraphqlOperationType(operation);
    };
    APIClass2.prototype.graphql = function(options, additionalHeaders) {
      return this._graphqlApi.graphql(options, additionalHeaders);
    };
    return APIClass2;
  }()
);
var API = new APIClass(null);
Amplify.register(API);

// node_modules/immer/dist/immer.esm.js
function n(n2) {
  for (var t2 = arguments.length, r2 = Array(t2 > 1 ? t2 - 1 : 0), e = 1; e < t2; e++)
    r2[e - 1] = arguments[e];
  if (true) {
    var i2 = Y[n2], o2 = i2 ? "function" == typeof i2 ? i2.apply(null, r2) : i2 : "unknown error nr: " + n2;
    throw Error("[Immer] " + o2);
  }
  throw Error("[Immer] minified error nr: " + n2 + (r2.length ? " " + r2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function t(n2) {
  return !!n2 && !!n2[Q];
}
function r(n2) {
  return !!n2 && (function(n3) {
    if (!n3 || "object" != typeof n3)
      return false;
    var t2 = Object.getPrototypeOf(n3);
    if (null === t2)
      return true;
    var r2 = Object.hasOwnProperty.call(t2, "constructor") && t2.constructor;
    return r2 === Object || "function" == typeof r2 && Function.toString.call(r2) === Z;
  }(n2) || Array.isArray(n2) || !!n2[L] || !!n2.constructor[L] || s(n2) || v(n2));
}
function i(n2, t2, r2) {
  void 0 === r2 && (r2 = false), 0 === o(n2) ? (r2 ? Object.keys : nn)(n2).forEach(function(e) {
    r2 && "symbol" == typeof e || t2(e, n2[e], n2);
  }) : n2.forEach(function(r3, e) {
    return t2(e, r3, n2);
  });
}
function o(n2) {
  var t2 = n2[Q];
  return t2 ? t2.i > 3 ? t2.i - 4 : t2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
}
function u(n2, t2) {
  return 2 === o(n2) ? n2.has(t2) : Object.prototype.hasOwnProperty.call(n2, t2);
}
function a(n2, t2) {
  return 2 === o(n2) ? n2.get(t2) : n2[t2];
}
function f(n2, t2, r2) {
  var e = o(n2);
  2 === e ? n2.set(t2, r2) : 3 === e ? (n2.delete(t2), n2.add(r2)) : n2[t2] = r2;
}
function c(n2, t2) {
  return n2 === t2 ? 0 !== n2 || 1 / n2 == 1 / t2 : n2 != n2 && t2 != t2;
}
function s(n2) {
  return X && n2 instanceof Map;
}
function v(n2) {
  return q && n2 instanceof Set;
}
function p(n2) {
  return n2.o || n2.t;
}
function l(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var t2 = tn(n2);
  delete t2[Q];
  for (var r2 = nn(t2), e = 0; e < r2.length; e++) {
    var i2 = r2[e], o2 = t2[i2];
    false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (t2[i2] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i2] });
  }
  return Object.create(Object.getPrototypeOf(n2), t2);
}
function d(n2, e) {
  return void 0 === e && (e = false), y(n2) || t(n2) || !r(n2) ? n2 : (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e && i(n2, function(n3, t2) {
    return d(t2, true);
  }, true), n2);
}
function h() {
  n(2);
}
function y(n2) {
  return null == n2 || "object" != typeof n2 || Object.isFrozen(n2);
}
function b(t2) {
  var r2 = rn[t2];
  return r2 || n(18, t2), r2;
}
function m(n2, t2) {
  rn[n2] || (rn[n2] = t2);
}
function _() {
  return U || n(0), U;
}
function j(n2, t2) {
  t2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = t2);
}
function O(n2) {
  g(n2), n2.p.forEach(S), n2.p = null;
}
function g(n2) {
  n2 === U && (U = n2.l);
}
function w(n2) {
  return U = { p: [], l: U, h: n2, m: true, _: 0 };
}
function S(n2) {
  var t2 = n2[Q];
  0 === t2.i || 1 === t2.i ? t2.j() : t2.O = true;
}
function P(t2, e) {
  e._ = e.p.length;
  var i2 = e.p[0], o2 = void 0 !== t2 && t2 !== i2;
  return e.h.g || b("ES5").S(e, t2, o2), o2 ? (i2[Q].P && (O(e), n(4)), r(t2) && (t2 = M(e, t2), e.l || x(e, t2)), e.u && b("Patches").M(i2[Q], t2, e.u, e.s)) : t2 = M(e, i2, []), O(e), e.u && e.v(e.u, e.s), t2 !== H ? t2 : void 0;
}
function M(n2, t2, r2) {
  if (y(t2))
    return t2;
  var e = t2[Q];
  if (!e)
    return i(t2, function(i2, o3) {
      return A(n2, e, t2, i2, o3, r2);
    }, true), t2;
  if (e.A !== n2)
    return t2;
  if (!e.P)
    return x(n2, e.t, true), e.t;
  if (!e.I) {
    e.I = true, e.A._--;
    var o2 = 4 === e.i || 5 === e.i ? e.o = l(e.k) : e.o;
    i(3 === e.i ? new Set(o2) : o2, function(t3, i2) {
      return A(n2, e, o2, t3, i2, r2);
    }), x(n2, o2, false), r2 && n2.u && b("Patches").R(e, r2, n2.u, n2.s);
  }
  return e.o;
}
function A(e, i2, o2, a2, c2, s2) {
  if (c2 === o2 && n(5), t(c2)) {
    var v2 = M(e, c2, s2 && i2 && 3 !== i2.i && !u(i2.D, a2) ? s2.concat(a2) : void 0);
    if (f(o2, a2, v2), !t(v2))
      return;
    e.m = false;
  }
  if (r(c2) && !y(c2)) {
    if (!e.h.F && e._ < 1)
      return;
    M(e, c2), i2 && i2.A.l || x(e, c2);
  }
}
function x(n2, t2, r2) {
  void 0 === r2 && (r2 = false), n2.h.F && n2.m && d(t2, r2);
}
function z(n2, t2) {
  var r2 = n2[Q];
  return (r2 ? p(r2) : n2)[t2];
}
function I(n2, t2) {
  if (t2 in n2)
    for (var r2 = Object.getPrototypeOf(n2); r2; ) {
      var e = Object.getOwnPropertyDescriptor(r2, t2);
      if (e)
        return e;
      r2 = Object.getPrototypeOf(r2);
    }
}
function k(n2) {
  n2.P || (n2.P = true, n2.l && k(n2.l));
}
function E(n2) {
  n2.o || (n2.o = l(n2.t));
}
function R(n2, t2, r2) {
  var e = s(t2) ? b("MapSet").N(t2, r2) : v(t2) ? b("MapSet").T(t2, r2) : n2.g ? function(n3, t3) {
    var r3 = Array.isArray(n3), e2 = { i: r3 ? 1 : 0, A: t3 ? t3.A : _(), P: false, I: false, D: {}, l: t3, t: n3, k: null, o: null, j: null, C: false }, i2 = e2, o2 = en;
    r3 && (i2 = [e2], o2 = on);
    var u2 = Proxy.revocable(i2, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e2.k = f2, e2.j = a2, f2;
  }(t2, r2) : b("ES5").J(t2, r2);
  return (r2 ? r2.A : _()).p.push(e), e;
}
function D(e) {
  return t(e) || n(22, e), function n2(t2) {
    if (!r(t2))
      return t2;
    var e2, u2 = t2[Q], c2 = o(t2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
        return u2.t;
      u2.I = true, e2 = F(t2, c2), u2.I = false;
    } else
      e2 = F(t2, c2);
    return i(e2, function(t3, r2) {
      u2 && a(u2.t, t3) === r2 || f(e2, t3, n2(r2));
    }), 3 === c2 ? new Set(e2) : e2;
  }(e);
}
function F(n2, t2) {
  switch (t2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l(n2);
}
function T() {
  function e(n2) {
    if (!r(n2))
      return n2;
    if (Array.isArray(n2))
      return n2.map(e);
    if (s(n2))
      return new Map(Array.from(n2.entries()).map(function(n3) {
        return [n3[0], e(n3[1])];
      }));
    if (v(n2))
      return new Set(Array.from(n2).map(e));
    var t2 = Object.create(Object.getPrototypeOf(n2));
    for (var i2 in n2)
      t2[i2] = e(n2[i2]);
    return u(n2, L) && (t2[L] = n2[L]), t2;
  }
  function f2(n2) {
    return t(n2) ? e(n2) : n2;
  }
  var c2 = "add";
  m("Patches", { $: function(t2, r2) {
    return r2.forEach(function(r3) {
      for (var i2 = r3.path, u2 = r3.op, f3 = t2, s2 = 0; s2 < i2.length - 1; s2++) {
        var v2 = o(f3), p2 = "" + i2[s2];
        0 !== v2 && 1 !== v2 || "__proto__" !== p2 && "constructor" !== p2 || n(24), "function" == typeof f3 && "prototype" === p2 && n(24), "object" != typeof (f3 = a(f3, p2)) && n(15, i2.join("/"));
      }
      var l2 = o(f3), d2 = e(r3.value), h2 = i2[i2.length - 1];
      switch (u2) {
        case "replace":
          switch (l2) {
            case 2:
              return f3.set(h2, d2);
            case 3:
              n(16);
            default:
              return f3[h2] = d2;
          }
        case c2:
          switch (l2) {
            case 1:
              return f3.splice(h2, 0, d2);
            case 2:
              return f3.set(h2, d2);
            case 3:
              return f3.add(d2);
            default:
              return f3[h2] = d2;
          }
        case "remove":
          switch (l2) {
            case 1:
              return f3.splice(h2, 1);
            case 2:
              return f3.delete(h2);
            case 3:
              return f3.delete(r3.value);
            default:
              return delete f3[h2];
          }
        default:
          n(17, u2);
      }
    }), t2;
  }, R: function(n2, t2, r2, e2) {
    switch (n2.i) {
      case 0:
      case 4:
      case 2:
        return function(n3, t3, r3, e3) {
          var o2 = n3.t, s2 = n3.o;
          i(n3.D, function(n4, i2) {
            var v2 = a(o2, n4), p2 = a(s2, n4), l2 = i2 ? u(o2, n4) ? "replace" : c2 : "remove";
            if (v2 !== p2 || "replace" !== l2) {
              var d2 = t3.concat(n4);
              r3.push("remove" === l2 ? { op: l2, path: d2 } : { op: l2, path: d2, value: p2 }), e3.push(l2 === c2 ? { op: "remove", path: d2 } : "remove" === l2 ? { op: c2, path: d2, value: f2(v2) } : { op: "replace", path: d2, value: f2(v2) });
            }
          });
        }(n2, t2, r2, e2);
      case 5:
      case 1:
        return function(n3, t3, r3, e3) {
          var i2 = n3.t, o2 = n3.D, u2 = n3.o;
          if (u2.length < i2.length) {
            var a2 = [u2, i2];
            i2 = a2[0], u2 = a2[1];
            var s2 = [e3, r3];
            r3 = s2[0], e3 = s2[1];
          }
          for (var v2 = 0; v2 < i2.length; v2++)
            if (o2[v2] && u2[v2] !== i2[v2]) {
              var p2 = t3.concat([v2]);
              r3.push({ op: "replace", path: p2, value: f2(u2[v2]) }), e3.push({ op: "replace", path: p2, value: f2(i2[v2]) });
            }
          for (var l2 = i2.length; l2 < u2.length; l2++) {
            var d2 = t3.concat([l2]);
            r3.push({ op: c2, path: d2, value: f2(u2[l2]) });
          }
          i2.length < u2.length && e3.push({ op: "replace", path: t3.concat(["length"]), value: i2.length });
        }(n2, t2, r2, e2);
      case 3:
        return function(n3, t3, r3, e3) {
          var i2 = n3.t, o2 = n3.o, u2 = 0;
          i2.forEach(function(n4) {
            if (!o2.has(n4)) {
              var i3 = t3.concat([u2]);
              r3.push({ op: "remove", path: i3, value: n4 }), e3.unshift({ op: c2, path: i3, value: n4 });
            }
            u2++;
          }), u2 = 0, o2.forEach(function(n4) {
            if (!i2.has(n4)) {
              var o3 = t3.concat([u2]);
              r3.push({ op: c2, path: o3, value: n4 }), e3.unshift({ op: "remove", path: o3, value: n4 });
            }
            u2++;
          });
        }(n2, t2, r2, e2);
    }
  }, M: function(n2, t2, r2, e2) {
    r2.push({ op: "replace", path: [], value: t2 === H ? void 0 : t2 }), e2.push({ op: "replace", path: [], value: n2.t });
  } });
}
var G;
var U;
var W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
var X = "undefined" != typeof Map;
var q = "undefined" != typeof Set;
var B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q = W ? Symbol.for("immer-state") : "__$immer_state";
var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n2) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n2;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n2) {
  return "Cannot apply patch, path doesn't resolve: " + n2;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n2) {
  return "Unsupported patch operation: " + n2;
}, 18: function(n2) {
  return "The plugin for '" + n2 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n2 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n2) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n2 + "'";
}, 22: function(n2) {
  return "'current' expects a draft, got: " + n2;
}, 23: function(n2) {
  return "'original' expects a draft, got: " + n2;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z = "" + Object.prototype.constructor;
var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n2) {
  return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
} : Object.getOwnPropertyNames;
var tn = Object.getOwnPropertyDescriptors || function(n2) {
  var t2 = {};
  return nn(n2).forEach(function(r2) {
    t2[r2] = Object.getOwnPropertyDescriptor(n2, r2);
  }), t2;
};
var rn = {};
var en = { get: function(n2, t2) {
  if (t2 === Q)
    return n2;
  var e = p(n2);
  if (!u(e, t2))
    return function(n3, t3, r2) {
      var e2, i3 = I(t3, r2);
      return i3 ? "value" in i3 ? i3.value : null === (e2 = i3.get) || void 0 === e2 ? void 0 : e2.call(n3.k) : void 0;
    }(n2, e, t2);
  var i2 = e[t2];
  return n2.I || !r(i2) ? i2 : i2 === z(n2.t, t2) ? (E(n2), n2.o[t2] = R(n2.A.h, i2, n2)) : i2;
}, has: function(n2, t2) {
  return t2 in p(n2);
}, ownKeys: function(n2) {
  return Reflect.ownKeys(p(n2));
}, set: function(n2, t2, r2) {
  var e = I(p(n2), t2);
  if (null == e ? void 0 : e.set)
    return e.set.call(n2.k, r2), true;
  if (!n2.P) {
    var i2 = z(p(n2), t2), o2 = null == i2 ? void 0 : i2[Q];
    if (o2 && o2.t === r2)
      return n2.o[t2] = r2, n2.D[t2] = false, true;
    if (c(r2, i2) && (void 0 !== r2 || u(n2.t, t2)))
      return true;
    E(n2), k(n2);
  }
  return n2.o[t2] === r2 && "number" != typeof r2 && (void 0 !== r2 || t2 in n2.o) || (n2.o[t2] = r2, n2.D[t2] = true, true);
}, deleteProperty: function(n2, t2) {
  return void 0 !== z(n2.t, t2) || t2 in n2.t ? (n2.D[t2] = false, E(n2), k(n2)) : delete n2.D[t2], n2.o && delete n2.o[t2], true;
}, getOwnPropertyDescriptor: function(n2, t2) {
  var r2 = p(n2), e = Reflect.getOwnPropertyDescriptor(r2, t2);
  return e ? { writable: true, configurable: 1 !== n2.i || "length" !== t2, enumerable: e.enumerable, value: r2[t2] } : e;
}, defineProperty: function() {
  n(11);
}, getPrototypeOf: function(n2) {
  return Object.getPrototypeOf(n2.t);
}, setPrototypeOf: function() {
  n(12);
} };
var on = {};
i(en, function(n2, t2) {
  on[n2] = function() {
    return arguments[0] = arguments[0][0], t2.apply(this, arguments);
  };
}), on.deleteProperty = function(t2, r2) {
  return isNaN(parseInt(r2)) && n(13), en.deleteProperty.call(this, t2[0], r2);
}, on.set = function(t2, r2, e) {
  return "length" !== r2 && isNaN(parseInt(r2)) && n(14), en.set.call(this, t2[0], r2, e, t2[0]);
};
var un = function() {
  function e(t2) {
    var e2 = this;
    this.g = B, this.F = true, this.produce = function(t3, i3, o2) {
      if ("function" == typeof t3 && "function" != typeof i3) {
        var u2 = i3;
        i3 = t3;
        var a2 = e2;
        return function(n2) {
          var t4 = this;
          void 0 === n2 && (n2 = u2);
          for (var r2 = arguments.length, e3 = Array(r2 > 1 ? r2 - 1 : 0), o3 = 1; o3 < r2; o3++)
            e3[o3 - 1] = arguments[o3];
          return a2.produce(n2, function(n3) {
            var r3;
            return (r3 = i3).call.apply(r3, [t4, n3].concat(e3));
          });
        };
      }
      var f2;
      if ("function" != typeof i3 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), r(t3)) {
        var c2 = w(e2), s2 = R(e2, t3, void 0), v2 = true;
        try {
          f2 = i3(s2), v2 = false;
        } finally {
          v2 ? O(c2) : g(c2);
        }
        return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function(n2) {
          return j(c2, o2), P(n2, c2);
        }, function(n2) {
          throw O(c2), n2;
        }) : (j(c2, o2), P(f2, c2));
      }
      if (!t3 || "object" != typeof t3) {
        if ((f2 = i3(t3)) === H)
          return;
        return void 0 === f2 && (f2 = t3), e2.F && d(f2, true), f2;
      }
      n(21, t3);
    }, this.produceWithPatches = function(n2, t3) {
      return "function" == typeof n2 ? function(t4) {
        for (var r3 = arguments.length, i4 = Array(r3 > 1 ? r3 - 1 : 0), o2 = 1; o2 < r3; o2++)
          i4[o2 - 1] = arguments[o2];
        return e2.produceWithPatches(t4, function(t5) {
          return n2.apply(void 0, [t5].concat(i4));
        });
      } : [e2.produce(n2, t3, function(n3, t4) {
        r2 = n3, i3 = t4;
      }), r2, i3];
      var r2, i3;
    }, "boolean" == typeof (null == t2 ? void 0 : t2.useProxies) && this.setUseProxies(t2.useProxies), "boolean" == typeof (null == t2 ? void 0 : t2.autoFreeze) && this.setAutoFreeze(t2.autoFreeze);
  }
  var i2 = e.prototype;
  return i2.createDraft = function(e2) {
    r(e2) || n(8), t(e2) && (e2 = D(e2));
    var i3 = w(this), o2 = R(this, e2, void 0);
    return o2[Q].C = true, g(i3), o2;
  }, i2.finishDraft = function(t2, r2) {
    var e2 = t2 && t2[Q];
    e2 && e2.C || n(9), e2.I && n(10);
    var i3 = e2.A;
    return j(i3, r2), P(void 0, i3);
  }, i2.setAutoFreeze = function(n2) {
    this.F = n2;
  }, i2.setUseProxies = function(t2) {
    t2 && !B && n(20), this.g = t2;
  }, i2.applyPatches = function(n2, r2) {
    var e2;
    for (e2 = r2.length - 1; e2 >= 0; e2--) {
      var i3 = r2[e2];
      if (0 === i3.path.length && "replace" === i3.op) {
        n2 = i3.value;
        break;
      }
    }
    var o2 = b("Patches").$;
    return t(n2) ? o2(n2, r2) : this.produce(n2, function(n3) {
      return o2(n3, r2.slice(e2 + 1));
    });
  }, e;
}();
var an = new un();
var fn = an.produce;
var cn = an.produceWithPatches.bind(an);
var sn = an.setAutoFreeze.bind(an);
var vn = an.setUseProxies.bind(an);
var pn = an.applyPatches.bind(an);
var ln = an.createDraft.bind(an);
var dn = an.finishDraft.bind(an);

// node_modules/@aws-amplify/datastore/lib-esm/datastore/datastore.js
var import_uuid5 = __toESM(require_uuid());

// node_modules/@aws-amplify/datastore/lib-esm/authModeStrategies/defaultAuthStrategy.js
var defaultAuthStrategy = function() {
  return [];
};

// node_modules/@aws-amplify/datastore/lib-esm/util.js
var import_buffer6 = __toESM(require_buffer());

// node_modules/ulid/dist/index.esm.js
function createError(message) {
  var err = new Error(message);
  err.source = "ulid";
  return err;
}
var ENCODING = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
var ENCODING_LEN = ENCODING.length;
var TIME_MAX = Math.pow(2, 48) - 1;
var TIME_LEN = 10;
var RANDOM_LEN = 16;
function replaceCharAt(str, index, char) {
  if (index > str.length - 1) {
    return str;
  }
  return str.substr(0, index) + char + str.substr(index + 1);
}
function incrementBase32(str) {
  var done = void 0;
  var index = str.length;
  var char = void 0;
  var charIndex = void 0;
  var maxCharIndex = ENCODING_LEN - 1;
  while (!done && index-- >= 0) {
    char = str[index];
    charIndex = ENCODING.indexOf(char);
    if (charIndex === -1) {
      throw createError("incorrectly encoded string");
    }
    if (charIndex === maxCharIndex) {
      str = replaceCharAt(str, index, ENCODING[0]);
      continue;
    }
    done = replaceCharAt(str, index, ENCODING[charIndex + 1]);
  }
  if (typeof done === "string") {
    return done;
  }
  throw createError("cannot increment this string");
}
function randomChar(prng2) {
  var rand = Math.floor(prng2() * ENCODING_LEN);
  if (rand === ENCODING_LEN) {
    rand = ENCODING_LEN - 1;
  }
  return ENCODING.charAt(rand);
}
function encodeTime(now, len) {
  if (isNaN(now)) {
    throw new Error(now + " must be a number");
  }
  if (now > TIME_MAX) {
    throw createError("cannot encode time greater than " + TIME_MAX);
  }
  if (now < 0) {
    throw createError("time must be positive");
  }
  if (Number.isInteger(now) === false) {
    throw createError("time must be an integer");
  }
  var mod = void 0;
  var str = "";
  for (; len > 0; len--) {
    mod = now % ENCODING_LEN;
    str = ENCODING.charAt(mod) + str;
    now = (now - mod) / ENCODING_LEN;
  }
  return str;
}
function encodeRandom(len, prng2) {
  var str = "";
  for (; len > 0; len--) {
    str = randomChar(prng2) + str;
  }
  return str;
}
function detectPrng() {
  var allowInsecure = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var root = arguments[1];
  if (!root) {
    root = typeof window !== "undefined" ? window : null;
  }
  var browserCrypto = root && (root.crypto || root.msCrypto);
  if (browserCrypto) {
    return function() {
      var buffer = new Uint8Array(1);
      browserCrypto.getRandomValues(buffer);
      return buffer[0] / 255;
    };
  } else {
    try {
      var nodeCrypto = require_crypto2();
      return function() {
        return nodeCrypto.randomBytes(1).readUInt8() / 255;
      };
    } catch (e) {
    }
  }
  if (allowInsecure) {
    try {
      console.error("secure crypto unusable, falling back to insecure Math.random()!");
    } catch (e) {
    }
    return function() {
      return Math.random();
    };
  }
  throw createError("secure crypto unusable, insecure Math.random not allowed");
}
function factory(currPrng) {
  if (!currPrng) {
    currPrng = detectPrng();
  }
  return function ulid3(seedTime) {
    if (isNaN(seedTime)) {
      seedTime = Date.now();
    }
    return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);
  };
}
function monotonicFactory(currPrng) {
  if (!currPrng) {
    currPrng = detectPrng();
  }
  var lastTime = 0;
  var lastRandom = void 0;
  return function ulid3(seedTime) {
    if (isNaN(seedTime)) {
      seedTime = Date.now();
    }
    if (seedTime <= lastTime) {
      var incrementedRandom = lastRandom = incrementBase32(lastRandom);
      return encodeTime(lastTime, TIME_LEN) + incrementedRandom;
    }
    lastTime = seedTime;
    var newRandom = lastRandom = encodeRandom(RANDOM_LEN, currPrng);
    return encodeTime(seedTime, TIME_LEN) + newRandom;
  };
}
var ulid = factory();

// node_modules/@aws-amplify/datastore/lib-esm/util.js
var import_uuid4 = __toESM(require_uuid());

// node_modules/@aws-amplify/datastore/lib-esm/predicates/sort.js
var ModelSortPredicateCreator = (
  /** @class */
  function() {
    function ModelSortPredicateCreator2() {
    }
    ModelSortPredicateCreator2.createPredicateBuilder = function(modelDefinition) {
      var modelName = modelDefinition.name;
      var fieldNames = new Set(Object.keys(modelDefinition.fields));
      var handler;
      var predicate = new Proxy({}, handler = {
        get: function(_target, propertyKey, receiver) {
          var field = propertyKey;
          if (!fieldNames.has(field)) {
            throw new Error("Invalid field for model. field: " + field + ", model: " + modelName);
          }
          var result = function(sortDirection) {
            var _a;
            (_a = ModelSortPredicateCreator2.sortPredicateGroupsMap.get(receiver)) === null || _a === void 0 ? void 0 : _a.push({ field, sortDirection });
            return receiver;
          };
          return result;
        }
      });
      ModelSortPredicateCreator2.sortPredicateGroupsMap.set(predicate, []);
      return predicate;
    };
    ModelSortPredicateCreator2.isValidPredicate = function(predicate) {
      return ModelSortPredicateCreator2.sortPredicateGroupsMap.has(predicate);
    };
    ModelSortPredicateCreator2.getPredicates = function(predicate, throwOnInvalid) {
      if (throwOnInvalid === void 0) {
        throwOnInvalid = true;
      }
      if (throwOnInvalid && !ModelSortPredicateCreator2.isValidPredicate(predicate)) {
        throw new Error("The predicate is not valid");
      }
      var predicateGroup = ModelSortPredicateCreator2.sortPredicateGroupsMap.get(predicate);
      if (predicateGroup) {
        return predicateGroup;
      } else {
        throw new Error("Predicate group not found");
      }
    };
    ModelSortPredicateCreator2.createFromExisting = function(modelDefinition, existing) {
      if (!existing || !modelDefinition) {
        return void 0;
      }
      return existing(ModelSortPredicateCreator2.createPredicateBuilder(modelDefinition));
    };
    ModelSortPredicateCreator2.sortPredicateGroupsMap = /* @__PURE__ */ new WeakMap();
    return ModelSortPredicateCreator2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/predicates/index.js
var predicatesAllSet = /* @__PURE__ */ new WeakSet();
function isPredicatesAll(predicate) {
  return predicatesAllSet.has(predicate);
}
var groupKeys = /* @__PURE__ */ new Set(["and", "or", "not"]);
var isGroup = function(o2) {
  var keys = __spread(Object.keys(o2));
  return keys.length === 1 && groupKeys.has(keys[0]);
};
var isEmpty2 = function(o2) {
  return !Array.isArray(o2) && Object.keys(o2).length === 0;
};
var comparisonKeys = /* @__PURE__ */ new Set([
  "eq",
  "ne",
  "gt",
  "lt",
  "ge",
  "le",
  "contains",
  "notContains",
  "beginsWith",
  "between"
]);
var isComparison = function(o2) {
  var keys = __spread(Object.keys(o2));
  return !Array.isArray(o2) && keys.length === 1 && comparisonKeys.has(keys[0]);
};
var isValid = function(o2) {
  if (Array.isArray(o2)) {
    return o2.every(function(v2) {
      return isValid(v2);
    });
  } else {
    return Object.keys(o2).length <= 1;
  }
};
var PredicateAll = Symbol("A predicate that matches all records");
var Predicates = (
  /** @class */
  function() {
    function Predicates2() {
    }
    Object.defineProperty(Predicates2, "ALL", {
      get: function() {
        var predicate = function(c2) {
          return c2;
        };
        predicatesAllSet.add(predicate);
        return predicate;
      },
      enumerable: true,
      configurable: true
    });
    return Predicates2;
  }()
);
var ModelPredicateCreator = (
  /** @class */
  function() {
    function ModelPredicateCreator2() {
    }
    ModelPredicateCreator2.isValidPredicate = function(predicate) {
      return ModelPredicateCreator2.predicateGroupsMap.has(predicate);
    };
    ModelPredicateCreator2.getPredicates = function(predicate, throwOnInvalid) {
      if (throwOnInvalid === void 0) {
        throwOnInvalid = true;
      }
      if (throwOnInvalid && !ModelPredicateCreator2.isValidPredicate(predicate)) {
        throw new Error("The predicate is not valid");
      }
      return ModelPredicateCreator2.predicateGroupsMap.get(predicate);
    };
    ModelPredicateCreator2.createForPk = function(modelDefinition, model) {
      var keyFields = extractPrimaryKeyFieldNames(modelDefinition);
      var keyValues = extractPrimaryKeyValues(model, keyFields);
      var predicate = this.createFromAST(modelDefinition, {
        and: keyFields.map(function(field, idx) {
          var _a;
          var operand = keyValues[idx];
          return _a = {}, _a[field] = { eq: operand }, _a;
        })
      });
      return predicate;
    };
    ModelPredicateCreator2.createFromFlatEqualities = function(modelDefinition, flatEqualities) {
      var ast = {
        and: Object.entries(flatEqualities).map(function(_a) {
          var _b;
          var _c = __read(_a, 2), k2 = _c[0], v2 = _c[1];
          return _b = {}, _b[k2] = { eq: v2 }, _b;
        })
      };
      return this.createFromAST(modelDefinition, ast);
    };
    ModelPredicateCreator2.transformGraphQLFilterNodeToPredicateAST = function(gql) {
      var _this = this;
      if (!isValid(gql)) {
        throw new Error("Invalid GraphQL Condition or subtree: " + gql);
      }
      if (isEmpty2(gql)) {
        return {
          type: "and",
          predicates: []
        };
      } else if (isGroup(gql)) {
        var groupkey = Object.keys(gql)[0];
        var children = this.transformGraphQLFilterNodeToPredicateAST(gql[groupkey]);
        return {
          type: groupkey,
          predicates: Array.isArray(children) ? children : [children]
        };
      } else if (isComparison(gql)) {
        var operatorKey = Object.keys(gql)[0];
        return {
          operator: operatorKey,
          operand: gql[operatorKey]
        };
      } else {
        if (Array.isArray(gql)) {
          return gql.map(function(o2) {
            return _this.transformGraphQLFilterNodeToPredicateAST(o2);
          });
        } else {
          var fieldKey = Object.keys(gql)[0];
          return __assign({ field: fieldKey }, this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]));
        }
      }
    };
    ModelPredicateCreator2.createFromAST = function(modelDefinition, ast) {
      var key = {};
      ModelPredicateCreator2.predicateGroupsMap.set(key, this.transformGraphQLFilterNodeToPredicateAST(ast));
      return key;
    };
    ModelPredicateCreator2.predicateGroupsMap = /* @__PURE__ */ new WeakMap();
    return ModelPredicateCreator2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/util.js
var ID = "id";
var DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR = "#";
var IDENTIFIER_KEY_SEPARATOR = "-";
var errorMessages = {
  idEmptyString: "An index field cannot contain an empty string value",
  queryByPkWithCompositeKeyPresent: "Models with composite primary keys cannot be queried by a single key value. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys",
  deleteByPkWithCompositeKeyPresent: "Models with composite primary keys cannot be deleted by a single key value, unless using a predicate. Use object literal syntax for composite keys instead: https://docs.amplify.aws/lib/datastore/advanced-workflows/q/platform/js/#querying-records-with-custom-primary-keys",
  observeWithObjectLiteral: "Object literal syntax cannot be used with observe. Use a predicate instead: https://docs.amplify.aws/lib/datastore/data-access/q/platform/js/#predicates"
};
var NAMESPACES;
(function(NAMESPACES2) {
  NAMESPACES2["DATASTORE"] = "datastore";
  NAMESPACES2["USER"] = "user";
  NAMESPACES2["SYNC"] = "sync";
  NAMESPACES2["STORAGE"] = "storage";
})(NAMESPACES || (NAMESPACES = {}));
var DATASTORE = NAMESPACES.DATASTORE;
var USER = NAMESPACES.USER;
var SYNC = NAMESPACES.SYNC;
var STORAGE = NAMESPACES.STORAGE;
var USER_AGENT_SUFFIX_DATASTORE = "/DataStore";
var isNullOrUndefined = function(val) {
  return typeof val === "undefined" || val === void 0 || val === null;
};
var validatePredicate = function(model, groupType, predicatesOrGroups) {
  var filterType;
  var isNegation = false;
  if (predicatesOrGroups.length === 0) {
    return true;
  }
  switch (groupType) {
    case "not":
      filterType = "every";
      isNegation = true;
      break;
    case "and":
      filterType = "every";
      break;
    case "or":
      filterType = "some";
      break;
    default:
      throw new Error("Invalid " + groupType);
  }
  var result = predicatesOrGroups[filterType](function(predicateOrGroup) {
    if (isPredicateObj(predicateOrGroup)) {
      var field = predicateOrGroup.field, operator = predicateOrGroup.operator, operand = predicateOrGroup.operand;
      var value = model[field];
      return validatePredicateField(value, operator, operand);
    }
    if (isPredicateGroup(predicateOrGroup)) {
      var type = predicateOrGroup.type, predicates = predicateOrGroup.predicates;
      return validatePredicate(model, type, predicates);
    }
    throw new Error("Not a predicate or group");
  });
  return isNegation ? !result : result;
};
var validatePredicateField = function(value, operator, operand) {
  switch (operator) {
    case "ne":
      return value !== operand;
    case "eq":
      return value === operand;
    case "le":
      return value <= operand;
    case "lt":
      return value < operand;
    case "ge":
      return value >= operand;
    case "gt":
      return value > operand;
    case "between":
      var _c = __read(operand, 2), min = _c[0], max = _c[1];
      return value >= min && value <= max;
    case "beginsWith":
      return !isNullOrUndefined(value) && value.startsWith(operand);
    case "contains":
      return !isNullOrUndefined(value) && value.indexOf(operand) > -1;
    case "notContains":
      return isNullOrUndefined(value) || value.indexOf(operand) === -1;
    default:
      return false;
  }
};
var isModelConstructor = function(obj) {
  return obj && typeof obj.copyOf === "function";
};
var nonModelClasses = /* @__PURE__ */ new WeakSet();
function registerNonModelClass(clazz) {
  nonModelClasses.add(clazz);
}
var isNonModelConstructor = function(obj) {
  return nonModelClasses.has(obj);
};
var topologicallySortedModels = /* @__PURE__ */ new WeakMap();
var traverseModel = function(srcModelName, instance2, namespace, modelInstanceCreator2, getModelConstructorByModelName2) {
  var modelConstructor = getModelConstructorByModelName2(namespace.name, srcModelName);
  var result = [];
  var newInstance = modelConstructor.copyOf(instance2, function() {
  });
  result.unshift({
    modelName: srcModelName,
    item: newInstance,
    instance: newInstance
  });
  if (!topologicallySortedModels.has(namespace)) {
    topologicallySortedModels.set(namespace, Array.from(namespace.modelTopologicalOrdering.keys()));
  }
  var sortedModels = topologicallySortedModels.get(namespace);
  result.sort(function(a2, b2) {
    return sortedModels.indexOf(a2.modelName) - sortedModels.indexOf(b2.modelName);
  });
  return result;
};
var privateModeCheckResult;
var isPrivateMode = function() {
  return new Promise(function(resolve4) {
    var dbname = (0, import_uuid4.v4)();
    var db;
    var isPrivate = function() {
      privateModeCheckResult = false;
      resolve4(true);
    };
    var isNotPrivate = function() {
      return __awaiter(void 0, void 0, void 0, function() {
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              if (!(db && db.result && typeof db.result.close === "function"))
                return [3, 2];
              return [4, db.result.close()];
            case 1:
              _c.sent();
              _c.label = 2;
            case 2:
              return [4, indexedDB.deleteDatabase(dbname)];
            case 3:
              _c.sent();
              privateModeCheckResult = true;
              return [2, resolve4(false)];
          }
        });
      });
    };
    if (privateModeCheckResult === true) {
      return isNotPrivate();
    }
    if (privateModeCheckResult === false) {
      return isPrivate();
    }
    if (indexedDB === null)
      return isPrivate();
    db = indexedDB.open(dbname);
    db.onerror = isPrivate;
    db.onsuccess = isNotPrivate;
  });
};
var safariCompatabilityModeResult;
var isSafariCompatabilityMode = function() {
  return __awaiter(void 0, void 0, void 0, function() {
    var dbName_1, storeName_1, indexName_1, db_1, rwTx, rwStore, result, error_1;
    return __generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          _c.trys.push([0, 6, , 7]);
          dbName_1 = (0, import_uuid4.v4)();
          storeName_1 = "indexedDBFeatureProbeStore";
          indexName_1 = "idx";
          if (indexedDB === null)
            return [2, false];
          if (safariCompatabilityModeResult !== void 0) {
            return [2, safariCompatabilityModeResult];
          }
          return [4, new Promise(function(resolve4) {
            var dbOpenRequest = indexedDB.open(dbName_1);
            dbOpenRequest.onerror = function() {
              return resolve4(false);
            };
            dbOpenRequest.onsuccess = function() {
              var db = dbOpenRequest.result;
              resolve4(db);
            };
            dbOpenRequest.onupgradeneeded = function(event) {
              var _c2;
              var db = (_c2 = event === null || event === void 0 ? void 0 : event.target) === null || _c2 === void 0 ? void 0 : _c2.result;
              db.onerror = function() {
                return resolve4(false);
              };
              var store2 = db.createObjectStore(storeName_1, {
                autoIncrement: true
              });
              store2.createIndex(indexName_1, ["id"]);
            };
          })];
        case 1:
          db_1 = _c.sent();
          if (!db_1) {
            throw new Error("Could not open probe DB");
          }
          rwTx = db_1.transaction(storeName_1, "readwrite");
          rwStore = rwTx.objectStore(storeName_1);
          rwStore.add({
            id: 1
          });
          rwTx.commit();
          return [4, new Promise(function(resolve4) {
            var tx = db_1.transaction(storeName_1, "readonly");
            var store2 = tx.objectStore(storeName_1);
            var index = store2.index(indexName_1);
            var getRequest = index.get([1]);
            getRequest.onerror = function() {
              return resolve4(false);
            };
            getRequest.onsuccess = function(event) {
              var _c2;
              resolve4((_c2 = event === null || event === void 0 ? void 0 : event.target) === null || _c2 === void 0 ? void 0 : _c2.result);
            };
          })];
        case 2:
          result = _c.sent();
          if (!(db_1 && typeof db_1.close === "function"))
            return [3, 4];
          return [4, db_1.close()];
        case 3:
          _c.sent();
          _c.label = 4;
        case 4:
          return [4, indexedDB.deleteDatabase(dbName_1)];
        case 5:
          _c.sent();
          if (result === void 0) {
            safariCompatabilityModeResult = true;
          } else {
            safariCompatabilityModeResult = false;
          }
          return [3, 7];
        case 6:
          error_1 = _c.sent();
          safariCompatabilityModeResult = false;
          return [3, 7];
        case 7:
          return [2, safariCompatabilityModeResult];
      }
    });
  });
};
var randomBytes2 = function(nBytes) {
  return import_buffer6.Buffer.from(new WordArray().random(nBytes).toString(), "hex");
};
var prng = function() {
  return randomBytes2(1).readUInt8(0) / 255;
};
function monotonicUlidFactory(seed) {
  var ulid3 = monotonicFactory(prng);
  return function() {
    return ulid3(seed);
  };
}
function getNow() {
  if (typeof performance !== "undefined" && performance && typeof performance.now === "function") {
    return performance.now() | 0;
  } else {
    return Date.now();
  }
}
function sortCompareFunction(sortPredicates) {
  return function compareFunction(a2, b2) {
    var e_1, _c;
    try {
      for (var sortPredicates_1 = __values(sortPredicates), sortPredicates_1_1 = sortPredicates_1.next(); !sortPredicates_1_1.done; sortPredicates_1_1 = sortPredicates_1.next()) {
        var predicate = sortPredicates_1_1.value;
        var field = predicate.field, sortDirection = predicate.sortDirection;
        var sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;
        if (a2[field] < b2[field]) {
          return -1 * sortMultiplier;
        }
        if (a2[field] > b2[field]) {
          return 1 * sortMultiplier;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (sortPredicates_1_1 && !sortPredicates_1_1.done && (_c = sortPredicates_1.return))
          _c.call(sortPredicates_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return 0;
  };
}
function valuesEqual(valA, valB, nullish) {
  var e_2, _c;
  if (nullish === void 0) {
    nullish = false;
  }
  var a2 = valA;
  var b2 = valB;
  var nullishCompare = function(_a, _b) {
    return (_a === void 0 || _a === null) && (_b === void 0 || _b === null);
  };
  if (a2 instanceof Object && !(b2 instanceof Object) || !(a2 instanceof Object) && b2 instanceof Object) {
    return false;
  }
  if (!(a2 instanceof Object)) {
    if (nullish && nullishCompare(a2, b2)) {
      return true;
    }
    return a2 === b2;
  }
  if (Array.isArray(a2) && !Array.isArray(b2) || Array.isArray(b2) && !Array.isArray(a2)) {
    return false;
  }
  if (a2 instanceof Set && b2 instanceof Set) {
    a2 = __spread(a2);
    b2 = __spread(b2);
  }
  if (a2 instanceof Map && b2 instanceof Map) {
    a2 = Object.fromEntries(a2);
    b2 = Object.fromEntries(b2);
  }
  var aKeys = Object.keys(a2);
  var bKeys = Object.keys(b2);
  if (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a2))) {
    return false;
  }
  var keys = aKeys.length >= bKeys.length ? aKeys : bKeys;
  try {
    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
      var key = keys_1_1.value;
      var aVal = a2[key];
      var bVal = b2[key];
      if (!valuesEqual(aVal, bVal, nullish)) {
        return false;
      }
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (keys_1_1 && !keys_1_1.done && (_c = keys_1.return))
        _c.call(keys_1);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  return true;
}
function inMemoryPagination(records, pagination) {
  if (pagination && records.length > 1) {
    if (pagination.sort) {
      var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);
      if (sortPredicates.length) {
        var compareFn = sortCompareFunction(sortPredicates);
        records.sort(compareFn);
      }
    }
    var _c = pagination.page, page = _c === void 0 ? 0 : _c, _d = pagination.limit, limit = _d === void 0 ? 0 : _d;
    var start = Math.max(0, page * limit) || 0;
    var end = limit > 0 ? start + limit : records.length;
    return records.slice(start, end);
  }
  return records;
}
function asyncSome(items, matches) {
  return __awaiter(this, void 0, void 0, function() {
    var items_1, items_1_1, item, e_3_1;
    var e_3, _c;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 5, 6, 7]);
          items_1 = __values(items), items_1_1 = items_1.next();
          _d.label = 1;
        case 1:
          if (!!items_1_1.done)
            return [3, 4];
          item = items_1_1.value;
          return [4, matches(item)];
        case 2:
          if (_d.sent()) {
            return [2, true];
          }
          _d.label = 3;
        case 3:
          items_1_1 = items_1.next();
          return [3, 1];
        case 4:
          return [3, 7];
        case 5:
          e_3_1 = _d.sent();
          e_3 = { error: e_3_1 };
          return [3, 7];
        case 6:
          try {
            if (items_1_1 && !items_1_1.done && (_c = items_1.return))
              _c.call(items_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 7:
          return [2, false];
      }
    });
  });
}
function asyncEvery(items, matches) {
  return __awaiter(this, void 0, void 0, function() {
    var items_2, items_2_1, item, e_4_1;
    var e_4, _c;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 5, 6, 7]);
          items_2 = __values(items), items_2_1 = items_2.next();
          _d.label = 1;
        case 1:
          if (!!items_2_1.done)
            return [3, 4];
          item = items_2_1.value;
          return [4, matches(item)];
        case 2:
          if (!_d.sent()) {
            return [2, false];
          }
          _d.label = 3;
        case 3:
          items_2_1 = items_2.next();
          return [3, 1];
        case 4:
          return [3, 7];
        case 5:
          e_4_1 = _d.sent();
          e_4 = { error: e_4_1 };
          return [3, 7];
        case 6:
          try {
            if (items_2_1 && !items_2_1.done && (_c = items_2.return))
              _c.call(items_2);
          } finally {
            if (e_4)
              throw e_4.error;
          }
          return [
            7
            /*endfinally*/
          ];
        case 7:
          return [2, true];
      }
    });
  });
}
var isAWSDate = function(val) {
  return !!/^\d{4}-\d{2}-\d{2}(Z|[+-]\d{2}:\d{2}($|:\d{2}))?$/.exec(val);
};
var isAWSTime = function(val) {
  return !!/^\d{2}:\d{2}(:\d{2}(.\d+)?)?(Z|[+-]\d{2}:\d{2}($|:\d{2}))?$/.exec(val);
};
var isAWSDateTime = function(val) {
  return !!/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2}(.\d+)?)?(Z|[+-]\d{2}:\d{2}($|:\d{2}))?$/.exec(val);
};
var isAWSTimestamp = function(val) {
  return !!/^\d+$/.exec(String(val));
};
var isAWSEmail = function(val) {
  return !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(val);
};
var isAWSJSON = function(val) {
  try {
    JSON.parse(val);
    return true;
  } catch (_c) {
    return false;
  }
};
var isAWSURL = function(val) {
  try {
    return !!new URL(val);
  } catch (_c) {
    return false;
  }
};
var isAWSPhone = function(val) {
  return !!/^\+?\d[\d\s-]+$/.exec(val);
};
var isAWSIPAddress = function(val) {
  return !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$))$/.exec(val);
};
var DeferredPromise = (
  /** @class */
  function() {
    function DeferredPromise2() {
      var self2 = this;
      this.promise = new Promise(function(resolve4, reject) {
        self2.resolve = resolve4;
        self2.reject = reject;
      });
    }
    return DeferredPromise2;
  }()
);
var DeferredCallbackResolver = (
  /** @class */
  function() {
    function DeferredCallbackResolver2(options) {
      this.limitPromise = new DeferredPromise();
      this.raceInFlight = false;
      this.callback = function() {
      };
      this.defaultErrorHandler = function(msg) {
        if (msg === void 0) {
          msg = "DeferredCallbackResolver error";
        }
        throw new Error(msg);
      };
      this.callback = options.callback;
      this.errorHandler = options.errorHandler || this.defaultErrorHandler;
      this.maxInterval = options.maxInterval || 2e3;
    }
    DeferredCallbackResolver2.prototype.startTimer = function() {
      var _this = this;
      this.timerPromise = new Promise(function(resolve4, reject) {
        _this.timer = setTimeout(function() {
          resolve4(LimitTimerRaceResolvedValues.TIMER);
        }, _this.maxInterval);
      });
    };
    DeferredCallbackResolver2.prototype.racePromises = function() {
      return __awaiter(this, void 0, void 0, function() {
        var winner, err_1;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              _c.trys.push([0, 2, 3, 4]);
              this.raceInFlight = true;
              this.startTimer();
              return [4, Promise.race([
                this.timerPromise,
                this.limitPromise.promise
              ])];
            case 1:
              winner = _c.sent();
              this.callback();
              return [3, 4];
            case 2:
              err_1 = _c.sent();
              this.errorHandler(err_1);
              return [3, 4];
            case 3:
              this.clear();
              this.raceInFlight = false;
              this.limitPromise = new DeferredPromise();
              return [2, winner];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DeferredCallbackResolver2.prototype.start = function() {
      if (!this.raceInFlight)
        this.racePromises();
    };
    DeferredCallbackResolver2.prototype.clear = function() {
      clearTimeout(this.timer);
    };
    DeferredCallbackResolver2.prototype.resolve = function() {
      this.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);
    };
    return DeferredCallbackResolver2;
  }()
);
function mergePatches(originalSource, oldPatches, newPatches) {
  var patchesToMerge = oldPatches.concat(newPatches);
  var patches;
  fn(originalSource, function(draft) {
    pn(draft, patchesToMerge);
  }, function(p2) {
    patches = p2;
  });
  return patches;
}
var getStorename = function(namespace, modelName) {
  var storeName = namespace + "_" + modelName;
  return storeName;
};
var processCompositeKeys = function(attributes) {
  var extractCompositeSortKey = function(_c) {
    var _d = __read(_c.properties.fields), sortKeyFields = _d.slice(1);
    return sortKeyFields;
  };
  var compositeKeyFields = attributes.filter(isModelAttributeCompositeKey).map(extractCompositeSortKey);
  var combineIntersecting = function(fields7) {
    return fields7.reduce(function(combined2, sortKeyFields) {
      var sortKeyFieldsSet = new Set(sortKeyFields);
      if (combined2.length === 0) {
        combined2.push(sortKeyFieldsSet);
        return combined2;
      }
      var intersectingSetIdx = combined2.findIndex(function(existingSet) {
        return __spread(existingSet).some(function(f2) {
          return sortKeyFieldsSet.has(f2);
        });
      });
      if (intersectingSetIdx > -1) {
        var union = new Set(__spread(combined2[intersectingSetIdx], sortKeyFieldsSet));
        combined2[intersectingSetIdx] = union;
      } else {
        combined2.push(sortKeyFieldsSet);
      }
      return combined2;
    }, []);
  };
  var initial = combineIntersecting(compositeKeyFields);
  var combined = combineIntersecting(initial);
  return combined;
};
var extractKeyIfExists = function(modelDefinition) {
  var _c;
  var keyAttribute = (_c = modelDefinition === null || modelDefinition === void 0 ? void 0 : modelDefinition.attributes) === null || _c === void 0 ? void 0 : _c.find(isModelAttributeKey);
  return keyAttribute;
};
var extractPrimaryKeyFieldNames = function(modelDefinition) {
  var keyAttribute = extractKeyIfExists(modelDefinition);
  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {
    return keyAttribute.properties.fields;
  }
  return [ID];
};
var extractPrimaryKeyValues = function(model, keyFields) {
  return keyFields.map(function(key) {
    return model[key];
  });
};
var extractPrimaryKeysAndValues = function(model, keyFields) {
  var primaryKeysAndValues = {};
  keyFields.forEach(function(key) {
    return primaryKeysAndValues[key] = model[key];
  });
  return primaryKeysAndValues;
};
var isIdManaged = function(modelDefinition) {
  var keyAttribute = extractKeyIfExists(modelDefinition);
  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {
    return false;
  }
  return true;
};
var isIdOptionallyManaged = function(modelDefinition) {
  var keyAttribute = extractKeyIfExists(modelDefinition);
  if (keyAttribute && isModelAttributePrimaryKey(keyAttribute)) {
    return keyAttribute.properties.fields[0] === ID;
  }
  return false;
};
var establishRelationAndKeys = function(namespace) {
  var relationship = {};
  var keys = {};
  Object.keys(namespace.models).forEach(function(mKey) {
    var e_6, _c;
    relationship[mKey] = { indexes: [], relationTypes: [] };
    keys[mKey] = {};
    var model = namespace.models[mKey];
    Object.keys(model.fields).forEach(function(attr) {
      var fieldAttribute = model.fields[attr];
      if (typeof fieldAttribute.type === "object" && "model" in fieldAttribute.type) {
        var connectionType = fieldAttribute.association.connectionType;
        relationship[mKey].relationTypes.push({
          fieldName: fieldAttribute.name,
          modelName: fieldAttribute.type.model,
          relationType: connectionType,
          targetName: fieldAttribute.association["targetName"],
          targetNames: fieldAttribute.association["targetNames"],
          associatedWith: fieldAttribute.association["associatedWith"]
        });
        if (connectionType === "BELONGS_TO") {
          var targetNames = extractTargetNamesFromSrc(fieldAttribute.association);
          if (targetNames) {
            var idxName_1 = indexNameFromKeys(targetNames);
            var idxExists = relationship[mKey].indexes.find(function(_c2) {
              var _d2 = __read(_c2, 1), index = _d2[0];
              return index === idxName_1;
            });
            if (!idxExists) {
              relationship[mKey].indexes.push([idxName_1, targetNames]);
            }
          }
        }
      }
    });
    if (model.attributes) {
      keys[mKey].compositeKeys = processCompositeKeys(model.attributes);
      var _loop_1 = function(attribute2) {
        if (!isModelAttributeKey(attribute2)) {
          return "continue";
        }
        var fields7 = attribute2.properties.fields;
        if (isModelAttributePrimaryKey(attribute2)) {
          keys[mKey].primaryKey = fields7;
          return "continue";
        }
        var idxName = indexNameFromKeys(fields7);
        var idxExists = relationship[mKey].indexes.find(function(_c2) {
          var _d2 = __read(_c2, 1), index = _d2[0];
          return index === idxName;
        });
        if (!idxExists) {
          relationship[mKey].indexes.push([idxName, fields7]);
        }
      };
      try {
        for (var _d = __values(model.attributes), _e = _d.next(); !_e.done; _e = _d.next()) {
          var attribute = _e.value;
          _loop_1(attribute);
        }
      } catch (e_6_1) {
        e_6 = { error: e_6_1 };
      } finally {
        try {
          if (_e && !_e.done && (_c = _d.return))
            _c.call(_d);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
    }
    if (!keys[mKey].primaryKey) {
      keys[mKey].primaryKey = [ID];
    }
    relationship[mKey].indexes.push([
      "byPk",
      keys[mKey].primaryKey,
      { unique: true }
    ]);
  });
  return [relationship, keys];
};
var extractTargetNamesFromSrc = function(src) {
  var targetName = src === null || src === void 0 ? void 0 : src.targetName;
  var targetNames = src === null || src === void 0 ? void 0 : src.targetNames;
  if (Array.isArray(targetNames)) {
    return targetNames;
  } else if (typeof targetName === "string") {
    return [targetName];
  } else {
    return void 0;
  }
};
var indexNameFromKeys = function(keys) {
  return keys.reduce(function(prev, cur, idx) {
    if (idx === 0) {
      return cur;
    }
    return "" + prev + IDENTIFIER_KEY_SEPARATOR + cur;
  }, "");
};
var keysEqual = function(keysA, keysB) {
  if (keysA.length !== keysB.length) {
    return false;
  }
  return keysA.every(function(key, idx) {
    return key === keysB[idx];
  });
};
var getIndexKeys = function(namespace, modelName) {
  var _c, _d;
  var keyPath = (_d = (_c = namespace === null || namespace === void 0 ? void 0 : namespace.keys) === null || _c === void 0 ? void 0 : _c[modelName]) === null || _d === void 0 ? void 0 : _d.primaryKey;
  if (keyPath) {
    return keyPath;
  }
  return [ID];
};
var getTimestampFields = function(definition) {
  var _c, _d;
  var modelAttributes = (_c = definition.attributes) === null || _c === void 0 ? void 0 : _c.find(function(attr) {
    return attr.type === "model";
  });
  var timestampFieldsMap = (_d = modelAttributes === null || modelAttributes === void 0 ? void 0 : modelAttributes.properties) === null || _d === void 0 ? void 0 : _d.timestamps;
  var defaultFields = {
    createdAt: "createdAt",
    updatedAt: "updatedAt"
  };
  var customFields = timestampFieldsMap || {};
  return __assign(__assign({}, defaultFields), customFields);
};

// node_modules/@aws-amplify/datastore/lib-esm/types.js
function isSchemaModel(obj) {
  return obj && obj.pluralName !== void 0;
}
function isSchemaModelWithAttributes(m2) {
  return isSchemaModel(m2) && m2.attributes !== void 0;
}
function isAssociatedWith(obj) {
  return obj && obj.associatedWith;
}
function isTargetNameAssociation(obj) {
  return (obj === null || obj === void 0 ? void 0 : obj.targetName) || (obj === null || obj === void 0 ? void 0 : obj.targetNames);
}
function isFieldAssociation(obj, fieldName) {
  var _a, _b;
  return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.fields[fieldName]) === null || _a === void 0 ? void 0 : _a.association) === null || _b === void 0 ? void 0 : _b.connectionType;
}
function isModelAttributeAuth(attr) {
  return attr.type === "auth" && attr.properties && attr.properties.rules && attr.properties.rules.length > 0;
}
function isModelAttributeKey(attr) {
  return attr.type === "key" && attr.properties && attr.properties.fields && attr.properties.fields.length > 0;
}
function isModelAttributePrimaryKey(attr) {
  return isModelAttributeKey(attr) && attr.properties.name === void 0;
}
function isModelAttributeCompositeKey(attr) {
  return isModelAttributeKey(attr) && attr.properties.name !== void 0 && attr.properties.fields.length > 2;
}
var ModelAttributeAuthAllow;
(function(ModelAttributeAuthAllow2) {
  ModelAttributeAuthAllow2["CUSTOM"] = "custom";
  ModelAttributeAuthAllow2["OWNER"] = "owner";
  ModelAttributeAuthAllow2["GROUPS"] = "groups";
  ModelAttributeAuthAllow2["PRIVATE"] = "private";
  ModelAttributeAuthAllow2["PUBLIC"] = "public";
})(ModelAttributeAuthAllow || (ModelAttributeAuthAllow = {}));
var ModelAttributeAuthProvider;
(function(ModelAttributeAuthProvider2) {
  ModelAttributeAuthProvider2["FUNCTION"] = "function";
  ModelAttributeAuthProvider2["USER_POOLS"] = "userPools";
  ModelAttributeAuthProvider2["OIDC"] = "oidc";
  ModelAttributeAuthProvider2["IAM"] = "iam";
  ModelAttributeAuthProvider2["API_KEY"] = "apiKey";
})(ModelAttributeAuthProvider || (ModelAttributeAuthProvider = {}));
var GraphQLScalarType2;
(function(GraphQLScalarType3) {
  GraphQLScalarType3[GraphQLScalarType3["ID"] = 0] = "ID";
  GraphQLScalarType3[GraphQLScalarType3["String"] = 1] = "String";
  GraphQLScalarType3[GraphQLScalarType3["Int"] = 2] = "Int";
  GraphQLScalarType3[GraphQLScalarType3["Float"] = 3] = "Float";
  GraphQLScalarType3[GraphQLScalarType3["Boolean"] = 4] = "Boolean";
  GraphQLScalarType3[GraphQLScalarType3["AWSDate"] = 5] = "AWSDate";
  GraphQLScalarType3[GraphQLScalarType3["AWSTime"] = 6] = "AWSTime";
  GraphQLScalarType3[GraphQLScalarType3["AWSDateTime"] = 7] = "AWSDateTime";
  GraphQLScalarType3[GraphQLScalarType3["AWSTimestamp"] = 8] = "AWSTimestamp";
  GraphQLScalarType3[GraphQLScalarType3["AWSEmail"] = 9] = "AWSEmail";
  GraphQLScalarType3[GraphQLScalarType3["AWSJSON"] = 10] = "AWSJSON";
  GraphQLScalarType3[GraphQLScalarType3["AWSURL"] = 11] = "AWSURL";
  GraphQLScalarType3[GraphQLScalarType3["AWSPhone"] = 12] = "AWSPhone";
  GraphQLScalarType3[GraphQLScalarType3["AWSIPAddress"] = 13] = "AWSIPAddress";
})(GraphQLScalarType2 || (GraphQLScalarType2 = {}));
(function(GraphQLScalarType3) {
  function getJSType(scalar) {
    switch (scalar) {
      case "Boolean":
        return "boolean";
      case "ID":
      case "String":
      case "AWSDate":
      case "AWSTime":
      case "AWSDateTime":
      case "AWSEmail":
      case "AWSURL":
      case "AWSPhone":
      case "AWSIPAddress":
        return "string";
      case "Int":
      case "Float":
      case "AWSTimestamp":
        return "number";
      case "AWSJSON":
        return "object";
      default:
        throw new Error("Invalid scalar type");
    }
  }
  GraphQLScalarType3.getJSType = getJSType;
  function getValidationFunction(scalar) {
    switch (scalar) {
      case "AWSDate":
        return isAWSDate;
      case "AWSTime":
        return isAWSTime;
      case "AWSDateTime":
        return isAWSDateTime;
      case "AWSTimestamp":
        return isAWSTimestamp;
      case "AWSEmail":
        return isAWSEmail;
      case "AWSJSON":
        return isAWSJSON;
      case "AWSURL":
        return isAWSURL;
      case "AWSPhone":
        return isAWSPhone;
      case "AWSIPAddress":
        return isAWSIPAddress;
      default:
        return void 0;
    }
  }
  GraphQLScalarType3.getValidationFunction = getValidationFunction;
})(GraphQLScalarType2 || (GraphQLScalarType2 = {}));
function isGraphQLScalarType(obj) {
  return obj && GraphQLScalarType2[obj] !== void 0;
}
function isModelFieldType(obj) {
  var modelField = "model";
  if (obj && obj[modelField])
    return true;
  return false;
}
function isNonModelFieldType(obj) {
  var typeField = "nonModel";
  if (obj && obj[typeField])
    return true;
  return false;
}
function isEnumFieldType(obj) {
  var modelField = "enum";
  if (obj && obj[modelField])
    return true;
  return false;
}
function isIdentifierObject(obj, modelDefinition) {
  var keys = extractPrimaryKeyFieldNames(modelDefinition);
  return typeof obj === "object" && obj && keys.every(function(k2) {
    return obj[k2] !== void 0;
  });
}
var OpType;
(function(OpType2) {
  OpType2["INSERT"] = "INSERT";
  OpType2["UPDATE"] = "UPDATE";
  OpType2["DELETE"] = "DELETE";
})(OpType || (OpType = {}));
function isPredicateObj(obj) {
  return obj && obj.field !== void 0;
}
function isPredicateGroup(obj) {
  return obj && obj.type !== void 0;
}
var QueryOne;
(function(QueryOne2) {
  QueryOne2[QueryOne2["FIRST"] = 0] = "FIRST";
  QueryOne2[QueryOne2["LAST"] = 1] = "LAST";
})(QueryOne || (QueryOne = {}));
var SortDirection;
(function(SortDirection2) {
  SortDirection2["ASCENDING"] = "ASCENDING";
  SortDirection2["DESCENDING"] = "DESCENDING";
})(SortDirection || (SortDirection = {}));
var AuthModeStrategyType;
(function(AuthModeStrategyType2) {
  AuthModeStrategyType2["DEFAULT"] = "DEFAULT";
  AuthModeStrategyType2["MULTI_AUTH"] = "MULTI_AUTH";
})(AuthModeStrategyType || (AuthModeStrategyType = {}));
var ModelOperation;
(function(ModelOperation2) {
  ModelOperation2["CREATE"] = "CREATE";
  ModelOperation2["READ"] = "READ";
  ModelOperation2["UPDATE"] = "UPDATE";
  ModelOperation2["DELETE"] = "DELETE";
})(ModelOperation || (ModelOperation = {}));
function syncExpression(modelConstructor, conditionProducer) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, {
        modelConstructor,
        conditionProducer
      }];
    });
  });
}
var ProcessName;
(function(ProcessName2) {
  ProcessName2["sync"] = "sync";
  ProcessName2["mutate"] = "mutate";
  ProcessName2["subscribe"] = "subscribe";
})(ProcessName || (ProcessName = {}));
var DISCARD = Symbol("DISCARD");
var LimitTimerRaceResolvedValues;
(function(LimitTimerRaceResolvedValues2) {
  LimitTimerRaceResolvedValues2["LIMIT"] = "LIMIT";
  LimitTimerRaceResolvedValues2["TIMER"] = "TIMER";
})(LimitTimerRaceResolvedValues || (LimitTimerRaceResolvedValues = {}));
var PredicateInternalsKey = (
  /** @class */
  function() {
    function PredicateInternalsKey2() {
      this.__isPredicateInternalsKeySentinel = true;
    }
    return PredicateInternalsKey2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/authModeStrategies/multiAuthStrategy.js
function getProviderFromRule(rule) {
  if (rule.allow === "private" && !rule.provider) {
    return ModelAttributeAuthProvider.USER_POOLS;
  }
  if (rule.allow === "public" && !rule.provider) {
    return ModelAttributeAuthProvider.API_KEY;
  }
  return rule.provider;
}
function sortAuthRulesWithPriority(rules) {
  var allowSortPriority = [
    ModelAttributeAuthAllow.CUSTOM,
    ModelAttributeAuthAllow.OWNER,
    ModelAttributeAuthAllow.GROUPS,
    ModelAttributeAuthAllow.PRIVATE,
    ModelAttributeAuthAllow.PUBLIC
  ];
  var providerSortPriority = [
    ModelAttributeAuthProvider.FUNCTION,
    ModelAttributeAuthProvider.USER_POOLS,
    ModelAttributeAuthProvider.OIDC,
    ModelAttributeAuthProvider.IAM,
    ModelAttributeAuthProvider.API_KEY
  ];
  return __spread(rules).sort(function(a2, b2) {
    if (a2.allow === b2.allow) {
      return providerSortPriority.indexOf(getProviderFromRule(a2)) - providerSortPriority.indexOf(getProviderFromRule(b2));
    }
    return allowSortPriority.indexOf(a2.allow) - allowSortPriority.indexOf(b2.allow);
  });
}
function getAuthRules(_a) {
  var rules = _a.rules, currentUser = _a.currentUser;
  var authModes = /* @__PURE__ */ new Set();
  rules.forEach(function(rule) {
    switch (rule.allow) {
      case ModelAttributeAuthAllow.CUSTOM:
        if (!rule.provider || rule.provider === ModelAttributeAuthProvider.FUNCTION) {
          authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);
        }
        break;
      case ModelAttributeAuthAllow.GROUPS:
      case ModelAttributeAuthAllow.OWNER: {
        if (currentUser) {
          if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {
            authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);
          } else if (rule.provider === ModelAttributeAuthProvider.OIDC) {
            authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);
          }
        }
        break;
      }
      case ModelAttributeAuthAllow.PRIVATE: {
        if (currentUser) {
          if (!rule.provider || rule.provider === ModelAttributeAuthProvider.USER_POOLS) {
            authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);
          } else if (rule.provider === ModelAttributeAuthProvider.IAM) {
            authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);
          }
        }
        break;
      }
      case ModelAttributeAuthAllow.PUBLIC: {
        if (rule.provider === ModelAttributeAuthProvider.IAM) {
          authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);
        } else if (!rule.provider || rule.provider === ModelAttributeAuthProvider.API_KEY) {
          authModes.add(GRAPHQL_AUTH_MODE.API_KEY);
        }
        break;
      }
      default:
        break;
    }
  });
  return Array.from(authModes);
}
var multiAuthStrategy = function(amplifyContext) {
  return function(_a) {
    var schema2 = _a.schema, modelName = _a.modelName;
    return __awaiter(void 0, void 0, void 0, function() {
      var currentUser, e_1, attributes, authAttribute, sortedRules;
      var _b;
      return __generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            amplifyContext.Auth = amplifyContext.Auth || Auth;
            _c.label = 1;
          case 1:
            _c.trys.push([1, 3, , 4]);
            return [4, amplifyContext.Auth.currentAuthenticatedUser()];
          case 2:
            currentUser = _c.sent();
            return [3, 4];
          case 3:
            e_1 = _c.sent();
            return [3, 4];
          case 4:
            attributes = schema2.namespaces.user.models[modelName].attributes;
            if (attributes) {
              authAttribute = attributes.find(function(attr) {
                return attr.type === "auth";
              });
              if ((_b = authAttribute === null || authAttribute === void 0 ? void 0 : authAttribute.properties) === null || _b === void 0 ? void 0 : _b.rules) {
                sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);
                return [2, getAuthRules({ currentUser, rules: sortedRules })];
              }
            }
            return [2, []];
        }
      });
    });
  };
};

// node_modules/@aws-amplify/datastore/lib-esm/storage/storage.js
var import_zen_push = __toESM(require_zen_push());

// node_modules/@aws-amplify/datastore/lib-esm/sync/utils.js
var logger28 = new ConsoleLogger("DataStore");
var GraphQLOperationType;
(function(GraphQLOperationType2) {
  GraphQLOperationType2["LIST"] = "query";
  GraphQLOperationType2["CREATE"] = "mutation";
  GraphQLOperationType2["UPDATE"] = "mutation";
  GraphQLOperationType2["DELETE"] = "mutation";
  GraphQLOperationType2["GET"] = "query";
})(GraphQLOperationType || (GraphQLOperationType = {}));
var TransformerMutationType;
(function(TransformerMutationType2) {
  TransformerMutationType2["CREATE"] = "Create";
  TransformerMutationType2["UPDATE"] = "Update";
  TransformerMutationType2["DELETE"] = "Delete";
  TransformerMutationType2["GET"] = "Get";
})(TransformerMutationType || (TransformerMutationType = {}));
var dummyMetadata = {
  _version: void 0,
  _lastChangedAt: void 0,
  _deleted: void 0
};
var metadataFields = Object.keys(dummyMetadata);
function getMetadataFields() {
  return metadataFields;
}
function generateSelectionSet(namespace, modelDefinition) {
  var scalarFields = getScalarFields(modelDefinition);
  var nonModelFields = getNonModelFields(namespace, modelDefinition);
  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);
  var scalarAndMetadataFields = Object.values(scalarFields).map(function(_a) {
    var name = _a.name;
    return name;
  }).concat(implicitOwnerField).concat(nonModelFields);
  if (isSchemaModel(modelDefinition)) {
    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition, namespace));
  }
  var result = scalarAndMetadataFields.join("\n");
  return result;
}
function getImplicitOwnerField(modelDefinition, scalarFields) {
  var ownerFields = getOwnerFields(modelDefinition);
  if (!scalarFields.owner && ownerFields.includes("owner")) {
    return ["owner"];
  }
  return [];
}
function getOwnerFields(modelDefinition) {
  var ownerFields = [];
  if (isSchemaModelWithAttributes(modelDefinition)) {
    modelDefinition.attributes.forEach(function(attr) {
      if (attr.properties && attr.properties.rules) {
        var rule = attr.properties.rules.find(function(rule2) {
          return rule2.allow === "owner";
        });
        if (rule && rule.ownerField) {
          ownerFields.push(rule.ownerField);
        }
      }
    });
  }
  return ownerFields;
}
function getScalarFields(modelDefinition) {
  var fields7 = modelDefinition.fields;
  var result = Object.values(fields7).filter(function(field) {
    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {
      return true;
    }
    return false;
  }).reduce(function(acc, field) {
    acc[field.name] = field;
    return acc;
  }, {});
  return result;
}
function getConnectionFields(modelDefinition, namespace) {
  var result = [];
  Object.values(modelDefinition.fields).filter(function(_a) {
    var association = _a.association;
    return association && Object.keys(association).length;
  }).forEach(function(_a) {
    var name = _a.name, association = _a.association;
    var connectionType = (association || {}).connectionType;
    switch (connectionType) {
      case "HAS_ONE":
      case "HAS_MANY":
        break;
      case "BELONGS_TO":
        if (isTargetNameAssociation(association)) {
          if (association.targetNames && association.targetNames.length > 0) {
            var _b = __read(establishRelationAndKeys(namespace), 1), relations = _b[0];
            var connectedModelName = modelDefinition.fields[name].type["model"];
            var byPkIndex = relations[connectedModelName].indexes.find(function(_a2) {
              var _b2 = __read(_a2, 1), name2 = _b2[0];
              return name2 === "byPk";
            });
            var keyFields = byPkIndex && byPkIndex[1];
            var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(" ");
            result.push(name + " { " + keyFieldSelectionSet + " _deleted }");
          } else {
            result.push(name + " { id _deleted }");
          }
        }
        break;
      default:
        throw new Error("Invalid connection type " + connectionType);
    }
  });
  return result;
}
function getNonModelFields(namespace, modelDefinition) {
  var result = [];
  Object.values(modelDefinition.fields).forEach(function(_a) {
    var name = _a.name, type = _a.type;
    if (isNonModelFieldType(type)) {
      var typeDefinition = namespace.nonModels[type.nonModel];
      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function(_a2) {
        var name2 = _a2.name;
        return name2;
      });
      var nested_1 = [];
      Object.values(typeDefinition.fields).forEach(function(field) {
        var type2 = field.type, name2 = field.name;
        if (isNonModelFieldType(type2)) {
          var typeDefinition_1 = namespace.nonModels[type2.nonModel];
          nested_1.push(name2 + " { " + generateSelectionSet(namespace, typeDefinition_1) + " }");
        }
      });
      result.push(name + " { " + scalarFields.join(" ") + " " + nested_1.join(" ") + " }");
    }
  });
  return result;
}
function getAuthorizationRules(modelDefinition) {
  var authConfig = [].concat(modelDefinition.attributes || []).find(function(attr) {
    return attr && attr.type === "auth";
  });
  var _a = (authConfig || {}).properties, _b = (_a === void 0 ? {} : _a).rules, rules = _b === void 0 ? [] : _b;
  var resultRules = [];
  rules.forEach(function(rule) {
    var _a2 = rule.identityClaim, identityClaim = _a2 === void 0 ? "cognito:username" : _a2, _b2 = rule.ownerField, ownerField = _b2 === void 0 ? "owner" : _b2, _c = rule.operations, operations = _c === void 0 ? ["create", "update", "delete", "read"] : _c, _d = rule.provider, provider = _d === void 0 ? "userPools" : _d, _e = rule.groupClaim, groupClaim = _e === void 0 ? "cognito:groups" : _e, _f = rule.allow, authStrategy = _f === void 0 ? "iam" : _f, _g = rule.groups, groups = _g === void 0 ? [] : _g, _h = rule.groupsField, groupsField = _h === void 0 ? "" : _h;
    var isReadAuthorized = operations.includes("read");
    var isOwnerAuth = authStrategy === "owner";
    if (!isReadAuthorized && !isOwnerAuth) {
      return;
    }
    var authRule = {
      identityClaim,
      ownerField,
      provider,
      groupClaim,
      authStrategy,
      groups,
      groupsField,
      areSubscriptionsPublic: false
    };
    if (isOwnerAuth) {
      var modelConfig = [].concat(modelDefinition.attributes || []).find(function(attr) {
        return attr && attr.type === "model";
      });
      var _j = (modelConfig || {}).properties, _k = (_j === void 0 ? {} : _j).subscriptions, _l = (_k === void 0 ? {} : _k).level, level = _l === void 0 ? "on" : _l;
      authRule.areSubscriptionsPublic = !operations.includes("read") || level === "public";
    }
    if (isOwnerAuth) {
      resultRules.push(authRule);
      return;
    }
    resultRules.unshift(authRule);
  });
  return resultRules;
}
function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField, filterArg) {
  if (filterArg === void 0) {
    filterArg = false;
  }
  var selectionSet = generateSelectionSet(namespace, modelDefinition);
  var typeName = modelDefinition.name;
  var opName = "on" + transformerMutationType + typeName;
  var docArgs = [];
  var opArgs = [];
  if (filterArg) {
    docArgs.push("$filter: ModelSubscription" + typeName + "FilterInput");
    opArgs.push("filter: $filter");
  }
  if (isOwnerAuthorization) {
    docArgs.push("$" + ownerField + ": String!");
    opArgs.push(ownerField + ": $" + ownerField);
  }
  var docStr = docArgs.length ? "(" + docArgs.join(",") + ")" : "";
  var opStr = opArgs.length ? "(" + opArgs.join(",") + ")" : "";
  return [
    transformerMutationType,
    opName,
    "subscription operation" + docStr + "{\n			" + opName + opStr + "{\n				" + selectionSet + "\n			}\n		}"
  ];
}
function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {
  var selectionSet = generateSelectionSet(namespace, modelDefinition);
  var typeName = modelDefinition.name, pluralTypeName = modelDefinition.pluralName;
  var operation;
  var documentArgs;
  var operationArgs;
  var transformerMutationType;
  switch (graphQLOpType) {
    case "LIST":
      operation = "sync" + pluralTypeName;
      documentArgs = "($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model" + typeName + "FilterInput)";
      operationArgs = "(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)";
      selectionSet = "items {\n							" + selectionSet + "\n						}\n						nextToken\n						startedAt";
      break;
    case "CREATE":
      operation = "create" + typeName;
      documentArgs = "($input: Create" + typeName + "Input!)";
      operationArgs = "(input: $input)";
      transformerMutationType = TransformerMutationType.CREATE;
      break;
    case "UPDATE":
      operation = "update" + typeName;
      documentArgs = "($input: Update" + typeName + "Input!, $condition: Model" + typeName + "ConditionInput)";
      operationArgs = "(input: $input, condition: $condition)";
      transformerMutationType = TransformerMutationType.UPDATE;
      break;
    case "DELETE":
      operation = "delete" + typeName;
      documentArgs = "($input: Delete" + typeName + "Input!, $condition: Model" + typeName + "ConditionInput)";
      operationArgs = "(input: $input, condition: $condition)";
      transformerMutationType = TransformerMutationType.DELETE;
      break;
    case "GET":
      operation = "get" + typeName;
      documentArgs = "($id: ID!)";
      operationArgs = "(id: $id)";
      transformerMutationType = TransformerMutationType.GET;
      break;
    default:
      throw new Error("Invalid graphQlOpType " + graphQLOpType);
  }
  return [
    [
      transformerMutationType,
      operation,
      GraphQLOperationType[graphQLOpType] + " operation" + documentArgs + "{\n		" + operation + operationArgs + "{\n			" + selectionSet + "\n		}\n	}"
    ]
  ];
}
function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator2, id) {
  var operation;
  switch (opType) {
    case OpType.INSERT:
      operation = TransformerMutationType.CREATE;
      break;
    case OpType.UPDATE:
      operation = TransformerMutationType.UPDATE;
      break;
    case OpType.DELETE:
      operation = TransformerMutationType.DELETE;
      break;
    default:
      throw new Error("Invalid opType " + opType);
  }
  var replacer = function(k2, v2) {
    var isAWSJSON2 = k2 && v2 !== null && typeof v2 === "object" && modelDefinition.fields[k2] && modelDefinition.fields[k2].type === "AWSJSON";
    if (isAWSJSON2) {
      return JSON.stringify(v2);
    }
    return v2;
  };
  var modelId = getIdentifierValue(modelDefinition, element);
  var optionalId = OpType.INSERT && id ? { id } : {};
  var mutationEvent = modelInstanceCreator2(MutationEventConstructor, __assign(__assign({}, optionalId), { data: JSON.stringify(element, replacer), modelId, model: model.name, operation, condition: JSON.stringify(condition) }));
  return mutationEvent;
}
function predicateToGraphQLCondition(predicate, modelDefinition) {
  var result = {};
  if (!predicate || !Array.isArray(predicate.predicates)) {
    return result;
  }
  var keyFields = extractPrimaryKeyFieldNames(modelDefinition);
  return predicateToGraphQLFilter(predicate, keyFields);
}
function predicateToGraphQLFilter(predicatesGroup, fieldsToOmit, root) {
  if (fieldsToOmit === void 0) {
    fieldsToOmit = [];
  }
  if (root === void 0) {
    root = true;
  }
  var result = {};
  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {
    return result;
  }
  var type = predicatesGroup.type, predicates = predicatesGroup.predicates;
  var isList = type === "and" || type === "or";
  result[type] = isList ? [] : {};
  var children = [];
  predicates.forEach(function(predicate) {
    var _a2, _b;
    if (isPredicateObj(predicate)) {
      var field = predicate.field, operator = predicate.operator, operand = predicate.operand;
      if (fieldsToOmit.includes(field))
        return;
      var gqlField = (_a2 = {}, _a2[field] = (_b = {}, _b[operator] = operand, _b), _a2);
      children.push(gqlField);
      return;
    }
    var child2 = predicateToGraphQLFilter(predicate, fieldsToOmit, false);
    if (Object.keys(child2).length > 0) {
      children.push(child2);
    }
  });
  if (children.length === 1) {
    var _a = __read(children, 1), child = _a[0];
    if (
      // any nested list node
      isList && !root || // root list node where the only child is also a list node
      isList && root && ("and" in child || "or" in child)
    ) {
      delete result[type];
      Object.assign(result, child);
      return result;
    }
  }
  children.forEach(function(child2) {
    if (isList) {
      result[type].push(child2);
    } else {
      result[type] = child2;
    }
  });
  if (isList) {
    if (result[type].length === 0)
      return {};
  } else {
    if (Object.keys(result[type]).length === 0)
      return {};
  }
  return result;
}
function filterFields(group) {
  var fields7 = /* @__PURE__ */ new Set();
  if (!group || !Array.isArray(group.predicates))
    return fields7;
  var predicates = group.predicates;
  var stack = __spread(predicates);
  while (stack.length > 0) {
    var current = stack.pop();
    if (isPredicateObj(current)) {
      fields7.add(current.field);
    } else if (isPredicateGroup(current)) {
      stack.push.apply(stack, __spread(current.predicates));
    }
  }
  return fields7;
}
function dynamicAuthFields(modelDefinition) {
  var e_1, _a;
  var rules = getAuthorizationRules(modelDefinition);
  var fields7 = /* @__PURE__ */ new Set();
  try {
    for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
      var rule = rules_1_1.value;
      if (rule.groupsField && !rule.groups.length) {
        fields7.add(rule.groupsField);
      } else if (rule.ownerField) {
        fields7.add(rule.ownerField);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return))
        _a.call(rules_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return fields7;
}
function countFilterCombinations(group) {
  if (!group || !Array.isArray(group.predicates))
    return 0;
  var count = 0;
  var stack = [group];
  while (stack.length > 0) {
    var current = stack.pop();
    if (isPredicateGroup(current)) {
      var predicates = current.predicates, type = current.type;
      if (type === "or" && predicates.length > 1) {
        count += predicates.length;
      }
      stack.push.apply(stack, __spread(predicates));
    }
  }
  return count || 1;
}
function repeatedFieldInGroup(group) {
  if (!group || !Array.isArray(group.predicates))
    return null;
  var gqlFilter = predicateToGraphQLFilter(group);
  var stack = [gqlFilter];
  var hasGroupRepeatedFields = function(fields7) {
    var e_2, _a2;
    var seen = {};
    try {
      for (var fields_1 = __values(fields7), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
        var f2 = fields_1_1.value;
        var _b = __read(Object.keys(f2), 1), fieldName = _b[0];
        if (seen[fieldName]) {
          return fieldName;
        }
        seen[fieldName] = true;
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (fields_1_1 && !fields_1_1.done && (_a2 = fields_1.return))
          _a2.call(fields_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return null;
  };
  while (stack.length > 0) {
    var current = stack.pop();
    var _a = __read(Object.keys(current), 1), key = _a[0];
    var values = current[key];
    if (!Array.isArray(values)) {
      return null;
    }
    var predicateObjects = values.filter(function(v2) {
      return !Array.isArray(Object.values(v2)[0]);
    });
    var predicateGroups = values.filter(function(v2) {
      return Array.isArray(Object.values(v2)[0]);
    });
    if (key === "and") {
      var repeatedField = hasGroupRepeatedFields(predicateObjects);
      if (repeatedField) {
        return repeatedField;
      }
    }
    stack.push.apply(stack, __spread(predicateGroups));
  }
  return null;
}
var RTFError;
(function(RTFError2) {
  RTFError2[RTFError2["UnknownField"] = 0] = "UnknownField";
  RTFError2[RTFError2["MaxAttributes"] = 1] = "MaxAttributes";
  RTFError2[RTFError2["MaxCombinations"] = 2] = "MaxCombinations";
  RTFError2[RTFError2["RepeatedFieldname"] = 3] = "RepeatedFieldname";
  RTFError2[RTFError2["NotGroup"] = 4] = "NotGroup";
  RTFError2[RTFError2["FieldNotInType"] = 5] = "FieldNotInType";
})(RTFError || (RTFError = {}));
function generateRTFRemediation(errorType, modelDefinition, predicatesGroup) {
  var selSyncFields = filterFields(predicatesGroup);
  var selSyncFieldStr = __spread(selSyncFields).join(", ");
  var dynamicAuthModeFields = dynamicAuthFields(modelDefinition);
  var dynamicAuthFieldsStr = __spread(dynamicAuthModeFields).join(", ");
  var filterCombinations = countFilterCombinations(predicatesGroup);
  var repeatedField = repeatedFieldInGroup(predicatesGroup);
  switch (errorType) {
    case RTFError.UnknownField:
      return "Your API was generated with an older version of the CLI that doesn't support backend subscription filtering.To enable backend subscription filtering, upgrade your Amplify CLI to the latest version and push your app by running `amplify upgrade` followed by `amplify push`";
    case RTFError.MaxAttributes: {
      var message = "Your selective sync expression for " + modelDefinition.name + " contains " + selSyncFields.size + " different model fields: " + selSyncFieldStr + ".\n\n";
      if (dynamicAuthModeFields.size > 0) {
        message += "Note: the number of fields you can use with selective sync is affected by @auth rules configured on the model.\n\nDynamic auth modes, such as owner auth and dynamic group auth each utilize 1 field.\n" + ("You currently have " + dynamicAuthModeFields.size + " dynamic auth mode(s) configured on this model: " + dynamicAuthFieldsStr + ".");
      }
      return message;
    }
    case RTFError.MaxCombinations: {
      var message = "Your selective sync expression for " + modelDefinition.name + " contains " + filterCombinations + " field combinations (total number of predicates in an OR expression).\n\n";
      if (dynamicAuthModeFields.size > 0) {
        message += "Note: the number of fields you can use with selective sync is affected by @auth rules configured on the model.\n\nDynamic auth modes, such as owner auth and dynamic group auth factor in to the number of combinations you're using.\n" + ("You currently have " + dynamicAuthModeFields.size + " dynamic auth mode(s) configured on this model: " + dynamicAuthFieldsStr + ".");
      }
      return message;
    }
    case RTFError.RepeatedFieldname:
      return "Your selective sync expression for " + modelDefinition.name + " contains multiple entries for " + repeatedField + " in the same AND group.";
    case RTFError.NotGroup:
      return "Your selective sync expression for " + modelDefinition.name + " uses a `not` group. If you'd like to filter subscriptions in the backend, rewrite your expression using `ne` or `notContains` operators.";
    case RTFError.FieldNotInType:
      return "";
  }
}
function getUserGroupsFromToken(token, rule) {
  var userGroups = token[rule.groupClaim] || [];
  if (typeof userGroups === "string") {
    var parsedGroups = void 0;
    try {
      parsedGroups = JSON.parse(userGroups);
    } catch (e) {
      parsedGroups = userGroups;
    }
    userGroups = [].concat(parsedGroups);
  }
  return userGroups;
}
function getModelAuthModes(_a) {
  var authModeStrategy = _a.authModeStrategy, defaultAuthMode = _a.defaultAuthMode, modelName = _a.modelName, schema2 = _a.schema;
  return __awaiter(this, void 0, void 0, function() {
    var operations, modelAuthModes, error_1;
    var _this = this;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          operations = Object.values(ModelOperation);
          modelAuthModes = {
            CREATE: [],
            READ: [],
            UPDATE: [],
            DELETE: []
          };
          _b.label = 1;
        case 1:
          _b.trys.push([1, 3, , 4]);
          return [4, Promise.all(operations.map(function(operation) {
            return __awaiter(_this, void 0, void 0, function() {
              var authModes;
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, authModeStrategy({
                      schema: schema2,
                      modelName,
                      operation
                    })];
                  case 1:
                    authModes = _a2.sent();
                    if (typeof authModes === "string") {
                      modelAuthModes[operation] = [authModes];
                    } else if (Array.isArray(authModes) && authModes.length) {
                      modelAuthModes[operation] = authModes;
                    } else {
                      modelAuthModes[operation] = [defaultAuthMode];
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }))];
        case 2:
          _b.sent();
          return [3, 4];
        case 3:
          error_1 = _b.sent();
          logger28.debug("Error getting auth modes for model: " + modelName, error_1);
          return [3, 4];
        case 4:
          return [2, modelAuthModes];
      }
    });
  });
}
function getForbiddenError(error) {
  var forbiddenErrorMessages = [
    "Request failed with status code 401",
    "Request failed with status code 403"
  ];
  var forbiddenError;
  if (error && error.errors) {
    forbiddenError = error.errors.find(function(err) {
      return forbiddenErrorMessages.includes(err.message);
    });
  } else if (error && error.message) {
    forbiddenError = error;
  }
  if (forbiddenError) {
    return forbiddenError.message;
  }
  return null;
}
function getClientSideAuthError(error) {
  var clientSideAuthErrors = Object.values(GraphQLAuthError);
  var clientSideError = error && error.message && clientSideAuthErrors.find(function(clientError) {
    return error.message.includes(clientError);
  });
  return clientSideError || null;
}
function getTokenForCustomAuth(authMode, amplifyConfig) {
  if (amplifyConfig === void 0) {
    amplifyConfig = {};
  }
  return __awaiter(this, void 0, void 0, function() {
    var _a, functionAuthProvider, token, error_2;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA))
            return [3, 6];
          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? { functionAuthProvider: null } : _a).functionAuthProvider;
          if (!(functionAuthProvider && typeof functionAuthProvider === "function"))
            return [3, 5];
          _b.label = 1;
        case 1:
          _b.trys.push([1, 3, , 4]);
          return [4, functionAuthProvider()];
        case 2:
          token = _b.sent().token;
          return [2, token];
        case 3:
          error_2 = _b.sent();
          throw new Error("Error retrieving token from `functionAuthProvider`: " + error_2);
        case 4:
          return [3, 6];
        case 5:
          throw new Error("You must provide a `functionAuthProvider` function to `DataStore.configure` when using " + GRAPHQL_AUTH_MODE.AWS_LAMBDA);
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function getIdentifierValue(modelDefinition, model) {
  var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);
  var idOrPk = pkFieldNames.map(function(f2) {
    return model[f2];
  }).join(IDENTIFIER_KEY_SEPARATOR);
  return idOrPk;
}

// node_modules/idb/build/esm/wrap-idb-value.js
var instanceOfAny = (object, constructors) => constructors.some((c2) => object instanceof c2);
var idbProxyableTypes;
var cursorAdvanceMethods;
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
var cursorRequestMap = /* @__PURE__ */ new WeakMap();
var transactionDoneMap = /* @__PURE__ */ new WeakMap();
var transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
var transformCache = /* @__PURE__ */ new WeakMap();
var reverseTransformCache = /* @__PURE__ */ new WeakMap();
function promisifyRequest(request) {
  const promise = new Promise((resolve4, reject) => {
    const unlisten = () => {
      request.removeEventListener("success", success);
      request.removeEventListener("error", error);
    };
    const success = () => {
      resolve4(wrap2(request.result));
      unlisten();
    };
    const error = () => {
      reject(request.error);
      unlisten();
    };
    request.addEventListener("success", success);
    request.addEventListener("error", error);
  });
  promise.then((value) => {
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request);
    }
  }).catch(() => {
  });
  reverseTransformCache.set(promise, request);
  return promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  const done = new Promise((resolve4, reject) => {
    const unlisten = () => {
      tx.removeEventListener("complete", complete);
      tx.removeEventListener("error", error);
      tx.removeEventListener("abort", error);
    };
    const complete = () => {
      resolve4();
      unlisten();
    };
    const error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError"));
      unlisten();
    };
    tx.addEventListener("complete", complete);
    tx.addEventListener("error", error);
    tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
var idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      if (prop === "done")
        return transactionDoneMap.get(target);
      if (prop === "objectStoreNames") {
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      }
      if (prop === "store") {
        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    }
    return wrap2(target[prop]);
  },
  set(target, prop, value) {
    target[prop] = value;
    return true;
  },
  has(target, prop) {
    if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
      return true;
    }
    return prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
    return function(storeNames, ...args) {
      const tx = func.call(unwrap(this), storeNames, ...args);
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap2(tx);
    };
  }
  if (getCursorAdvanceMethods().includes(func)) {
    return function(...args) {
      func.apply(unwrap(this), args);
      return wrap2(cursorRequestMap.get(this));
    };
  }
  return function(...args) {
    return wrap2(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  if (typeof value === "function")
    return wrapFunction(value);
  if (value instanceof IDBTransaction)
    cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes()))
    return new Proxy(value, idbProxyTraps);
  return value;
}
function wrap2(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  const newValue = transformCachableValue(value);
  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }
  return newValue;
}
var unwrap = (value) => reverseTransformCache.get(value);

// node_modules/idb/build/esm/index.js
function openDB(name, version4, { blocked, upgrade, blocking, terminated } = {}) {
  const request = indexedDB.open(name, version4);
  const openPromise = wrap2(request);
  if (upgrade) {
    request.addEventListener("upgradeneeded", (event) => {
      upgrade(wrap2(request.result), event.oldVersion, event.newVersion, wrap2(request.transaction));
    });
  }
  if (blocked)
    request.addEventListener("blocked", () => blocked());
  openPromise.then((db) => {
    if (terminated)
      db.addEventListener("close", () => terminated());
    if (blocking)
      db.addEventListener("versionchange", () => blocking());
  }).catch(() => {
  });
  return openPromise;
}
function deleteDB(name, { blocked } = {}) {
  const request = indexedDB.deleteDatabase(name);
  if (blocked)
    request.addEventListener("blocked", () => blocked());
  return wrap2(request).then(() => void 0);
}
var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
var writeMethods = ["put", "add", "delete", "clear"];
var cachedMethods = /* @__PURE__ */ new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
    return;
  }
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  const targetFuncName = prop.replace(/FromIndex$/, "");
  const useIndex = prop !== targetFuncName;
  const isWrite = writeMethods.includes(targetFuncName);
  if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
  ) {
    return;
  }
  const method = async function(storeName, ...args) {
    const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
    let target2 = tx.store;
    if (useIndex)
      target2 = target2.index(args.shift());
    const returnVal = await target2[targetFuncName](...args);
    if (isWrite)
      await tx.done;
    return returnVal;
  };
  cachedMethods.set(prop, method);
  return method;
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));

// node_modules/@aws-amplify/datastore/lib-esm/storage/relationship.js
var ModelRelationship = (
  /** @class */
  function() {
    function ModelRelationship2(model, field) {
      if (!isFieldAssociation(model.schema, field)) {
        throw new Error(model.schema.name + "." + field + " is not a relationship.");
      }
      this.localModel = model;
      this._field = field;
    }
    ModelRelationship2.from = function(model, field) {
      if (isFieldAssociation(model.schema, field)) {
        return new this(model, field);
      } else {
        return null;
      }
    };
    ModelRelationship2.allFrom = function(model) {
      var e_1, _a;
      var relationships = [];
      try {
        for (var _b = __values(Object.keys(model.schema.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var field = _c.value;
          var relationship = ModelRelationship2.from(model, field);
          relationship && relationships.push(relationship);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return relationships;
    };
    Object.defineProperty(ModelRelationship2.prototype, "localDefinition", {
      get: function() {
        return this.localModel.schema;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "field", {
      /**
       * The virtual/computed field on the local model that should contain
       * the related model.
       */
      get: function() {
        return this._field;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "localConstructor", {
      /**
       * The constructor that can be used to query DataStore or create instance for
       * the local model.
       */
      get: function() {
        return this.localModel.builder;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "type", {
      /**
       * The name/type of the relationship the local model has with the remote model
       * via the defined local model field.
       */
      get: function() {
        return this.localAssocation.connectionType;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "localAssocation", {
      /**
       * Raw details about the local FK as-is from the local model's field definition in
       * the schema. This field requires interpretation.
       *
       * @see localJoinFields
       * @see localAssociatedWith
       */
      get: function() {
        return this.localDefinition.fields[this.field].association;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "localJoinFields", {
      /**
       * The field names on the local model that can be used to query or queried to match
       * with instances of the remote model.
       *
       * Fields are returned in-order to match the order of `this.remoteKeyFields`.
       */
      get: function() {
        if (this.localAssocation.targetName) {
          return [this.localAssocation.targetName];
        } else if (this.localAssocation.targetNames) {
          return this.localAssocation.targetNames;
        } else {
          return this.localPKFields;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "localPKFields", {
      /**
       * The field names on the local model that uniquely identify it.
       *
       * These fields may or may not be relevant to the join fields.
       */
      get: function() {
        return this.localModel.pkField;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "remoteDefinition", {
      get: function() {
        var _a;
        return (_a = this.remoteModelType.modelConstructor) === null || _a === void 0 ? void 0 : _a.schema;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "remoteModelType", {
      get: function() {
        return this.localDefinition.fields[this.field].type;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "remoteModelConstructor", {
      /**
       * Constructor that can be used to query DataStore or create instances for
       * the remote model.
       */
      get: function() {
        return this.remoteModelType.modelConstructor.builder;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "remotePKFields", {
      /**
       * The field names on the remote model that uniquely identify it.
       *
       * These fields may or may not be relevant to the join fields.
       */
      get: function() {
        var _a;
        return ((_a = this.remoteModelType.modelConstructor) === null || _a === void 0 ? void 0 : _a.pkField) || ["id"];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "localAssociatedWith", {
      /**
       * The `associatedWith` fields from the local perspective.
       *
       * When present, these fields indicate which fields on the remote model to use
       * when looking for a remote association and/or determining the final remote
       * key fields.
       */
      get: function() {
        if (this.localAssocation.connectionType === "HAS_MANY" || this.localAssocation.connectionType === "HAS_ONE") {
          return Array.isArray(this.localAssocation.associatedWith) ? this.localAssocation.associatedWith : [this.localAssocation.associatedWith];
        } else {
          return void 0;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "explicitRemoteAssociation", {
      /**
       * The `remote` model's associated field's `assocation` metadata, if
       * present.
       *
       * This is used when determining if the remote model's associated field
       * specifies which FK fields to use. If this value is `undefined`, the
       * name of the remote field (`this.localAssociatedWith`) *is* the remote
       * key field.
       */
      get: function() {
        var _a;
        if (this.localAssociatedWith) {
          if (this.localAssociatedWith.length === 1) {
            return (_a = this.remoteDefinition.fields[this.localAssociatedWith[0]]) === null || _a === void 0 ? void 0 : _a.association;
          } else {
            return void 0;
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "remoteJoinFields", {
      /**
       * The field names on the remote model that can used to query or queried to match
       * with instances of the local model.
       *
       * Fields are returned in-order to match the order of `this.localKeyFields`.
       */
      get: function() {
        var _a, _b, _c;
        if ((_a = this.explicitRemoteAssociation) === null || _a === void 0 ? void 0 : _a.targetName) {
          return [this.explicitRemoteAssociation.targetName];
        } else if ((_b = this.explicitRemoteAssociation) === null || _b === void 0 ? void 0 : _b.targetNames) {
          return (_c = this.explicitRemoteAssociation) === null || _c === void 0 ? void 0 : _c.targetNames;
        } else if (this.localAssociatedWith) {
          return this.localAssociatedWith;
        } else {
          return this.remotePKFields;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ModelRelationship2.prototype, "isComplete", {
      /**
       * Whether this relationship everything necessary to get, set, and query from
       * the perspective of the local model provided at instantiation.
       */
      get: function() {
        return this.localJoinFields.length > 0 && this.remoteJoinFields.length > 0;
      },
      enumerable: true,
      configurable: true
    });
    ModelRelationship2.prototype.createLocalFKObject = function(remote) {
      var fk = {};
      for (var i2 = 0; i2 < this.localJoinFields.length; i2++) {
        fk[this.localJoinFields[i2]] = remote[this.remoteJoinFields[i2]];
      }
      return fk;
    };
    ModelRelationship2.prototype.createRemoteQueryObject = function(local) {
      var query = {};
      for (var i2 = 0; i2 < this.remoteJoinFields.length; i2++) {
        var localValue = local[this.localJoinFields[i2]];
        if (localValue === null || localValue === void 0)
          return null;
        query[this.remoteJoinFields[i2]] = local[this.localJoinFields[i2]];
      }
      return query;
    };
    return ModelRelationship2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/StorageAdapterBase.js
var logger29 = new ConsoleLogger("DataStore");
var DB_NAME = "amplify-datastore";
var StorageAdapterBase = (
  /** @class */
  function() {
    function StorageAdapterBase2() {
      this.dbName = DB_NAME;
    }
    StorageAdapterBase2.prototype.setUp = function(theSchema, namespaceResolver2, modelInstanceCreator2, getModelConstructorByModelName2, sessionId) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, error_1;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.preSetUpChecks()];
            case 1:
              _b.sent();
              if (!!this.initPromise)
                return [3, 2];
              this.initPromise = new Promise(function(res, rej) {
                _this.resolve = res;
                _this.reject = rej;
              });
              return [3, 4];
            case 2:
              return [4, this.initPromise];
            case 3:
              _b.sent();
              return [
                2
                /*return*/
              ];
            case 4:
              if (sessionId) {
                this.dbName = DB_NAME + "-" + sessionId;
              }
              this.schema = theSchema;
              this.namespaceResolver = namespaceResolver2;
              this.modelInstanceCreator = modelInstanceCreator2;
              this.getModelConstructorByModelName = getModelConstructorByModelName2;
              _b.label = 5;
            case 5:
              _b.trys.push([5, 8, , 9]);
              if (!!this.db)
                return [3, 7];
              _a = this;
              return [4, this.initDb()];
            case 6:
              _a.db = _b.sent();
              this.resolve();
              _b.label = 7;
            case 7:
              return [3, 9];
            case 8:
              error_1 = _b.sent();
              this.reject(error_1);
              return [3, 9];
            case 9:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    StorageAdapterBase2.prototype.getStorenameForModel = function(modelConstructor) {
      var namespace = this.namespaceResolver(modelConstructor);
      var modelName = modelConstructor.name;
      return getStorename(namespace, modelName);
    };
    StorageAdapterBase2.prototype.getIndexKeyValuesFromModel = function(model) {
      var modelConstructor = Object.getPrototypeOf(model).constructor;
      var namespaceName = this.namespaceResolver(modelConstructor);
      var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);
      return extractPrimaryKeyValues(model, keys);
    };
    StorageAdapterBase2.prototype.saveMetadata = function(model) {
      var _this = this;
      var modelConstructor = Object.getPrototypeOf(model).constructor;
      var storeName = this.getStorenameForModel(modelConstructor);
      var namespaceName = this.namespaceResolver(modelConstructor);
      var connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);
      var set2 = /* @__PURE__ */ new Set();
      var connectionStoreNames = Object.values(connectedModels).map(function(_a) {
        var modelName = _a.modelName, item = _a.item, instance2 = _a.instance;
        var storeName2 = getStorename(namespaceName, modelName);
        set2.add(storeName2);
        var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);
        return { storeName: storeName2, item, instance: instance2, keys };
      });
      var modelKeyValues = this.getIndexKeyValuesFromModel(model);
      return { storeName, set: set2, connectionStoreNames, modelKeyValues };
    };
    StorageAdapterBase2.prototype.validateSaveCondition = function(condition, fromDB) {
      if (!(condition && fromDB)) {
        return;
      }
      var predicates = ModelPredicateCreator.getPredicates(condition);
      var _a = predicates, predicateObjs = _a.predicates, type = _a.type;
      var isValid2 = validatePredicate(fromDB, type, predicateObjs);
      if (!isValid2) {
        var msg = "Conditional update failed";
        logger29.error(msg, { model: fromDB, condition: predicateObjs });
        throw new Error(msg);
      }
    };
    StorageAdapterBase2.prototype.load = function(namespaceName, srcModelName, records) {
      return __awaiter(this, void 0, void 0, function() {
        var namespace, relations, connectionStoreNames, modelConstructor;
        var _this = this;
        return __generator(this, function(_a) {
          namespace = this.schema.namespaces[namespaceName];
          relations = namespace.relationships[srcModelName].relationTypes;
          connectionStoreNames = relations.map(function(_a2) {
            var modelName = _a2.modelName;
            return getStorename(namespaceName, modelName);
          });
          modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);
          if (connectionStoreNames.length === 0) {
            return [2, records.map(function(record) {
              return _this.modelInstanceCreator(modelConstructor, record);
            })];
          }
          return [2, records.map(function(record) {
            return _this.modelInstanceCreator(modelConstructor, record);
          })];
        });
      });
    };
    StorageAdapterBase2.prototype.keyValueFromPredicate = function(predicates, keyPath) {
      var e_1, _a;
      var predicateObjs = predicates.predicates;
      if (predicateObjs.length !== keyPath.length) {
        return;
      }
      var keyValues = [];
      var _loop_1 = function(key2) {
        var predicateObj = predicateObjs.find(function(p2) {
          return isPredicateObj(p2) && p2.field === key2 && p2.operator === "eq" && p2.operand !== null && p2.operand !== void 0;
        });
        predicateObj && keyValues.push(predicateObj.operand);
      };
      try {
        for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {
          var key = keyPath_1_1.value;
          _loop_1(key);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return))
            _a.call(keyPath_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return keyValues.length === keyPath.length ? keyValues : void 0;
    };
    StorageAdapterBase2.prototype.queryMetadata = function(modelConstructor, predicate, pagination) {
      var storeName = this.getStorenameForModel(modelConstructor);
      var namespaceName = this.namespaceResolver(modelConstructor);
      var predicates = predicate && ModelPredicateCreator.getPredicates(predicate);
      var keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);
      var queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);
      var hasSort = pagination && pagination.sort;
      var hasPagination = pagination && pagination.limit;
      return {
        storeName,
        namespaceName,
        queryByKey,
        predicates,
        hasSort,
        hasPagination
      };
    };
    StorageAdapterBase2.prototype.delete = function(modelOrModelConstructor, condition) {
      return __awaiter(this, void 0, void 0, function() {
        var deleteQueue, modelConstructor, namespace, models, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValues, fromDB, msg, predicates, _a, predicateObjs, type, isValid2, msg, deletedModels;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.preOpCheck()];
            case 1:
              _b.sent();
              deleteQueue = [];
              if (!isModelConstructor(modelOrModelConstructor))
                return [3, 9];
              modelConstructor = modelOrModelConstructor;
              namespace = this.namespaceResolver(modelConstructor);
              return [4, this.query(modelConstructor, condition)];
            case 2:
              models = _b.sent();
              if (!(condition !== void 0))
                return [3, 5];
              return [4, this.deleteTraverse(models, modelConstructor, namespace, deleteQueue)];
            case 3:
              _b.sent();
              return [4, this.deleteItem(deleteQueue)];
            case 4:
              _b.sent();
              deletedModels = deleteQueue.reduce(function(acc, _a2) {
                var items = _a2.items;
                return acc.concat(items);
              }, []);
              return [2, [models, deletedModels]];
            case 5:
              return [4, this.deleteTraverse(models, modelConstructor, namespace, deleteQueue)];
            case 6:
              _b.sent();
              return [4, this.deleteItem(deleteQueue)];
            case 7:
              _b.sent();
              deletedModels = deleteQueue.reduce(function(acc, _a2) {
                var items = _a2.items;
                return acc.concat(items);
              }, []);
              return [2, [models, deletedModels]];
            case 8:
              return [3, 16];
            case 9:
              model = modelOrModelConstructor;
              modelConstructor = Object.getPrototypeOf(model).constructor;
              namespaceName = this.namespaceResolver(modelConstructor);
              storeName = this.getStorenameForModel(modelConstructor);
              if (!condition)
                return [3, 12];
              keyValues = this.getIndexKeyValuesFromModel(model);
              return [4, this._get(storeName, keyValues)];
            case 10:
              fromDB = _b.sent();
              if (fromDB === void 0) {
                msg = "Model instance not found in storage";
                logger29.warn(msg, { model });
                return [2, [[model], []]];
              }
              predicates = ModelPredicateCreator.getPredicates(condition);
              _a = predicates, predicateObjs = _a.predicates, type = _a.type;
              isValid2 = validatePredicate(fromDB, type, predicateObjs);
              if (!isValid2) {
                msg = "Conditional update failed";
                logger29.error(msg, { model: fromDB, condition: predicateObjs });
                throw new Error(msg);
              }
              return [4, this.deleteTraverse([model], modelConstructor, namespaceName, deleteQueue)];
            case 11:
              _b.sent();
              return [3, 14];
            case 12:
              return [4, this.deleteTraverse([model], modelConstructor, namespaceName, deleteQueue)];
            case 13:
              _b.sent();
              _b.label = 14;
            case 14:
              return [4, this.deleteItem(deleteQueue)];
            case 15:
              _b.sent();
              deletedModels = deleteQueue.reduce(function(acc, _a2) {
                var items = _a2.items;
                return acc.concat(items);
              }, []);
              return [2, [[model], deletedModels]];
            case 16:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    StorageAdapterBase2.prototype.deleteTraverse = function(models, modelConstructor, namespace, deleteQueue) {
      var models_1, models_1_1;
      var e_2, _a, e_3, _b;
      return __awaiter(this, void 0, void 0, function() {
        var cascadingRelationTypes, model, modelDefinition, modelMeta, relationships, relationships_1, relationships_1_1, r2, queryObject, relatedRecords, e_3_1, e_2_1;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              cascadingRelationTypes = ["HAS_ONE", "HAS_MANY"];
              _c.label = 1;
            case 1:
              _c.trys.push([1, 19, 20, 25]);
              models_1 = __asyncValues(models);
              _c.label = 2;
            case 2:
              return [4, models_1.next()];
            case 3:
              if (!(models_1_1 = _c.sent(), !models_1_1.done))
                return [3, 18];
              model = models_1_1.value;
              modelDefinition = this.schema.namespaces[namespace].models[modelConstructor.name];
              modelMeta = {
                builder: modelConstructor,
                schema: modelDefinition,
                pkField: extractPrimaryKeyFieldNames(modelDefinition)
              };
              relationships = ModelRelationship.allFrom(modelMeta).filter(function(r3) {
                return cascadingRelationTypes.includes(r3.type);
              });
              _c.label = 4;
            case 4:
              _c.trys.push([4, 11, 12, 17]);
              relationships_1 = __asyncValues(relationships);
              _c.label = 5;
            case 5:
              return [4, relationships_1.next()];
            case 6:
              if (!(relationships_1_1 = _c.sent(), !relationships_1_1.done))
                return [3, 10];
              r2 = relationships_1_1.value;
              queryObject = r2.createRemoteQueryObject(model);
              if (!(queryObject !== null))
                return [3, 9];
              return [4, this.query(r2.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(r2.remoteDefinition, queryObject))];
            case 7:
              relatedRecords = _c.sent();
              return [4, this.deleteTraverse(relatedRecords, r2.remoteModelConstructor, namespace, deleteQueue)];
            case 8:
              _c.sent();
              _c.label = 9;
            case 9:
              return [3, 5];
            case 10:
              return [3, 17];
            case 11:
              e_3_1 = _c.sent();
              e_3 = { error: e_3_1 };
              return [3, 17];
            case 12:
              _c.trys.push([12, , 15, 16]);
              if (!(relationships_1_1 && !relationships_1_1.done && (_b = relationships_1.return)))
                return [3, 14];
              return [4, _b.call(relationships_1)];
            case 13:
              _c.sent();
              _c.label = 14;
            case 14:
              return [3, 16];
            case 15:
              if (e_3)
                throw e_3.error;
              return [
                7
                /*endfinally*/
              ];
            case 16:
              return [
                7
                /*endfinally*/
              ];
            case 17:
              return [3, 2];
            case 18:
              return [3, 25];
            case 19:
              e_2_1 = _c.sent();
              e_2 = { error: e_2_1 };
              return [3, 25];
            case 20:
              _c.trys.push([20, , 23, 24]);
              if (!(models_1_1 && !models_1_1.done && (_a = models_1.return)))
                return [3, 22];
              return [4, _a.call(models_1)];
            case 21:
              _c.sent();
              _c.label = 22;
            case 22:
              return [3, 24];
            case 23:
              if (e_2)
                throw e_2.error;
              return [
                7
                /*endfinally*/
              ];
            case 24:
              return [
                7
                /*endfinally*/
              ];
            case 25:
              deleteQueue.push({
                storeName: getStorename(namespace, modelConstructor.name),
                items: models
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return StorageAdapterBase2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/IndexedDBAdapter.js
var logger30 = new ConsoleLogger("DataStore");
var MULTI_OR_CONDITION_SCAN_BREAKPOINT = 7;
var DB_VERSION = 3;
var IndexedDBAdapter = (
  /** @class */
  function(_super) {
    __extends(IndexedDBAdapter2, _super);
    function IndexedDBAdapter2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.safariCompatabilityMode = false;
      _this.canonicalKeyPath = function(keyArr) {
        if (_this.safariCompatabilityMode) {
          return keyArr.length > 1 ? keyArr : keyArr[0];
        }
        return keyArr;
      };
      return _this;
    }
    IndexedDBAdapter2.prototype.preSetUpChecks = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _a.sent();
              return [4, this.setSafariCompatabilityMode()];
            case 2:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.preOpCheck = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.initDb = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, openDB(this.dbName, DB_VERSION, {
                upgrade: function(db, oldVersion, newVersion, txn) {
                  return __awaiter(_this, void 0, void 0, function() {
                    var _a2, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, modelInCurrentSchema, newStore, cursor, count, e_1_1, error_1;
                    var e_1, _d;
                    var _this2 = this;
                    return __generator(this, function(_e) {
                      switch (_e.label) {
                        case 0:
                          if (oldVersion === 0) {
                            Object.keys(this.schema.namespaces).forEach(function(namespaceName2) {
                              var namespace = _this2.schema.namespaces[namespaceName2];
                              Object.keys(namespace.models).forEach(function(modelName2) {
                                var storeName2 = getStorename(namespaceName2, modelName2);
                                _this2.createObjectStoreForModel(db, namespaceName2, storeName2, modelName2);
                              });
                            });
                            return [
                              2
                              /*return*/
                            ];
                          }
                          if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3))
                            return [3, 16];
                          _e.label = 1;
                        case 1:
                          _e.trys.push([1, 14, , 15]);
                          _e.label = 2;
                        case 2:
                          _e.trys.push([2, 11, 12, 13]);
                          _a2 = __values(txn.objectStoreNames), _b = _a2.next();
                          _e.label = 3;
                        case 3:
                          if (!!_b.done)
                            return [3, 10];
                          storeName = _b.value;
                          origStore = txn.objectStore(storeName);
                          tmpName = "tmp_" + storeName;
                          origStore.name = tmpName;
                          _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;
                          modelInCurrentSchema = modelName in this.schema.namespaces[namespaceName].models;
                          if (!modelInCurrentSchema) {
                            db.deleteObjectStore(tmpName);
                            return [3, 9];
                          }
                          newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);
                          return [4, origStore.openCursor()];
                        case 4:
                          cursor = _e.sent();
                          count = 0;
                          _e.label = 5;
                        case 5:
                          if (!(cursor && cursor.value))
                            return [3, 8];
                          return [4, newStore.put(cursor.value)];
                        case 6:
                          _e.sent();
                          return [4, cursor.continue()];
                        case 7:
                          cursor = _e.sent();
                          count++;
                          return [3, 5];
                        case 8:
                          db.deleteObjectStore(tmpName);
                          logger30.debug(count + " " + storeName + " records migrated");
                          _e.label = 9;
                        case 9:
                          _b = _a2.next();
                          return [3, 3];
                        case 10:
                          return [3, 13];
                        case 11:
                          e_1_1 = _e.sent();
                          e_1 = { error: e_1_1 };
                          return [3, 13];
                        case 12:
                          try {
                            if (_b && !_b.done && (_d = _a2.return))
                              _d.call(_a2);
                          } finally {
                            if (e_1)
                              throw e_1.error;
                          }
                          return [
                            7
                            /*endfinally*/
                          ];
                        case 13:
                          Object.keys(this.schema.namespaces).forEach(function(namespaceName2) {
                            var namespace = _this2.schema.namespaces[namespaceName2];
                            var objectStoreNames = new Set(txn.objectStoreNames);
                            Object.keys(namespace.models).map(function(modelName2) {
                              return [modelName2, getStorename(namespaceName2, modelName2)];
                            }).filter(function(_a3) {
                              var _b2 = __read(_a3, 2), storeName2 = _b2[1];
                              return !objectStoreNames.has(storeName2);
                            }).forEach(function(_a3) {
                              var _b2 = __read(_a3, 2), modelName2 = _b2[0], storeName2 = _b2[1];
                              _this2.createObjectStoreForModel(db, namespaceName2, storeName2, modelName2);
                            });
                          });
                          return [3, 15];
                        case 14:
                          error_1 = _e.sent();
                          logger30.error("Error migrating IndexedDB data", error_1);
                          txn.abort();
                          throw error_1;
                        case 15:
                          return [
                            2
                            /*return*/
                          ];
                        case 16:
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  });
                }
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype._get = function(storeOrStoreName, keyArr) {
      return __awaiter(this, void 0, void 0, function() {
        var index, storeName, store2, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (typeof storeOrStoreName === "string") {
                storeName = storeOrStoreName;
                index = this.db.transaction(storeName, "readonly").store.index("byPk");
              } else {
                store2 = storeOrStoreName;
                index = store2.index("byPk");
              }
              return [4, index.get(this.canonicalKeyPath(keyArr))];
            case 1:
              result = _a.sent();
              return [2, result];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.clear = function() {
      var _a;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _b.sent();
              (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();
              return [4, deleteDB(this.dbName)];
            case 2:
              _b.sent();
              this.db = void 0;
              this.initPromise = void 0;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.save = function(model, condition) {
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function() {
        var _b, storeName, set2, connectionStoreNames, modelKeyValues, tx, store2, fromDB, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance2, keys, store_1, itemKeyValues, fromDB_1, opType, key, e_2_1;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _c.sent();
              _b = this.saveMetadata(model), storeName = _b.storeName, set2 = _b.set, connectionStoreNames = _b.connectionStoreNames, modelKeyValues = _b.modelKeyValues;
              tx = this.db.transaction(__spread([storeName], Array.from(set2.values())), "readwrite");
              store2 = tx.objectStore(storeName);
              return [4, this._get(store2, modelKeyValues)];
            case 2:
              fromDB = _c.sent();
              this.validateSaveCondition(condition, fromDB);
              result = [];
              _c.label = 3;
            case 3:
              _c.trys.push([3, 11, 12, 17]);
              connectionStoreNames_1 = __asyncValues(connectionStoreNames);
              _c.label = 4;
            case 4:
              return [4, connectionStoreNames_1.next()];
            case 5:
              if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done))
                return [3, 10];
              resItem = connectionStoreNames_1_1.value;
              storeName_1 = resItem.storeName, item = resItem.item, instance2 = resItem.instance, keys = resItem.keys;
              store_1 = tx.objectStore(storeName_1);
              itemKeyValues = keys.map(function(key2) {
                return item[key2];
              });
              return [4, this._get(store_1, itemKeyValues)];
            case 6:
              fromDB_1 = _c.sent();
              opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;
              if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT))
                return [3, 9];
              return [4, store_1.index("byPk").getKey(this.canonicalKeyPath(itemKeyValues))];
            case 7:
              key = _c.sent();
              return [4, store_1.put(item, key)];
            case 8:
              _c.sent();
              result.push([instance2, opType]);
              _c.label = 9;
            case 9:
              return [3, 4];
            case 10:
              return [3, 17];
            case 11:
              e_2_1 = _c.sent();
              e_2 = { error: e_2_1 };
              return [3, 17];
            case 12:
              _c.trys.push([12, , 15, 16]);
              if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return)))
                return [3, 14];
              return [4, _a.call(connectionStoreNames_1)];
            case 13:
              _c.sent();
              _c.label = 14;
            case 14:
              return [3, 16];
            case 15:
              if (e_2)
                throw e_2.error;
              return [
                7
                /*endfinally*/
              ];
            case 16:
              return [
                7
                /*endfinally*/
              ];
            case 17:
              return [4, tx.done];
            case 18:
              _c.sent();
              return [2, result];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.query = function(modelConstructor, predicate, pagination) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, storeName, namespaceName, queryByKey, predicates, hasSort, hasPagination, records;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _b.sent();
              _a = this.queryMetadata(modelConstructor, predicate, pagination), storeName = _a.storeName, namespaceName = _a.namespaceName, queryByKey = _a.queryByKey, predicates = _a.predicates, hasSort = _a.hasSort, hasPagination = _a.hasPagination;
              return [4, function() {
                return __awaiter(_this, void 0, void 0, function() {
                  var record, filtered, all;
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!queryByKey)
                          return [3, 2];
                        return [4, this.getByKey(storeName, queryByKey)];
                      case 1:
                        record = _a2.sent();
                        return [2, record ? [record] : []];
                      case 2:
                        if (!predicates)
                          return [3, 4];
                        return [4, this.filterOnPredicate(storeName, predicates)];
                      case 3:
                        filtered = _a2.sent();
                        return [2, this.inMemoryPagination(filtered, pagination)];
                      case 4:
                        if (!hasSort)
                          return [3, 6];
                        return [4, this.getAll(storeName)];
                      case 5:
                        all = _a2.sent();
                        return [2, this.inMemoryPagination(all, pagination)];
                      case 6:
                        if (hasPagination) {
                          return [2, this.enginePagination(storeName, pagination)];
                        }
                        return [2, this.getAll(storeName)];
                    }
                  });
                });
              }()];
            case 2:
              records = _b.sent();
              return [4, this.load(namespaceName, modelConstructor.name, records)];
            case 3:
              return [2, _b.sent()];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.queryOne = function(modelConstructor, firstOrLast) {
      if (firstOrLast === void 0) {
        firstOrLast = QueryOne.FIRST;
      }
      return __awaiter(this, void 0, void 0, function() {
        var storeName, cursor, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _a.sent();
              storeName = this.getStorenameForModel(modelConstructor);
              return [4, this.db.transaction([storeName], "readonly").objectStore(storeName).openCursor(void 0, firstOrLast === QueryOne.FIRST ? "next" : "prev")];
            case 2:
              cursor = _a.sent();
              result = cursor ? cursor.value : void 0;
              return [2, result && this.modelInstanceCreator(modelConstructor, result)];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.batchSave = function(modelConstructor, items) {
      return __awaiter(this, void 0, void 0, function() {
        var modelName, namespaceName, storeName, result, txn, store2, _loop_1, this_1, items_1, items_1_1, item, e_3_1;
        var e_3, _a;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.checkPrivate()];
            case 1:
              _b.sent();
              if (items.length === 0) {
                return [2, []];
              }
              modelName = modelConstructor.name;
              namespaceName = this.namespaceResolver(modelConstructor);
              storeName = this.getStorenameForModel(modelConstructor);
              result = [];
              txn = this.db.transaction(storeName, "readwrite");
              store2 = txn.store;
              _loop_1 = function(item2) {
                var model, connectedModels, keyValues, _deleted, index, key, instance2;
                return __generator(this, function(_a2) {
                  switch (_a2.label) {
                    case 0:
                      model = this_1.modelInstanceCreator(modelConstructor, item2);
                      connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);
                      keyValues = this_1.getIndexKeyValuesFromModel(model);
                      _deleted = item2._deleted;
                      index = store2.index("byPk");
                      return [4, index.getKey(this_1.canonicalKeyPath(keyValues))];
                    case 1:
                      key = _a2.sent();
                      if (!!_deleted)
                        return [3, 3];
                      instance2 = connectedModels.find(function(_a3) {
                        var instance3 = _a3.instance;
                        var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance3);
                        return keysEqual(instanceKeyValues, keyValues);
                      }).instance;
                      result.push([
                        instance2,
                        key ? OpType.UPDATE : OpType.INSERT
                      ]);
                      return [4, store2.put(instance2, key)];
                    case 2:
                      _a2.sent();
                      return [3, 5];
                    case 3:
                      result.push([item2, OpType.DELETE]);
                      if (!key)
                        return [3, 5];
                      return [4, store2.delete(key)];
                    case 4:
                      _a2.sent();
                      _a2.label = 5;
                    case 5:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              };
              this_1 = this;
              _b.label = 2;
            case 2:
              _b.trys.push([2, 7, 8, 9]);
              items_1 = __values(items), items_1_1 = items_1.next();
              _b.label = 3;
            case 3:
              if (!!items_1_1.done)
                return [3, 6];
              item = items_1_1.value;
              return [5, _loop_1(item)];
            case 4:
              _b.sent();
              _b.label = 5;
            case 5:
              items_1_1 = items_1.next();
              return [3, 3];
            case 6:
              return [3, 9];
            case 7:
              e_3_1 = _b.sent();
              e_3 = { error: e_3_1 };
              return [3, 9];
            case 8:
              try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                  _a.call(items_1);
              } finally {
                if (e_3)
                  throw e_3.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 9:
              return [4, txn.done];
            case 10:
              _b.sent();
              return [2, result];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.deleteItem = function(deleteQueue) {
      var e_4, _a, e_5, _b;
      return __awaiter(this, void 0, void 0, function() {
        var connectionStoreNames, tx, _c, _d, deleteItem, storeName, items, store2, items_2, items_2_1, item, key, keyValues, itemKey, e_5_1, e_4_1;
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              connectionStoreNames = deleteQueue.map(function(_a2) {
                var storeName2 = _a2.storeName;
                return storeName2;
              });
              tx = this.db.transaction(__spread(connectionStoreNames), "readwrite");
              _e.label = 1;
            case 1:
              _e.trys.push([1, 22, 23, 28]);
              _c = __asyncValues(deleteQueue);
              _e.label = 2;
            case 2:
              return [4, _c.next()];
            case 3:
              if (!(_d = _e.sent(), !_d.done))
                return [3, 21];
              deleteItem = _d.value;
              storeName = deleteItem.storeName, items = deleteItem.items;
              store2 = tx.objectStore(storeName);
              _e.label = 4;
            case 4:
              _e.trys.push([4, 14, 15, 20]);
              items_2 = __asyncValues(items);
              _e.label = 5;
            case 5:
              return [4, items_2.next()];
            case 6:
              if (!(items_2_1 = _e.sent(), !items_2_1.done))
                return [3, 13];
              item = items_2_1.value;
              if (!item)
                return [3, 12];
              key = void 0;
              if (!(typeof item === "object"))
                return [3, 8];
              keyValues = this.getIndexKeyValuesFromModel(item);
              return [4, store2.index("byPk").getKey(this.canonicalKeyPath(keyValues))];
            case 7:
              key = _e.sent();
              return [3, 10];
            case 8:
              itemKey = item.toString();
              return [4, store2.index("byPk").getKey(itemKey)];
            case 9:
              key = _e.sent();
              _e.label = 10;
            case 10:
              if (!(key !== void 0))
                return [3, 12];
              return [4, store2.delete(key)];
            case 11:
              _e.sent();
              _e.label = 12;
            case 12:
              return [3, 5];
            case 13:
              return [3, 20];
            case 14:
              e_5_1 = _e.sent();
              e_5 = { error: e_5_1 };
              return [3, 20];
            case 15:
              _e.trys.push([15, , 18, 19]);
              if (!(items_2_1 && !items_2_1.done && (_b = items_2.return)))
                return [3, 17];
              return [4, _b.call(items_2)];
            case 16:
              _e.sent();
              _e.label = 17;
            case 17:
              return [3, 19];
            case 18:
              if (e_5)
                throw e_5.error;
              return [
                7
                /*endfinally*/
              ];
            case 19:
              return [
                7
                /*endfinally*/
              ];
            case 20:
              return [3, 2];
            case 21:
              return [3, 28];
            case 22:
              e_4_1 = _e.sent();
              e_4 = { error: e_4_1 };
              return [3, 28];
            case 23:
              _e.trys.push([23, , 26, 27]);
              if (!(_d && !_d.done && (_a = _c.return)))
                return [3, 25];
              return [4, _a.call(_c)];
            case 24:
              _e.sent();
              _e.label = 25;
            case 25:
              return [3, 27];
            case 26:
              if (e_4)
                throw e_4.error;
              return [
                7
                /*endfinally*/
              ];
            case 27:
              return [
                7
                /*endfinally*/
              ];
            case 28:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.checkPrivate = function() {
      return __awaiter(this, void 0, void 0, function() {
        var isPrivate;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, isPrivateMode().then(function(isPrivate2) {
                return isPrivate2;
              })];
            case 1:
              isPrivate = _a.sent();
              if (isPrivate) {
                logger30.error("IndexedDB not supported in this browser's private mode");
                return [2, Promise.reject("IndexedDB not supported in this browser's private mode")];
              } else {
                return [2, Promise.resolve()];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.setSafariCompatabilityMode = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = this;
              return [4, isSafariCompatabilityMode()];
            case 1:
              _a.safariCompatabilityMode = _b.sent();
              if (this.safariCompatabilityMode === true) {
                logger30.debug("IndexedDB Adapter is running in Safari Compatability Mode");
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.getNamespaceAndModelFromStorename = function(storeName) {
      var _a = __read(storeName.split("_")), namespaceName = _a[0], modelNameArr = _a.slice(1);
      return {
        namespaceName,
        modelName: modelNameArr.join("_")
      };
    };
    IndexedDBAdapter2.prototype.createObjectStoreForModel = function(db, namespaceName, storeName, modelName) {
      var store2 = db.createObjectStore(storeName, {
        autoIncrement: true
      });
      var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;
      indexes.forEach(function(_a) {
        var _b = __read(_a, 3), idxName = _b[0], keyPath = _b[1], options = _b[2];
        store2.createIndex(idxName, keyPath, options);
      });
      return store2;
    };
    IndexedDBAdapter2.prototype.getByKey = function(storeName, keyValue) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this._get(storeName, keyValue)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.getAll = function(storeName) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.db.getAll(storeName)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.matchingIndexQueries = function(storeName, predicates, transaction) {
      var e_6, _a, e_7, _b;
      var _this = this;
      var queries = [];
      var predicateIndex = /* @__PURE__ */ new Map();
      try {
        for (var predicates_1 = __values(predicates), predicates_1_1 = predicates_1.next(); !predicates_1_1.done; predicates_1_1 = predicates_1.next()) {
          var predicate = predicates_1_1.value;
          predicateIndex.set(String(predicate.field), predicate);
        }
      } catch (e_6_1) {
        e_6 = { error: e_6_1 };
      } finally {
        try {
          if (predicates_1_1 && !predicates_1_1.done && (_a = predicates_1.return))
            _a.call(predicates_1);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
      var store2 = transaction.objectStore(storeName);
      var _loop_2 = function(name_12) {
        var e_8, _a2;
        var idx = store2.index(name_12);
        var keypath = Array.isArray(idx.keyPath) ? idx.keyPath : [idx.keyPath];
        var matchingPredicateValues = [];
        try {
          for (var keypath_1 = (e_8 = void 0, __values(keypath)), keypath_1_1 = keypath_1.next(); !keypath_1_1.done; keypath_1_1 = keypath_1.next()) {
            var field = keypath_1_1.value;
            var p2 = predicateIndex.get(field);
            if (p2 && p2.operand !== null && p2.operand !== void 0) {
              matchingPredicateValues.push(p2.operand);
            } else {
              break;
            }
          }
        } catch (e_8_1) {
          e_8 = { error: e_8_1 };
        } finally {
          try {
            if (keypath_1_1 && !keypath_1_1.done && (_a2 = keypath_1.return))
              _a2.call(keypath_1);
          } finally {
            if (e_8)
              throw e_8.error;
          }
        }
        if (matchingPredicateValues.length === keypath.length) {
          queries.push(function() {
            return _this.db.transaction(storeName).objectStore(storeName).index(name_12).getAll(_this.canonicalKeyPath(matchingPredicateValues));
          });
        }
      };
      try {
        for (var _c = __values(store2.indexNames), _d = _c.next(); !_d.done; _d = _c.next()) {
          var name_1 = _d.value;
          _loop_2(name_1);
        }
      } catch (e_7_1) {
        e_7 = { error: e_7_1 };
      } finally {
        try {
          if (_d && !_d.done && (_b = _c.return))
            _b.call(_c);
        } finally {
          if (e_7)
            throw e_7.error;
        }
      }
      return queries;
    };
    IndexedDBAdapter2.prototype.baseQueryIndex = function(storeName, predicates, transaction) {
      return __awaiter(this, void 0, void 0, function() {
        var predicateObjs, type, fieldPredicates, txn, result, groupQueries, objectQueries, indexedQueries;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              predicateObjs = predicates.predicates, type = predicates.type;
              while (predicateObjs.length === 1 && isPredicateGroup(predicateObjs[0]) && predicateObjs[0].type !== "not") {
                type = predicateObjs[0].type;
                predicateObjs = predicateObjs[0].predicates;
              }
              fieldPredicates = predicateObjs.filter(function(p2) {
                return isPredicateObj(p2) && p2.operator === "eq";
              });
              txn = transaction || this.db.transaction(storeName);
              result = {};
              if (!(type === "or"))
                return [3, 2];
              return [4, Promise.all(predicateObjs.filter(function(o2) {
                return isPredicateGroup(o2) && o2.type === "and";
              }).map(function(o2) {
                return _this.baseQueryIndex(storeName, o2, txn);
              })).then(function(queries) {
                return queries.filter(function(q2) {
                  return q2.indexedQueries.length === 1;
                }).map(function(i2) {
                  return i2.indexedQueries;
                });
              })];
            case 1:
              groupQueries = _a.sent();
              objectQueries = predicateObjs.filter(function(o2) {
                return isPredicateObj(o2);
              }).map(function(o2) {
                return _this.matchingIndexQueries(storeName, [o2], txn);
              });
              indexedQueries = __spread(groupQueries, objectQueries).map(function(q2) {
                return q2[0];
              }).filter(function(i2) {
                return i2;
              });
              if (predicateObjs.length > indexedQueries.length) {
                result = {
                  groupType: null,
                  indexedQueries: []
                };
              } else {
                result = {
                  groupType: "or",
                  indexedQueries
                };
              }
              return [3, 3];
            case 2:
              if (type === "and") {
                result = {
                  groupType: type,
                  indexedQueries: this.matchingIndexQueries(storeName, fieldPredicates, txn)
                };
              } else {
                result = {
                  groupType: null,
                  indexedQueries: []
                };
              }
              _a.label = 3;
            case 3:
              if (!!transaction)
                return [3, 5];
              return [4, txn.done];
            case 4:
              _a.sent();
              _a.label = 5;
            case 5:
              return [2, result];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.filterOnPredicate = function(storeName, predicates) {
      return __awaiter(this, void 0, void 0, function() {
        var predicateObjs, type, _a, groupType, indexedQueries, candidateResults, distinctResults, indexedQueries_1, indexedQueries_1_1, query, resultGroup, resultGroup_1, resultGroup_1_1, item, distinctificationString, e_9_1, filtered;
        var e_9, _b, e_10, _c;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              predicateObjs = predicates.predicates, type = predicates.type;
              return [4, this.baseQueryIndex(storeName, predicates)];
            case 1:
              _a = _d.sent(), groupType = _a.groupType, indexedQueries = _a.indexedQueries;
              if (!(groupType === "and" && indexedQueries.length > 0))
                return [3, 3];
              return [4, indexedQueries[0]()];
            case 2:
              candidateResults = _d.sent();
              return [3, 14];
            case 3:
              if (!(groupType === "or" && indexedQueries.length > 0 && indexedQueries.length <= MULTI_OR_CONDITION_SCAN_BREAKPOINT))
                return [3, 12];
              distinctResults = /* @__PURE__ */ new Map();
              _d.label = 4;
            case 4:
              _d.trys.push([4, 9, 10, 11]);
              indexedQueries_1 = __values(indexedQueries), indexedQueries_1_1 = indexedQueries_1.next();
              _d.label = 5;
            case 5:
              if (!!indexedQueries_1_1.done)
                return [3, 8];
              query = indexedQueries_1_1.value;
              return [4, query()];
            case 6:
              resultGroup = _d.sent();
              try {
                for (resultGroup_1 = (e_10 = void 0, __values(resultGroup)), resultGroup_1_1 = resultGroup_1.next(); !resultGroup_1_1.done; resultGroup_1_1 = resultGroup_1.next()) {
                  item = resultGroup_1_1.value;
                  distinctificationString = JSON.stringify(item);
                  distinctResults.set(distinctificationString, item);
                }
              } catch (e_10_1) {
                e_10 = { error: e_10_1 };
              } finally {
                try {
                  if (resultGroup_1_1 && !resultGroup_1_1.done && (_c = resultGroup_1.return))
                    _c.call(resultGroup_1);
                } finally {
                  if (e_10)
                    throw e_10.error;
                }
              }
              _d.label = 7;
            case 7:
              indexedQueries_1_1 = indexedQueries_1.next();
              return [3, 5];
            case 8:
              return [3, 11];
            case 9:
              e_9_1 = _d.sent();
              e_9 = { error: e_9_1 };
              return [3, 11];
            case 10:
              try {
                if (indexedQueries_1_1 && !indexedQueries_1_1.done && (_b = indexedQueries_1.return))
                  _b.call(indexedQueries_1);
              } finally {
                if (e_9)
                  throw e_9.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 11:
              candidateResults = Array.from(distinctResults.values());
              return [3, 14];
            case 12:
              return [4, this.getAll(storeName)];
            case 13:
              candidateResults = _d.sent();
              _d.label = 14;
            case 14:
              filtered = predicateObjs ? candidateResults.filter(function(m2) {
                return validatePredicate(m2, type, predicateObjs);
              }) : candidateResults;
              return [2, filtered];
          }
        });
      });
    };
    IndexedDBAdapter2.prototype.inMemoryPagination = function(records, pagination) {
      return inMemoryPagination(records, pagination);
    };
    IndexedDBAdapter2.prototype.enginePagination = function(storeName, pagination) {
      return __awaiter(this, void 0, void 0, function() {
        var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              if (!pagination)
                return [3, 7];
              _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;
              initialRecord = Math.max(0, page * limit) || 0;
              return [4, this.db.transaction(storeName).objectStore(storeName).openCursor()];
            case 1:
              cursor = _c.sent();
              if (!(cursor && initialRecord > 0))
                return [3, 3];
              return [4, cursor.advance(initialRecord)];
            case 2:
              _c.sent();
              _c.label = 3;
            case 3:
              pageResults = [];
              hasLimit = typeof limit === "number" && limit > 0;
              _c.label = 4;
            case 4:
              if (!(cursor && cursor.value))
                return [3, 6];
              pageResults.push(cursor.value);
              if (hasLimit && pageResults.length === limit) {
                return [3, 6];
              }
              return [4, cursor.continue()];
            case 5:
              cursor = _c.sent();
              return [3, 4];
            case 6:
              result = pageResults;
              return [3, 9];
            case 7:
              return [4, this.db.getAll(storeName)];
            case 8:
              result = _c.sent();
              _c.label = 9;
            case 9:
              return [2, result];
          }
        });
      });
    };
    return IndexedDBAdapter2;
  }(StorageAdapterBase)
);
var IndexedDBAdapter_default = new IndexedDBAdapter();

// node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/InMemoryStore.js
var InMemoryStore = (
  /** @class */
  function() {
    function InMemoryStore2() {
      var _this = this;
      this.db = /* @__PURE__ */ new Map();
      this.getAllKeys = function() {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, Array.from(this.db.keys())];
          });
        });
      };
      this.multiGet = function(keys) {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            return [2, keys.reduce(function(res, k2) {
              return res.push([k2, _this2.db.get(k2)]), res;
            }, [])];
          });
        });
      };
      this.multiRemove = function(keys, callback) {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            keys.forEach(function(k2) {
              return _this2.db.delete(k2);
            });
            typeof callback === "function" && callback();
            return [
              2
              /*return*/
            ];
          });
        });
      };
      this.multiSet = function(entries, callback) {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            entries.forEach(function(_a2) {
              var _b = __read(_a2, 2), key = _b[0], value = _b[1];
              _this2.setItem(key, value);
            });
            typeof callback === "function" && callback();
            return [
              2
              /*return*/
            ];
          });
        });
      };
      this.setItem = function(key, value) {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, this.db.set(key, value)];
          });
        });
      };
      this.removeItem = function(key) {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, this.db.delete(key)];
          });
        });
      };
      this.getItem = function(key) {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a) {
            return [2, this.db.get(key)];
          });
        });
      };
    }
    return InMemoryStore2;
  }()
);
function createInMemoryStore() {
  return new InMemoryStore();
}

// node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/AsyncStorageDatabase.js
var DB_NAME2 = "@AmplifyDatastore";
var COLLECTION = "Collection";
var DATA = "Data";
var monotonicFactoriesMap = /* @__PURE__ */ new Map();
var AsyncStorageDatabase = (
  /** @class */
  function() {
    function AsyncStorageDatabase2() {
      this._collectionInMemoryIndex = /* @__PURE__ */ new Map();
      this.storage = createInMemoryStore();
    }
    AsyncStorageDatabase2.prototype.getCollectionIndex = function(storeName) {
      if (!this._collectionInMemoryIndex.has(storeName)) {
        this._collectionInMemoryIndex.set(storeName, /* @__PURE__ */ new Map());
      }
      return this._collectionInMemoryIndex.get(storeName);
    };
    AsyncStorageDatabase2.prototype.getMonotonicFactory = function(storeName) {
      if (!monotonicFactoriesMap.has(storeName)) {
        monotonicFactoriesMap.set(storeName, monotonicUlidFactory());
      }
      return monotonicFactoriesMap.get(storeName);
    };
    AsyncStorageDatabase2.prototype.init = function() {
      return __awaiter(this, void 0, void 0, function() {
        var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid3, id_1, newUlid, oldKey, newKey, item, e_1_1;
        var e_1, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              this._collectionInMemoryIndex.clear();
              return [4, this.storage.getAllKeys()];
            case 1:
              allKeys = _c.sent();
              keysForCollectionEntries = [];
              _c.label = 2;
            case 2:
              _c.trys.push([2, 12, 13, 14]);
              allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();
              _c.label = 3;
            case 3:
              if (!!allKeys_1_1.done)
                return [3, 11];
              key = allKeys_1_1.value;
              _a = __read(key.split("::"), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];
              if (!(dbName === DB_NAME2))
                return [3, 10];
              if (!(recordType === DATA))
                return [3, 9];
              ulid3 = void 0;
              if (!(id === void 0))
                return [3, 7];
              id_1 = ulidOrId;
              newUlid = this.getMonotonicFactory(storeName)();
              oldKey = this.getLegacyKeyForItem(storeName, id_1);
              newKey = this.getKeyForItem(storeName, id_1, newUlid);
              return [4, this.storage.getItem(oldKey)];
            case 4:
              item = _c.sent();
              return [4, this.storage.setItem(newKey, item)];
            case 5:
              _c.sent();
              return [4, this.storage.removeItem(oldKey)];
            case 6:
              _c.sent();
              ulid3 = newUlid;
              return [3, 8];
            case 7:
              ulid3 = ulidOrId;
              _c.label = 8;
            case 8:
              this.getCollectionIndex(storeName).set(id, ulid3);
              return [3, 10];
            case 9:
              if (recordType === COLLECTION) {
                keysForCollectionEntries.push(key);
              }
              _c.label = 10;
            case 10:
              allKeys_1_1 = allKeys_1.next();
              return [3, 3];
            case 11:
              return [3, 14];
            case 12:
              e_1_1 = _c.sent();
              e_1 = { error: e_1_1 };
              return [3, 14];
            case 13:
              try {
                if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return))
                  _b.call(allKeys_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 14:
              if (!(keysForCollectionEntries.length > 0))
                return [3, 16];
              return [4, this.storage.multiRemove(keysForCollectionEntries)];
            case 15:
              _c.sent();
              _c.label = 16;
            case 16:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.save = function(item, storeName, keys, keyValuesPath) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, function() {
        var idxName, ulid3, itemKey;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              idxName = indexNameFromKeys(keys);
              ulid3 = ((_a = this.getCollectionIndex(storeName)) === null || _a === void 0 ? void 0 : _a.get(idxName)) || this.getMonotonicFactory(storeName)();
              itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid3);
              (_b = this.getCollectionIndex(storeName)) === null || _b === void 0 ? void 0 : _b.set(keyValuesPath, ulid3);
              return [4, this.storage.setItem(itemKey, JSON.stringify(item))];
            case 1:
              _c.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.batchSave = function(storeName, items, keys) {
      return __awaiter(this, void 0, void 0, function() {
        var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;
        var e_2, _a, e_3, _b;
        var _this = this;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              if (items.length === 0) {
                return [2, []];
              }
              result = [];
              collection = this.getCollectionIndex(storeName);
              keysToDelete = /* @__PURE__ */ new Set();
              keysToSave = /* @__PURE__ */ new Set();
              allItemsKeys = [];
              itemsMap = {};
              _loop_1 = function(item2) {
                var keyValues = keys.map(function(field) {
                  return item2[field];
                });
                var _deleted = item2._deleted;
                var ulid3 = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) || this_1.getMonotonicFactory(storeName)();
                var key2 = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid3);
                allItemsKeys.push(key2);
                itemsMap[key2] = { ulid: ulid3, model: item2 };
                if (_deleted) {
                  keysToDelete.add(key2);
                } else {
                  keysToSave.add(key2);
                }
              };
              this_1 = this;
              try {
                for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                  item = items_1_1.value;
                  _loop_1(item);
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                    _a.call(items_1);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
              return [4, this.storage.multiGet(allItemsKeys)];
            case 1:
              existingRecordsMap = _c.sent();
              existingRecordsKeys = existingRecordsMap.filter(function(_a2) {
                var _b2 = __read(_a2, 2), v2 = _b2[1];
                return !!v2;
              }).reduce(function(set2, _a2) {
                var _b2 = __read(_a2, 1), k2 = _b2[0];
                return set2.add(k2);
              }, /* @__PURE__ */ new Set());
              return [4, new Promise(function(resolve4, reject) {
                if (keysToDelete.size === 0) {
                  resolve4();
                  return;
                }
                var keysToDeleteArray = Array.from(keysToDelete);
                keysToDeleteArray.forEach(function(key2) {
                  var primaryKeyValues = keys.map(function(field) {
                    return itemsMap[key2].model[field];
                  }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);
                  collection.delete(primaryKeyValues);
                });
                _this.storage.multiRemove(keysToDeleteArray, function(errors) {
                  if (errors && errors.length > 0) {
                    reject(errors);
                  } else {
                    resolve4();
                  }
                });
              })];
            case 2:
              _c.sent();
              return [4, new Promise(function(resolve4, reject) {
                if (keysToSave.size === 0) {
                  resolve4();
                  return;
                }
                var entriesToSet = Array.from(keysToSave).map(function(key2) {
                  return [
                    key2,
                    JSON.stringify(itemsMap[key2].model)
                  ];
                });
                keysToSave.forEach(function(key2) {
                  var _a2 = itemsMap[key2], model = _a2.model, ulid3 = _a2.ulid;
                  var keyValues = keys.map(function(field) {
                    return model[field];
                  }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);
                  collection.set(keyValues, ulid3);
                });
                _this.storage.multiSet(entriesToSet, function(errors) {
                  if (errors && errors.length > 0) {
                    reject(errors);
                  } else {
                    resolve4();
                  }
                });
              })];
            case 3:
              _c.sent();
              try {
                for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {
                  key = allItemsKeys_1_1.value;
                  if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {
                    result.push([itemsMap[key].model, OpType.DELETE]);
                  } else if (keysToSave.has(key)) {
                    result.push([
                      itemsMap[key].model,
                      existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT
                    ]);
                  }
                }
              } catch (e_3_1) {
                e_3 = { error: e_3_1 };
              } finally {
                try {
                  if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return))
                    _b.call(allItemsKeys_1);
                } finally {
                  if (e_3)
                    throw e_3.error;
                }
              }
              return [2, result];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.get = function(keyValuePath, storeName) {
      return __awaiter(this, void 0, void 0, function() {
        var ulid3, itemKey, recordAsString, record;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              ulid3 = this.getCollectionIndex(storeName).get(keyValuePath);
              itemKey = this.getKeyForItem(storeName, keyValuePath, ulid3);
              return [4, this.storage.getItem(itemKey)];
            case 1:
              recordAsString = _a.sent();
              record = recordAsString && JSON.parse(recordAsString);
              return [2, record];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.getOne = function(firstOrLast, storeName) {
      return __awaiter(this, void 0, void 0, function() {
        var collection, _a, itemId, ulid3, itemKey, itemString, _b, result;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              collection = this.getCollectionIndex(storeName);
              _a = __read(firstOrLast === QueryOne.FIRST ? function() {
                var e_4, _a2, _b2;
                var id, ulid4;
                try {
                  for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {
                    _b2 = __read(collection_1_1.value, 2), id = _b2[0], ulid4 = _b2[1];
                    break;
                  }
                } catch (e_4_1) {
                  e_4 = { error: e_4_1 };
                } finally {
                  try {
                    if (collection_1_1 && !collection_1_1.done && (_a2 = collection_1.return))
                      _a2.call(collection_1);
                  } finally {
                    if (e_4)
                      throw e_4.error;
                  }
                }
                return [id, ulid4];
              }() : function() {
                var e_5, _a2, _b2;
                var id, ulid4;
                try {
                  for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {
                    _b2 = __read(collection_2_1.value, 2), id = _b2[0], ulid4 = _b2[1];
                    ;
                  }
                } catch (e_5_1) {
                  e_5 = { error: e_5_1 };
                } finally {
                  try {
                    if (collection_2_1 && !collection_2_1.done && (_a2 = collection_2.return))
                      _a2.call(collection_2);
                  } finally {
                    if (e_5)
                      throw e_5.error;
                  }
                }
                return [id, ulid4];
              }(), 2), itemId = _a[0], ulid3 = _a[1];
              itemKey = this.getKeyForItem(storeName, itemId, ulid3);
              _b = itemKey;
              if (!_b)
                return [3, 2];
              return [4, this.storage.getItem(itemKey)];
            case 1:
              _b = _c.sent();
              _c.label = 2;
            case 2:
              itemString = _b;
              result = itemString ? JSON.parse(itemString) || void 0 : void 0;
              return [2, result];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.getAll = function(storeName, pagination) {
      return __awaiter(this, void 0, void 0, function() {
        var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid3, storeRecordStrings, records;
        var e_6, _e;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              collection = this.getCollectionIndex(storeName);
              _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;
              start = Math.max(0, page * limit) || 0;
              end = limit > 0 ? start + limit : void 0;
              keysForStore = [];
              count = 0;
              try {
                for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {
                  _d = __read(collection_3_1.value, 2), id = _d[0], ulid3 = _d[1];
                  count++;
                  if (count <= start) {
                    continue;
                  }
                  keysForStore.push(this.getKeyForItem(storeName, id, ulid3));
                  if (count === end) {
                    break;
                  }
                }
              } catch (e_6_1) {
                e_6 = { error: e_6_1 };
              } finally {
                try {
                  if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return))
                    _e.call(collection_3);
                } finally {
                  if (e_6)
                    throw e_6.error;
                }
              }
              return [4, this.storage.multiGet(keysForStore)];
            case 1:
              storeRecordStrings = _f.sent();
              records = storeRecordStrings.filter(function(_a2) {
                var _b2 = __read(_a2, 2), value = _b2[1];
                return value;
              }).map(function(_a2) {
                var _b2 = __read(_a2, 2), value = _b2[1];
                return JSON.parse(value);
              });
              return [2, records];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.delete = function(key, storeName) {
      return __awaiter(this, void 0, void 0, function() {
        var ulid3, itemKey;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              ulid3 = this.getCollectionIndex(storeName).get(key);
              itemKey = this.getKeyForItem(storeName, key, ulid3);
              this.getCollectionIndex(storeName).delete(key);
              return [4, this.storage.removeItem(itemKey)];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.clear = function() {
      return __awaiter(this, void 0, void 0, function() {
        var allKeys, allDataStoreKeys;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.storage.getAllKeys()];
            case 1:
              allKeys = _a.sent();
              allDataStoreKeys = allKeys.filter(function(key) {
                return key.startsWith(DB_NAME2);
              });
              return [4, this.storage.multiRemove(allDataStoreKeys)];
            case 2:
              _a.sent();
              this._collectionInMemoryIndex.clear();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncStorageDatabase2.prototype.getKeyForItem = function(storeName, id, ulid3) {
      return this.getKeyPrefixForStoreItems(storeName) + "::" + ulid3 + "::" + id;
    };
    AsyncStorageDatabase2.prototype.getLegacyKeyForItem = function(storeName, id) {
      return this.getKeyPrefixForStoreItems(storeName) + "::" + id;
    };
    AsyncStorageDatabase2.prototype.getKeyPrefixForStoreItems = function(storeName) {
      return DB_NAME2 + "::" + storeName + "::" + DATA;
    };
    return AsyncStorageDatabase2;
  }()
);
var AsyncStorageDatabase_default = AsyncStorageDatabase;

// node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/AsyncStorageAdapter.js
var AsyncStorageAdapter = (
  /** @class */
  function(_super) {
    __extends(AsyncStorageAdapter2, _super);
    function AsyncStorageAdapter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AsyncStorageAdapter2.prototype.preSetUpChecks = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [
            2
            /*return*/
          ];
        });
      });
    };
    AsyncStorageAdapter2.prototype.preOpCheck = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [
            2
            /*return*/
          ];
        });
      });
    };
    AsyncStorageAdapter2.prototype.initDb = function() {
      return __awaiter(this, void 0, void 0, function() {
        var db;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              db = new AsyncStorageDatabase_default();
              return [4, db.init()];
            case 1:
              _a.sent();
              return [2, db];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.clear = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.db.clear()];
            case 1:
              _a.sent();
              this.db = void 0;
              this.initPromise = void 0;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.batchSave = function(modelConstructor, items) {
      return __awaiter(this, void 0, void 0, function() {
        var modelName, namespaceName, storeName, keys, batch, _loop_1, this_1, items_1, items_1_1, item;
        var e_1, _a;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (items.length === 0) {
                return [2, []];
              }
              modelName = modelConstructor.name;
              namespaceName = this.namespaceResolver(modelConstructor);
              storeName = getStorename(namespaceName, modelName);
              keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);
              batch = [];
              _loop_1 = function(item2) {
                var model = this_1.modelInstanceCreator(modelConstructor, item2);
                var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);
                var keyValuesPath = this_1.getIndexKeyValuesPath(model);
                var instance2 = connectedModels.find(function(_a2) {
                  var instance3 = _a2.instance;
                  var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance3);
                  return keysEqual([instanceKeyValuesPath], [keyValuesPath]);
                }).instance;
                batch.push(instance2);
              };
              this_1 = this;
              try {
                for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                  item = items_1_1.value;
                  _loop_1(item);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                    _a.call(items_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              return [4, this.db.batchSave(storeName, batch, keys)];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype._get = function(storeName, keyArr) {
      return __awaiter(this, void 0, void 0, function() {
        var itemKeyValuesPath;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              itemKeyValuesPath = keyArr.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);
              return [4, this.db.get(itemKeyValuesPath, storeName)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.save = function(model, condition) {
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function() {
        var _b, storeName, connectionStoreNames, modelKeyValues, fromDB, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance2, keys, itemKeyValues, fromDB_1, opType, e_2_1;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              _b = this.saveMetadata(model), storeName = _b.storeName, connectionStoreNames = _b.connectionStoreNames, modelKeyValues = _b.modelKeyValues;
              return [4, this._get(storeName, modelKeyValues)];
            case 1:
              fromDB = _c.sent();
              this.validateSaveCondition(condition, fromDB);
              result = [];
              _c.label = 2;
            case 2:
              _c.trys.push([2, 9, 10, 15]);
              connectionStoreNames_1 = __asyncValues(connectionStoreNames);
              _c.label = 3;
            case 3:
              return [4, connectionStoreNames_1.next()];
            case 4:
              if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done))
                return [3, 8];
              resItem = connectionStoreNames_1_1.value;
              storeName_1 = resItem.storeName, item = resItem.item, instance2 = resItem.instance, keys = resItem.keys;
              itemKeyValues = keys.map(function(key) {
                return item[key];
              });
              return [4, this._get(storeName_1, itemKeyValues)];
            case 5:
              fromDB_1 = _c.sent();
              opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;
              if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT))
                return [3, 7];
              return [4, this.db.save(item, storeName_1, keys, itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR))];
            case 6:
              _c.sent();
              result.push([instance2, opType]);
              _c.label = 7;
            case 7:
              return [3, 3];
            case 8:
              return [3, 15];
            case 9:
              e_2_1 = _c.sent();
              e_2 = { error: e_2_1 };
              return [3, 15];
            case 10:
              _c.trys.push([10, , 13, 14]);
              if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return)))
                return [3, 12];
              return [4, _a.call(connectionStoreNames_1)];
            case 11:
              _c.sent();
              _c.label = 12;
            case 12:
              return [3, 14];
            case 13:
              if (e_2)
                throw e_2.error;
              return [
                7
                /*endfinally*/
              ];
            case 14:
              return [
                7
                /*endfinally*/
              ];
            case 15:
              return [2, result];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.query = function(modelConstructor, predicate, pagination) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, storeName, namespaceName, queryByKey, predicates, hasSort, hasPagination, records;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = this.queryMetadata(modelConstructor, predicate, pagination), storeName = _a.storeName, namespaceName = _a.namespaceName, queryByKey = _a.queryByKey, predicates = _a.predicates, hasSort = _a.hasSort, hasPagination = _a.hasPagination;
              return [4, function() {
                return __awaiter(_this, void 0, void 0, function() {
                  var keyValues, record, filtered, all;
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        if (!queryByKey)
                          return [3, 2];
                        keyValues = queryByKey.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);
                        return [4, this.getByKey(storeName, keyValues)];
                      case 1:
                        record = _a2.sent();
                        return [2, record ? [record] : []];
                      case 2:
                        if (!predicates)
                          return [3, 4];
                        return [4, this.filterOnPredicate(storeName, predicates)];
                      case 3:
                        filtered = _a2.sent();
                        return [2, this.inMemoryPagination(filtered, pagination)];
                      case 4:
                        if (!(hasSort || hasPagination))
                          return [3, 6];
                        return [4, this.getAll(storeName)];
                      case 5:
                        all = _a2.sent();
                        return [2, this.inMemoryPagination(all, pagination)];
                      case 6:
                        return [2, this.getAll(storeName)];
                    }
                  });
                });
              }()];
            case 1:
              records = _b.sent();
              return [4, this.load(namespaceName, modelConstructor.name, records)];
            case 2:
              return [2, _b.sent()];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.getByKey = function(storeName, keyValuePath) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.db.get(keyValuePath, storeName)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.getAll = function(storeName) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.db.getAll(storeName)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.filterOnPredicate = function(storeName, predicates) {
      return __awaiter(this, void 0, void 0, function() {
        var predicateObjs, type, all, filtered;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              predicateObjs = predicates.predicates, type = predicates.type;
              return [4, this.getAll(storeName)];
            case 1:
              all = _a.sent();
              filtered = predicateObjs ? all.filter(function(m2) {
                return validatePredicate(m2, type, predicateObjs);
              }) : all;
              return [2, filtered];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.inMemoryPagination = function(records, pagination) {
      return inMemoryPagination(records, pagination);
    };
    AsyncStorageAdapter2.prototype.queryOne = function(modelConstructor, firstOrLast) {
      if (firstOrLast === void 0) {
        firstOrLast = QueryOne.FIRST;
      }
      return __awaiter(this, void 0, void 0, function() {
        var storeName, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              storeName = this.getStorenameForModel(modelConstructor);
              return [4, this.db.getOne(firstOrLast, storeName)];
            case 1:
              result = _a.sent();
              return [2, result && this.modelInstanceCreator(modelConstructor, result)];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.deleteItem = function(deleteQueue) {
      var e_3, _a, e_4, _b;
      return __awaiter(this, void 0, void 0, function() {
        var _c, _d, deleteItem, storeName, items, items_2, items_2_1, item, keyValuesPath, e_4_1, e_3_1;
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              _e.trys.push([0, 17, 18, 23]);
              _c = __asyncValues(deleteQueue);
              _e.label = 1;
            case 1:
              return [4, _c.next()];
            case 2:
              if (!(_d = _e.sent(), !_d.done))
                return [3, 16];
              deleteItem = _d.value;
              storeName = deleteItem.storeName, items = deleteItem.items;
              _e.label = 3;
            case 3:
              _e.trys.push([3, 9, 10, 15]);
              items_2 = __asyncValues(items);
              _e.label = 4;
            case 4:
              return [4, items_2.next()];
            case 5:
              if (!(items_2_1 = _e.sent(), !items_2_1.done))
                return [3, 8];
              item = items_2_1.value;
              if (!item)
                return [3, 7];
              if (!(typeof item === "object"))
                return [3, 7];
              keyValuesPath = this.getIndexKeyValuesPath(item);
              return [4, this.db.delete(keyValuesPath, storeName)];
            case 6:
              _e.sent();
              _e.label = 7;
            case 7:
              return [3, 4];
            case 8:
              return [3, 15];
            case 9:
              e_4_1 = _e.sent();
              e_4 = { error: e_4_1 };
              return [3, 15];
            case 10:
              _e.trys.push([10, , 13, 14]);
              if (!(items_2_1 && !items_2_1.done && (_b = items_2.return)))
                return [3, 12];
              return [4, _b.call(items_2)];
            case 11:
              _e.sent();
              _e.label = 12;
            case 12:
              return [3, 14];
            case 13:
              if (e_4)
                throw e_4.error;
              return [
                7
                /*endfinally*/
              ];
            case 14:
              return [
                7
                /*endfinally*/
              ];
            case 15:
              return [3, 1];
            case 16:
              return [3, 23];
            case 17:
              e_3_1 = _e.sent();
              e_3 = { error: e_3_1 };
              return [3, 23];
            case 18:
              _e.trys.push([18, , 21, 22]);
              if (!(_d && !_d.done && (_a = _c.return)))
                return [3, 20];
              return [4, _a.call(_c)];
            case 19:
              _e.sent();
              _e.label = 20;
            case 20:
              return [3, 22];
            case 21:
              if (e_3)
                throw e_3.error;
              return [
                7
                /*endfinally*/
              ];
            case 22:
              return [
                7
                /*endfinally*/
              ];
            case 23:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AsyncStorageAdapter2.prototype.getIndexKeyValuesPath = function(model) {
      return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);
    };
    return AsyncStorageAdapter2;
  }(StorageAdapterBase)
);
var AsyncStorageAdapter_default = new AsyncStorageAdapter();

// node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/getDefaultAdapter/index.js
var getDefaultAdapter = function() {
  var isBrowser2 = browserOrNode().isBrowser;
  if (isBrowser2 && window.indexedDB || isWebWorker() && self.indexedDB) {
    return IndexedDBAdapter_default;
  }
  return AsyncStorageAdapter_default;
};
var getDefaultAdapter_default = getDefaultAdapter;

// node_modules/@aws-amplify/datastore/lib-esm/storage/storage.js
var logger31 = new ConsoleLogger("DataStore");
var StorageClass = (
  /** @class */
  function() {
    function StorageClass2(schema2, namespaceResolver2, getModelConstructorByModelName2, modelInstanceCreator2, adapter, sessionId) {
      this.schema = schema2;
      this.namespaceResolver = namespaceResolver2;
      this.getModelConstructorByModelName = getModelConstructorByModelName2;
      this.modelInstanceCreator = modelInstanceCreator2;
      this.adapter = adapter;
      this.sessionId = sessionId;
      this.adapter = this.adapter || getDefaultAdapter_default();
      this.pushStream = new import_zen_push.default();
    }
    StorageClass2.getNamespace = function() {
      var namespace = {
        name: STORAGE,
        relationships: {},
        enums: {},
        models: {},
        nonModels: {}
      };
      return namespace;
    };
    StorageClass2.prototype.init = function() {
      return __awaiter(this, void 0, void 0, function() {
        var resolve4, reject;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(this.initialized !== void 0))
                return [3, 2];
              return [4, this.initialized];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
            case 2:
              logger31.debug("Starting Storage");
              this.initialized = new Promise(function(res, rej) {
                resolve4 = res;
                reject = rej;
              });
              this.adapter.setUp(this.schema, this.namespaceResolver, this.modelInstanceCreator, this.getModelConstructorByModelName, this.sessionId).then(resolve4, reject);
              return [4, this.initialized];
            case 3:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    StorageClass2.prototype.save = function(model, condition, mutator, patchesTuple) {
      return __awaiter(this, void 0, void 0, function() {
        var result;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.init()];
            case 1:
              _a.sent();
              if (!this.adapter) {
                throw new Error("Storage adapter is missing");
              }
              return [4, this.adapter.save(model, condition)];
            case 2:
              result = _a.sent();
              result.forEach(function(r2) {
                var _a2 = __read(r2, 2), savedElement = _a2[0], opType = _a2[1];
                var syncResponse = !!mutator;
                var updateMutationInput;
                if ((opType === OpType.UPDATE || opType === OpType.INSERT) && !syncResponse) {
                  updateMutationInput = _this.getChangedFieldsInput(model, savedElement, patchesTuple);
                  if (updateMutationInput === null) {
                    return result;
                  }
                }
                var element = updateMutationInput || savedElement;
                var modelConstructor = Object.getPrototypeOf(savedElement).constructor;
                _this.pushStream.next({
                  model: modelConstructor,
                  opType,
                  element,
                  mutator,
                  condition: condition && ModelPredicateCreator.getPredicates(condition, false) || null,
                  savedElement
                });
              });
              return [2, result];
          }
        });
      });
    };
    StorageClass2.prototype.delete = function(modelOrModelConstructor, condition, mutator) {
      return __awaiter(this, void 0, void 0, function() {
        var models, deleted, modelConstructor, namespaceName, modelDefinition, modelIds;
        var _a;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.init()];
            case 1:
              _b.sent();
              if (!this.adapter) {
                throw new Error("Storage adapter is missing");
              }
              return [4, this.adapter.delete(modelOrModelConstructor, condition)];
            case 2:
              _a = __read.apply(void 0, [_b.sent(), 2]), models = _a[0], deleted = _a[1];
              modelConstructor = isModelConstructor(modelOrModelConstructor) ? modelOrModelConstructor : Object.getPrototypeOf(modelOrModelConstructor || {}).constructor;
              namespaceName = this.namespaceResolver(modelConstructor);
              modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];
              modelIds = new Set(models.map(function(model) {
                var modelId = getIdentifierValue(modelDefinition, model);
                return modelId;
              }));
              if (!isModelConstructor(modelOrModelConstructor) && !Array.isArray(deleted)) {
                deleted = [deleted];
              }
              deleted.forEach(function(model) {
                var modelConstructor2 = Object.getPrototypeOf(model).constructor;
                var theCondition;
                if (!isModelConstructor(modelOrModelConstructor)) {
                  var modelId = getIdentifierValue(modelDefinition, model);
                  theCondition = modelIds.has(modelId) ? ModelPredicateCreator.getPredicates(condition, false) : void 0;
                }
                _this.pushStream.next({
                  model: modelConstructor2,
                  opType: OpType.DELETE,
                  element: model,
                  mutator,
                  condition: theCondition || null
                });
              });
              return [2, [models, deleted]];
          }
        });
      });
    };
    StorageClass2.prototype.query = function(modelConstructor, predicate, pagination) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.init()];
            case 1:
              _a.sent();
              if (!this.adapter) {
                throw new Error("Storage adapter is missing");
              }
              return [4, this.adapter.query(modelConstructor, predicate, pagination)];
            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };
    StorageClass2.prototype.queryOne = function(modelConstructor, firstOrLast) {
      if (firstOrLast === void 0) {
        firstOrLast = QueryOne.FIRST;
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.init()];
            case 1:
              _a.sent();
              if (!this.adapter) {
                throw new Error("Storage adapter is missing");
              }
              return [4, this.adapter.queryOne(modelConstructor, firstOrLast)];
            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };
    StorageClass2.prototype.observe = function(modelConstructor, predicate, skipOwn) {
      var listenToAll = !modelConstructor;
      var _a = predicate && ModelPredicateCreator.getPredicates(predicate, false) || {}, predicates = _a.predicates, type = _a.type;
      var result = this.pushStream.observable.filter(function(_a2) {
        var mutator = _a2.mutator;
        return !skipOwn || mutator !== skipOwn;
      }).map(function(_a2) {
        var _mutator = _a2.mutator, message = __rest(_a2, ["mutator"]);
        return message;
      });
      if (!listenToAll) {
        result = result.filter(function(_a2) {
          var model = _a2.model, element = _a2.element;
          if (modelConstructor !== model) {
            return false;
          }
          if (!!predicates && !!type) {
            return validatePredicate(element, type, predicates);
          }
          return true;
        });
      }
      return result;
    };
    StorageClass2.prototype.clear = function(completeObservable) {
      if (completeObservable === void 0) {
        completeObservable = true;
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.initialized = void 0;
              if (!this.adapter) {
                throw new Error("Storage adapter is missing");
              }
              return [4, this.adapter.clear()];
            case 1:
              _a.sent();
              if (completeObservable) {
                this.pushStream.complete();
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    StorageClass2.prototype.batchSave = function(modelConstructor, items, mutator) {
      return __awaiter(this, void 0, void 0, function() {
        var result;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.init()];
            case 1:
              _a.sent();
              if (!this.adapter) {
                throw new Error("Storage adapter is missing");
              }
              return [4, this.adapter.batchSave(modelConstructor, items)];
            case 2:
              result = _a.sent();
              result.forEach(function(_a2) {
                var _b = __read(_a2, 2), element = _b[0], opType = _b[1];
                _this.pushStream.next({
                  model: modelConstructor,
                  opType,
                  element,
                  mutator,
                  condition: null
                });
              });
              return [2, result];
          }
        });
      });
    };
    StorageClass2.prototype.getChangedFieldsInput = function(model, originalElement, patchesTuple) {
      var e_1, _a;
      var _b;
      var containsPatches = patchesTuple && patchesTuple.length;
      if (!containsPatches) {
        return null;
      }
      var _c = __read(patchesTuple, 2), patches = _c[0], source = _c[1];
      var updatedElement = {};
      var updatedFields = patches.map(function(patch) {
        return patch.path && patch.path[0];
      });
      var modelConstructor = Object.getPrototypeOf(model).constructor;
      var namespace = this.namespaceResolver(modelConstructor);
      var fields7 = this.schema.namespaces[namespace].models[modelConstructor.name].fields;
      var _d = ((_b = this.schema.namespaces[namespace].keys) === null || _b === void 0 ? void 0 : _b[modelConstructor.name]) || {}, primaryKey = _d.primaryKey, _e = _d.compositeKeys, compositeKeys = _e === void 0 ? [] : _e;
      updatedFields.forEach(function(field) {
        var e_2, _a2, e_3, _b2, e_4, _c2, e_5, _d2, e_6, _e2;
        var _f;
        var targetNames = isTargetNameAssociation((_f = fields7[field]) === null || _f === void 0 ? void 0 : _f.association);
        if (Array.isArray(targetNames)) {
          try {
            for (var targetNames_1 = __values(targetNames), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {
              var targetName = targetNames_1_1.value;
              if (!valuesEqual(source[targetName], originalElement[targetName])) {
                updatedElement[targetName] = originalElement[targetName] === void 0 ? null : originalElement[targetName];
                try {
                  for (var compositeKeys_1 = (e_3 = void 0, __values(compositeKeys)), compositeKeys_1_1 = compositeKeys_1.next(); !compositeKeys_1_1.done; compositeKeys_1_1 = compositeKeys_1.next()) {
                    var fieldSet = compositeKeys_1_1.value;
                    if (fieldSet.has(targetName)) {
                      try {
                        for (var fieldSet_1 = (e_4 = void 0, __values(fieldSet)), fieldSet_1_1 = fieldSet_1.next(); !fieldSet_1_1.done; fieldSet_1_1 = fieldSet_1.next()) {
                          var compositeField = fieldSet_1_1.value;
                          updatedElement[compositeField] = originalElement[compositeField];
                        }
                      } catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                      } finally {
                        try {
                          if (fieldSet_1_1 && !fieldSet_1_1.done && (_c2 = fieldSet_1.return))
                            _c2.call(fieldSet_1);
                        } finally {
                          if (e_4)
                            throw e_4.error;
                        }
                      }
                    }
                  }
                } catch (e_3_1) {
                  e_3 = { error: e_3_1 };
                } finally {
                  try {
                    if (compositeKeys_1_1 && !compositeKeys_1_1.done && (_b2 = compositeKeys_1.return))
                      _b2.call(compositeKeys_1);
                  } finally {
                    if (e_3)
                      throw e_3.error;
                  }
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (targetNames_1_1 && !targetNames_1_1.done && (_a2 = targetNames_1.return))
                _a2.call(targetNames_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        } else {
          var key = targetNames || field;
          if (!valuesEqual(source[key], originalElement[key])) {
            updatedElement[key] = originalElement[key] === void 0 ? null : originalElement[key];
            try {
              for (var compositeKeys_2 = __values(compositeKeys), compositeKeys_2_1 = compositeKeys_2.next(); !compositeKeys_2_1.done; compositeKeys_2_1 = compositeKeys_2.next()) {
                var fieldSet = compositeKeys_2_1.value;
                if (fieldSet.has(key)) {
                  try {
                    for (var fieldSet_2 = (e_6 = void 0, __values(fieldSet)), fieldSet_2_1 = fieldSet_2.next(); !fieldSet_2_1.done; fieldSet_2_1 = fieldSet_2.next()) {
                      var compositeField = fieldSet_2_1.value;
                      updatedElement[compositeField] = originalElement[compositeField];
                    }
                  } catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                  } finally {
                    try {
                      if (fieldSet_2_1 && !fieldSet_2_1.done && (_e2 = fieldSet_2.return))
                        _e2.call(fieldSet_2);
                    } finally {
                      if (e_6)
                        throw e_6.error;
                    }
                  }
                }
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (compositeKeys_2_1 && !compositeKeys_2_1.done && (_d2 = compositeKeys_2.return))
                  _d2.call(compositeKeys_2);
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
          }
        }
      });
      if (Object.keys(updatedElement).length === 0) {
        return null;
      }
      if (primaryKey && primaryKey.length) {
        try {
          for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {
            var pkField = primaryKey_1_1.value;
            updatedElement[pkField] = originalElement[pkField];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return))
              _a.call(primaryKey_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      var id = originalElement.id, _version = originalElement._version, _lastChangedAt = originalElement._lastChangedAt, _deleted = originalElement._deleted;
      return __assign(__assign({}, updatedElement), {
        id,
        _version,
        _lastChangedAt,
        _deleted
      });
    };
    return StorageClass2;
  }()
);
var ExclusiveStorage = (
  /** @class */
  function() {
    function ExclusiveStorage2(schema2, namespaceResolver2, getModelConstructorByModelName2, modelInstanceCreator2, adapter, sessionId) {
      this.mutex = new Mutex_default();
      this.storage = new StorageClass(schema2, namespaceResolver2, getModelConstructorByModelName2, modelInstanceCreator2, adapter, sessionId);
    }
    ExclusiveStorage2.prototype.runExclusive = function(fn2) {
      return this.mutex.runExclusive(fn2.bind(this, this.storage));
    };
    ExclusiveStorage2.prototype.save = function(model, condition, mutator, patchesTuple) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.runExclusive(function(storage) {
            return storage.save(model, condition, mutator, patchesTuple);
          })];
        });
      });
    };
    ExclusiveStorage2.prototype.delete = function(modelOrModelConstructor, condition, mutator) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.runExclusive(function(storage) {
            if (isModelConstructor(modelOrModelConstructor)) {
              var modelConstructor = modelOrModelConstructor;
              return storage.delete(modelConstructor, condition, mutator);
            } else {
              var model = modelOrModelConstructor;
              return storage.delete(model, condition, mutator);
            }
          })];
        });
      });
    };
    ExclusiveStorage2.prototype.query = function(modelConstructor, predicate, pagination) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.runExclusive(function(storage) {
            return storage.query(modelConstructor, predicate, pagination);
          })];
        });
      });
    };
    ExclusiveStorage2.prototype.queryOne = function(modelConstructor, firstOrLast) {
      if (firstOrLast === void 0) {
        firstOrLast = QueryOne.FIRST;
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.runExclusive(function(storage) {
            return storage.queryOne(modelConstructor, firstOrLast);
          })];
        });
      });
    };
    ExclusiveStorage2.getNamespace = function() {
      return StorageClass.getNamespace();
    };
    ExclusiveStorage2.prototype.observe = function(modelConstructor, predicate, skipOwn) {
      return this.storage.observe(modelConstructor, predicate, skipOwn);
    };
    ExclusiveStorage2.prototype.clear = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.runExclusive(function(storage) {
                return storage.clear();
              })];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    ExclusiveStorage2.prototype.batchSave = function(modelConstructor, items) {
      return this.storage.batchSave(modelConstructor, items);
    };
    ExclusiveStorage2.prototype.init = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.storage.init()];
        });
      });
    };
    return ExclusiveStorage2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/sync/datastoreReachability/index.js
var ReachabilityMonitor2 = new Reachability_default().networkMonitor();

// node_modules/@aws-amplify/datastore/lib-esm/sync/datastoreConnectivity.js
var logger32 = new ConsoleLogger("DataStore");
var RECONNECTING_IN = 5e3;
var DataStoreConnectivity = (
  /** @class */
  function() {
    function DataStoreConnectivity2() {
      this.connectionStatus = {
        online: false
      };
    }
    DataStoreConnectivity2.prototype.status = function() {
      var _this = this;
      if (this.observer) {
        throw new Error("Subscriber already exists");
      }
      return new bundle_esm_default(function(observer) {
        _this.observer = observer;
        _this.subscription = ReachabilityMonitor2.subscribe(function(_a) {
          var online = _a.online;
          _this.connectionStatus.online = online;
          var observerResult = __assign({}, _this.connectionStatus);
          observer.next(observerResult);
        });
        return function() {
          clearTimeout(_this.timeout);
          _this.unsubscribe();
        };
      });
    };
    DataStoreConnectivity2.prototype.unsubscribe = function() {
      if (this.subscription) {
        clearTimeout(this.timeout);
        this.subscription.unsubscribe();
      }
    };
    DataStoreConnectivity2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          this.unsubscribe();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    DataStoreConnectivity2.prototype.socketDisconnected = function() {
      var _this = this;
      if (this.observer && typeof this.observer.next === "function") {
        this.observer.next({ online: false });
        this.timeout = setTimeout(function() {
          var observerResult = __assign({}, _this.connectionStatus);
          _this.observer.next(observerResult);
        }, RECONNECTING_IN);
      }
    };
    return DataStoreConnectivity2;
  }()
);
var datastoreConnectivity_default = DataStoreConnectivity;

// node_modules/@aws-amplify/datastore/lib-esm/sync/merger.js
var ModelMerger = (
  /** @class */
  function() {
    function ModelMerger2(outbox, ownSymbol2) {
      this.outbox = outbox;
      this.ownSymbol = ownSymbol2;
    }
    ModelMerger2.prototype.merge = function(storage, model, modelDefinition) {
      return __awaiter(this, void 0, void 0, function() {
        var result, mutationsForModel, isDelete;
        var _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              return [4, this.outbox.getForModel(storage, model, modelDefinition)];
            case 1:
              mutationsForModel = _c.sent();
              isDelete = model._deleted;
              if (!(mutationsForModel.length === 0))
                return [3, 5];
              if (!isDelete)
                return [3, 3];
              result = OpType.DELETE;
              return [4, storage.delete(model, void 0, this.ownSymbol)];
            case 2:
              _c.sent();
              return [3, 5];
            case 3:
              return [4, storage.save(model, void 0, this.ownSymbol)];
            case 4:
              _a = __read.apply(void 0, [_c.sent(), 1]), _b = __read(_a[0], 2), result = _b[1];
              _c.label = 5;
            case 5:
              return [2, result];
          }
        });
      });
    };
    ModelMerger2.prototype.mergePage = function(storage, modelConstructor, items, modelDefinition) {
      return __awaiter(this, void 0, void 0, function() {
        var itemsMap, items_1, items_1_1, item, modelId, page;
        var e_1, _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              itemsMap = /* @__PURE__ */ new Map();
              try {
                for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                  item = items_1_1.value;
                  modelId = getIdentifierValue(modelDefinition, item);
                  itemsMap.set(modelId, item);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (items_1_1 && !items_1_1.done && (_a = items_1.return))
                    _a.call(items_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              page = __spread(itemsMap.values());
              return [4, storage.batchSave(modelConstructor, page, this.ownSymbol)];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    return ModelMerger2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/sync/outbox.js
var MutationEventOutbox = (
  /** @class */
  function() {
    function MutationEventOutbox2(schema2, MutationEvent, modelInstanceCreator2, ownSymbol2) {
      this.schema = schema2;
      this.MutationEvent = MutationEvent;
      this.modelInstanceCreator = modelInstanceCreator2;
      this.ownSymbol = ownSymbol2;
    }
    MutationEventOutbox2.prototype.enqueue = function(storage, mutationEvent) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, storage.runExclusive(function(s2) {
                return __awaiter(_this, void 0, void 0, function() {
                  var mutationEventModelDefinition, predicate, _a2, first, incomingMutationType, merged_1, incomingConditionJSON, incomingCondition, merged;
                  return __generator(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        mutationEventModelDefinition = this.schema.namespaces[SYNC].models["MutationEvent"];
                        predicate = ModelPredicateCreator.createFromAST(mutationEventModelDefinition, {
                          and: [
                            { modelId: { eq: mutationEvent.modelId } },
                            { id: { ne: this.inProgressMutationEventId } }
                          ]
                        });
                        return [4, s2.query(this.MutationEvent, predicate)];
                      case 1:
                        _a2 = __read.apply(void 0, [_b.sent(), 1]), first = _a2[0];
                        if (!(first === void 0))
                          return [3, 3];
                        return [4, s2.save(mutationEvent, void 0, this.ownSymbol)];
                      case 2:
                        _b.sent();
                        return [
                          2
                          /*return*/
                        ];
                      case 3:
                        incomingMutationType = mutationEvent.operation;
                        if (!(first.operation === TransformerMutationType.CREATE))
                          return [3, 8];
                        if (!(incomingMutationType === TransformerMutationType.DELETE))
                          return [3, 5];
                        return [4, s2.delete(this.MutationEvent, predicate)];
                      case 4:
                        _b.sent();
                        return [3, 7];
                      case 5:
                        merged_1 = this.mergeUserFields(first, mutationEvent);
                        return [4, s2.save(this.MutationEvent.copyOf(first, function(draft) {
                          draft.data = merged_1.data;
                        }), void 0, this.ownSymbol)];
                      case 6:
                        _b.sent();
                        _b.label = 7;
                      case 7:
                        return [3, 12];
                      case 8:
                        incomingConditionJSON = mutationEvent.condition;
                        incomingCondition = JSON.parse(incomingConditionJSON);
                        merged = void 0;
                        if (!(Object.keys(incomingCondition).length === 0))
                          return [3, 10];
                        merged = this.mergeUserFields(first, mutationEvent);
                        return [4, s2.delete(this.MutationEvent, predicate)];
                      case 9:
                        _b.sent();
                        _b.label = 10;
                      case 10:
                        merged = merged || mutationEvent;
                        return [4, s2.save(merged, void 0, this.ownSymbol)];
                      case 11:
                        _b.sent();
                        _b.label = 12;
                      case 12:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              })];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MutationEventOutbox2.prototype.dequeue = function(storage, record, recordOp) {
      return __awaiter(this, void 0, void 0, function() {
        var head;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.peek(storage)];
            case 1:
              head = _a.sent();
              if (!record)
                return [3, 3];
              return [4, this.syncOutboxVersionsOnDequeue(storage, record, head, recordOp)];
            case 2:
              _a.sent();
              _a.label = 3;
            case 3:
              return [4, storage.delete(head)];
            case 4:
              _a.sent();
              this.inProgressMutationEventId = void 0;
              return [2, head];
          }
        });
      });
    };
    MutationEventOutbox2.prototype.peek = function(storage) {
      return __awaiter(this, void 0, void 0, function() {
        var head;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, storage.queryOne(this.MutationEvent, QueryOne.FIRST)];
            case 1:
              head = _a.sent();
              this.inProgressMutationEventId = head ? head.id : void 0;
              return [2, head];
          }
        });
      });
    };
    MutationEventOutbox2.prototype.getForModel = function(storage, model, userModelDefinition) {
      return __awaiter(this, void 0, void 0, function() {
        var mutationEventModelDefinition, modelId, mutationEvents;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              mutationEventModelDefinition = this.schema.namespaces[SYNC].models.MutationEvent;
              modelId = getIdentifierValue(userModelDefinition, model);
              return [4, storage.query(this.MutationEvent, ModelPredicateCreator.createFromAST(mutationEventModelDefinition, {
                and: { modelId: { eq: modelId } }
              }))];
            case 1:
              mutationEvents = _a.sent();
              return [2, mutationEvents];
          }
        });
      });
    };
    MutationEventOutbox2.prototype.getModelIds = function(storage) {
      return __awaiter(this, void 0, void 0, function() {
        var mutationEvents, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, storage.query(this.MutationEvent)];
            case 1:
              mutationEvents = _a.sent();
              result = /* @__PURE__ */ new Set();
              mutationEvents.forEach(function(_a2) {
                var modelId = _a2.modelId;
                return result.add(modelId);
              });
              return [2, result];
          }
        });
      });
    };
    MutationEventOutbox2.prototype.syncOutboxVersionsOnDequeue = function(storage, record, head, recordOp) {
      return __awaiter(this, void 0, void 0, function() {
        var _version, _lastChangedAt, _deleted, _incomingData, incomingData, data, __version, __lastChangedAt, __deleted, _outgoingData, outgoingData, mutationEventModelDefinition, userModelDefinition, recordId, predicate, outdatedMutations, reconciledMutations;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (head.operation !== recordOp) {
                return [
                  2
                  /*return*/
                ];
              }
              _version = record._version, _lastChangedAt = record._lastChangedAt, _deleted = record._deleted, _incomingData = __rest(record, ["_version", "_lastChangedAt", "_deleted"]);
              incomingData = this.removeTimestampFields(head.model, _incomingData);
              data = JSON.parse(head.data);
              if (!data) {
                return [
                  2
                  /*return*/
                ];
              }
              __version = data._version, __lastChangedAt = data._lastChangedAt, __deleted = data._deleted, _outgoingData = __rest(data, ["_version", "_lastChangedAt", "_deleted"]);
              outgoingData = this.removeTimestampFields(head.model, _outgoingData);
              if (!valuesEqual(incomingData, outgoingData, true)) {
                return [
                  2
                  /*return*/
                ];
              }
              mutationEventModelDefinition = this.schema.namespaces[SYNC].models["MutationEvent"];
              userModelDefinition = this.schema.namespaces["user"].models[head.model];
              recordId = getIdentifierValue(userModelDefinition, record);
              predicate = ModelPredicateCreator.createFromAST(mutationEventModelDefinition, {
                and: [
                  { modelId: { eq: recordId } },
                  { id: { ne: this.inProgressMutationEventId } }
                ]
              });
              return [4, storage.query(this.MutationEvent, predicate)];
            case 1:
              outdatedMutations = _a.sent();
              if (!outdatedMutations.length) {
                return [
                  2
                  /*return*/
                ];
              }
              reconciledMutations = outdatedMutations.map(function(m2) {
                var oldData = JSON.parse(m2.data);
                var newData = __assign(__assign({}, oldData), { _version, _lastChangedAt });
                return _this.MutationEvent.copyOf(m2, function(draft) {
                  draft.data = JSON.stringify(newData);
                });
              });
              return [4, storage.delete(this.MutationEvent, predicate)];
            case 2:
              _a.sent();
              return [4, Promise.all(reconciledMutations.map(function(m2) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        return [4, storage.save(m2, void 0, this.ownSymbol)];
                      case 1:
                        return [2, _a2.sent()];
                    }
                  });
                });
              }))];
            case 3:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MutationEventOutbox2.prototype.mergeUserFields = function(previous, current) {
      var _a = JSON.parse(previous.data), _version = _a._version, _lastChangedAt = _a._lastChangedAt, _deleted = _a._deleted, previousData = __rest(_a, ["_version", "_lastChangedAt", "_deleted"]);
      var _b = JSON.parse(current.data), __version = _b._version, __lastChangedAt = _b._lastChangedAt, __deleted = _b._deleted, currentData = __rest(_b, ["_version", "_lastChangedAt", "_deleted"]);
      var data = JSON.stringify(__assign(__assign({
        _version,
        _lastChangedAt,
        _deleted
      }, previousData), currentData));
      return this.modelInstanceCreator(this.MutationEvent, __assign(__assign({}, current), { data }));
    };
    MutationEventOutbox2.prototype.removeTimestampFields = function(model, record) {
      var _a, _b;
      var CREATED_AT_DEFAULT_KEY = "createdAt";
      var UPDATED_AT_DEFAULT_KEY = "updatedAt";
      var createdTimestampKey = CREATED_AT_DEFAULT_KEY;
      var updatedTimestampKey = UPDATED_AT_DEFAULT_KEY;
      var modelAttributes = (_a = this.schema.namespaces[USER].models[model].attributes) === null || _a === void 0 ? void 0 : _a.find(function(attr) {
        return attr.type === "model";
      });
      var timestampFieldsMap = (_b = modelAttributes === null || modelAttributes === void 0 ? void 0 : modelAttributes.properties) === null || _b === void 0 ? void 0 : _b.timestamps;
      if (timestampFieldsMap) {
        createdTimestampKey = timestampFieldsMap[CREATED_AT_DEFAULT_KEY];
        updatedTimestampKey = timestampFieldsMap[UPDATED_AT_DEFAULT_KEY];
      }
      delete record[createdTimestampKey];
      delete record[updatedTimestampKey];
      return record;
    };
    return MutationEventOutbox2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/sync/processors/errorMaps.js
var connectionTimeout = function(error) {
  return /^Connection failed: Connection Timeout/.test(error.message);
};
var serverError = function(error) {
  return /^Error: Request failed with status code 5\d\d/.test(error.message);
};
var mutationErrorMap = {
  BadModel: function() {
    return false;
  },
  BadRecord: function(error) {
    var message = error.message;
    return /^Cannot return \w+ for [\w-_]+ type/.test(message) || /^Variable '.+' has coerced Null value for NonNull type/.test(message);
  },
  ConfigError: function() {
    return false;
  },
  Transient: function(error) {
    return connectionTimeout(error) || serverError(error);
  },
  Unauthorized: function(error) {
    return /^Request failed with status code 401/.test(error.message);
  }
};
var subscriptionErrorMap = {
  BadModel: function() {
    return false;
  },
  BadRecord: function() {
    return false;
  },
  ConfigError: function() {
    return false;
  },
  Transient: function(observableError) {
    var error = unwrapObservableError(observableError);
    return connectionTimeout(error) || serverError(error);
  },
  Unauthorized: function(observableError) {
    var error = unwrapObservableError(observableError);
    return /Connection failed.+Unauthorized/.test(error.message);
  }
};
var syncErrorMap = {
  BadModel: function() {
    return false;
  },
  BadRecord: function(error) {
    return /^Cannot return \w+ for [\w-_]+ type/.test(error.message);
  },
  ConfigError: function() {
    return false;
  },
  Transient: function(error) {
    return connectionTimeout(error) || serverError(error);
  },
  Unauthorized: function() {
    return false;
  }
};
function unwrapObservableError(observableError) {
  var _a = observableError.error, _b = __read((_a === void 0 ? {
    errors: []
  } : _a).errors, 1), error = _b[0];
  return error;
}
function getMutationErrorType(error) {
  return mapErrorToType(mutationErrorMap, error);
}
function getSubscriptionErrorType(error) {
  return mapErrorToType(subscriptionErrorMap, error);
}
function getSyncErrorType(error) {
  return mapErrorToType(syncErrorMap, error);
}
function mapErrorToType(errorMap, error) {
  var e_1, _a;
  var errorTypes = __spread(Object.keys(errorMap));
  try {
    for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {
      var errorType = errorTypes_1_1.value;
      var matcher = errorMap[errorType];
      if (matcher === null || matcher === void 0 ? void 0 : matcher(error)) {
        return errorType;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return))
        _a.call(errorTypes_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return "Unknown";
}

// node_modules/@aws-amplify/datastore/lib-esm/sync/processors/mutation.js
var MAX_ATTEMPTS = 10;
var logger33 = new ConsoleLogger("DataStore");
var MutationProcessor = (
  /** @class */
  function() {
    function MutationProcessor2(schema2, storage, userClasses2, outbox, modelInstanceCreator2, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {
      if (amplifyConfig === void 0) {
        amplifyConfig = {};
      }
      this.schema = schema2;
      this.storage = storage;
      this.userClasses = userClasses2;
      this.outbox = outbox;
      this.modelInstanceCreator = modelInstanceCreator2;
      this.MutationEvent = MutationEvent;
      this.amplifyConfig = amplifyConfig;
      this.authModeStrategy = authModeStrategy;
      this.errorHandler = errorHandler;
      this.conflictHandler = conflictHandler;
      this.amplifyContext = amplifyContext;
      this.typeQuery = /* @__PURE__ */ new WeakMap();
      this.processing = false;
      this.runningProcesses = new BackgroundProcessManager();
      this.amplifyContext.API = this.amplifyContext.API || API;
      this.generateQueries();
    }
    MutationProcessor2.prototype.generateQueries = function() {
      var _this = this;
      Object.values(this.schema.namespaces).forEach(function(namespace) {
        Object.values(namespace.models).filter(function(_a) {
          var syncable = _a.syncable;
          return syncable;
        }).forEach(function(model) {
          var _a = __read(buildGraphQLOperation(namespace, model, "CREATE"), 1), createMutation = _a[0];
          var _b = __read(buildGraphQLOperation(namespace, model, "UPDATE"), 1), updateMutation = _b[0];
          var _c = __read(buildGraphQLOperation(namespace, model, "DELETE"), 1), deleteMutation = _c[0];
          _this.typeQuery.set(model, [
            createMutation,
            updateMutation,
            deleteMutation
          ]);
        });
      });
    };
    MutationProcessor2.prototype.isReady = function() {
      return this.observer !== void 0;
    };
    MutationProcessor2.prototype.start = function() {
      var _this = this;
      this.runningProcesses = new BackgroundProcessManager();
      var observable = new bundle_esm_default(function(observer) {
        _this.observer = observer;
        try {
          _this.resume();
        } catch (error) {
          logger33.error("mutations processor start error", error);
          throw error;
        }
        return _this.runningProcesses.addCleaner(function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              this.removeObserver();
              this.pause();
              return [
                2
                /*return*/
              ];
            });
          });
        });
      });
      return observable;
    };
    MutationProcessor2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.removeObserver();
              return [4, this.runningProcesses.close()];
            case 1:
              _a.sent();
              return [4, this.runningProcesses.open()];
            case 2:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MutationProcessor2.prototype.removeObserver = function() {
      var _a, _b;
      (_b = (_a = this.observer) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      this.observer = void 0;
    };
    MutationProcessor2.prototype.resume = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.runningProcesses.isOpen && this.runningProcesses.add(function(onTerminate) {
                return __awaiter(_this, void 0, void 0, function() {
                  var head, namespaceName, _loop_1, this_1, _a2;
                  var _this2 = this;
                  var _b, _c;
                  return __generator(this, function(_d) {
                    switch (_d.label) {
                      case 0:
                        if (this.processing || !this.isReady() || !this.runningProcesses.isOpen) {
                          return [
                            2
                            /*return*/
                          ];
                        }
                        this.processing = true;
                        namespaceName = USER;
                        _loop_1 = function() {
                          var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;
                          var _a3;
                          return __generator(this, function(_b2) {
                            switch (_b2.label) {
                              case 0:
                                model = head.model, operation = head.operation, data = head.data, condition = head.condition;
                                modelConstructor = this_1.userClasses[model];
                                result = void 0;
                                opName = void 0;
                                modelDefinition = void 0;
                                _b2.label = 1;
                              case 1:
                                _b2.trys.push([1, 4, , 5]);
                                return [4, getModelAuthModes({
                                  authModeStrategy: this_1.authModeStrategy,
                                  defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,
                                  modelName: model,
                                  schema: this_1.schema
                                })];
                              case 2:
                                modelAuthModes = _b2.sent();
                                operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];
                                authModeAttempts_1 = 0;
                                authModeRetry_1 = function() {
                                  return __awaiter(_this2, void 0, void 0, function() {
                                    var response, error_2;
                                    return __generator(this, function(_a4) {
                                      switch (_a4.label) {
                                        case 0:
                                          _a4.trys.push([0, 2, , 4]);
                                          logger33.debug("Attempting mutation with authMode: " + operationAuthModes_1[authModeAttempts_1]);
                                          return [4, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];
                                        case 1:
                                          response = _a4.sent();
                                          logger33.debug("Mutation sent successfully with authMode: " + operationAuthModes_1[authModeAttempts_1]);
                                          return [2, response];
                                        case 2:
                                          error_2 = _a4.sent();
                                          authModeAttempts_1++;
                                          if (authModeAttempts_1 >= operationAuthModes_1.length) {
                                            logger33.debug("Mutation failed with authMode: " + operationAuthModes_1[authModeAttempts_1 - 1]);
                                            throw error_2;
                                          }
                                          logger33.debug("Mutation failed with authMode: " + operationAuthModes_1[authModeAttempts_1 - 1] + ". Retrying with authMode: " + operationAuthModes_1[authModeAttempts_1]);
                                          return [4, authModeRetry_1()];
                                        case 3:
                                          return [2, _a4.sent()];
                                        case 4:
                                          return [
                                            2
                                            /*return*/
                                          ];
                                      }
                                    });
                                  });
                                };
                                return [4, authModeRetry_1()];
                              case 3:
                                _a3 = __read.apply(void 0, [_b2.sent(), 3]), result = _a3[0], opName = _a3[1], modelDefinition = _a3[2];
                                return [3, 5];
                              case 4:
                                error_1 = _b2.sent();
                                if (error_1.message === "Offline" || error_1.message === "RetryMutation") {
                                  return [2, "continue"];
                                }
                                return [3, 5];
                              case 5:
                                if (!(result === void 0))
                                  return [3, 7];
                                logger33.debug("done retrying");
                                return [4, this_1.storage.runExclusive(function(storage) {
                                  return __awaiter(_this2, void 0, void 0, function() {
                                    return __generator(this, function(_a4) {
                                      switch (_a4.label) {
                                        case 0:
                                          return [4, this.outbox.dequeue(storage)];
                                        case 1:
                                          _a4.sent();
                                          return [
                                            2
                                            /*return*/
                                          ];
                                      }
                                    });
                                  });
                                })];
                              case 6:
                                _b2.sent();
                                return [2, "continue"];
                              case 7:
                                record = result.data[opName];
                                hasMore = false;
                                return [4, this_1.storage.runExclusive(function(storage) {
                                  return __awaiter(_this2, void 0, void 0, function() {
                                    return __generator(this, function(_a4) {
                                      switch (_a4.label) {
                                        case 0:
                                          return [4, this.outbox.dequeue(storage, record, operation)];
                                        case 1:
                                          _a4.sent();
                                          return [4, this.outbox.peek(storage)];
                                        case 2:
                                          hasMore = _a4.sent() !== void 0;
                                          return [
                                            2
                                            /*return*/
                                          ];
                                      }
                                    });
                                  });
                                })];
                              case 8:
                                _b2.sent();
                                (_c = (_b2 = this_1.observer) === null || _b2 === void 0 ? void 0 : _b2.next) === null || _c === void 0 ? void 0 : _c.call(_b2, {
                                  operation,
                                  modelDefinition,
                                  model: record,
                                  hasMore
                                });
                                return [
                                  2
                                  /*return*/
                                ];
                            }
                          });
                        };
                        this_1 = this;
                        _d.label = 1;
                      case 1:
                        _a2 = this.processing && this.runningProcesses.isOpen;
                        if (!_a2)
                          return [3, 3];
                        return [4, this.outbox.peek(this.storage)];
                      case 2:
                        _a2 = (head = _d.sent()) !== void 0;
                        _d.label = 3;
                      case 3:
                        if (!_a2)
                          return [3, 5];
                        return [5, _loop_1()];
                      case 4:
                        _d.sent();
                        return [3, 1];
                      case 5:
                        this.pause();
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, "mutation resume loop")];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MutationProcessor2.prototype.jitteredRetry = function(namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, retry(function(model2, operation2, data2, condition2, modelConstructor2, MutationEvent2, mutationEvent2) {
                return __awaiter(_this, void 0, void 0, function() {
                  var _a2, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;
                  var _g;
                  return __generator(this, function(_h) {
                    switch (_h.label) {
                      case 0:
                        _a2 = __read(this.createQueryVariables(namespaceName, model2, operation2, data2, condition2), 5), query = _a2[0], variables = _a2[1], graphQLCondition = _a2[2], opName = _a2[3], modelDefinition = _a2[4];
                        return [4, getTokenForCustomAuth(authMode, this.amplifyConfig)];
                      case 1:
                        authToken = _h.sent();
                        tryWith = {
                          query,
                          variables,
                          authMode,
                          authToken,
                          userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE
                        };
                        attempt = 0;
                        opType = this.opTypeFromTransformerOperation(operation2);
                        _h.label = 2;
                      case 2:
                        _h.trys.push([2, 4, , 17]);
                        return [4, this.amplifyContext.API.graphql(tryWith)];
                      case 3:
                        result = _h.sent();
                        return [2, [result, opName, modelDefinition]];
                      case 4:
                        err_1 = _h.sent();
                        if (!(err_1.errors && err_1.errors.length > 0))
                          return [3, 15];
                        _b = __read(err_1.errors, 1), error = _b[0];
                        _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;
                        if (error.errorType === "Unauthorized") {
                          throw new NonRetryableError("Unauthorized");
                        }
                        if (error.message === "Network Error" || code === "ECONNABORTED") {
                          if (!this.processing) {
                            throw new NonRetryableError("Offline");
                          }
                          throw new Error("Network Error");
                        }
                        if (!(error.errorType === "ConflictUnhandled"))
                          return [3, 13];
                        attempt++;
                        retryWith = void 0;
                        if (!(attempt > MAX_ATTEMPTS))
                          return [3, 5];
                        retryWith = DISCARD;
                        return [3, 8];
                      case 5:
                        _h.trys.push([5, 7, , 8]);
                        return [4, this.conflictHandler({
                          modelConstructor: modelConstructor2,
                          localModel: this.modelInstanceCreator(modelConstructor2, variables.input),
                          remoteModel: this.modelInstanceCreator(modelConstructor2, error.data),
                          operation: opType,
                          attempts: attempt
                        })];
                      case 6:
                        retryWith = _h.sent();
                        return [3, 8];
                      case 7:
                        err_2 = _h.sent();
                        logger33.warn("conflict trycatch", err_2);
                        return [3, 17];
                      case 8:
                        if (!(retryWith === DISCARD))
                          return [3, 11];
                        _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, "GET"), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];
                        return [4, getTokenForCustomAuth(authMode, this.amplifyConfig)];
                      case 9:
                        authToken_1 = _h.sent();
                        return [4, this.amplifyContext.API.graphql({
                          query: query_1,
                          variables: { id: variables.input.id },
                          authMode,
                          authToken: authToken_1,
                          userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE
                        })];
                      case 10:
                        serverData = _h.sent();
                        return [2, [serverData, opName_1, modelDefinition]];
                      case 11:
                        namespace = this.schema.namespaces[namespaceName];
                        updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor2, retryWith, graphQLCondition, MutationEvent2, this.modelInstanceCreator, mutationEvent2.id);
                        return [4, this.storage.save(updatedMutation)];
                      case 12:
                        _h.sent();
                        throw new NonRetryableError("RetryMutation");
                      case 13:
                        try {
                          this.errorHandler({
                            recoverySuggestion: "Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues",
                            localModel: variables.input,
                            message: error.message,
                            operation: operation2,
                            errorType: getMutationErrorType(error),
                            errorInfo: error.errorInfo,
                            process: ProcessName.mutate,
                            cause: error,
                            remoteModel: error.data ? this.modelInstanceCreator(modelConstructor2, error.data) : null
                          });
                        } catch (err) {
                          logger33.warn("Mutation error handler failed with:", err);
                        } finally {
                          return [2, error.data ? [
                            { data: (_g = {}, _g[opName] = error.data, _g) },
                            opName,
                            modelDefinition
                          ] : []];
                        }
                        _h.label = 14;
                      case 14:
                        return [3, 16];
                      case 15:
                        throw new NonRetryableError(err_1);
                      case 16:
                        return [3, 17];
                      case 17:
                        if (tryWith)
                          return [3, 2];
                        _h.label = 18;
                      case 18:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, [
                model,
                operation,
                data,
                condition,
                modelConstructor,
                MutationEvent,
                mutationEvent
              ], safeJitteredBackoff, onTerminate)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    MutationProcessor2.prototype.createQueryVariables = function(namespaceName, model, operation, data, condition) {
      var e_1, _a, e_2, _b, e_3, _c;
      var _d, _e;
      var modelDefinition = this.schema.namespaces[namespaceName].models[model];
      var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;
      var auth = (_d = modelDefinition.attributes) === null || _d === void 0 ? void 0 : _d.find(function(a2) {
        return a2.type === "auth";
      });
      var ownerFields = ((_e = auth === null || auth === void 0 ? void 0 : auth.properties) === null || _e === void 0 ? void 0 : _e.rules.map(function(rule) {
        return rule.ownerField;
      }).filter(function(f2) {
        return f2;
      })) || ["owner"];
      var queriesTuples = this.typeQuery.get(modelDefinition);
      var _f = __read(queriesTuples.find(function(_a2) {
        var _b2 = __read(_a2, 1), transformerMutationType = _b2[0];
        return transformerMutationType === operation;
      }), 3), opName = _f[1], query = _f[2];
      var _g = JSON.parse(data), _version = _g._version, parsedData = __rest(_g, ["_version"]);
      var deleteInput = {};
      if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {
        try {
          for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {
            var pkField = primaryKey_1_1.value;
            deleteInput[pkField] = parsedData[pkField];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return))
              _a.call(primaryKey_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      } else {
        deleteInput[ID] = parsedData.id;
      }
      var mutationInput;
      if (operation === TransformerMutationType.DELETE) {
        mutationInput = deleteInput;
      } else {
        mutationInput = {};
        var modelFields = Object.values(modelDefinition.fields);
        try {
          for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {
            var _h = modelFields_1_1.value, name_1 = _h.name, type = _h.type, association = _h.association, isReadOnly = _h.isReadOnly;
            if (isReadOnly) {
              continue;
            }
            if (ownerFields.includes(name_1) && parsedData[name_1] === null) {
              continue;
            }
            if (isModelFieldType(type)) {
              if (isTargetNameAssociation(association) && association.connectionType === "BELONGS_TO") {
                var targetNames = extractTargetNamesFromSrc(association);
                if (targetNames) {
                  try {
                    for (var targetNames_1 = (e_3 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {
                      var targetName = targetNames_1_1.value;
                      mutationInput[targetName] = parsedData[targetName];
                    }
                  } catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                  } finally {
                    try {
                      if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return))
                        _c.call(targetNames_1);
                    } finally {
                      if (e_3)
                        throw e_3.error;
                    }
                  }
                }
              }
              continue;
            }
            if (operation === TransformerMutationType.UPDATE) {
              if (!parsedData.hasOwnProperty(name_1)) {
                continue;
              }
            }
            mutationInput[name_1] = parsedData[name_1];
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return))
              _b.call(modelFields_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      var input = __assign(__assign({}, mutationInput), { _version });
      var graphQLCondition = JSON.parse(condition);
      var variables = __assign({ input }, operation === TransformerMutationType.CREATE ? {} : {
        condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null
      });
      return [query, variables, graphQLCondition, opName, modelDefinition];
    };
    MutationProcessor2.prototype.opTypeFromTransformerOperation = function(operation) {
      switch (operation) {
        case TransformerMutationType.CREATE:
          return OpType.INSERT;
        case TransformerMutationType.DELETE:
          return OpType.DELETE;
        case TransformerMutationType.UPDATE:
          return OpType.UPDATE;
        case TransformerMutationType.GET:
          break;
        default:
          throw new Error("Invalid operation " + operation);
      }
      return void 0;
    };
    MutationProcessor2.prototype.pause = function() {
      this.processing = false;
    };
    return MutationProcessor2;
  }()
);
var MAX_RETRY_DELAY_MS = 5 * 60 * 1e3;
var originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);
var safeJitteredBackoff = function(attempt, _args, error) {
  var attemptResult = originalJitteredBackoff(attempt);
  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === "Network Error") {
    return MAX_RETRY_DELAY_MS;
  }
  return attemptResult;
};

// node_modules/@aws-amplify/datastore/lib-esm/sync/processors/subscription.js
var logger34 = new ConsoleLogger("DataStore");
var CONTROL_MSG2;
(function(CONTROL_MSG3) {
  CONTROL_MSG3["CONNECTED"] = "CONNECTED";
})(CONTROL_MSG2 || (CONTROL_MSG2 = {}));
var USER_CREDENTIALS;
(function(USER_CREDENTIALS2) {
  USER_CREDENTIALS2[USER_CREDENTIALS2["none"] = 0] = "none";
  USER_CREDENTIALS2[USER_CREDENTIALS2["unauth"] = 1] = "unauth";
  USER_CREDENTIALS2[USER_CREDENTIALS2["auth"] = 2] = "auth";
})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));
var SubscriptionProcessor = (
  /** @class */
  function() {
    function SubscriptionProcessor2(schema2, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {
      if (amplifyConfig === void 0) {
        amplifyConfig = {};
      }
      if (amplifyContext === void 0) {
        amplifyContext = { Auth, API, Cache: BrowserStorageCache };
      }
      this.schema = schema2;
      this.syncPredicates = syncPredicates;
      this.amplifyConfig = amplifyConfig;
      this.authModeStrategy = authModeStrategy;
      this.errorHandler = errorHandler;
      this.amplifyContext = amplifyContext;
      this.typeQuery = /* @__PURE__ */ new WeakMap();
      this.buffer = [];
      this.runningProcesses = new BackgroundProcessManager();
    }
    SubscriptionProcessor2.prototype.buildSubscription = function(namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode, filterArg) {
      if (filterArg === void 0) {
        filterArg = false;
      }
      var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;
      var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {}, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue;
      var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField, filterArg), 3), opType = _b[0], opName = _b[1], query = _b[2];
      return { authMode, opType, opName, query, isOwner, ownerField, ownerValue };
    };
    SubscriptionProcessor2.prototype.getAuthorizationInfo = function(model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {
      if (cognitoTokenPayload === void 0) {
        cognitoTokenPayload = {};
      }
      if (oidcTokenPayload === void 0) {
        oidcTokenPayload = {};
      }
      var rules = getAuthorizationRules(model);
      var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function(rule) {
        return rule.authStrategy === "private" && rule.provider === "iam";
      });
      if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {
        return null;
      }
      var groupAuthRules = rules.filter(function(rule) {
        return rule.authStrategy === "groups" && ["userPools", "oidc"].includes(rule.provider);
      });
      var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function(groupAuthRule) {
        var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);
        var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);
        return __spread(cognitoUserGroups, oidcUserGroups).find(function(userGroup) {
          return groupAuthRule.groups.find(function(group) {
            return group === userGroup;
          });
        });
      });
      if (validGroup) {
        return {
          authMode,
          isOwner: false
        };
      }
      var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function(rule) {
        return rule.authStrategy === "owner" && rule.provider === "userPools";
      }) : [];
      var ownerAuthInfo;
      cognitoOwnerAuthRules.forEach(function(ownerAuthRule) {
        var _a;
        var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];
        var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;
        var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;
        if (ownerValue) {
          ownerAuthInfo = {
            authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,
            isOwner: isOwnerArgRequired,
            ownerField: ownerAuthRule.ownerField,
            ownerValue
          };
        }
      });
      if (ownerAuthInfo) {
        return ownerAuthInfo;
      }
      var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function(rule) {
        return rule.authStrategy === "owner" && rule.provider === "oidc";
      }) : [];
      oidcOwnerAuthRules.forEach(function(ownerAuthRule) {
        var _a;
        var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];
        var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;
        var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;
        if (ownerValue) {
          ownerAuthInfo = {
            authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,
            isOwner: isOwnerArgRequired,
            ownerField: ownerAuthRule.ownerField,
            ownerValue
          };
        }
      });
      if (ownerAuthInfo) {
        return ownerAuthInfo;
      }
      return {
        authMode: authMode || defaultAuthType,
        isOwner: false
      };
    };
    SubscriptionProcessor2.prototype.hubQueryCompletionListener = function(completed, capsule) {
      var event = capsule.payload.event;
      if (event === CONTROL_MSG.SUBSCRIPTION_ACK) {
        completed();
      }
    };
    SubscriptionProcessor2.prototype.start = function() {
      var _this = this;
      this.runningProcesses = this.runningProcesses || new BackgroundProcessManager();
      var ctlObservable = new bundle_esm_default(function(observer) {
        var promises = [];
        var subscriptions = {};
        var cognitoTokenPayload, oidcTokenPayload;
        var userCredentials = USER_CREDENTIALS.none;
        _this.runningProcesses.add(function() {
          return __awaiter(_this, void 0, void 0, function() {
            var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;
            var _this2 = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _b.trys.push([0, 2, , 3]);
                  return [4, this.amplifyContext.Auth.currentCredentials()];
                case 1:
                  credentials = _b.sent();
                  userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;
                  return [3, 3];
                case 2:
                  err_1 = _b.sent();
                  return [3, 3];
                case 3:
                  _b.trys.push([3, 5, , 6]);
                  return [4, this.amplifyContext.Auth.currentSession()];
                case 4:
                  session = _b.sent();
                  cognitoTokenPayload = session.getIdToken().decodePayload();
                  return [3, 6];
                case 5:
                  err_2 = _b.sent();
                  return [3, 6];
                case 6:
                  _b.trys.push([6, 11, , 12]);
                  _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;
                  if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {
                    throw "Auth is not configured";
                  }
                  token = void 0;
                  return [4, this.amplifyContext.Cache.getItem("federatedInfo")];
                case 7:
                  federatedInfo = _b.sent();
                  if (!federatedInfo)
                    return [3, 8];
                  token = federatedInfo.token;
                  return [3, 10];
                case 8:
                  return [4, this.amplifyContext.Auth.currentAuthenticatedUser()];
                case 9:
                  currentUser = _b.sent();
                  if (currentUser) {
                    token = currentUser.token;
                  }
                  _b.label = 10;
                case 10:
                  if (token) {
                    payload = token.split(".")[1];
                    oidcTokenPayload = JSON.parse(Buffer.from(payload, "base64").toString("utf8"));
                  }
                  return [3, 12];
                case 11:
                  err_3 = _b.sent();
                  logger34.debug("error getting OIDC JWT", err_3);
                  return [3, 12];
                case 12:
                  Object.values(this.schema.namespaces).forEach(function(namespace) {
                    Object.values(namespace.models).filter(function(_a2) {
                      var syncable = _a2.syncable;
                      return syncable;
                    }).forEach(function(modelDefinition) {
                      return _this2.runningProcesses.isOpen && _this2.runningProcesses.add(function() {
                        return __awaiter(_this2, void 0, void 0, function() {
                          var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, predicatesGroup, addFilterArg, subscriptionRetry;
                          var _a2, _b2, _c;
                          var _this3 = this;
                          return __generator(this, function(_d) {
                            switch (_d.label) {
                              case 0:
                                return [4, getModelAuthModes({
                                  authModeStrategy: this.authModeStrategy,
                                  defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,
                                  modelName: modelDefinition.name,
                                  schema: this.schema
                                })];
                              case 1:
                                modelAuthModes = _d.sent();
                                readAuthModes = modelAuthModes.READ;
                                subscriptions = __assign(__assign({}, subscriptions), (_a2 = {}, _a2[modelDefinition.name] = (_b2 = {}, _b2[TransformerMutationType.CREATE] = [], _b2[TransformerMutationType.UPDATE] = [], _b2[TransformerMutationType.DELETE] = [], _b2), _a2));
                                operations = [
                                  TransformerMutationType.CREATE,
                                  TransformerMutationType.UPDATE,
                                  TransformerMutationType.DELETE
                                ];
                                operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);
                                predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(modelDefinition), false);
                                addFilterArg = predicatesGroup !== void 0;
                                subscriptionRetry = function(operation, addFilter) {
                                  if (addFilter === void 0) {
                                    addFilter = addFilterArg;
                                  }
                                  return __awaiter(_this3, void 0, void 0, function() {
                                    var _a3, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;
                                    var _this4 = this;
                                    return __generator(this, function(_b3) {
                                      switch (_b3.label) {
                                        case 0:
                                          _a3 = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]], addFilter), transformerMutationType = _a3.opType, opName = _a3.opName, query = _a3.query, isOwner = _a3.isOwner, ownerField = _a3.ownerField, ownerValue = _a3.ownerValue, authMode = _a3.authMode;
                                          return [4, getTokenForCustomAuth(authMode, this.amplifyConfig)];
                                        case 1:
                                          authToken = _b3.sent();
                                          variables = {};
                                          if (addFilter && predicatesGroup) {
                                            variables["filter"] = predicateToGraphQLFilter(predicatesGroup);
                                          }
                                          if (isOwner) {
                                            if (!ownerValue) {
                                              observer.error("Owner field required, sign in is needed in order to perform this operation");
                                              return [
                                                2
                                                /*return*/
                                              ];
                                            }
                                            variables[ownerField] = ownerValue;
                                          }
                                          logger34.debug("Attempting " + operation + " subscription with authMode: " + readAuthModes[operationAuthModeAttempts[operation]]);
                                          userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;
                                          queryObservable = this.amplifyContext.API.graphql(__assign(__assign({
                                            query,
                                            variables
                                          }, { authMode }), {
                                            authToken,
                                            userAgentSuffix
                                          }));
                                          subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function(_a4) {
                                            var value = _a4.value;
                                            return value;
                                          }).subscribe({
                                            next: function(_a4) {
                                              var data = _a4.data, errors = _a4.errors;
                                              if (Array.isArray(errors) && errors.length > 0) {
                                                var messages = errors.map(function(_a5) {
                                                  var message = _a5.message;
                                                  return message;
                                                });
                                                logger34.warn("Skipping incoming subscription. Messages: " + messages.join("\n"));
                                                _this4.drainBuffer();
                                                return;
                                              }
                                              var predicatesGroup2 = ModelPredicateCreator.getPredicates(_this4.syncPredicates.get(modelDefinition), false);
                                              var _b4 = data, _c2 = opName, record = _b4[_c2];
                                              if (_this4.passesPredicateValidation(record, predicatesGroup2)) {
                                                _this4.pushToBuffer(transformerMutationType, modelDefinition, record);
                                              }
                                              _this4.drainBuffer();
                                            },
                                            error: function(subscriptionError) {
                                              return __awaiter(_this4, void 0, void 0, function() {
                                                var _a4, _b4, _c2, _d2, message, isRTFError, e_1;
                                                return __generator(this, function(_e) {
                                                  switch (_e.label) {
                                                    case 0:
                                                      _a4 = subscriptionError.error, _b4 = __read((_a4 === void 0 ? {
                                                        errors: []
                                                      } : _a4).errors, 1), _c2 = _b4[0], _d2 = (_c2 === void 0 ? {} : _c2).message, message = _d2 === void 0 ? "" : _d2;
                                                      isRTFError = // only attempt catch if a filter variable was added to the subscription query
                                                      addFilter && this.catchRTFError(message, modelDefinition, predicatesGroup);
                                                      if (isRTFError) {
                                                        subscriptions[modelDefinition.name][transformerMutationType].forEach(function(subscription) {
                                                          return subscription.unsubscribe();
                                                        });
                                                        subscriptions[modelDefinition.name][transformerMutationType] = [];
                                                        subscriptionRetry(operation, false);
                                                        return [
                                                          2
                                                          /*return*/
                                                        ];
                                                      }
                                                      if (message.includes(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(CONTROL_MSG.CONNECTION_FAILED)) {
                                                        subscriptions[modelDefinition.name][transformerMutationType].forEach(function(subscription) {
                                                          return subscription.unsubscribe();
                                                        });
                                                        subscriptions[modelDefinition.name][transformerMutationType] = [];
                                                        operationAuthModeAttempts[operation]++;
                                                        if (operationAuthModeAttempts[operation] >= readAuthModes.length) {
                                                          logger34.debug(operation + " subscription failed with authMode: " + readAuthModes[operationAuthModeAttempts[operation] - 1]);
                                                        } else {
                                                          logger34.debug(operation + " subscription failed with authMode: " + readAuthModes[operationAuthModeAttempts[operation] - 1] + ". Retrying with authMode: " + readAuthModes[operationAuthModeAttempts[operation]]);
                                                          subscriptionRetry(operation);
                                                          return [
                                                            2
                                                            /*return*/
                                                          ];
                                                        }
                                                      }
                                                      logger34.warn("subscriptionError", message);
                                                      _e.label = 1;
                                                    case 1:
                                                      _e.trys.push([1, 3, , 4]);
                                                      return [4, this.errorHandler({
                                                        recoverySuggestion: "Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues",
                                                        localModel: null,
                                                        message,
                                                        model: modelDefinition.name,
                                                        operation,
                                                        errorType: getSubscriptionErrorType(subscriptionError),
                                                        process: ProcessName.subscribe,
                                                        remoteModel: null,
                                                        cause: subscriptionError
                                                      })];
                                                    case 2:
                                                      _e.sent();
                                                      return [3, 4];
                                                    case 3:
                                                      e_1 = _e.sent();
                                                      logger34.error("Subscription error handler failed with:", e_1);
                                                      return [3, 4];
                                                    case 4:
                                                      if (typeof subscriptionReadyCallback === "function") {
                                                        subscriptionReadyCallback();
                                                      }
                                                      if (message.includes('"errorType":"Unauthorized"') || message.includes('"errorType":"OperationDisabled"')) {
                                                        return [
                                                          2
                                                          /*return*/
                                                        ];
                                                      }
                                                      observer.error(message);
                                                      return [
                                                        2
                                                        /*return*/
                                                      ];
                                                  }
                                                });
                                              });
                                            }
                                          }));
                                          promises.push(function() {
                                            return __awaiter(_this4, void 0, void 0, function() {
                                              var boundFunction;
                                              var _this5 = this;
                                              return __generator(this, function(_a4) {
                                                switch (_a4.label) {
                                                  case 0:
                                                    return [4, new Promise(function(res) {
                                                      subscriptionReadyCallback = res;
                                                      boundFunction = _this5.hubQueryCompletionListener.bind(_this5, res);
                                                      Hub.listen("api", boundFunction);
                                                    })];
                                                  case 1:
                                                    _a4.sent();
                                                    Hub.remove("api", boundFunction);
                                                    return [
                                                      2
                                                      /*return*/
                                                    ];
                                                }
                                              });
                                            });
                                          }());
                                          return [
                                            2
                                            /*return*/
                                          ];
                                      }
                                    });
                                  });
                                };
                                operations.forEach(function(op) {
                                  return subscriptionRetry(op);
                                });
                                return [
                                  2
                                  /*return*/
                                ];
                            }
                          });
                        });
                      });
                    });
                  });
                  this.runningProcesses.isOpen && this.runningProcesses.add(function() {
                    return Promise.all(promises).then(function() {
                      observer.next(CONTROL_MSG2.CONNECTED);
                    });
                  });
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, "subscription processor new subscriber");
        return _this.runningProcesses.addCleaner(function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              Object.keys(subscriptions).forEach(function(modelName) {
                subscriptions[modelName][TransformerMutationType.CREATE].forEach(function(subscription) {
                  return subscription.unsubscribe();
                });
                subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function(subscription) {
                  return subscription.unsubscribe();
                });
                subscriptions[modelName][TransformerMutationType.DELETE].forEach(function(subscription) {
                  return subscription.unsubscribe();
                });
              });
              return [
                2
                /*return*/
              ];
            });
          });
        });
      });
      var dataObservable = new bundle_esm_default(function(observer) {
        _this.dataObserver = observer;
        _this.drainBuffer();
        return _this.runningProcesses.addCleaner(function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              this.dataObserver = null;
              return [
                2
                /*return*/
              ];
            });
          });
        });
      });
      return [ctlObservable, dataObservable];
    };
    SubscriptionProcessor2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.runningProcesses.close()];
            case 1:
              _a.sent();
              return [4, this.runningProcesses.open()];
            case 2:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SubscriptionProcessor2.prototype.passesPredicateValidation = function(record, predicatesGroup) {
      if (!predicatesGroup) {
        return true;
      }
      var predicates = predicatesGroup.predicates, type = predicatesGroup.type;
      return validatePredicate(record, type, predicates);
    };
    SubscriptionProcessor2.prototype.pushToBuffer = function(transformerMutationType, modelDefinition, data) {
      this.buffer.push([transformerMutationType, modelDefinition, data]);
    };
    SubscriptionProcessor2.prototype.drainBuffer = function() {
      var _this = this;
      if (this.dataObserver) {
        this.buffer.forEach(function(data) {
          return _this.dataObserver.next(data);
        });
        this.buffer = [];
      }
    };
    SubscriptionProcessor2.prototype.catchRTFError = function(message, modelDefinition, predicatesGroup) {
      var header = "Backend subscriptions filtering error.\nSubscriptions filtering will be applied clientside.\n";
      var messageErrorTypeMap = {
        "UnknownArgument: Unknown field argument filter": RTFError.UnknownField,
        "Filters exceed maximum attributes limit": RTFError.MaxAttributes,
        "Filters combination exceed maximum limit": RTFError.MaxCombinations,
        "filter uses same fieldName multiple time": RTFError.RepeatedFieldname,
        "The variables input contains a field name 'not'": RTFError.NotGroup,
        "The variables input contains a field that is not defined for input object type": RTFError.FieldNotInType
      };
      var _a = __read(Object.entries(messageErrorTypeMap).find(function(_a2) {
        var _b = __read(_a2, 1), errorMsg = _b[0];
        return message.includes(errorMsg);
      }) || [], 2), _errorMsg = _a[0], errorType = _a[1];
      if (errorType !== void 0) {
        var remediationMessage = generateRTFRemediation(errorType, modelDefinition, predicatesGroup);
        logger34.warn(header + "\n" + message + "\n" + remediationMessage);
        return true;
      }
      return false;
    };
    return SubscriptionProcessor2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/sync/processors/sync.js
var opResultDefaults = {
  items: [],
  nextToken: null,
  startedAt: null
};
var logger35 = new ConsoleLogger("DataStore");
var SyncProcessor = (
  /** @class */
  function() {
    function SyncProcessor2(schema2, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {
      if (amplifyConfig === void 0) {
        amplifyConfig = {};
      }
      this.schema = schema2;
      this.syncPredicates = syncPredicates;
      this.amplifyConfig = amplifyConfig;
      this.authModeStrategy = authModeStrategy;
      this.errorHandler = errorHandler;
      this.amplifyContext = amplifyContext;
      this.typeQuery = /* @__PURE__ */ new WeakMap();
      this.runningProcesses = new BackgroundProcessManager();
      amplifyContext.API = amplifyContext.API || API;
      this.generateQueries();
    }
    SyncProcessor2.prototype.generateQueries = function() {
      var _this = this;
      Object.values(this.schema.namespaces).forEach(function(namespace) {
        Object.values(namespace.models).filter(function(_a) {
          var syncable = _a.syncable;
          return syncable;
        }).forEach(function(model) {
          var _a = __read(buildGraphQLOperation(namespace, model, "LIST"), 1), _b = __read(_a[0]), opNameQuery = _b.slice(1);
          _this.typeQuery.set(model, opNameQuery);
        });
      });
    };
    SyncProcessor2.prototype.graphqlFilterFromPredicate = function(model) {
      if (!this.syncPredicates) {
        return null;
      }
      var predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);
      if (!predicatesGroup) {
        return null;
      }
      return predicateToGraphQLFilter(predicatesGroup);
    };
    SyncProcessor2.prototype.retrievePage = function(modelDefinition, lastSync, nextToken, limit, filter, onTerminate) {
      if (limit === void 0) {
        limit = null;
      }
      return __awaiter(this, void 0, void 0, function() {
        var _a, opName, query, variables, modelAuthModes, readAuthModes, authModeAttempts, authModeRetry, data, _b, _c, opResult, items, newNextToken, startedAt;
        var _this = this;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              _a = __read(this.typeQuery.get(modelDefinition), 2), opName = _a[0], query = _a[1];
              variables = {
                limit,
                nextToken,
                lastSync,
                filter
              };
              return [4, getModelAuthModes({
                authModeStrategy: this.authModeStrategy,
                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,
                modelName: modelDefinition.name,
                schema: this.schema
              })];
            case 1:
              modelAuthModes = _d.sent();
              readAuthModes = modelAuthModes.READ;
              authModeAttempts = 0;
              authModeRetry = function() {
                return __awaiter(_this, void 0, void 0, function() {
                  var response, error_1, authMode;
                  var _a2;
                  return __generator(this, function(_b2) {
                    switch (_b2.label) {
                      case 0:
                        if (!this.runningProcesses.isOpen) {
                          throw new Error("sync.retreievePage termination was requested. Exiting.");
                        }
                        _b2.label = 1;
                      case 1:
                        _b2.trys.push([1, 3, , 5]);
                        logger35.debug("Attempting sync with authMode: " + readAuthModes[authModeAttempts]);
                        return [4, this.jitteredRetry({
                          query,
                          variables,
                          opName,
                          modelDefinition,
                          authMode: readAuthModes[authModeAttempts],
                          onTerminate
                        })];
                      case 2:
                        response = _b2.sent();
                        logger35.debug("Sync successful with authMode: " + readAuthModes[authModeAttempts]);
                        return [2, response];
                      case 3:
                        error_1 = _b2.sent();
                        authModeAttempts++;
                        if (authModeAttempts >= readAuthModes.length) {
                          authMode = readAuthModes[authModeAttempts - 1];
                          logger35.debug("Sync failed with authMode: " + authMode, error_1);
                          if (getClientSideAuthError(error_1) || getForbiddenError(error_1)) {
                            logger35.warn("User is unauthorized to query " + opName + " with auth mode " + authMode + ". No data could be returned.");
                            return [2, {
                              data: (_a2 = {}, _a2[opName] = opResultDefaults, _a2)
                            }];
                          }
                          throw error_1;
                        }
                        logger35.debug("Sync failed with authMode: " + readAuthModes[authModeAttempts - 1] + ". Retrying with authMode: " + readAuthModes[authModeAttempts]);
                        return [4, authModeRetry()];
                      case 4:
                        return [2, _b2.sent()];
                      case 5:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              };
              return [4, authModeRetry()];
            case 2:
              data = _d.sent().data;
              _b = data, _c = opName, opResult = _b[_c];
              items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;
              return [2, {
                nextToken: newNextToken,
                startedAt,
                items
              }];
          }
        });
      });
    };
    SyncProcessor2.prototype.jitteredRetry = function(_a) {
      var query = _a.query, variables = _a.variables, opName = _a.opName, modelDefinition = _a.modelDefinition, authMode = _a.authMode, onTerminate = _a.onTerminate;
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, jitteredExponentialRetry(function(query2, variables2) {
                return __awaiter(_this, void 0, void 0, function() {
                  var authToken, error_2, clientOrForbiddenErrorMessage, hasItems, unauthorized, otherErrors, result;
                  var _this2 = this;
                  var _a2, _b2, _c, _d;
                  return __generator(this, function(_e) {
                    switch (_e.label) {
                      case 0:
                        _e.trys.push([0, 3, , 6]);
                        return [4, getTokenForCustomAuth(authMode, this.amplifyConfig)];
                      case 1:
                        authToken = _e.sent();
                        return [4, this.amplifyContext.API.graphql({
                          query: query2,
                          variables: variables2,
                          authMode,
                          authToken,
                          userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE
                        })];
                      case 2:
                        return [2, _e.sent()];
                      case 3:
                        error_2 = _e.sent();
                        clientOrForbiddenErrorMessage = getClientSideAuthError(error_2) || getForbiddenError(error_2);
                        if (clientOrForbiddenErrorMessage) {
                          logger35.error("Sync processor retry error:", error_2);
                          throw new NonRetryableError(clientOrForbiddenErrorMessage);
                        }
                        hasItems = Boolean((_b2 = (_a2 = error_2 === null || error_2 === void 0 ? void 0 : error_2.data) === null || _a2 === void 0 ? void 0 : _a2[opName]) === null || _b2 === void 0 ? void 0 : _b2.items);
                        unauthorized = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.some(function(err) {
                          return err.errorType === "Unauthorized";
                        });
                        otherErrors = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.filter(function(err) {
                          return err.errorType !== "Unauthorized";
                        });
                        result = error_2;
                        if (hasItems) {
                          result.data[opName].items = result.data[opName].items.filter(function(item) {
                            return item !== null;
                          });
                        }
                        if (!(hasItems && (otherErrors === null || otherErrors === void 0 ? void 0 : otherErrors.length)))
                          return [3, 5];
                        return [4, Promise.all(otherErrors.map(function(err) {
                          return __awaiter(_this2, void 0, void 0, function() {
                            var e_1;
                            return __generator(this, function(_a3) {
                              switch (_a3.label) {
                                case 0:
                                  _a3.trys.push([0, 2, , 3]);
                                  return [4, this.errorHandler({
                                    recoverySuggestion: "Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues",
                                    localModel: null,
                                    message: err.message,
                                    model: modelDefinition.name,
                                    operation: opName,
                                    errorType: getSyncErrorType(err),
                                    process: ProcessName.sync,
                                    remoteModel: null,
                                    cause: err
                                  })];
                                case 1:
                                  _a3.sent();
                                  return [3, 3];
                                case 2:
                                  e_1 = _a3.sent();
                                  logger35.error("Sync error handler failed with:", e_1);
                                  return [3, 3];
                                case 3:
                                  return [
                                    2
                                    /*return*/
                                  ];
                              }
                            });
                          });
                        }))];
                      case 4:
                        _e.sent();
                        Hub.dispatch("datastore", {
                          event: "nonApplicableDataReceived",
                          data: {
                            errors: otherErrors,
                            modelName: modelDefinition.name
                          }
                        });
                        _e.label = 5;
                      case 5:
                        if (unauthorized) {
                          logger35.warn("queryError", "User is unauthorized to query " + opName + ", some items could not be returned.");
                          result.data = result.data || {};
                          result.data[opName] = __assign(__assign({}, opResultDefaults), result.data[opName]);
                          return [2, result];
                        }
                        if ((_d = (_c = result.data) === null || _c === void 0 ? void 0 : _c[opName].items) === null || _d === void 0 ? void 0 : _d.length) {
                          return [2, result];
                        }
                        throw error_2;
                      case 6:
                        return [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }, [query, variables], void 0, onTerminate)];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    SyncProcessor2.prototype.start = function(typesLastSync) {
      var _this = this;
      var _a = this.amplifyConfig, maxRecordsToSync = _a.maxRecordsToSync, syncPageSize = _a.syncPageSize;
      var parentPromises = /* @__PURE__ */ new Map();
      var observable = new bundle_esm_default(function(observer) {
        var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function(map, namespace) {
          var e_2, _a2;
          try {
            for (var _b = __values(Array.from(namespace.modelTopologicalOrdering.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
              var modelName = _c.value;
              var typeLastSync = typesLastSync.get(namespace.models[modelName]);
              map.set(namespace.models[modelName], typeLastSync);
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return))
                _a2.call(_b);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
          return map;
        }, /* @__PURE__ */ new Map());
        var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function(_a2) {
          var _b = __read(_a2, 1), syncable = _b[0].syncable;
          return syncable;
        }).map(function(_a2) {
          var _b = __read(_a2, 2), modelDefinition = _b[0], _c = __read(_b[1], 2), namespace = _c[0], lastSync = _c[1];
          return _this.runningProcesses.isOpen && _this.runningProcesses.add(function(onTerminate) {
            return __awaiter(_this, void 0, void 0, function() {
              var done, nextToken, startedAt, items, recordsReceived, filter, parents, promises, promise;
              var _this2 = this;
              return __generator(this, function(_a3) {
                switch (_a3.label) {
                  case 0:
                    done = false;
                    nextToken = null;
                    startedAt = null;
                    items = null;
                    recordsReceived = 0;
                    filter = this.graphqlFilterFromPredicate(modelDefinition);
                    parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);
                    promises = parents.map(function(parent) {
                      return parentPromises.get(namespace + "_" + parent);
                    });
                    promise = new Promise(function(res) {
                      return __awaiter(_this2, void 0, void 0, function() {
                        var limit;
                        var _a4;
                        return __generator(this, function(_b2) {
                          switch (_b2.label) {
                            case 0:
                              return [4, Promise.all(promises)];
                            case 1:
                              _b2.sent();
                              _b2.label = 2;
                            case 2:
                              if (!this.runningProcesses.isOpen) {
                                return [
                                  2
                                  /*return*/
                                ];
                              }
                              limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);
                              return [4, this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter, onTerminate)];
                            case 3:
                              _a4 = _b2.sent(), items = _a4.items, nextToken = _a4.nextToken, startedAt = _a4.startedAt;
                              recordsReceived += items.length;
                              done = nextToken === null || recordsReceived >= maxRecordsToSync;
                              observer.next({
                                namespace,
                                modelDefinition,
                                items,
                                done,
                                startedAt,
                                isFullSync: !lastSync
                              });
                              _b2.label = 4;
                            case 4:
                              if (!done)
                                return [3, 2];
                              _b2.label = 5;
                            case 5:
                              res();
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    });
                    parentPromises.set(namespace + "_" + modelDefinition.name, promise);
                    return [4, promise];
                  case 1:
                    _a3.sent();
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, "adding model " + modelDefinition.name);
        });
        Promise.all(allModelsReady).then(function() {
          observer.complete();
        });
      });
      return observable;
    };
    SyncProcessor2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger35.debug("stopping sync processor");
              return [4, this.runningProcesses.close()];
            case 1:
              _a.sent();
              return [4, this.runningProcesses.open()];
            case 2:
              _a.sent();
              logger35.debug("sync processor stopped");
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return SyncProcessor2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/sync/index.js
var isNode3 = browserOrNode().isNode;
var logger36 = new ConsoleLogger("DataStore");
var ownSymbol = Symbol("sync");
var ControlMessage;
(function(ControlMessage2) {
  ControlMessage2["SYNC_ENGINE_STORAGE_SUBSCRIBED"] = "storageSubscribed";
  ControlMessage2["SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED"] = "subscriptionsEstablished";
  ControlMessage2["SYNC_ENGINE_SYNC_QUERIES_STARTED"] = "syncQueriesStarted";
  ControlMessage2["SYNC_ENGINE_SYNC_QUERIES_READY"] = "syncQueriesReady";
  ControlMessage2["SYNC_ENGINE_MODEL_SYNCED"] = "modelSynced";
  ControlMessage2["SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED"] = "outboxMutationEnqueued";
  ControlMessage2["SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED"] = "outboxMutationProcessed";
  ControlMessage2["SYNC_ENGINE_OUTBOX_STATUS"] = "outboxStatus";
  ControlMessage2["SYNC_ENGINE_NETWORK_STATUS"] = "networkStatus";
  ControlMessage2["SYNC_ENGINE_READY"] = "ready";
})(ControlMessage || (ControlMessage = {}));
var SyncEngine = (
  /** @class */
  function() {
    function SyncEngine2(schema2, namespaceResolver2, modelClasses, userModelClasses, storage, modelInstanceCreator2, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy, amplifyContext, connectivityMonitor) {
      var _this = this;
      if (amplifyConfig === void 0) {
        amplifyConfig = {};
      }
      this.schema = schema2;
      this.namespaceResolver = namespaceResolver2;
      this.modelClasses = modelClasses;
      this.userModelClasses = userModelClasses;
      this.storage = storage;
      this.modelInstanceCreator = modelInstanceCreator2;
      this.syncPredicates = syncPredicates;
      this.amplifyConfig = amplifyConfig;
      this.authModeStrategy = authModeStrategy;
      this.amplifyContext = amplifyContext;
      this.connectivityMonitor = connectivityMonitor;
      this.online = false;
      this.modelSyncedStatus = /* @__PURE__ */ new WeakMap();
      this.connectionDisrupted = false;
      this.runningProcesses = new BackgroundProcessManager();
      this.waitForSleepState = new Promise(function(resolve4) {
        _this.syncQueriesObservableStartSleeping = resolve4;
      });
      var MutationEvent = this.modelClasses["MutationEvent"];
      this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator2, ownSymbol);
      this.modelMerger = new ModelMerger(this.outbox, ownSymbol);
      this.syncQueriesProcessor = new SyncProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);
      this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);
      this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, errorHandler, conflictHandler, this.amplifyContext);
      this.datastoreConnectivity = this.connectivityMonitor || new datastoreConnectivity_default();
    }
    SyncEngine2.prototype.getModelSyncedStatus = function(modelConstructor) {
      return this.modelSyncedStatus.get(modelConstructor);
    };
    SyncEngine2.prototype.start = function(params) {
      var _this = this;
      return new bundle_esm_default(function(observer) {
        logger36.log("starting sync engine...");
        var subscriptions = [];
        _this.runningProcesses.add(function() {
          return __awaiter(_this, void 0, void 0, function() {
            var err_1, startPromise, hasMutationsInOutbox;
            var _this2 = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4, this.setupModels(params)];
                case 1:
                  _a.sent();
                  return [3, 3];
                case 2:
                  err_1 = _a.sent();
                  observer.error(err_1);
                  return [
                    2
                    /*return*/
                  ];
                case 3:
                  startPromise = new Promise(function(doneStarting, failedStarting) {
                    _this2.datastoreConnectivity.status().subscribe(function(_a2) {
                      var online = _a2.online;
                      return __awaiter(_this2, void 0, void 0, function() {
                        var _this3 = this;
                        return __generator(this, function(_b) {
                          return [2, this.runningProcesses.isOpen && this.runningProcesses.add(function(onTerminate) {
                            return __awaiter(_this3, void 0, void 0, function() {
                              var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;
                              var _a3;
                              var _this4 = this;
                              return __generator(this, function(_b2) {
                                switch (_b2.label) {
                                  case 0:
                                    if (!(online && !this.online))
                                      return [3, 10];
                                    this.online = online;
                                    observer.next({
                                      type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,
                                      data: {
                                        active: this.online
                                      }
                                    });
                                    dataSubsObservable = void 0;
                                    if (!isNode3)
                                      return [3, 1];
                                    logger36.warn("Realtime disabled when in a server-side environment");
                                    return [3, 6];
                                  case 1:
                                    this.stopDisruptionListener = this.startDisruptionListener();
                                    _a3 = __read(this.subscriptionsProcessor.start(), 2), ctlSubsObservable_1 = _a3[0], dataSubsObservable = _a3[1];
                                    _b2.label = 2;
                                  case 2:
                                    _b2.trys.push([2, 4, , 5]);
                                    return [4, new Promise(function(resolve4, reject) {
                                      onTerminate.then(reject);
                                      var ctlSubsSubscription = ctlSubsObservable_1.subscribe({
                                        next: function(msg) {
                                          if (msg === CONTROL_MSG2.CONNECTED) {
                                            resolve4();
                                          }
                                        },
                                        error: function(err) {
                                          reject(err);
                                          var handleDisconnect = _this4.disconnectionHandler();
                                          handleDisconnect(err);
                                        }
                                      });
                                      subscriptions.push(ctlSubsSubscription);
                                    })];
                                  case 3:
                                    _b2.sent();
                                    return [3, 5];
                                  case 4:
                                    err_2 = _b2.sent();
                                    observer.error(err_2);
                                    failedStarting();
                                    return [
                                      2
                                      /*return*/
                                    ];
                                  case 5:
                                    logger36.log("Realtime ready");
                                    observer.next({
                                      type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED
                                    });
                                    _b2.label = 6;
                                  case 6:
                                    _b2.trys.push([6, 8, , 9]);
                                    return [4, new Promise(function(resolve4, reject) {
                                      var syncQuerySubscription = _this4.syncQueriesObservable().subscribe({
                                        next: function(message) {
                                          var type = message.type;
                                          if (type === ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {
                                            resolve4();
                                          }
                                          observer.next(message);
                                        },
                                        complete: function() {
                                          resolve4();
                                        },
                                        error: function(error) {
                                          reject(error);
                                        }
                                      });
                                      if (syncQuerySubscription) {
                                        subscriptions.push(syncQuerySubscription);
                                      }
                                    })];
                                  case 7:
                                    _b2.sent();
                                    return [3, 9];
                                  case 8:
                                    error_1 = _b2.sent();
                                    observer.error(error_1);
                                    failedStarting();
                                    return [
                                      2
                                      /*return*/
                                    ];
                                  case 9:
                                    subscriptions.push(this.mutationsProcessor.start().subscribe(function(_a4) {
                                      var modelDefinition = _a4.modelDefinition, item = _a4.model, hasMore = _a4.hasMore;
                                      return _this4.runningProcesses.add(function() {
                                        return __awaiter(_this4, void 0, void 0, function() {
                                          var modelConstructor, model;
                                          var _this5 = this;
                                          return __generator(this, function(_a5) {
                                            switch (_a5.label) {
                                              case 0:
                                                modelConstructor = this.userModelClasses[modelDefinition.name];
                                                model = this.modelInstanceCreator(modelConstructor, item);
                                                return [4, this.storage.runExclusive(function(storage) {
                                                  return _this5.modelMerger.merge(storage, model, modelDefinition);
                                                })];
                                              case 1:
                                                _a5.sent();
                                                observer.next({
                                                  type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,
                                                  data: {
                                                    model: modelConstructor,
                                                    element: model
                                                  }
                                                });
                                                observer.next({
                                                  type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,
                                                  data: {
                                                    isEmpty: !hasMore
                                                  }
                                                });
                                                return [
                                                  2
                                                  /*return*/
                                                ];
                                            }
                                          });
                                        });
                                      }, "mutation processor event");
                                    }));
                                    if (!isNode3) {
                                      subscriptions.push(dataSubsObservable.subscribe(function(_a4) {
                                        var _b3 = __read(_a4, 3), _transformerMutationType = _b3[0], modelDefinition = _b3[1], item = _b3[2];
                                        return _this4.runningProcesses.add(function() {
                                          return __awaiter(_this4, void 0, void 0, function() {
                                            var modelConstructor, model;
                                            var _this5 = this;
                                            return __generator(this, function(_a5) {
                                              switch (_a5.label) {
                                                case 0:
                                                  modelConstructor = this.userModelClasses[modelDefinition.name];
                                                  model = this.modelInstanceCreator(modelConstructor, item);
                                                  return [4, this.storage.runExclusive(function(storage) {
                                                    return _this5.modelMerger.merge(storage, model, modelDefinition);
                                                  })];
                                                case 1:
                                                  _a5.sent();
                                                  return [
                                                    2
                                                    /*return*/
                                                  ];
                                              }
                                            });
                                          });
                                        }, "subscription dataSubsObservable event");
                                      }));
                                    }
                                    return [3, 11];
                                  case 10:
                                    if (!online) {
                                      this.online = online;
                                      observer.next({
                                        type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,
                                        data: {
                                          active: this.online
                                        }
                                      });
                                      subscriptions.forEach(function(sub) {
                                        return sub.unsubscribe();
                                      });
                                      subscriptions = [];
                                    }
                                    _b2.label = 11;
                                  case 11:
                                    doneStarting();
                                    return [
                                      2
                                      /*return*/
                                    ];
                                }
                              });
                            });
                          }, "datastore connectivity event")];
                        });
                      });
                    });
                  });
                  this.storage.observe(null, null, ownSymbol).filter(function(_a2) {
                    var model = _a2.model;
                    var modelDefinition = _this2.getModelDefinition(model);
                    return modelDefinition.syncable === true;
                  }).subscribe({
                    next: function(_a2) {
                      var opType = _a2.opType, model = _a2.model, element = _a2.element, condition = _a2.condition;
                      return __awaiter(_this2, void 0, void 0, function() {
                        var _this3 = this;
                        return __generator(this, function(_b) {
                          return [2, this.runningProcesses.add(function() {
                            return __awaiter(_this3, void 0, void 0, function() {
                              var namespace, MutationEventConstructor, modelDefinition, graphQLCondition, mutationEvent;
                              return __generator(this, function(_a3) {
                                switch (_a3.label) {
                                  case 0:
                                    namespace = this.schema.namespaces[this.namespaceResolver(model)];
                                    MutationEventConstructor = this.modelClasses["MutationEvent"];
                                    modelDefinition = this.getModelDefinition(model);
                                    graphQLCondition = predicateToGraphQLCondition(condition, modelDefinition);
                                    mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);
                                    return [4, this.outbox.enqueue(this.storage, mutationEvent)];
                                  case 1:
                                    _a3.sent();
                                    observer.next({
                                      type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,
                                      data: {
                                        model,
                                        element
                                      }
                                    });
                                    observer.next({
                                      type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,
                                      data: {
                                        isEmpty: false
                                      }
                                    });
                                    return [4, startPromise];
                                  case 2:
                                    _a3.sent();
                                    if (this.online) {
                                      this.mutationsProcessor.resume();
                                    }
                                    return [
                                      2
                                      /*return*/
                                    ];
                                }
                              });
                            });
                          }, "storage event")];
                        });
                      });
                    }
                  });
                  observer.next({
                    type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED
                  });
                  return [4, this.outbox.peek(this.storage)];
                case 4:
                  hasMutationsInOutbox = _a.sent() === void 0;
                  observer.next({
                    type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,
                    data: {
                      isEmpty: hasMutationsInOutbox
                    }
                  });
                  return [4, startPromise];
                case 5:
                  _a.sent();
                  observer.next({
                    type: ControlMessage.SYNC_ENGINE_READY
                  });
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, "sync start");
      });
    };
    SyncEngine2.prototype.getModelsMetadataWithNextFullSync = function(currentTimeStamp) {
      return __awaiter(this, void 0, void 0, function() {
        var modelLastSync, _a;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = Map.bind;
              return [4, this.runningProcesses.add(function() {
                return _this.getModelsMetadata();
              }, "sync/index getModelsMetadataWithNextFullSync")];
            case 1:
              modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function(_a2) {
                var namespace = _a2.namespace, model = _a2.model, lastSync = _a2.lastSync, lastFullSync = _a2.lastFullSync, fullSyncInterval = _a2.fullSyncInterval, lastSyncPredicate = _a2.lastSyncPredicate;
                var nextFullSync = lastFullSync + fullSyncInterval;
                var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 : lastSync;
                return [
                  _this.schema.namespaces[namespace].models[model],
                  [namespace, syncFrom]
                ];
              })]))();
              return [2, modelLastSync];
          }
        });
      });
    };
    SyncEngine2.prototype.syncQueriesObservable = function() {
      var _this = this;
      if (!this.online) {
        return bundle_esm_default.of();
      }
      return new bundle_esm_default(function(observer) {
        var syncQueriesSubscription;
        _this.runningProcesses.isOpen && _this.runningProcesses.add(function(onTerminate) {
          return __awaiter(_this, void 0, void 0, function() {
            var terminated, _loop_1, this_1;
            var _this2 = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  terminated = false;
                  _loop_1 = function() {
                    var count, modelLastSync, paginatingModels, lastFullSyncStartedAt, syncInterval, start, syncDuration, lastStartedAt, msNextFullSync;
                    return __generator(this, function(_a2) {
                      switch (_a2.label) {
                        case 0:
                          count = /* @__PURE__ */ new WeakMap();
                          return [4, this_1.getModelsMetadataWithNextFullSync(Date.now())];
                        case 1:
                          modelLastSync = _a2.sent();
                          paginatingModels = new Set(modelLastSync.keys());
                          return [4, new Promise(function(resolve4, reject) {
                            if (!_this2.runningProcesses.isOpen)
                              resolve4();
                            onTerminate.then(function() {
                              return resolve4();
                            });
                            syncQueriesSubscription = _this2.syncQueriesProcessor.start(modelLastSync).subscribe({
                              next: function(_a3) {
                                var namespace = _a3.namespace, modelDefinition = _a3.modelDefinition, items = _a3.items, done = _a3.done, startedAt = _a3.startedAt, isFullSync = _a3.isFullSync;
                                return __awaiter(_this2, void 0, void 0, function() {
                                  var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;
                                  var _this3 = this;
                                  return __generator(this, function(_b) {
                                    switch (_b.label) {
                                      case 0:
                                        modelConstructor = this.userModelClasses[modelDefinition.name];
                                        if (!count.has(modelConstructor)) {
                                          count.set(modelConstructor, {
                                            new: 0,
                                            updated: 0,
                                            deleted: 0
                                          });
                                          start = getNow();
                                          lastStartedAt = lastStartedAt === void 0 ? startedAt : Math.max(lastStartedAt, startedAt);
                                        }
                                        return [4, this.storage.runExclusive(function(storage) {
                                          return __awaiter(_this3, void 0, void 0, function() {
                                            var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a4, _b2, _c, counts2;
                                            var e_1, _d;
                                            return __generator(this, function(_e) {
                                              switch (_e.label) {
                                                case 0:
                                                  return [4, this.outbox.getModelIds(storage)];
                                                case 1:
                                                  idsInOutbox = _e.sent();
                                                  oneByOne = [];
                                                  page = items.filter(function(item2) {
                                                    var itemId = getIdentifierValue(modelDefinition, item2);
                                                    if (!idsInOutbox.has(itemId)) {
                                                      return true;
                                                    }
                                                    oneByOne.push(item2);
                                                    return false;
                                                  });
                                                  opTypeCount = [];
                                                  _e.label = 2;
                                                case 2:
                                                  _e.trys.push([2, 7, 8, 9]);
                                                  oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();
                                                  _e.label = 3;
                                                case 3:
                                                  if (!!oneByOne_1_1.done)
                                                    return [3, 6];
                                                  item = oneByOne_1_1.value;
                                                  return [4, this.modelMerger.merge(storage, item, modelDefinition)];
                                                case 4:
                                                  opType = _e.sent();
                                                  if (opType !== void 0) {
                                                    opTypeCount.push([item, opType]);
                                                  }
                                                  _e.label = 5;
                                                case 5:
                                                  oneByOne_1_1 = oneByOne_1.next();
                                                  return [3, 3];
                                                case 6:
                                                  return [3, 9];
                                                case 7:
                                                  e_1_1 = _e.sent();
                                                  e_1 = { error: e_1_1 };
                                                  return [3, 9];
                                                case 8:
                                                  try {
                                                    if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return))
                                                      _d.call(oneByOne_1);
                                                  } finally {
                                                    if (e_1)
                                                      throw e_1.error;
                                                  }
                                                  return [
                                                    7
                                                    /*endfinally*/
                                                  ];
                                                case 9:
                                                  _b2 = (_a4 = opTypeCount.push).apply;
                                                  _c = [opTypeCount];
                                                  return [4, this.modelMerger.mergePage(storage, modelConstructor, page, modelDefinition)];
                                                case 10:
                                                  _b2.apply(_a4, _c.concat([__spread.apply(void 0, [_e.sent()])]));
                                                  counts2 = count.get(modelConstructor);
                                                  opTypeCount.forEach(function(_a5) {
                                                    var _b3 = __read(_a5, 2), opType2 = _b3[1];
                                                    switch (opType2) {
                                                      case OpType.INSERT:
                                                        counts2.new++;
                                                        break;
                                                      case OpType.UPDATE:
                                                        counts2.updated++;
                                                        break;
                                                      case OpType.DELETE:
                                                        counts2.deleted++;
                                                        break;
                                                      default:
                                                        throw new Error("Invalid opType " + opType2);
                                                    }
                                                  });
                                                  return [
                                                    2
                                                    /*return*/
                                                  ];
                                              }
                                            });
                                          });
                                        })];
                                      case 1:
                                        _b.sent();
                                        if (!done)
                                          return [3, 4];
                                        modelName = modelDefinition.name;
                                        return [4, this.getModelMetadata(namespace, modelName)];
                                      case 2:
                                        modelMetadata_1 = _b.sent();
                                        lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;
                                        syncInterval = fullSyncInterval;
                                        lastFullSyncStartedAt = lastFullSyncStartedAt === void 0 ? lastFullSync : Math.max(lastFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);
                                        modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function(draft) {
                                          draft.lastSync = startedAt;
                                          draft.lastFullSync = isFullSync ? startedAt : modelMetadata_1.lastFullSync;
                                        });
                                        return [4, this.storage.save(modelMetadata_1, void 0, ownSymbol)];
                                      case 3:
                                        _b.sent();
                                        counts = count.get(modelConstructor);
                                        this.modelSyncedStatus.set(modelConstructor, true);
                                        observer.next({
                                          type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,
                                          data: {
                                            model: modelConstructor,
                                            isFullSync,
                                            isDeltaSync: !isFullSync,
                                            counts
                                          }
                                        });
                                        paginatingModels.delete(modelDefinition);
                                        if (paginatingModels.size === 0) {
                                          syncDuration = getNow() - start;
                                          resolve4();
                                          observer.next({
                                            type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY
                                          });
                                          syncQueriesSubscription.unsubscribe();
                                        }
                                        _b.label = 4;
                                      case 4:
                                        return [
                                          2
                                          /*return*/
                                        ];
                                    }
                                  });
                                });
                              },
                              error: function(error) {
                                observer.error(error);
                              }
                            });
                            observer.next({
                              type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,
                              data: {
                                models: Array.from(paginatingModels).map(function(_a3) {
                                  var name = _a3.name;
                                  return name;
                                })
                              }
                            });
                          })];
                        case 2:
                          _a2.sent();
                          if (!lastFullSyncStartedAt) {
                            msNextFullSync = syncInterval - syncDuration;
                          } else {
                            msNextFullSync = lastFullSyncStartedAt + syncInterval - (lastStartedAt + syncDuration);
                          }
                          logger36.debug("Next fullSync in " + msNextFullSync / 1e3 + " seconds. (" + new Date(Date.now() + msNextFullSync) + ")");
                          return [4, this_1.runningProcesses.add(function(onTerminate2) {
                            return __awaiter(_this2, void 0, void 0, function() {
                              var sleepTimer, unsleep, sleep;
                              var _this3 = this;
                              return __generator(this, function(_a3) {
                                sleep = new Promise(function(_unsleep) {
                                  unsleep = _unsleep;
                                  sleepTimer = setTimeout(unsleep, msNextFullSync);
                                });
                                onTerminate2.then(function() {
                                  terminated = true;
                                  _this3.syncQueriesObservableStartSleeping();
                                  unsleep();
                                });
                                this.unsleepSyncQueriesObservable = unsleep;
                                this.syncQueriesObservableStartSleeping();
                                return [2, sleep];
                              });
                            });
                          }, "syncQueriesObservable sleep")];
                        case 3:
                          _a2.sent();
                          this_1.unsleepSyncQueriesObservable = null;
                          this_1.waitForSleepState = new Promise(function(resolve4) {
                            _this2.syncQueriesObservableStartSleeping = resolve4;
                          });
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  };
                  this_1 = this;
                  _a.label = 1;
                case 1:
                  if (!(!observer.closed && !terminated))
                    return [3, 3];
                  return [5, _loop_1()];
                case 2:
                  _a.sent();
                  return [3, 1];
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, "syncQueriesObservable main");
      });
    };
    SyncEngine2.prototype.disconnectionHandler = function() {
      var _this = this;
      return function(msg) {
        if (CONTROL_MSG.CONNECTION_CLOSED === msg || CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {
          _this.datastoreConnectivity.socketDisconnected();
        }
      };
    };
    SyncEngine2.prototype.unsubscribeConnectivity = function() {
      this.datastoreConnectivity.unsubscribe();
    };
    SyncEngine2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              logger36.debug("stopping sync engine");
              this.unsubscribeConnectivity();
              this.stopDisruptionListener && this.stopDisruptionListener();
              return [4, this.mutationsProcessor.stop()];
            case 1:
              _a.sent();
              return [4, this.subscriptionsProcessor.stop()];
            case 2:
              _a.sent();
              return [4, this.datastoreConnectivity.stop()];
            case 3:
              _a.sent();
              return [4, this.syncQueriesProcessor.stop()];
            case 4:
              _a.sent();
              return [4, this.runningProcesses.close()];
            case 5:
              _a.sent();
              return [4, this.runningProcesses.open()];
            case 6:
              _a.sent();
              logger36.debug("sync engine stopped and ready to restart");
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SyncEngine2.prototype.setupModels = function(params) {
      return __awaiter(this, void 0, void 0, function() {
        var fullSyncInterval, ModelMetadataConstructor, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;
        var e_2, _c;
        var _this = this;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              fullSyncInterval = params.fullSyncInterval;
              ModelMetadataConstructor = this.modelClasses.ModelMetadata;
              models = [];
              Object.values(this.schema.namespaces).forEach(function(namespace) {
                Object.values(namespace.models).filter(function(_a2) {
                  var syncable = _a2.syncable;
                  return syncable;
                }).forEach(function(model) {
                  models.push([namespace.name, model]);
                  if (namespace.name === USER) {
                    var modelConstructor = _this.userModelClasses[model.name];
                    _this.modelSyncedStatus.set(modelConstructor, false);
                  }
                });
              });
              promises = models.map(function(_a2) {
                var _b2 = __read(_a2, 2), namespace = _b2[0], model = _b2[1];
                return __awaiter(_this, void 0, void 0, function() {
                  var modelMetadata2, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;
                  var _c2, _d2, _e, _f;
                  return __generator(this, function(_g) {
                    switch (_g.label) {
                      case 0:
                        return [4, this.getModelMetadata(namespace, model.name)];
                      case 1:
                        modelMetadata2 = _g.sent();
                        syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);
                        lastSyncPredicate = syncPredicate ? JSON.stringify(syncPredicate) : null;
                        if (!(modelMetadata2 === void 0))
                          return [3, 3];
                        return [4, this.storage.save(this.modelInstanceCreator(ModelMetadataConstructor, {
                          model: model.name,
                          namespace,
                          lastSync: null,
                          fullSyncInterval,
                          lastFullSync: null,
                          lastSyncPredicate
                        }), void 0, ownSymbol)];
                      case 2:
                        _c2 = __read.apply(void 0, [_g.sent(), 1]), _d2 = __read(_c2[0], 1), savedModel = _d2[0];
                        return [3, 5];
                      case 3:
                        prevSyncPredicate = modelMetadata2.lastSyncPredicate ? modelMetadata2.lastSyncPredicate : null;
                        syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;
                        return [4, this.storage.save(ModelMetadataConstructor.copyOf(modelMetadata2, function(draft) {
                          draft.fullSyncInterval = fullSyncInterval;
                          if (syncPredicateUpdated_1) {
                            draft.lastSync = null;
                            draft.lastFullSync = null;
                            draft.lastSyncPredicate = lastSyncPredicate;
                          }
                        }))];
                      case 4:
                        _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];
                        _g.label = 5;
                      case 5:
                        return [2, savedModel];
                    }
                  });
                });
              });
              result = {};
              _d.label = 1;
            case 1:
              _d.trys.push([1, 6, 7, 8]);
              return [4, Promise.all(promises)];
            case 2:
              _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();
              _d.label = 3;
            case 3:
              if (!!_b.done)
                return [3, 5];
              modelMetadata = _b.value;
              modelName = modelMetadata.model;
              result[modelName] = modelMetadata;
              _d.label = 4;
            case 4:
              _b = _a.next();
              return [3, 3];
            case 5:
              return [3, 8];
            case 6:
              e_2_1 = _d.sent();
              e_2 = { error: e_2_1 };
              return [3, 8];
            case 7:
              try {
                if (_b && !_b.done && (_c = _a.return))
                  _c.call(_a);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 8:
              return [2, result];
          }
        });
      });
    };
    SyncEngine2.prototype.getModelsMetadata = function() {
      return __awaiter(this, void 0, void 0, function() {
        var ModelMetadata, modelsMetadata;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              ModelMetadata = this.modelClasses.ModelMetadata;
              return [4, this.storage.query(ModelMetadata)];
            case 1:
              modelsMetadata = _a.sent();
              return [2, modelsMetadata];
          }
        });
      });
    };
    SyncEngine2.prototype.getModelMetadata = function(namespace, model) {
      return __awaiter(this, void 0, void 0, function() {
        var ModelMetadata, predicate, _a, modelMetadata;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              ModelMetadata = this.modelClasses.ModelMetadata;
              predicate = ModelPredicateCreator.createFromAST(this.schema.namespaces[SYNC].models[ModelMetadata.name], { and: [{ namespace: { eq: namespace } }, { model: { eq: model } }] });
              return [4, this.storage.query(ModelMetadata, predicate, {
                page: 0,
                limit: 1
              })];
            case 1:
              _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];
              return [2, modelMetadata];
          }
        });
      });
    };
    SyncEngine2.prototype.getModelDefinition = function(modelConstructor) {
      var namespaceName = this.namespaceResolver(modelConstructor);
      var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];
      return modelDefinition;
    };
    SyncEngine2.getNamespace = function() {
      var namespace = {
        name: SYNC,
        relationships: {},
        enums: {
          OperationType: {
            name: "OperationType",
            values: ["CREATE", "UPDATE", "DELETE"]
          }
        },
        nonModels: {},
        models: {
          MutationEvent: {
            name: "MutationEvent",
            pluralName: "MutationEvents",
            syncable: false,
            fields: {
              id: {
                name: "id",
                type: "ID",
                isRequired: true,
                isArray: false
              },
              model: {
                name: "model",
                type: "String",
                isRequired: true,
                isArray: false
              },
              data: {
                name: "data",
                type: "String",
                isRequired: true,
                isArray: false
              },
              modelId: {
                name: "modelId",
                type: "String",
                isRequired: true,
                isArray: false
              },
              operation: {
                name: "operation",
                type: {
                  enum: "Operationtype"
                },
                isArray: false,
                isRequired: true
              },
              condition: {
                name: "condition",
                type: "String",
                isArray: false,
                isRequired: true
              }
            }
          },
          ModelMetadata: {
            name: "ModelMetadata",
            pluralName: "ModelsMetadata",
            syncable: false,
            fields: {
              id: {
                name: "id",
                type: "ID",
                isRequired: true,
                isArray: false
              },
              namespace: {
                name: "namespace",
                type: "String",
                isRequired: true,
                isArray: false
              },
              model: {
                name: "model",
                type: "String",
                isRequired: true,
                isArray: false
              },
              lastSync: {
                name: "lastSync",
                type: "Int",
                isRequired: false,
                isArray: false
              },
              lastFullSync: {
                name: "lastFullSync",
                type: "Int",
                isRequired: false,
                isArray: false
              },
              fullSyncInterval: {
                name: "fullSyncInterval",
                type: "Int",
                isRequired: true,
                isArray: false
              },
              lastSyncPredicate: {
                name: "lastSyncPredicate",
                type: "String",
                isRequired: false,
                isArray: false
              }
            }
          }
        }
      };
      return namespace;
    };
    SyncEngine2.prototype.startDisruptionListener = function() {
      var _this = this;
      return Hub.listen("api", function(data) {
        if (data.source === "PubSub" && data.payload.event === CONNECTION_STATE_CHANGE) {
          var connectionState = data.payload.data.connectionState;
          switch (connectionState) {
            case ConnectionState.ConnectionDisrupted:
              _this.connectionDisrupted = true;
              break;
            case ConnectionState.Connected:
              if (_this.connectionDisrupted) {
                _this.scheduleSync();
              }
              _this.connectionDisrupted = false;
              break;
          }
        }
      });
    };
    SyncEngine2.prototype.scheduleSync = function() {
      var _this = this;
      return this.waitForSleepState.then(function() {
        _this.unsleepSyncQueriesObservable();
      });
    };
    return SyncEngine2;
  }()
);

// node_modules/@aws-amplify/datastore/lib-esm/predicates/next.js
var ops = __spread(comparisonKeys);
var predicateInternalsMap = /* @__PURE__ */ new Map();
var registerPredicateInternals = function(condition, key) {
  var finalKey = key || new PredicateInternalsKey();
  predicateInternalsMap.set(finalKey, condition);
  return finalKey;
};
var internals = function(key) {
  if (!predicateInternalsMap.has(key)) {
    throw new Error("Invalid predicate. Terminate your predicate with a valid condition (e.g., `p => p.field.eq('value')`) or pass `Predicates.ALL`.");
  }
  return predicateInternalsMap.get(key);
};
var negations = {
  and: "or",
  or: "and",
  not: "and",
  eq: "ne",
  ne: "eq",
  gt: "le",
  ge: "lt",
  lt: "ge",
  le: "gt",
  contains: "notContains",
  notContains: "contains"
};
var FieldCondition = (
  /** @class */
  function() {
    function FieldCondition2(field, operator, operands) {
      this.field = field;
      this.operator = operator;
      this.operands = operands;
      this.validate();
    }
    FieldCondition2.prototype.copy = function(extract) {
      return [
        new FieldCondition2(this.field, this.operator, __spread(this.operands)),
        void 0
      ];
    };
    FieldCondition2.prototype.toAST = function() {
      var _a, _b;
      return _a = {}, _a[this.field] = (_b = {}, _b[this.operator] = this.operator === "between" ? [this.operands[0], this.operands[1]] : this.operands[0], _b), _a;
    };
    FieldCondition2.prototype.negated = function(model) {
      if (this.operator === "between") {
        return new GroupCondition(model, void 0, void 0, "or", [
          new FieldCondition2(this.field, "lt", [this.operands[0]]),
          new FieldCondition2(this.field, "gt", [this.operands[1]])
        ]);
      } else if (this.operator === "beginsWith") {
        return new GroupCondition(model, void 0, void 0, "not", [
          new FieldCondition2(this.field, "beginsWith", [this.operands[0]])
        ]);
      } else {
        return new FieldCondition2(this.field, negations[this.operator], this.operands);
      }
    };
    FieldCondition2.prototype.fetch = function(storage) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, Promise.reject("No implementation needed [yet].")];
        });
      });
    };
    FieldCondition2.prototype.matches = function(item) {
      return __awaiter(this, void 0, void 0, function() {
        var v2, operations, operation, result;
        var _this = this;
        return __generator(this, function(_a) {
          v2 = item[this.field];
          operations = {
            eq: function() {
              return v2 === _this.operands[0];
            },
            ne: function() {
              return v2 !== _this.operands[0];
            },
            gt: function() {
              return v2 > _this.operands[0];
            },
            ge: function() {
              return v2 >= _this.operands[0];
            },
            lt: function() {
              return v2 < _this.operands[0];
            },
            le: function() {
              return v2 <= _this.operands[0];
            },
            contains: function() {
              return (v2 === null || v2 === void 0 ? void 0 : v2.indexOf(_this.operands[0])) > -1;
            },
            notContains: function() {
              return !v2 ? true : v2.indexOf(_this.operands[0]) === -1;
            },
            beginsWith: function() {
              return v2 === null || v2 === void 0 ? void 0 : v2.startsWith(_this.operands[0]);
            },
            between: function() {
              return v2 >= _this.operands[0] && v2 <= _this.operands[1];
            }
          };
          operation = operations[this.operator];
          if (operation) {
            result = operation();
            return [2, result];
          } else {
            throw new Error("Invalid operator given: " + this.operator);
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    FieldCondition2.prototype.validate = function() {
      var _this = this;
      var argumentCount = function(count) {
        var argsClause = count === 1 ? "argument is" : "arguments are";
        return function() {
          if (_this.operands.length !== count) {
            return "Exactly " + count + " " + argsClause + " required.";
          }
        };
      };
      var validations = {
        eq: argumentCount(1),
        ne: argumentCount(1),
        gt: argumentCount(1),
        ge: argumentCount(1),
        lt: argumentCount(1),
        le: argumentCount(1),
        contains: argumentCount(1),
        notContains: argumentCount(1),
        beginsWith: argumentCount(1),
        between: function() {
          return argumentCount(2)() || (_this.operands[0] > _this.operands[1] ? "The first argument must be less than or equal to the second argument." : null);
        }
      };
      var validate2 = validations[this.operator];
      if (validate2) {
        var e = validate2();
        if (typeof e === "string")
          throw new Error("Incorrect usage of `" + this.operator + "()`: " + e);
      } else {
        throw new Error("Non-existent operator: `" + this.operator + "()`");
      }
    };
    return FieldCondition2;
  }()
);
var getGroupId = function() {
  var seed = 1;
  return function() {
    return "group_" + seed++;
  };
}();
var GroupCondition = (
  /** @class */
  function() {
    function GroupCondition2(model, field, relationshipType, operator, operands, isOptimized) {
      if (isOptimized === void 0) {
        isOptimized = false;
      }
      this.model = model;
      this.field = field;
      this.relationshipType = relationshipType;
      this.operator = operator;
      this.operands = operands;
      this.isOptimized = isOptimized;
      this.groupId = getGroupId();
    }
    GroupCondition2.prototype.copy = function(extract) {
      var copied = new GroupCondition2(this.model, this.field, this.relationshipType, this.operator, []);
      var extractedCopy = extract === this ? copied : void 0;
      this.operands.forEach(function(o2) {
        var _a = __read(o2.copy(extract), 2), operandCopy = _a[0], extractedFromOperand = _a[1];
        copied.operands.push(operandCopy);
        extractedCopy = extractedCopy || extractedFromOperand;
      });
      return [copied, extractedCopy];
    };
    GroupCondition2.prototype.withFieldConditionsOnly = function(negate) {
      var _this = this;
      var negateChildren = negate !== (this.operator === "not");
      return new GroupCondition2(this.model, void 0, void 0, negate ? negations[this.operator] : this.operator, this.operands.filter(function(o2) {
        return o2 instanceof FieldCondition;
      }).map(function(o2) {
        return negateChildren ? o2.negated(_this.model) : o2;
      }));
    };
    GroupCondition2.prototype.optimized = function(preserveNode) {
      var _this = this;
      if (preserveNode === void 0) {
        preserveNode = true;
      }
      var operands = this.operands.map(function(o2) {
        return o2 instanceof GroupCondition2 ? o2.optimized(_this.operator === "not") : o2;
      });
      if (!preserveNode && ["and", "or"].includes(this.operator) && !this.field && operands.length === 1) {
        var operand = operands[0];
        if (operand instanceof FieldCondition) {
          if (operand.operator !== "between") {
            return operand;
          }
        } else {
          return operand;
        }
      }
      return new GroupCondition2(this.model, this.field, this.relationshipType, this.operator, operands, true);
    };
    GroupCondition2.prototype.fetch = function(storage, breadcrumb, negate) {
      if (breadcrumb === void 0) {
        breadcrumb = [];
      }
      if (negate === void 0) {
        negate = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var resultGroups, operator, negateChildren, groups, conditions, groups_1, groups_1_1, g2, relatives, relationship, allJoinConditions, relatives_1, relatives_1_1, relative, relativeConditions, i2, predicate, _a, _b, e_1_1, predicate, _c, _d, _e, _f, getPKValue, resultIndex, resultGroups_1, resultGroups_1_1, group, intersectWith, _g, _h, k2, resultGroups_2, resultGroups_2_1, group, group_1, group_1_1, item;
        var e_1, _j, e_2, _k, _l, e_3, _m, e_4, _o, e_5, _p, e_6, _q;
        var _this = this;
        return __generator(this, function(_r) {
          switch (_r.label) {
            case 0:
              if (!this.isOptimized) {
                return [2, this.optimized().fetch(storage)];
              }
              resultGroups = [];
              operator = negate ? negations[this.operator] : this.operator;
              negateChildren = negate !== (this.operator === "not");
              groups = this.operands.filter(function(op) {
                return op instanceof GroupCondition2;
              });
              conditions = this.operands.filter(function(op) {
                return op instanceof FieldCondition;
              });
              _r.label = 1;
            case 1:
              _r.trys.push([1, 10, 11, 12]);
              groups_1 = __values(groups), groups_1_1 = groups_1.next();
              _r.label = 2;
            case 2:
              if (!!groups_1_1.done)
                return [3, 9];
              g2 = groups_1_1.value;
              return [4, g2.fetch(storage, __spread(breadcrumb, [this.groupId]), negateChildren)];
            case 3:
              relatives = _r.sent();
              if (relatives.length === 0) {
                if (operator === "and") {
                  return [2, []];
                }
                resultGroups.push([]);
                return [3, 8];
              }
              if (!g2.field)
                return [3, 7];
              relationship = ModelRelationship.from(this.model, g2.field);
              if (!relationship)
                return [3, 5];
              allJoinConditions = [];
              try {
                for (relatives_1 = (e_2 = void 0, __values(relatives)), relatives_1_1 = relatives_1.next(); !relatives_1_1.done; relatives_1_1 = relatives_1.next()) {
                  relative = relatives_1_1.value;
                  relativeConditions = [];
                  for (i2 = 0; i2 < relationship.localJoinFields.length; i2++) {
                    relativeConditions.push((_l = {}, _l[relationship.localJoinFields[i2]] = {
                      eq: relative[relationship.remoteJoinFields[i2]]
                    }, _l));
                  }
                  allJoinConditions.push({ and: relativeConditions });
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (relatives_1_1 && !relatives_1_1.done && (_k = relatives_1.return))
                    _k.call(relatives_1);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
              predicate = ModelPredicateCreator.createFromAST(this.model.schema, {
                or: allJoinConditions
              });
              _b = (_a = resultGroups).push;
              return [4, storage.query(this.model.builder, predicate)];
            case 4:
              _b.apply(_a, [_r.sent()]);
              return [3, 6];
            case 5:
              throw new Error("Missing field metadata.");
            case 6:
              return [3, 8];
            case 7:
              resultGroups.push(relatives);
              _r.label = 8;
            case 8:
              groups_1_1 = groups_1.next();
              return [3, 2];
            case 9:
              return [3, 12];
            case 10:
              e_1_1 = _r.sent();
              e_1 = { error: e_1_1 };
              return [3, 12];
            case 11:
              try {
                if (groups_1_1 && !groups_1_1.done && (_j = groups_1.return))
                  _j.call(groups_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 12:
              if (!(conditions.length > 0))
                return [3, 14];
              predicate = this.withFieldConditionsOnly(negateChildren).toStoragePredicate();
              _d = (_c = resultGroups).push;
              return [4, storage.query(this.model.builder, predicate)];
            case 13:
              _d.apply(_c, [_r.sent()]);
              return [3, 16];
            case 14:
              if (!(conditions.length === 0 && resultGroups.length === 0))
                return [3, 16];
              _f = (_e = resultGroups).push;
              return [4, storage.query(this.model.builder)];
            case 15:
              _f.apply(_e, [_r.sent()]);
              _r.label = 16;
            case 16:
              getPKValue = function(item2) {
                return JSON.stringify(_this.model.pkField.map(function(name) {
                  return item2[name];
                }));
              };
              if (operator === "and") {
                if (resultGroups.length === 0) {
                  return [2, []];
                }
                try {
                  for (resultGroups_1 = __values(resultGroups), resultGroups_1_1 = resultGroups_1.next(); !resultGroups_1_1.done; resultGroups_1_1 = resultGroups_1.next()) {
                    group = resultGroups_1_1.value;
                    if (resultIndex === void 0) {
                      resultIndex = new Map(group.map(function(item2) {
                        return [getPKValue(item2), item2];
                      }));
                    } else {
                      intersectWith = new Map(group.map(function(item2) {
                        return [getPKValue(item2), item2];
                      }));
                      try {
                        for (_g = (e_4 = void 0, __values(resultIndex.keys())), _h = _g.next(); !_h.done; _h = _g.next()) {
                          k2 = _h.value;
                          if (!intersectWith.has(k2)) {
                            resultIndex.delete(k2);
                          }
                        }
                      } catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                      } finally {
                        try {
                          if (_h && !_h.done && (_o = _g.return))
                            _o.call(_g);
                        } finally {
                          if (e_4)
                            throw e_4.error;
                        }
                      }
                    }
                  }
                } catch (e_3_1) {
                  e_3 = { error: e_3_1 };
                } finally {
                  try {
                    if (resultGroups_1_1 && !resultGroups_1_1.done && (_m = resultGroups_1.return))
                      _m.call(resultGroups_1);
                  } finally {
                    if (e_3)
                      throw e_3.error;
                  }
                }
              } else if (operator === "or" || operator === "not") {
                resultIndex = /* @__PURE__ */ new Map();
                try {
                  for (resultGroups_2 = __values(resultGroups), resultGroups_2_1 = resultGroups_2.next(); !resultGroups_2_1.done; resultGroups_2_1 = resultGroups_2.next()) {
                    group = resultGroups_2_1.value;
                    try {
                      for (group_1 = (e_6 = void 0, __values(group)), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                        item = group_1_1.value;
                        resultIndex.set(getPKValue(item), item);
                      }
                    } catch (e_6_1) {
                      e_6 = { error: e_6_1 };
                    } finally {
                      try {
                        if (group_1_1 && !group_1_1.done && (_q = group_1.return))
                          _q.call(group_1);
                      } finally {
                        if (e_6)
                          throw e_6.error;
                      }
                    }
                  }
                } catch (e_5_1) {
                  e_5 = { error: e_5_1 };
                } finally {
                  try {
                    if (resultGroups_2_1 && !resultGroups_2_1.done && (_p = resultGroups_2.return))
                      _p.call(resultGroups_2);
                  } finally {
                    if (e_5)
                      throw e_5.error;
                  }
                }
              }
              return [2, Array.from((resultIndex === null || resultIndex === void 0 ? void 0 : resultIndex.values()) || [])];
          }
        });
      });
    };
    GroupCondition2.prototype.matches = function(item, ignoreFieldName) {
      if (ignoreFieldName === void 0) {
        ignoreFieldName = false;
      }
      var e_7, _a;
      return __awaiter(this, void 0, void 0, function() {
        var itemToCheck, _b, itemToCheck_1, itemToCheck_1_1, singleItem, e_7_1;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              if (!(this.field && !ignoreFieldName))
                return [3, 2];
              return [4, item[this.field]];
            case 1:
              _b = _c.sent();
              return [3, 3];
            case 2:
              _b = item;
              _c.label = 3;
            case 3:
              itemToCheck = _b;
              if (!itemToCheck) {
                return [2, false];
              }
              if (!(this.relationshipType === "HAS_MANY" && typeof itemToCheck[Symbol.asyncIterator] === "function"))
                return [3, 17];
              _c.label = 4;
            case 4:
              _c.trys.push([4, 10, 11, 16]);
              itemToCheck_1 = __asyncValues(itemToCheck);
              _c.label = 5;
            case 5:
              return [4, itemToCheck_1.next()];
            case 6:
              if (!(itemToCheck_1_1 = _c.sent(), !itemToCheck_1_1.done))
                return [3, 9];
              singleItem = itemToCheck_1_1.value;
              return [4, this.matches(singleItem, true)];
            case 7:
              if (_c.sent()) {
                return [2, true];
              }
              _c.label = 8;
            case 8:
              return [3, 5];
            case 9:
              return [3, 16];
            case 10:
              e_7_1 = _c.sent();
              e_7 = { error: e_7_1 };
              return [3, 16];
            case 11:
              _c.trys.push([11, , 14, 15]);
              if (!(itemToCheck_1_1 && !itemToCheck_1_1.done && (_a = itemToCheck_1.return)))
                return [3, 13];
              return [4, _a.call(itemToCheck_1)];
            case 12:
              _c.sent();
              _c.label = 13;
            case 13:
              return [3, 15];
            case 14:
              if (e_7)
                throw e_7.error;
              return [
                7
                /*endfinally*/
              ];
            case 15:
              return [
                7
                /*endfinally*/
              ];
            case 16:
              return [2, false];
            case 17:
              if (!(this.operator === "or"))
                return [3, 18];
              return [2, asyncSome(this.operands, function(c2) {
                return c2.matches(itemToCheck);
              })];
            case 18:
              if (!(this.operator === "and"))
                return [3, 19];
              return [2, asyncEvery(this.operands, function(c2) {
                return c2.matches(itemToCheck);
              })];
            case 19:
              if (!(this.operator === "not"))
                return [3, 21];
              if (this.operands.length !== 1) {
                throw new Error("Invalid arguments! `not()` accepts exactly one predicate expression.");
              }
              return [4, this.operands[0].matches(itemToCheck)];
            case 20:
              return [2, !_c.sent()];
            case 21:
              throw new Error("Invalid group operator!");
          }
        });
      });
    };
    GroupCondition2.prototype.toAST = function() {
      var _a;
      if (this.field)
        throw new Error("Nested type conditions are not supported!");
      return _a = {}, _a[this.operator] = this.operands.map(function(operand) {
        return operand.toAST();
      }), _a;
    };
    GroupCondition2.prototype.toStoragePredicate = function() {
      return ModelPredicateCreator.createFromAST(this.model.schema, this.toAST());
    };
    GroupCondition2.prototype.toJSON = function() {
      return __assign(__assign({}, this), { model: this.model.schema.name });
    };
    return GroupCondition2;
  }()
);
function recursivePredicateFor(ModelType, allowRecursion, field, query, tail) {
  if (allowRecursion === void 0) {
    allowRecursion = true;
  }
  var starter = new GroupCondition(ModelType, field, void 0, "and", []);
  var baseCondition = query && tail ? query : starter;
  var tailCondition = query && tail ? tail : starter;
  var link = {};
  registerPredicateInternals(baseCondition, link);
  var copyLink = function() {
    var _a = __read(baseCondition.copy(tailCondition), 2), query2 = _a[0], newTail = _a[1];
    var newLink = recursivePredicateFor(ModelType, allowRecursion, void 0, query2, newTail);
    return { query: query2, newTail, newLink };
  };
  ["and", "or"].forEach(function(op) {
    link[op] = function(builder) {
      var _a = copyLink(), query2 = _a.query, newTail = _a.newTail;
      var childConditions = builder(recursivePredicateFor(ModelType, allowRecursion));
      if (!Array.isArray(childConditions)) {
        throw new Error("Invalid predicate. `" + op + "` groups must return an array of child conditions.");
      }
      newTail === null || newTail === void 0 ? void 0 : newTail.operands.push(new GroupCondition(ModelType, field, void 0, op, childConditions.map(function(c2) {
        return internals(c2);
      })));
      return registerPredicateInternals(query2);
    };
  });
  link.not = function(builder) {
    var _a = copyLink(), query2 = _a.query, newTail = _a.newTail;
    newTail === null || newTail === void 0 ? void 0 : newTail.operands.push(new GroupCondition(ModelType, field, void 0, "not", [
      internals(builder(recursivePredicateFor(ModelType, allowRecursion)))
    ]));
    return registerPredicateInternals(query2);
  };
  var _loop_1 = function(fieldName2) {
    Object.defineProperty(link, fieldName2, {
      enumerable: true,
      get: function() {
        var def = ModelType.schema.allFields[fieldName2];
        if (!def.association) {
          return ops.reduce(function(fieldMatcher, operator) {
            var _a2;
            return __assign(__assign({}, fieldMatcher), (_a2 = {}, _a2[operator] = function() {
              var operands = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                operands[_i] = arguments[_i];
              }
              var _a3 = copyLink(), query2 = _a3.query, newTail = _a3.newTail;
              var normalizedOperands = operands.map(function(o2) {
                return o2 === void 0 ? null : o2;
              });
              newTail === null || newTail === void 0 ? void 0 : newTail.operands.push(new FieldCondition(fieldName2, operator, normalizedOperands));
              return registerPredicateInternals(query2);
            }, _a2));
          }, {});
        } else {
          if (!allowRecursion) {
            throw new Error("Predication on releated models is not supported in this context.");
          } else if (def.association.connectionType === "BELONGS_TO" || def.association.connectionType === "HAS_ONE" || def.association.connectionType === "HAS_MANY") {
            var relatedMeta = def.type.modelConstructor;
            if (!relatedMeta) {
              throw new Error("Related model metadata is missing. This is a bug! Please report it.");
            }
            var _a = __read(baseCondition.copy(tailCondition), 2), newquery = _a[0], oldtail = _a[1];
            var newtail = new GroupCondition(relatedMeta, fieldName2, def.association.connectionType, "and", []);
            oldtail.operands.push(newtail);
            var newlink = recursivePredicateFor(relatedMeta, allowRecursion, void 0, newquery, newtail);
            return newlink;
          } else {
            throw new Error("Related model definition doesn't have a typedef. This is a bug! Please report it.");
          }
        }
      }
    });
  };
  for (var fieldName in ModelType.schema.allFields) {
    _loop_1(fieldName);
  }
  return link;
}
function predicateFor(ModelType) {
  return recursivePredicateFor(ModelType, false);
}

// node_modules/@aws-amplify/datastore/lib-esm/datastore/datastore.js
sn(true);
T();
var logger37 = new ConsoleLogger("DataStore");
var ulid2 = monotonicUlidFactory(Date.now());
var isNode4 = browserOrNode().isNode;
var SETTING_SCHEMA_VERSION = "schemaVersion";
var schema;
var modelNamespaceMap = /* @__PURE__ */ new WeakMap();
var modelPatchesMap = /* @__PURE__ */ new WeakMap();
var getModelDefinition = function(modelConstructor) {
  var namespace = modelNamespaceMap.get(modelConstructor);
  var definition = namespace ? schema.namespaces[namespace].models[modelConstructor.name] : void 0;
  return definition;
};
var isValidModelConstructor = function(obj) {
  return isModelConstructor(obj) && modelNamespaceMap.has(obj);
};
var namespaceResolver = function(modelConstructor) {
  var resolver = modelNamespaceMap.get(modelConstructor);
  if (!resolver) {
    throw new Error("Namespace Resolver for '" + modelConstructor.name + "' not found! This is probably a bug in '@amplify-js/datastore'.");
  }
  return resolver;
};
var buildSeedPredicate = function(modelConstructor) {
  if (!modelConstructor)
    throw new Error("Missing modelConstructor");
  var modelSchema = getModelDefinition(modelConstructor);
  if (!modelSchema)
    throw new Error("Missing modelSchema");
  var pks = extractPrimaryKeyFieldNames(modelSchema);
  if (!pks)
    throw new Error("Could not determine PK");
  return recursivePredicateFor({
    builder: modelConstructor,
    schema: modelSchema,
    pkField: pks
  });
};
var syncClasses;
var userClasses;
var dataStoreClasses;
var storageClasses;
var modelInstanceAssociationsMap = /* @__PURE__ */ new WeakMap();
var ModelAttachment;
(function(ModelAttachment2) {
  ModelAttachment2["Detached"] = "Detached";
  ModelAttachment2["DataStore"] = "DataStore";
  ModelAttachment2["API"] = "API";
})(ModelAttachment || (ModelAttachment = {}));
var attachedModelInstances = /* @__PURE__ */ new WeakMap();
function attached(result, attachment) {
  if (Array.isArray(result)) {
    result.map(function(record) {
      return attached(record, attachment);
    });
  } else {
    result && attachedModelInstances.set(result, attachment);
  }
  return result;
}
var getAttachment = function(instance2) {
  return attachedModelInstances.has(instance2) ? attachedModelInstances.get(instance2) : ModelAttachment.Detached;
};
var initSchema = function(userSchema) {
  var _a;
  if (schema !== void 0) {
    console.warn("The schema has already been initialized");
    return userClasses;
  }
  logger37.log("validating schema", { schema: userSchema });
  checkSchemaCodegenVersion(userSchema.codegenVersion);
  var internalUserNamespace = __assign({ name: USER }, userSchema);
  logger37.log("DataStore", "Init models");
  userClasses = createTypeClasses(internalUserNamespace);
  logger37.log("DataStore", "Models initialized");
  var dataStoreNamespace = getNamespace();
  var storageNamespace = ExclusiveStorage.getNamespace();
  var syncNamespace = SyncEngine.getNamespace();
  dataStoreClasses = createTypeClasses(dataStoreNamespace);
  storageClasses = createTypeClasses(storageNamespace);
  syncClasses = createTypeClasses(syncNamespace);
  schema = {
    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),
    version: userSchema.version,
    codegenVersion: userSchema.codegenVersion
  };
  Object.keys(schema.namespaces).forEach(function(namespace) {
    var e_1, _a2;
    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2), relations = _b[0], keys = _b[1];
    schema.namespaces[namespace].relationships = relations;
    schema.namespaces[namespace].keys = keys;
    var modelAssociations = /* @__PURE__ */ new Map();
    Object.values(schema.namespaces[namespace].models).forEach(function(model) {
      var e_2, _a3, e_3, _b2;
      var connectedModels = [];
      Object.values(model.fields).filter(function(field) {
        return field.association && field.association.connectionType === "BELONGS_TO" && field.type.model !== model.name;
      }).forEach(function(field) {
        return connectedModels.push(field.type.model);
      });
      modelAssociations.set(model.name, connectedModels);
      Object.values(model.fields).forEach(function(field) {
        var relatedModel = userClasses[field.type.model];
        if (isModelConstructor(relatedModel)) {
          Object.defineProperty(field.type, "modelConstructor", {
            get: function() {
              var relatedModelDefinition = getModelDefinition(relatedModel);
              if (!relatedModelDefinition)
                throw new Error("Could not find model definition for " + relatedModel.name);
              return {
                builder: relatedModel,
                schema: relatedModelDefinition,
                pkField: extractPrimaryKeyFieldNames(relatedModelDefinition)
              };
            }
          });
        }
      });
      var indexes = schema.namespaces[namespace].relationships[model.name].indexes;
      var indexFields = /* @__PURE__ */ new Set();
      try {
        for (var indexes_1 = __values(indexes), indexes_1_1 = indexes_1.next(); !indexes_1_1.done; indexes_1_1 = indexes_1.next()) {
          var index = indexes_1_1.value;
          try {
            for (var _c2 = (e_3 = void 0, __values(index[1])), _d2 = _c2.next(); !_d2.done; _d2 = _c2.next()) {
              var indexField = _d2.value;
              indexFields.add(indexField);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_d2 && !_d2.done && (_b2 = _c2.return))
                _b2.call(_c2);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (indexes_1_1 && !indexes_1_1.done && (_a3 = indexes_1.return))
            _a3.call(indexes_1);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      model.allFields = __assign(__assign({}, Object.fromEntries(__spread(indexFields.values()).map(function(name) {
        return [
          name,
          {
            name,
            type: "ID",
            isArray: false
          }
        ];
      }))), model.fields);
    });
    var result = /* @__PURE__ */ new Map();
    var count = 1e3;
    while (count > 0) {
      if (modelAssociations.size === 0) {
        break;
      }
      count--;
      if (count === 0) {
        throw new Error("Models are not topologically sortable. Please verify your schema.");
      }
      try {
        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {
          var modelName = _d.value;
          var parents = modelAssociations.get(modelName);
          if (parents === null || parents === void 0 ? void 0 : parents.every(function(x2) {
            return result.has(x2);
          })) {
            result.set(modelName, parents);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return))
            _a2.call(_c);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      Array.from(result.keys()).forEach(function(x2) {
        return modelAssociations.delete(x2);
      });
    }
    schema.namespaces[namespace].modelTopologicalOrdering = result;
  });
  return userClasses;
};
var checkSchemaInitialized = function() {
  if (schema === void 0) {
    var message = "Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions";
    logger37.error(message);
    throw new Error(message);
  }
};
var checkSchemaCodegenVersion = function(codegenVersion) {
  var majorVersion = 3;
  var minorVersion = 2;
  var isValid2 = false;
  try {
    var versionParts = codegenVersion.split(".");
    var _a = __read(versionParts, 4), major = _a[0], minor = _a[1], patch = _a[2], patchrevision = _a[3];
    isValid2 = Number(major) === majorVersion && Number(minor) >= minorVersion;
  } catch (err) {
    console.log("Error parsing codegen version: " + codegenVersion + "\n" + err);
  }
  if (!isValid2) {
    var message = "Models were generated with an unsupported version of codegen. Codegen artifacts are from " + (codegenVersion || "an unknown version") + ", whereas ^" + majorVersion + "." + minorVersion + ".0 is required. Update to the latest CLI and run 'amplify codegen models'.";
    logger37.error(message);
    throw new Error(message);
  }
};
var createTypeClasses = function(namespace) {
  var classes = {};
  Object.entries(namespace.models).forEach(function(_a) {
    var _b = __read(_a, 2), modelName = _b[0], modelDefinition = _b[1];
    var clazz = createModelClass(modelDefinition);
    classes[modelName] = clazz;
    modelNamespaceMap.set(clazz, namespace.name);
  });
  Object.entries(namespace.nonModels || {}).forEach(function(_a) {
    var _b = __read(_a, 2), typeName = _b[0], typeDefinition = _b[1];
    var clazz = createNonModelClass(typeDefinition);
    classes[typeName] = clazz;
  });
  return classes;
};
var instancesMetadata = /* @__PURE__ */ new WeakSet();
function modelInstanceCreator(modelConstructor, init) {
  instancesMetadata.add(init);
  return new modelConstructor(init);
}
var validateModelFields = function(modelDefinition) {
  return function(k2, v2) {
    var fieldDefinition = modelDefinition.fields[k2];
    if (fieldDefinition !== void 0) {
      var type_1 = fieldDefinition.type, isRequired_1 = fieldDefinition.isRequired, isArrayNullable = fieldDefinition.isArrayNullable, name_1 = fieldDefinition.name, isArray = fieldDefinition.isArray;
      var timestamps = isSchemaModelWithAttributes(modelDefinition) ? getTimestampFields(modelDefinition) : {};
      var isTimestampField = !!timestamps[name_1];
      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && !isTimestampField && (v2 === null || v2 === void 0)) {
        throw new Error("Field " + name_1 + " is required");
      }
      if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {
        var keys = extractPrimaryKeyFieldNames(modelDefinition);
        if (keys.includes(k2) && v2 === "") {
          logger37.error(errorMessages.idEmptyString, { k: k2, value: v2 });
          throw new Error(errorMessages.idEmptyString);
        }
      }
      if (isGraphQLScalarType(type_1)) {
        var jsType_1 = GraphQLScalarType2.getJSType(type_1);
        var validateScalar_1 = GraphQLScalarType2.getValidationFunction(type_1);
        if (type_1 === "AWSJSON") {
          if (typeof v2 === jsType_1) {
            return;
          }
          if (typeof v2 === "string") {
            try {
              JSON.parse(v2);
              return;
            } catch (error) {
              throw new Error("Field " + name_1 + " is an invalid JSON object. " + v2);
            }
          }
        }
        if (isArray) {
          var errorTypeText = jsType_1;
          if (!isRequired_1) {
            errorTypeText = jsType_1 + " | null | undefined";
          }
          if (!Array.isArray(v2) && !isArrayNullable) {
            throw new Error("Field " + name_1 + " should be of type [" + errorTypeText + "], " + typeof v2 + " received. " + v2);
          }
          if (!isNullOrUndefined(v2) && v2.some(function(e) {
            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;
          })) {
            var elemTypes = v2.map(function(e) {
              return e === null ? "null" : typeof e;
            }).join(",");
            throw new Error("All elements in the " + name_1 + " array should be of type " + errorTypeText + ", [" + elemTypes + "] received. " + v2);
          }
          if (validateScalar_1 && !isNullOrUndefined(v2)) {
            var validationStatus = v2.map(function(e) {
              if (!isNullOrUndefined(e)) {
                return validateScalar_1(e);
              } else if (isNullOrUndefined(e) && !isRequired_1) {
                return true;
              } else {
                return false;
              }
            });
            if (!validationStatus.every(function(s2) {
              return s2;
            })) {
              throw new Error("All elements in the " + name_1 + " array should be of type " + type_1 + ", validation failed for one or more elements. " + v2);
            }
          }
        } else if (!isRequired_1 && v2 === void 0) {
          return;
        } else if (typeof v2 !== jsType_1 && v2 !== null) {
          throw new Error("Field " + name_1 + " should be of type " + jsType_1 + ", " + typeof v2 + " received. " + v2);
        } else if (!isNullOrUndefined(v2) && validateScalar_1 && !validateScalar_1(v2)) {
          throw new Error("Field " + name_1 + " should be of type " + type_1 + ", validation failed. " + v2);
        }
      } else if (isNonModelFieldType(type_1)) {
        if (!isNullOrUndefined(v2)) {
          var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];
          var modelValidator_1 = validateModelFields(subNonModelDefinition_1);
          if (isArray) {
            var errorTypeText = type_1.nonModel;
            if (!isRequired_1) {
              errorTypeText = type_1.nonModel + " | null | undefined";
            }
            if (!Array.isArray(v2)) {
              throw new Error("Field " + name_1 + " should be of type [" + errorTypeText + "], " + typeof v2 + " received. " + v2);
            }
            v2.forEach(function(item) {
              if (isNullOrUndefined(item) && isRequired_1 || typeof item !== "object" && typeof item !== "undefined") {
                throw new Error("All elements in the " + name_1 + " array should be of type " + type_1.nonModel + ", [" + typeof item + "] received. " + item);
              }
              if (!isNullOrUndefined(item)) {
                Object.keys(subNonModelDefinition_1.fields).forEach(function(subKey) {
                  modelValidator_1(subKey, item[subKey]);
                });
              }
            });
          } else {
            if (typeof v2 !== "object") {
              throw new Error("Field " + name_1 + " should be of type " + type_1.nonModel + ", " + typeof v2 + " recieved. " + v2);
            }
            Object.keys(subNonModelDefinition_1.fields).forEach(function(subKey) {
              modelValidator_1(subKey, v2[subKey]);
            });
          }
        }
      }
    }
  };
};
var castInstanceType = function(modelDefinition, k2, v2) {
  var _a = modelDefinition.fields[k2] || {}, isArray = _a.isArray, type = _a.type;
  if (typeof v2 === "string" && (isArray || type === "AWSJSON" || isNonModelFieldType(type) || isModelFieldType(type))) {
    try {
      return JSON.parse(v2);
    } catch (_b) {
    }
  }
  if (typeof v2 === "number" && type === "Boolean") {
    return Boolean(v2);
  }
  return v2;
};
var initPatches = /* @__PURE__ */ new WeakMap();
var initializeInstance = function(init, modelDefinition, draft) {
  var modelValidator = validateModelFields(modelDefinition);
  Object.entries(init).forEach(function(_a) {
    var _b = __read(_a, 2), k2 = _b[0], v2 = _b[1];
    var parsedValue = castInstanceType(modelDefinition, k2, v2);
    modelValidator(k2, parsedValue);
    draft[k2] = parsedValue;
  });
};
var normalize = function(modelDefinition, draft) {
  var e_4, _a;
  try {
    for (var _b = __values(Object.keys(modelDefinition.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var k2 = _c.value;
      if (draft[k2] === void 0)
        draft[k2] = null;
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
};
var createModelClass = function(modelDefinition) {
  var e_5, _a;
  var clazz = (
    /** @class */
    function() {
      function Model(init) {
        var patches = [];
        var baseInstance = fn(this, function(draft) {
          initializeInstance(init, modelDefinition, draft);
          var isInternallyInitialized = instancesMetadata.has(init);
          var modelInstanceMetadata = isInternallyInitialized ? init : {};
          var _id = modelInstanceMetadata.id;
          if (isIdManaged(modelDefinition)) {
            var isInternalModel = _id !== null && _id !== void 0;
            var id = isInternalModel ? _id : modelDefinition.syncable ? (0, import_uuid5.v4)() : ulid2();
            draft.id = id;
          } else if (isIdOptionallyManaged(modelDefinition)) {
            draft.id = draft.id || (0, import_uuid5.v4)();
          }
          if (!isInternallyInitialized) {
            checkReadOnlyPropertyOnCreate(draft, modelDefinition);
          }
          var _version = modelInstanceMetadata._version, _lastChangedAt = modelInstanceMetadata._lastChangedAt, _deleted = modelInstanceMetadata._deleted;
          if (modelDefinition.syncable) {
            draft._version = _version;
            draft._lastChangedAt = _lastChangedAt;
            draft._deleted = _deleted;
          }
        }, function(p2) {
          return patches = p2;
        });
        var normalized = fn(baseInstance, function(draft) {
          return normalize(modelDefinition, draft);
        });
        initPatches.set(normalized, patches);
        return normalized;
      }
      Model.copyOf = function(source, fn2) {
        var modelConstructor = Object.getPrototypeOf(source || {}).constructor;
        if (!isValidModelConstructor(modelConstructor)) {
          var msg = "The source object is not a valid model";
          logger37.error(msg, { source });
          throw new Error(msg);
        }
        var patches = [];
        var model = fn(source, function(draft) {
          fn2(draft);
          var keyNames = extractPrimaryKeyFieldNames(modelDefinition);
          keyNames.forEach(function(key) {
            if (draft[key] !== source[key]) {
              logger37.warn("copyOf() does not update PK fields. The '" + key + "' update is being ignored.", { source });
            }
            draft[key] = source[key];
          });
          var modelValidator = validateModelFields(modelDefinition);
          Object.entries(draft).forEach(function(_a3) {
            var _b = __read(_a3, 2), k2 = _b[0], v2 = _b[1];
            var parsedValue = castInstanceType(modelDefinition, k2, v2);
            modelValidator(k2, parsedValue);
          });
          normalize(modelDefinition, draft);
        }, function(p2) {
          return patches = p2;
        });
        var hasExistingPatches = modelPatchesMap.has(source);
        if (patches.length || hasExistingPatches) {
          if (hasExistingPatches) {
            var _a2 = __read(modelPatchesMap.get(source), 2), existingPatches = _a2[0], existingSource = _a2[1];
            var mergedPatches = mergePatches(existingSource, existingPatches, patches);
            modelPatchesMap.set(model, [mergedPatches, existingSource]);
            checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);
          } else {
            modelPatchesMap.set(model, [patches, source]);
            checkReadOnlyPropertyOnUpdate(patches, modelDefinition);
          }
        } else {
          modelPatchesMap.set(model, [[], source]);
        }
        return attached(model, ModelAttachment.DataStore);
      };
      Model.fromJSON = function(json) {
        var _this = this;
        if (Array.isArray(json)) {
          return json.map(function(init) {
            return _this.fromJSON(init);
          });
        }
        var instance2 = modelInstanceCreator(clazz, json);
        var modelValidator = validateModelFields(modelDefinition);
        Object.entries(instance2).forEach(function(_a2) {
          var _b = __read(_a2, 2), k2 = _b[0], v2 = _b[1];
          modelValidator(k2, v2);
        });
        return attached(instance2, ModelAttachment.DataStore);
      };
      return Model;
    }()
  );
  clazz[L] = true;
  Object.defineProperty(clazz, "name", { value: modelDefinition.name });
  var allModelRelationships = ModelRelationship.allFrom({
    builder: clazz,
    schema: modelDefinition,
    pkField: extractPrimaryKeyFieldNames(modelDefinition)
  });
  var _loop_1 = function(relationship2) {
    var field = relationship2.field;
    Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {
      set: function(model) {
        if (!(typeof model === "object" || typeof model === "undefined"))
          return;
        if (model) {
          if (model.hasOwnProperty("_version")) {
            var modelConstructor = Object.getPrototypeOf(model || {}).constructor;
            if (!isValidModelConstructor(modelConstructor)) {
              var msg = "Value passed to " + modelDefinition.name + "." + field + " is not a valid instance of a model";
              logger37.error(msg, { model });
              throw new Error(msg);
            }
            if (modelConstructor.name.toLowerCase() !== relationship2.remoteModelConstructor.name.toLowerCase()) {
              var msg = "Value passed to " + modelDefinition.name + "." + field + " is not an instance of " + relationship2.remoteModelConstructor.name;
              logger37.error(msg, { model });
              throw new Error(msg);
            }
          }
        }
        if (relationship2.isComplete) {
          for (var i2 = 0; i2 < relationship2.localJoinFields.length; i2++) {
            this[relationship2.localJoinFields[i2]] = model === null || model === void 0 ? void 0 : model[relationship2.remoteJoinFields[i2]];
          }
          var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);
          instanceMemos[field] = model || void 0;
        }
      },
      get: function() {
        var _this = this;
        var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);
        if (!instanceMemos.hasOwnProperty(field)) {
          if (getAttachment(this) === ModelAttachment.DataStore) {
            var resultPromise = instance.query(relationship2.remoteModelConstructor, function(base) {
              return base.and(function(q2) {
                return relationship2.remoteJoinFields.map(function(field2, index) {
                  return q2[field2].eq(_this[relationship2.localJoinFields[index]]);
                });
              });
            });
            if (relationship2.type === "HAS_MANY") {
              instanceMemos[field] = new AsyncCollection(resultPromise);
            } else {
              instanceMemos[field] = resultPromise.then(function(rows) {
                if (rows.length > 1) {
                  var err = new Error("\n									Data integrity error.\n									Too many records found for a HAS_ONE/BELONGS_TO field '" + modelDefinition.name + "." + field + "'\n								");
                  console.error(err);
                  throw err;
                } else {
                  return rows[0];
                }
              });
            }
          } else if (getAttachment(this) === ModelAttachment.API) {
            throw new Error("Lazy loading from API is not yet supported!");
          } else {
            if (relationship2.type === "HAS_MANY") {
              return new AsyncCollection([]);
            } else {
              return Promise.resolve(void 0);
            }
          }
        }
        return instanceMemos[field];
      }
    });
  };
  try {
    for (var allModelRelationships_1 = __values(allModelRelationships), allModelRelationships_1_1 = allModelRelationships_1.next(); !allModelRelationships_1_1.done; allModelRelationships_1_1 = allModelRelationships_1.next()) {
      var relationship = allModelRelationships_1_1.value;
      _loop_1(relationship);
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (allModelRelationships_1_1 && !allModelRelationships_1_1.done && (_a = allModelRelationships_1.return))
        _a.call(allModelRelationships_1);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return clazz;
};
var AsyncItem = (
  /** @class */
  function(_super) {
    __extends(AsyncItem2, _super);
    function AsyncItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return AsyncItem2;
  }(Promise)
);
var AsyncCollection = (
  /** @class */
  function() {
    function AsyncCollection2(values) {
      this.values = values;
    }
    AsyncCollection2.prototype[Symbol.asyncIterator] = function() {
      var _this = this;
      var values;
      var index = 0;
      return {
        next: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!!values)
                    return [3, 2];
                  return [4, this.values];
                case 1:
                  values = _a.sent();
                  _a.label = 2;
                case 2:
                  if (index < values.length) {
                    result = {
                      value: values[index],
                      done: false
                    };
                    index++;
                    return [2, result];
                  }
                  return [2, {
                    value: null,
                    done: true
                  }];
              }
            });
          });
        }
      };
    };
    AsyncCollection2.prototype.toArray = function(_a) {
      var _b = (_a === void 0 ? {} : _a).max, max = _b === void 0 ? Number.MAX_SAFE_INTEGER : _b;
      var e_6, _c;
      return __awaiter(this, void 0, void 0, function() {
        var output, i2, _d, _e, element, e_6_1;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              output = [];
              i2 = 0;
              _f.label = 1;
            case 1:
              _f.trys.push([1, 6, 7, 12]);
              _d = __asyncValues(this);
              _f.label = 2;
            case 2:
              return [4, _d.next()];
            case 3:
              if (!(_e = _f.sent(), !_e.done))
                return [3, 5];
              element = _e.value;
              if (i2 < max) {
                output.push(element);
                i2++;
              } else {
                return [3, 5];
              }
              _f.label = 4;
            case 4:
              return [3, 2];
            case 5:
              return [3, 12];
            case 6:
              e_6_1 = _f.sent();
              e_6 = { error: e_6_1 };
              return [3, 12];
            case 7:
              _f.trys.push([7, , 10, 11]);
              if (!(_e && !_e.done && (_c = _d.return)))
                return [3, 9];
              return [4, _c.call(_d)];
            case 8:
              _f.sent();
              _f.label = 9;
            case 9:
              return [3, 11];
            case 10:
              if (e_6)
                throw e_6.error;
              return [
                7
                /*endfinally*/
              ];
            case 11:
              return [
                7
                /*endfinally*/
              ];
            case 12:
              return [2, output];
          }
        });
      });
    };
    return AsyncCollection2;
  }()
);
var checkReadOnlyPropertyOnCreate = function(draft, modelDefinition) {
  var modelKeys = Object.keys(draft);
  var fields7 = modelDefinition.fields;
  modelKeys.forEach(function(key) {
    if (fields7[key] && fields7[key].isReadOnly) {
      throw new Error(key + " is read-only.");
    }
  });
};
var checkReadOnlyPropertyOnUpdate = function(patches, modelDefinition) {
  var patchArray = patches.map(function(p2) {
    return [p2.path[0], p2.value];
  });
  var fields7 = modelDefinition.fields;
  patchArray.forEach(function(_a) {
    var _b = __read(_a, 2), key = _b[0], val = _b[1];
    if (!val || !fields7[key])
      return;
    if (fields7[key].isReadOnly) {
      throw new Error(key + " is read-only.");
    }
  });
};
var createNonModelClass = function(typeDefinition) {
  var clazz = (
    /** @class */
    function() {
      function Model(init) {
        var instance2 = fn(this, function(draft) {
          initializeInstance(init, typeDefinition, draft);
        });
        return instance2;
      }
      return Model;
    }()
  );
  clazz[L] = true;
  Object.defineProperty(clazz, "name", { value: typeDefinition.name });
  registerNonModelClass(clazz);
  return clazz;
};
function isQueryOne(obj) {
  return typeof obj === "string";
}
function defaultConflictHandler(conflictData) {
  var localModel = conflictData.localModel, modelConstructor = conflictData.modelConstructor, remoteModel = conflictData.remoteModel;
  var _version = remoteModel._version;
  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), { _version }));
}
function defaultErrorHandler(error) {
  logger37.warn(error);
}
function getModelConstructorByModelName(namespaceName, modelName) {
  var result;
  switch (namespaceName) {
    case DATASTORE:
      result = dataStoreClasses[modelName];
      break;
    case USER:
      result = userClasses[modelName];
      break;
    case SYNC:
      result = syncClasses[modelName];
      break;
    case STORAGE:
      result = storageClasses[modelName];
      break;
    default:
      throw new Error("Invalid namespace: " + namespaceName);
  }
  if (isValidModelConstructor(result)) {
    return result;
  } else {
    var msg = "Model name is not valid for namespace. modelName: " + modelName + ", namespace: " + namespaceName;
    logger37.error(msg);
    throw new Error(msg);
  }
}
function checkSchemaVersion(storage, version4) {
  return __awaiter(this, void 0, void 0, function() {
    var Setting, modelDefinition;
    var _this = this;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          Setting = dataStoreClasses.Setting;
          modelDefinition = schema.namespaces[DATASTORE].models.Setting;
          return [4, storage.runExclusive(function(s2) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a2, schemaVersionSetting, storedValue;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, s2.query(Setting, ModelPredicateCreator.createFromAST(modelDefinition, {
                      and: { key: { eq: SETTING_SCHEMA_VERSION } }
                    }), { page: 0, limit: 1 })];
                  case 1:
                    _a2 = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a2[0];
                    if (!(schemaVersionSetting !== void 0 && schemaVersionSetting.value !== void 0))
                      return [3, 4];
                    storedValue = JSON.parse(schemaVersionSetting.value);
                    if (!(storedValue !== version4))
                      return [3, 3];
                    return [4, s2.clear(false)];
                  case 2:
                    _b.sent();
                    _b.label = 3;
                  case 3:
                    return [3, 6];
                  case 4:
                    return [4, s2.save(modelInstanceCreator(Setting, {
                      key: SETTING_SCHEMA_VERSION,
                      value: JSON.stringify(version4)
                    }))];
                  case 5:
                    _b.sent();
                    _b.label = 6;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          })];
        case 1:
          _a.sent();
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
var syncSubscription;
function getNamespace() {
  var namespace = {
    name: DATASTORE,
    relationships: {},
    enums: {},
    nonModels: {},
    models: {
      Setting: {
        name: "Setting",
        pluralName: "Settings",
        syncable: false,
        fields: {
          id: {
            name: "id",
            type: "ID",
            isRequired: true,
            isArray: false
          },
          key: {
            name: "key",
            type: "String",
            isRequired: true,
            isArray: false
          },
          value: {
            name: "value",
            type: "String",
            isRequired: true,
            isArray: false
          }
        }
      }
    }
  };
  return namespace;
}
var DataStoreState;
(function(DataStoreState2) {
  DataStoreState2["NotRunning"] = "Not Running";
  DataStoreState2["Starting"] = "Starting";
  DataStoreState2["Running"] = "Running";
  DataStoreState2["Stopping"] = "Stopping";
  DataStoreState2["Clearing"] = "Clearing";
})(DataStoreState || (DataStoreState = {}));
var DataStore = (
  /** @class */
  function() {
    function DataStore2() {
      var _this = this;
      this.Auth = Auth;
      this.API = API;
      this.Cache = BrowserStorageCache;
      this.amplifyConfig = {};
      this.syncPredicates = /* @__PURE__ */ new WeakMap();
      this.amplifyContext = {
        Auth: this.Auth,
        API: this.API,
        Cache: this.Cache
      };
      this.runningProcesses = new BackgroundProcessManager();
      this.state = DataStoreState.NotRunning;
      this.start = function() {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            return [2, this.runningProcesses.add(function() {
              return __awaiter(_this2, void 0, void 0, function() {
                var aws_appsync_graphqlEndpoint, _a2, fullSyncIntervalInMilliseconds;
                var _this3 = this;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      this.state = DataStoreState.Starting;
                      if (!(this.initialized === void 0))
                        return [3, 1];
                      logger37.debug("Starting DataStore");
                      this.initialized = new Promise(function(res, rej) {
                        _this3.initResolve = res;
                        _this3.initReject = rej;
                      });
                      return [3, 3];
                    case 1:
                      return [4, this.initialized];
                    case 2:
                      _b.sent();
                      return [
                        2
                        /*return*/
                      ];
                    case 3:
                      this.storage = new ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);
                      return [4, this.storage.init()];
                    case 4:
                      _b.sent();
                      checkSchemaInitialized();
                      return [4, checkSchemaVersion(this.storage, schema.version)];
                    case 5:
                      _b.sent();
                      aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;
                      if (!aws_appsync_graphqlEndpoint)
                        return [3, 7];
                      logger37.debug("GraphQL endpoint available", aws_appsync_graphqlEndpoint);
                      _a2 = this;
                      return [4, this.processSyncExpressions()];
                    case 6:
                      _a2.syncPredicates = _b.sent();
                      this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);
                      fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1e3 * 60;
                      syncSubscription = this.sync.start({ fullSyncInterval: fullSyncIntervalInMilliseconds }).subscribe({
                        next: function(_a3) {
                          var type = _a3.type, data = _a3.data;
                          var readyType = isNode4 ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;
                          if (type === readyType) {
                            _this3.initResolve();
                          }
                          Hub.dispatch("datastore", {
                            event: type,
                            data
                          });
                        },
                        error: function(err) {
                          logger37.warn("Sync error", err);
                          _this3.initReject();
                        }
                      });
                      return [3, 8];
                    case 7:
                      logger37.warn("Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?", {
                        config: this.amplifyConfig
                      });
                      this.initResolve();
                      _b.label = 8;
                    case 8:
                      return [4, this.initialized];
                    case 9:
                      _b.sent();
                      this.state = DataStoreState.Running;
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }, "datastore start").catch(this.handleAddProcError("DataStore.start()"))];
          });
        });
      };
      this.query = function(modelConstructor, identifierOrCriteria, paginationProducer) {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            return [2, this.runningProcesses.add(function() {
              return __awaiter(_this2, void 0, void 0, function() {
                var result, msg, modelDefinition, pagination, keyFields, msg, predicate, predicate, seedPredicate, predicate, returnOne;
                var _a2;
                var _b;
                return __generator(this, function(_c) {
                  switch (_c.label) {
                    case 0:
                      return [4, this.start()];
                    case 1:
                      _c.sent();
                      if (!this.storage) {
                        throw new Error("No storage to query");
                      }
                      if (!isValidModelConstructor(modelConstructor)) {
                        msg = "Constructor is not for a valid model";
                        logger37.error(msg, { modelConstructor });
                        throw new Error(msg);
                      }
                      if (typeof identifierOrCriteria === "string") {
                        if (paginationProducer !== void 0) {
                          logger37.warn("Pagination is ignored when querying by id");
                        }
                      }
                      modelDefinition = getModelDefinition(modelConstructor);
                      if (!modelDefinition) {
                        throw new Error("Invalid model definition provided!");
                      }
                      pagination = this.processPagination(modelDefinition, paginationProducer);
                      keyFields = extractPrimaryKeyFieldNames(modelDefinition);
                      if (!isQueryOne(identifierOrCriteria))
                        return [3, 3];
                      if (keyFields.length > 1) {
                        msg = errorMessages.queryByPkWithCompositeKeyPresent;
                        logger37.error(msg, { keyFields });
                        throw new Error(msg);
                      }
                      predicate = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_a2 = {}, _a2[keyFields[0]] = identifierOrCriteria, _a2));
                      return [4, this.storage.query(modelConstructor, predicate, pagination)];
                    case 2:
                      result = _c.sent();
                      return [3, 9];
                    case 3:
                      if (!isIdentifierObject(identifierOrCriteria, modelDefinition))
                        return [3, 5];
                      predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);
                      return [4, this.storage.query(modelConstructor, predicate, pagination)];
                    case 4:
                      result = _c.sent();
                      return [3, 9];
                    case 5:
                      if (!(!identifierOrCriteria || isPredicatesAll(identifierOrCriteria)))
                        return [3, 7];
                      return [4, (_b = this.storage) === null || _b === void 0 ? void 0 : _b.query(modelConstructor, void 0, pagination)];
                    case 6:
                      result = _c.sent();
                      return [3, 9];
                    case 7:
                      seedPredicate = recursivePredicateFor({
                        builder: modelConstructor,
                        schema: modelDefinition,
                        pkField: extractPrimaryKeyFieldNames(modelDefinition)
                      });
                      predicate = internals(identifierOrCriteria(seedPredicate));
                      return [4, predicate.fetch(this.storage)];
                    case 8:
                      result = _c.sent();
                      result = inMemoryPagination(result, pagination);
                      _c.label = 9;
                    case 9:
                      returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);
                      return [2, attached(returnOne ? result[0] : result, ModelAttachment.DataStore)];
                  }
                });
              });
            }, "datastore query").catch(this.handleAddProcError("DataStore.query()"))];
          });
        });
      };
      this.save = function(model, condition) {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            return [2, this.runningProcesses.add(function() {
              return __awaiter(_this2, void 0, void 0, function() {
                var updatedPatchesTuple, initPatchesTuple, patchesTuple, modelConstructor, msg, modelDefinition, modelMeta, producedCondition, _a2, savedModel;
                var _this3 = this;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      return [4, this.start()];
                    case 1:
                      _b.sent();
                      if (!this.storage) {
                        throw new Error("No storage to save to");
                      }
                      updatedPatchesTuple = modelPatchesMap.get(model);
                      initPatchesTuple = initPatches.has(model) ? [initPatches.get(model), {}] : void 0;
                      patchesTuple = updatedPatchesTuple || initPatchesTuple;
                      modelConstructor = model ? model.constructor : void 0;
                      if (!isValidModelConstructor(modelConstructor)) {
                        msg = "Object is not an instance of a valid model";
                        logger37.error(msg, { model });
                        throw new Error(msg);
                      }
                      modelDefinition = getModelDefinition(modelConstructor);
                      if (!modelDefinition) {
                        throw new Error("Model Definition could not be found for model");
                      }
                      modelMeta = {
                        builder: modelConstructor,
                        schema: modelDefinition,
                        pkField: extractPrimaryKeyFieldNames(modelDefinition)
                      };
                      return [4, this.storage.runExclusive(function(s2) {
                        return __awaiter(_this3, void 0, void 0, function() {
                          var nonHasManyRelationships, nonHasManyRelationships_1, nonHasManyRelationships_1_1, relationship, queryObject, related, e_7_1;
                          var e_7, _a3;
                          var _b2;
                          return __generator(this, function(_c) {
                            switch (_c.label) {
                              case 0:
                                nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(function(r2) {
                                  return r2.type === "BELONGS_TO";
                                });
                                _c.label = 1;
                              case 1:
                                _c.trys.push([1, 6, 7, 8]);
                                nonHasManyRelationships_1 = __values(nonHasManyRelationships), nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();
                                _c.label = 2;
                              case 2:
                                if (!!nonHasManyRelationships_1_1.done)
                                  return [3, 5];
                                relationship = nonHasManyRelationships_1_1.value;
                                queryObject = relationship.createRemoteQueryObject(model);
                                if (!(queryObject !== null))
                                  return [3, 4];
                                return [4, s2.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject))];
                              case 3:
                                related = _c.sent();
                                if (related.length === 0) {
                                  throw new Error([
                                    "Data integrity error. You tried to save a " + modelDefinition.name + " (" + JSON.stringify(model) + ")",
                                    'but the instance assigned to the "' + relationship.field + '" property',
                                    "does not exist in the local database. If you're trying to create the related",
                                    '"' + ((_b2 = relationship.remoteDefinition) === null || _b2 === void 0 ? void 0 : _b2.name) + '", you must save it independently first.'
                                  ].join(" "));
                                }
                                _c.label = 4;
                              case 4:
                                nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();
                                return [3, 2];
                              case 5:
                                return [3, 8];
                              case 6:
                                e_7_1 = _c.sent();
                                e_7 = { error: e_7_1 };
                                return [3, 8];
                              case 7:
                                try {
                                  if (nonHasManyRelationships_1_1 && !nonHasManyRelationships_1_1.done && (_a3 = nonHasManyRelationships_1.return))
                                    _a3.call(nonHasManyRelationships_1);
                                } finally {
                                  if (e_7)
                                    throw e_7.error;
                                }
                                return [
                                  7
                                  /*endfinally*/
                                ];
                              case 8:
                                return [
                                  2
                                  /*return*/
                                ];
                            }
                          });
                        });
                      })];
                    case 2:
                      _b.sent();
                      producedCondition = condition ? internals(condition(predicateFor(modelMeta))).toStoragePredicate() : void 0;
                      return [4, this.storage.runExclusive(function(s2) {
                        return __awaiter(_this3, void 0, void 0, function() {
                          var saved;
                          return __generator(this, function(_a3) {
                            switch (_a3.label) {
                              case 0:
                                return [4, s2.save(model, producedCondition, void 0, patchesTuple)];
                              case 1:
                                saved = _a3.sent();
                                return [2, s2.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];
                            }
                          });
                        });
                      })];
                    case 3:
                      _a2 = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a2[0];
                      return [2, attached(savedModel, ModelAttachment.DataStore)];
                  }
                });
              });
            }, "datastore save").catch(this.handleAddProcError("DataStore.save()"))];
          });
        });
      };
      this.setConflictHandler = function(config) {
        var configDataStore = config.DataStore;
        var conflictHandlerIsDefault = function() {
          return _this.conflictHandler === defaultConflictHandler;
        };
        if (configDataStore && configDataStore.conflictHandler) {
          return configDataStore.conflictHandler;
        }
        if (conflictHandlerIsDefault() && config.conflictHandler) {
          return config.conflictHandler;
        }
        return _this.conflictHandler || defaultConflictHandler;
      };
      this.setErrorHandler = function(config) {
        var configDataStore = config.DataStore;
        var errorHandlerIsDefault = function() {
          return _this.errorHandler === defaultErrorHandler;
        };
        if (configDataStore && configDataStore.errorHandler) {
          return configDataStore.errorHandler;
        }
        if (errorHandlerIsDefault() && config.errorHandler) {
          return config.errorHandler;
        }
        return _this.errorHandler || defaultErrorHandler;
      };
      this.delete = function(modelOrConstructor, identifierOrCriteria) {
        return __awaiter(_this, void 0, void 0, function() {
          var _this2 = this;
          return __generator(this, function(_a) {
            return [2, this.runningProcesses.add(function() {
              return __awaiter(_this2, void 0, void 0, function() {
                var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a2, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;
                var _d;
                return __generator(this, function(_e) {
                  switch (_e.label) {
                    case 0:
                      return [4, this.start()];
                    case 1:
                      _e.sent();
                      if (!this.storage) {
                        throw new Error("No storage to delete from");
                      }
                      if (!modelOrConstructor) {
                        msg = "Model or Model Constructor required";
                        logger37.error(msg, { modelOrConstructor });
                        throw new Error(msg);
                      }
                      if (!isValidModelConstructor(modelOrConstructor))
                        return [3, 3];
                      modelConstructor = modelOrConstructor;
                      if (!identifierOrCriteria) {
                        msg = "Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL";
                        logger37.error(msg, { identifierOrCriteria });
                        throw new Error(msg);
                      }
                      modelDefinition = getModelDefinition(modelConstructor);
                      if (!modelDefinition) {
                        throw new Error("Could not find model definition for modelConstructor.");
                      }
                      if (typeof identifierOrCriteria === "string") {
                        keyFields = extractPrimaryKeyFieldNames(modelDefinition);
                        if (keyFields.length > 1) {
                          msg = errorMessages.deleteByPkWithCompositeKeyPresent;
                          logger37.error(msg, { keyFields });
                          throw new Error(msg);
                        }
                        condition = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_d = {}, _d[keyFields[0]] = identifierOrCriteria, _d));
                      } else {
                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {
                          condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);
                        } else {
                          condition = internals(identifierOrCriteria(predicateFor({
                            builder: modelConstructor,
                            schema: modelDefinition,
                            pkField: extractPrimaryKeyFieldNames(modelDefinition)
                          }))).toStoragePredicate();
                        }
                        if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {
                          msg = "Criteria required. Do you want to delete all? Pass Predicates.ALL";
                          logger37.error(msg, { condition });
                          throw new Error(msg);
                        }
                      }
                      return [4, this.storage.delete(modelConstructor, condition)];
                    case 2:
                      _a2 = __read.apply(void 0, [_e.sent(), 1]), deleted = _a2[0];
                      return [2, attached(deleted, ModelAttachment.DataStore)];
                    case 3:
                      model = modelOrConstructor;
                      modelConstructor = Object.getPrototypeOf(model || {}).constructor;
                      if (!isValidModelConstructor(modelConstructor)) {
                        msg = "Object is not an instance of a valid model";
                        logger37.error(msg, { model });
                        throw new Error(msg);
                      }
                      modelDefinition = getModelDefinition(modelConstructor);
                      if (!modelDefinition) {
                        throw new Error("Could not find model definition for modelConstructor.");
                      }
                      pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);
                      if (identifierOrCriteria) {
                        if (typeof identifierOrCriteria !== "function") {
                          msg = "Invalid criteria";
                          logger37.error(msg, { identifierOrCriteria });
                          throw new Error(msg);
                        }
                        condition = internals(identifierOrCriteria(predicateFor({
                          builder: modelConstructor,
                          schema: modelDefinition,
                          pkField: extractPrimaryKeyFieldNames(modelDefinition)
                        }))).toStoragePredicate();
                      } else {
                        condition = pkPredicate;
                      }
                      return [4, this.storage.delete(model, condition)];
                    case 4:
                      _b = __read.apply(void 0, [_e.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];
                      return [2, attached(deleted, ModelAttachment.DataStore)];
                  }
                });
              });
            }, "datastore delete").catch(this.handleAddProcError("DataStore.delete()"))];
          });
        });
      };
      this.observe = function(modelOrConstructor, identifierOrCriteria) {
        var executivePredicate;
        var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : void 0;
        if (modelOrConstructor && modelConstructor === void 0) {
          var model = modelOrConstructor;
          var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;
          if (isValidModelConstructor(modelConstructor_1)) {
            if (identifierOrCriteria) {
              logger37.warn("idOrCriteria is ignored when using a model instance", {
                model,
                identifierOrCriteria
              });
            }
            return _this.observe(modelConstructor_1, model.id);
          } else {
            var msg = "The model is not an instance of a PersistentModelConstructor";
            logger37.error(msg, { model });
            throw new Error(msg);
          }
        }
        if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {
          var msg = errorMessages.observeWithObjectLiteral;
          logger37.error(msg, { objectLiteral: identifierOrCriteria });
          throw new Error(msg);
        }
        if (identifierOrCriteria !== void 0 && modelConstructor === void 0) {
          var msg = "Cannot provide criteria without a modelConstructor";
          logger37.error(msg, identifierOrCriteria);
          throw new Error(msg);
        }
        if (modelConstructor && !isValidModelConstructor(modelConstructor)) {
          var msg = "Constructor is not for a valid model";
          logger37.error(msg, { modelConstructor });
          throw new Error(msg);
        }
        if (modelConstructor && typeof identifierOrCriteria === "string") {
          var buildIdPredicate = function(seed) {
            return seed.id.eq(identifierOrCriteria);
          };
          executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));
        } else if (modelConstructor && typeof identifierOrCriteria === "function") {
          executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));
        }
        return new bundle_esm_default(function(observer) {
          var source;
          _this.runningProcesses.add(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var _this2 = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.start()];
                  case 1:
                    _a.sent();
                    source = this.storage.observe(modelConstructor).filter(function(_a2) {
                      var model2 = _a2.model;
                      return namespaceResolver(model2) === USER;
                    }).subscribe({
                      next: function(item) {
                        return _this2.runningProcesses.isOpen && _this2.runningProcesses.add(function() {
                          return __awaiter(_this2, void 0, void 0, function() {
                            var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement, _a2;
                            return __generator(this, function(_b) {
                              switch (_b.label) {
                                case 0:
                                  message = item;
                                  if (!(item.opType !== "DELETE"))
                                    return [3, 2];
                                  modelDefinition = getModelDefinition(item.model);
                                  keyFields = extractPrimaryKeyFieldNames(modelDefinition);
                                  primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);
                                  return [4, this.query(item.model, primaryKeysAndValues)];
                                case 1:
                                  freshElement = _b.sent();
                                  message = __assign(__assign({}, message), { element: freshElement });
                                  _b.label = 2;
                                case 2:
                                  _a2 = !executivePredicate;
                                  if (_a2)
                                    return [3, 4];
                                  return [4, executivePredicate.matches(message.element)];
                                case 3:
                                  _a2 = _b.sent();
                                  _b.label = 4;
                                case 4:
                                  if (_a2) {
                                    observer.next(message);
                                  }
                                  return [
                                    2
                                    /*return*/
                                  ];
                              }
                            });
                          });
                        }, "datastore observe message handler");
                      },
                      error: function(err) {
                        return observer.error(err);
                      },
                      complete: function() {
                        return observer.complete();
                      }
                    });
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, "datastore observe observable initialization").catch(_this.handleAddProcError("DataStore.observe()")).catch(function(error) {
            observer.error(error);
          });
          return _this.runningProcesses.addCleaner(function() {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                if (source) {
                  source.unsubscribe();
                }
                return [
                  2
                  /*return*/
                ];
              });
            });
          }, "DataStore.observe() cleanup");
        });
      };
      this.observeQuery = function(model, criteria, options) {
        return new bundle_esm_default(function(observer) {
          var items = /* @__PURE__ */ new Map();
          var itemsChanged = /* @__PURE__ */ new Map();
          var deletedItemIds = [];
          var handle;
          var executivePredicate;
          var generateAndEmitSnapshot = function() {
            var snapshot = generateSnapshot();
            emitSnapshot(snapshot);
          };
          var limitTimerRace = new DeferredCallbackResolver({
            callback: generateAndEmitSnapshot,
            errorHandler: observer.error,
            maxInterval: 2e3
          });
          var sort = (options || {}).sort;
          var sortOptions = sort ? { sort } : void 0;
          var modelDefinition = getModelDefinition(model);
          if (!modelDefinition) {
            throw new Error("Could not find model definition.");
          }
          if (model && typeof criteria === "function") {
            executivePredicate = internals(criteria(buildSeedPredicate(model)));
          } else if (isPredicatesAll(criteria)) {
            executivePredicate = void 0;
          }
          _this.runningProcesses.add(function() {
            return __awaiter(_this, void 0, void 0, function() {
              var err_1;
              var _this2 = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, this.query(model, criteria, sortOptions)];
                  case 1:
                    _a.sent().forEach(function(item) {
                      var itemModelDefinition = getModelDefinition(model);
                      var idOrPk = getIdentifierValue(itemModelDefinition, item);
                      items.set(idOrPk, item);
                    });
                    handle = this.observe(model).subscribe(function(_a2) {
                      var element = _a2.element, model2 = _a2.model, opType = _a2.opType;
                      return _this2.runningProcesses.isOpen && _this2.runningProcesses.add(function() {
                        return __awaiter(_this2, void 0, void 0, function() {
                          var itemModelDefinition, idOrPk, _a3, isSynced, limit;
                          var _b, _c;
                          return __generator(this, function(_d) {
                            switch (_d.label) {
                              case 0:
                                itemModelDefinition = getModelDefinition(model2);
                                idOrPk = getIdentifierValue(itemModelDefinition, element);
                                _a3 = executivePredicate;
                                if (!_a3)
                                  return [3, 2];
                                return [4, executivePredicate.matches(element)];
                              case 1:
                                _a3 = !_d.sent();
                                _d.label = 2;
                              case 2:
                                if (_a3) {
                                  if (opType === "UPDATE" && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {
                                    deletedItemIds.push(idOrPk);
                                  } else {
                                    return [
                                      2
                                      /*return*/
                                    ];
                                  }
                                }
                                if (opType === "DELETE") {
                                  deletedItemIds.push(idOrPk);
                                } else {
                                  itemsChanged.set(idOrPk, element);
                                }
                                isSynced = (_c = (_b = this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model2)) !== null && _c !== void 0 ? _c : false;
                                limit = itemsChanged.size - deletedItemIds.length >= this.syncPageSize;
                                if (limit || isSynced) {
                                  limitTimerRace.resolve();
                                }
                                limitTimerRace.start();
                                return [
                                  2
                                  /*return*/
                                ];
                            }
                          });
                        });
                      }, "handle observeQuery observed event");
                    });
                    generateAndEmitSnapshot();
                    return [3, 3];
                  case 2:
                    err_1 = _a.sent();
                    observer.error(err_1);
                    return [3, 3];
                  case 3:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, "datastore observequery startup").catch(_this.handleAddProcError("DataStore.observeQuery()")).catch(function(error) {
            observer.error(error);
          });
          var generateSnapshot = function() {
            var _a, _b;
            var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;
            var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));
            items.clear();
            itemsArray.forEach(function(item) {
              var itemModelDefinition = getModelDefinition(model);
              var idOrPk = getIdentifierValue(itemModelDefinition, item);
              items.set(idOrPk, item);
            });
            deletedItemIds.forEach(function(idOrPk) {
              return items.delete(idOrPk);
            });
            var snapshot = Array.from(items.values());
            if (options === null || options === void 0 ? void 0 : options.sort) {
              sortItems(snapshot);
            }
            return {
              items: snapshot,
              isSynced
            };
          };
          var emitSnapshot = function(snapshot) {
            observer.next(snapshot);
            itemsChanged.clear();
            deletedItemIds = [];
          };
          var sortItems = function(itemsToSort) {
            var modelDefinition2 = getModelDefinition(model);
            var pagination = _this.processPagination(modelDefinition2, options);
            var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);
            if (sortPredicates.length) {
              var compareFn = sortCompareFunction(sortPredicates);
              itemsToSort.sort(compareFn);
            }
          };
          var hubCallback = function(_a) {
            var payload = _a.payload;
            var _b;
            var event = payload.event, data = payload.data;
            if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {
              generateAndEmitSnapshot();
              Hub.remove("datastore", hubCallback);
            }
          };
          Hub.listen("datastore", hubCallback);
          return _this.runningProcesses.addCleaner(function() {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                if (handle) {
                  handle.unsubscribe();
                }
                return [
                  2
                  /*return*/
                ];
              });
            });
          }, "datastore observequery cleaner");
        });
      };
      this.configure = function(config) {
        if (config === void 0) {
          config = {};
        }
        _this.amplifyContext.Auth = _this.Auth;
        _this.amplifyContext.API = _this.API;
        _this.amplifyContext.Cache = _this.Cache;
        var configDataStore = config.DataStore, configAuthModeStrategyType = config.authModeStrategyType, configConflictHandler = config.conflictHandler, configErrorHandler = config.errorHandler, configMaxRecordsToSync = config.maxRecordsToSync, configSyncPageSize = config.syncPageSize, configFullSyncInterval = config.fullSyncInterval, configSyncExpressions = config.syncExpressions, configAuthProviders = config.authProviders, configStorageAdapter = config.storageAdapter, configFromAmplify = __rest(config, ["DataStore", "authModeStrategyType", "conflictHandler", "errorHandler", "maxRecordsToSync", "syncPageSize", "fullSyncInterval", "syncExpressions", "authProviders", "storageAdapter"]);
        _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);
        _this.conflictHandler = _this.setConflictHandler(config);
        _this.errorHandler = _this.setErrorHandler(config);
        var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;
        switch (authModeStrategyType) {
          case AuthModeStrategyType.MULTI_AUTH:
            _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);
            break;
          case AuthModeStrategyType.DEFAULT:
            _this.authModeStrategy = defaultAuthStrategy;
            break;
          default:
            _this.authModeStrategy = defaultAuthStrategy;
            break;
        }
        _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;
        _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;
        _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 1e4;
        _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;
        _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1e3;
        _this.amplifyConfig.syncPageSize = _this.syncPageSize;
        _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60;
        _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || void 0;
        _this.sessionId = _this.retrieveSessionId();
      };
    }
    DataStore2.prototype.getModuleName = function() {
      return "DataStore";
    };
    DataStore2.prototype.handleAddProcError = function(operation) {
      var _this = this;
      var handler = function(err) {
        if (err.message.startsWith("BackgroundManagerNotOpenError")) {
          throw new Error([
            "DataStoreStateError: Tried to execute `" + operation + '` while DataStore was "' + _this.state + '".',
            'This can only be done while DataStore is "Started" or "Stopped". To remedy:',
            "Ensure all calls to `stop()` and `clear()` have completed first.",
            "If this is not possible, retry the operation until it succeeds."
          ].join("\n"));
        } else {
          throw err;
        }
      };
      return handler;
    };
    DataStore2.prototype.clear = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              checkSchemaInitialized();
              this.state = DataStoreState.Clearing;
              return [4, this.runningProcesses.close()];
            case 1:
              _a.sent();
              if (!(this.storage === void 0))
                return [3, 3];
              this.storage = new ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);
              return [4, this.storage.init()];
            case 2:
              _a.sent();
              _a.label = 3;
            case 3:
              if (syncSubscription && !syncSubscription.closed) {
                syncSubscription.unsubscribe();
              }
              if (!this.sync)
                return [3, 5];
              return [4, this.sync.stop()];
            case 4:
              _a.sent();
              _a.label = 5;
            case 5:
              return [4, this.storage.clear()];
            case 6:
              _a.sent();
              this.initialized = void 0;
              this.storage = void 0;
              this.sync = void 0;
              this.syncPredicates = /* @__PURE__ */ new WeakMap();
              return [4, this.runningProcesses.open()];
            case 7:
              _a.sent();
              this.state = DataStoreState.NotRunning;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DataStore2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.state = DataStoreState.Stopping;
              return [4, this.runningProcesses.close()];
            case 1:
              _a.sent();
              if (syncSubscription && !syncSubscription.closed) {
                syncSubscription.unsubscribe();
              }
              if (!this.sync)
                return [3, 3];
              return [4, this.sync.stop()];
            case 2:
              _a.sent();
              _a.label = 3;
            case 3:
              this.initialized = void 0;
              this.sync = void 0;
              return [4, this.runningProcesses.open()];
            case 4:
              _a.sent();
              this.state = DataStoreState.NotRunning;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DataStore2.prototype.processPagination = function(modelDefinition, paginationProducer) {
      var sortPredicate;
      var _a = paginationProducer || {}, limit = _a.limit, page = _a.page, sort = _a.sort;
      if (limit === void 0 && page === void 0 && sort === void 0) {
        return void 0;
      }
      if (page !== void 0 && limit === void 0) {
        throw new Error("Limit is required when requesting a page");
      }
      if (page !== void 0) {
        if (typeof page !== "number") {
          throw new Error("Page should be a number");
        }
        if (page < 0) {
          throw new Error("Page can't be negative");
        }
      }
      if (limit !== void 0) {
        if (typeof limit !== "number") {
          throw new Error("Limit should be a number");
        }
        if (limit < 0) {
          throw new Error("Limit can't be negative");
        }
      }
      if (sort) {
        sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);
      }
      return {
        limit,
        page,
        sort: sortPredicate
      };
    };
    DataStore2.prototype.processSyncExpressions = function() {
      return __awaiter(this, void 0, void 0, function() {
        var syncPredicates;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.syncExpressions || !this.syncExpressions.length) {
                return [2, /* @__PURE__ */ new WeakMap()];
              }
              return [4, Promise.all(this.syncExpressions.map(function(syncExpression2) {
                return __awaiter(_this, void 0, void 0, function() {
                  var _a2, modelConstructor, conditionProducer, modelDefinition, condition, predicate;
                  return __generator(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        return [4, syncExpression2];
                      case 1:
                        _a2 = _b.sent(), modelConstructor = _a2.modelConstructor, conditionProducer = _a2.conditionProducer;
                        modelDefinition = getModelDefinition(modelConstructor);
                        return [4, this.unwrapPromise(conditionProducer)];
                      case 2:
                        condition = _b.sent();
                        if (isPredicatesAll(condition)) {
                          return [2, [modelDefinition, null]];
                        }
                        predicate = internals(condition(predicateFor({
                          builder: modelConstructor,
                          schema: modelDefinition,
                          pkField: extractPrimaryKeyFieldNames(modelDefinition)
                        }))).toStoragePredicate();
                        return [2, [modelDefinition, predicate]];
                    }
                  });
                });
              }))];
            case 1:
              syncPredicates = _a.sent();
              return [2, this.weakMapFromEntries(syncPredicates)];
          }
        });
      });
    };
    DataStore2.prototype.unwrapPromise = function(conditionProducer) {
      return __awaiter(this, void 0, void 0, function() {
        var condition, error_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, conditionProducer()];
            case 1:
              condition = _a.sent();
              return [2, condition || conditionProducer];
            case 2:
              error_1 = _a.sent();
              if (error_1 instanceof TypeError) {
                return [2, conditionProducer];
              }
              throw error_1;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    DataStore2.prototype.weakMapFromEntries = function(entries) {
      return entries.reduce(function(map, _a) {
        var _b = __read(_a, 2), modelDefinition = _b[0], predicate = _b[1];
        if (map.has(modelDefinition)) {
          var name_2 = modelDefinition.name;
          logger37.warn("You can only utilize one Sync Expression per model.\n          Subsequent sync expressions for the " + name_2 + " model will be ignored.");
          return map;
        }
        if (predicate) {
          map.set(modelDefinition, predicate);
        }
        return map;
      }, /* @__PURE__ */ new WeakMap());
    };
    DataStore2.prototype.retrieveSessionId = function() {
      try {
        var sessionId = sessionStorage.getItem("datastoreSessionId");
        if (sessionId) {
          var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;
          var appSyncUrl = aws_appsync_graphqlEndpoint.split("/")[2];
          var _a = __read(appSyncUrl.split("."), 1), appSyncId = _a[0];
          return sessionId + "-" + appSyncId;
        }
      } catch (_b) {
      }
      return void 0;
    };
    return DataStore2;
  }()
);
var instance = new DataStore();
Amplify.register(instance);

// node_modules/@aws-amplify/datastore/lib-esm/index.js
var utils = {
  USER,
  traverseModel,
  validatePredicate,
  isNonModelConstructor,
  isModelConstructor
};

export {
  ConsoleLogger,
  AmplifyClass,
  Amplify,
  Platform,
  getAmplifyUserAgent,
  ClientDevice,
  Hub,
  I18n2 as I18n,
  browserOrNode,
  transferKeyToLowerCase,
  transferKeyToUpperCase,
  fromUtf83 as fromUtf8,
  toUtf83 as toUtf8,
  es_exports,
  init_es,
  require_build,
  fromHex,
  toHex,
  Signer,
  parseAWSExports,
  __extends,
  __assign,
  __rest,
  __awaiter,
  __generator,
  __values,
  __read,
  __spread,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncValues,
  dist_es_exports,
  init_dist_es,
  require_build5 as require_build2,
  HttpResponse,
  HttpRequest,
  buildQueryString,
  FetchHttpHandler,
  fromBase64,
  toBase64,
  streamCollector,
  invalidProvider,
  getRetryPlugin,
  require_uuid,
  DEFAULT_MAX_ATTEMPTS,
  resolveRetryConfig,
  calculateBodyLength,
  bowser_default,
  defaultUserAgent,
  parseUrl,
  resolveEndpointsConfig,
  resolveRegionConfig,
  getContentLengthPlugin,
  resolveHostHeaderConfig,
  getHostHeaderPlugin,
  getLoggerPlugin,
  isArrayBuffer,
  SignatureV4,
  resolveAwsAuthConfig,
  getAwsAuthPlugin,
  resolveUserAgentConfig,
  getUserAgentPlugin,
  Client,
  Command,
  extendedEncodeURIComponent,
  getArrayIfSingleItem,
  getValueFromTextNode,
  LazyJsonString,
  dateToUtcString,
  SENSITIVE_STRING,
  getSerdePlugin,
  AWSCloudWatchProvider,
  StorageHelper,
  Credentials,
  ServiceWorkerClass,
  UniversalStorage,
  BrowserStorageCache,
  require_buffer,
  Auth,
  require_axios2 as require_axios,
  PubSub,
  graphqlOperation,
  APIClass,
  API,
  ModelSortPredicateCreator,
  Predicates,
  ModelPredicateCreator,
  NAMESPACES,
  isSchemaModel,
  isSchemaModelWithAttributes,
  isAssociatedWith,
  isTargetNameAssociation,
  isFieldAssociation,
  isModelAttributeAuth,
  isModelAttributeKey,
  isModelAttributePrimaryKey,
  isModelAttributeCompositeKey,
  ModelAttributeAuthAllow,
  ModelAttributeAuthProvider,
  GraphQLScalarType2 as GraphQLScalarType,
  isGraphQLScalarType,
  isModelFieldType,
  isNonModelFieldType,
  isEnumFieldType,
  isIdentifierObject,
  OpType,
  isPredicateObj,
  isPredicateGroup,
  QueryOne,
  SortDirection,
  AuthModeStrategyType,
  ModelOperation,
  syncExpression,
  ProcessName,
  DISCARD,
  LimitTimerRaceResolvedValues,
  PredicateInternalsKey,
  initSchema,
  AsyncItem,
  AsyncCollection,
  DataStore,
  instance,
  utils
};
/*! Bundled license information:

tslib/tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

punycode/punycode.js:
  (*! https://mths.be/punycode v1.3.2 by @mathias *)

tslib/tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <http://feross.org>
   * @license  MIT
   *)

js-cookie/src/js.cookie.js:
  (*!
   * JavaScript Cookie v2.2.1
   * https://github.com/js-cookie/js-cookie
   *
   * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
   * Released under the MIT license
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@aws-amplify/core/lib-esm/Util/Mutex.js:
  (*!
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

bowser/src/bowser.js:
  (*!
   * Bowser - a browser detector
   * https://github.com/lancedikson/bowser
   * MIT License | (c) Dustin Diaz 2012-2015
   * MIT License | (c) Denis Demchenko 2015-2019
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

amazon-cognito-identity-js/es/AuthenticationDetails.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/AuthenticationHelper.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoJwtToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoAccessToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoIdToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoRefreshToken.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/Platform/index.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUserSession.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/DateHelper.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUserAttribute.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/StorageHelper.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUser.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/CognitoUserPool.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

amazon-cognito-identity-js/es/index.js:
  (*!
   * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   * SPDX-License-Identifier: Apache-2.0
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=chunk-XLQQZHOT.js.map
