{
  "version": 3,
  "sources": ["../../../../@vee-validate/zod/dist/vee-validate-zod.esm.js"],
  "sourcesContent": ["/**\n  * vee-validate v4.8.6\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { ZodObject, ZodDefault } from 'zod';\n\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n    return Number(value) >= 0;\n}\nfunction merge(target, source) {\n    Object.keys(source).forEach(key => {\n        if (isObject(source[key])) {\n            if (!target[key]) {\n                target[key] = {};\n            }\n            merge(target[key], source[key]);\n            return;\n        }\n        target[key] = source[key];\n    });\n    return target;\n}\n\n/**\n * Transforms a Zod object schema to Yup's schema\n */\nfunction toTypedSchema(zodSchema, opts) {\n    const schema = {\n        __type: 'VVTypedSchema',\n        async parse(value) {\n            const result = await zodSchema.safeParseAsync(value, opts);\n            if (result.success) {\n                return {\n                    value: result.data,\n                    errors: [],\n                };\n            }\n            const errors = {};\n            processIssues(result.error.issues, errors);\n            return {\n                errors: Object.values(errors),\n            };\n        },\n        cast(values) {\n            try {\n                return zodSchema.parse(values);\n            }\n            catch (_a) {\n                // Zod does not support \"casting\" or not validating a value, so next best thing is getting the defaults and merging them with the provided values.\n                const defaults = getDefaults(zodSchema);\n                if (isObject(defaults) && isObject(values)) {\n                    return merge(defaults, values);\n                }\n                return values;\n            }\n        },\n    };\n    return schema;\n}\nfunction processIssues(issues, errors) {\n    issues.forEach(issue => {\n        const path = joinPath(issue.path);\n        if (issue.code === 'invalid_union') {\n            processIssues(issue.unionErrors.flatMap(ue => ue.issues), errors);\n            if (!path) {\n                return;\n            }\n        }\n        if (!errors[path]) {\n            errors[path] = { errors: [], path };\n        }\n        errors[path].errors.push(issue.message);\n    });\n}\n/**\n * Constructs a path with brackets to be compatible with vee-validate path syntax\n */\nfunction joinPath(path) {\n    if (!path.length) {\n        return '';\n    }\n    let fullPath = String(path[0]);\n    for (let i = 1; i < path.length; i++) {\n        if (isIndex(path[i])) {\n            fullPath += `[${path[i]}]`;\n            continue;\n        }\n        fullPath += `.${path[i]}`;\n    }\n    return fullPath;\n}\n// Zod does not support extracting default values so the next best thing is manually extracting them.\n// https://github.com/colinhacks/zod/issues/1944#issuecomment-1406566175\nfunction getDefaults(schema) {\n    if (!(schema instanceof ZodObject)) {\n        return undefined;\n    }\n    return Object.fromEntries(Object.entries(schema.shape).map(([key, value]) => {\n        if (value instanceof ZodDefault) {\n            return [key, value._def.defaultValue()];\n        }\n        if (value instanceof ZodObject) {\n            return [key, getDefaults(value)];\n        }\n        return [key, undefined];\n    }));\n}\n/**\n * @deprecated use toTypedSchema instead.\n */\nconst toFieldValidator = toTypedSchema;\n/**\n * @deprecated use toTypedSchema instead.\n */\nconst toFormValidator = toTypedSchema;\n\nexport { toFieldValidator, toFormValidator, toTypedSchema };\n"],
  "mappings": ";;;;;;;AAOA,IAAM,WAAW,CAAC,QAAQ,QAAQ,QAAQ,CAAC,CAAC,OAAO,OAAO,QAAQ,YAAY,CAAC,MAAM,QAAQ,GAAG;AAChG,SAAS,QAAQ,OAAO;AACpB,SAAO,OAAO,KAAK,KAAK;AAC5B;AACA,SAAS,MAAM,QAAQ,QAAQ;AAC3B,SAAO,KAAK,MAAM,EAAE,QAAQ,SAAO;AAC/B,QAAI,SAAS,OAAO,GAAG,CAAC,GAAG;AACvB,UAAI,CAAC,OAAO,GAAG,GAAG;AACd,eAAO,GAAG,IAAI,CAAC;AAAA,MACnB;AACA,YAAM,OAAO,GAAG,GAAG,OAAO,GAAG,CAAC;AAC9B;AAAA,IACJ;AACA,WAAO,GAAG,IAAI,OAAO,GAAG;AAAA,EAC5B,CAAC;AACD,SAAO;AACX;AAKA,SAAS,cAAc,WAAW,MAAM;AACpC,QAAM,SAAS;AAAA,IACX,QAAQ;AAAA,IACR,MAAM,MAAM,OAAO;AACf,YAAM,SAAS,MAAM,UAAU,eAAe,OAAO,IAAI;AACzD,UAAI,OAAO,SAAS;AAChB,eAAO;AAAA,UACH,OAAO,OAAO;AAAA,UACd,QAAQ,CAAC;AAAA,QACb;AAAA,MACJ;AACA,YAAM,SAAS,CAAC;AAChB,oBAAc,OAAO,MAAM,QAAQ,MAAM;AACzC,aAAO;AAAA,QACH,QAAQ,OAAO,OAAO,MAAM;AAAA,MAChC;AAAA,IACJ;AAAA,IACA,KAAK,QAAQ;AACT,UAAI;AACA,eAAO,UAAU,MAAM,MAAM;AAAA,MACjC,SACO,IAAP;AAEI,cAAM,WAAW,YAAY,SAAS;AACtC,YAAI,SAAS,QAAQ,KAAK,SAAS,MAAM,GAAG;AACxC,iBAAO,MAAM,UAAU,MAAM;AAAA,QACjC;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,cAAc,QAAQ,QAAQ;AACnC,SAAO,QAAQ,WAAS;AACpB,UAAM,OAAO,SAAS,MAAM,IAAI;AAChC,QAAI,MAAM,SAAS,iBAAiB;AAChC,oBAAc,MAAM,YAAY,QAAQ,QAAM,GAAG,MAAM,GAAG,MAAM;AAChE,UAAI,CAAC,MAAM;AACP;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,CAAC,OAAO,IAAI,GAAG;AACf,aAAO,IAAI,IAAI,EAAE,QAAQ,CAAC,GAAG,KAAK;AAAA,IACtC;AACA,WAAO,IAAI,EAAE,OAAO,KAAK,MAAM,OAAO;AAAA,EAC1C,CAAC;AACL;AAIA,SAAS,SAAS,MAAM;AACpB,MAAI,CAAC,KAAK,QAAQ;AACd,WAAO;AAAA,EACX;AACA,MAAI,WAAW,OAAO,KAAK,CAAC,CAAC;AAC7B,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,QAAI,QAAQ,KAAK,CAAC,CAAC,GAAG;AAClB,kBAAY,IAAI,KAAK,CAAC;AACtB;AAAA,IACJ;AACA,gBAAY,IAAI,KAAK,CAAC;AAAA,EAC1B;AACA,SAAO;AACX;AAGA,SAAS,YAAY,QAAQ;AACzB,MAAI,EAAE,kBAAkB,YAAY;AAChC,WAAO;AAAA,EACX;AACA,SAAO,OAAO,YAAY,OAAO,QAAQ,OAAO,KAAK,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACzE,QAAI,iBAAiB,YAAY;AAC7B,aAAO,CAAC,KAAK,MAAM,KAAK,aAAa,CAAC;AAAA,IAC1C;AACA,QAAI,iBAAiB,WAAW;AAC5B,aAAO,CAAC,KAAK,YAAY,KAAK,CAAC;AAAA,IACnC;AACA,WAAO,CAAC,KAAK,MAAS;AAAA,EAC1B,CAAC,CAAC;AACN;AAIA,IAAM,mBAAmB;AAIzB,IAAM,kBAAkB;",
  "names": []
}
